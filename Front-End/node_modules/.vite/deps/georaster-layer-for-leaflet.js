import {
  require_georaster_browser_bundle_min
} from "./chunk-7PZBM33L.js";
import {
  require_leaflet_src
} from "./chunk-FFQWP3Y2.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/regenerator-runtime/runtime.js
var require_runtime = __commonJS({
  "node_modules/regenerator-runtime/runtime.js"(exports, module) {
    var runtime = (function(exports2) {
      "use strict";
      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var defineProperty = Object.defineProperty || function(obj2, key, desc) {
        obj2[key] = desc.value;
      };
      var undefined2;
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define2(obj2, key, value) {
        Object.defineProperty(obj2, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj2[key];
      }
      try {
        define2({}, "");
      } catch (err) {
        define2 = function(obj2, key, value) {
          return obj2[key] = value;
        };
      }
      function wrap2(innerFn, outerFn, self2, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self2, context) });
        return generator;
      }
      exports2.wrap = wrap2;
      function tryCatch(fn, obj2, arg) {
        try {
          return { type: "normal", arg: fn.call(obj2, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define2(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        IteratorPrototype = NativeIteratorPrototype;
      }
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: true });
      defineProperty(
        GeneratorFunctionPrototype,
        "constructor",
        { value: GeneratorFunction, configurable: true }
      );
      GeneratorFunction.displayName = define2(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define2(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      exports2.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };
      exports2.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define2(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };
      exports2.awrap = function(arg) {
        return { __await: arg };
      };
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result2 = record.arg;
            var value = result2.value;
            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value2) {
                invoke("next", value2, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }
            return PromiseImpl.resolve(value).then(function(unwrapped) {
              result2.value = unwrapped;
              resolve(result2);
            }, function(error) {
              return invoke("throw", error, resolve, reject);
            });
          }
        }
        var previousPromise;
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
        }
        defineProperty(this, "_invoke", { value: enqueue });
      }
      defineIteratorMethods(AsyncIterator.prototype);
      define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      });
      exports2.AsyncIterator = AsyncIterator;
      exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(
          wrap2(innerFn, outerFn, self2, tryLocsList),
          PromiseImpl
        );
        return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result2) {
          return result2.done ? result2.value : iter.next();
        });
      };
      function makeInvokeMethod(innerFn, self2, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
            return doneResult();
          }
          context.method = method;
          context.arg = arg;
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }
            if (context.method === "next") {
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }
              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }
            state = GenStateExecuting;
            var record = tryCatch(innerFn, self2, context);
            if (record.type === "normal") {
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;
              if (record.arg === ContinueSentinel) {
                continue;
              }
              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method;
        var method = delegate.iterator[methodName];
        if (method === undefined2) {
          context.delegate = null;
          if (methodName === "throw" && delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined2;
            maybeInvokeDelegate(delegate, context);
            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }
          if (methodName !== "return") {
            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a '" + methodName + "' method"
            );
          }
          return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }
        if (info.done) {
          context[delegate.resultName] = info.value;
          context.next = delegate.nextLoc;
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined2;
          }
        } else {
          return info;
        }
        context.delegate = null;
        return ContinueSentinel;
      }
      defineIteratorMethods(Gp);
      define2(Gp, toStringTagSymbol, "Generator");
      define2(Gp, iteratorSymbol, function() {
        return this;
      });
      define2(Gp, "toString", function() {
        return "[object Generator]";
      });
      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
      exports2.keys = function(val) {
        var object = Object(val);
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
        return function next() {
          while (keys.length) {
            var key2 = keys.pop();
            if (key2 in object) {
              next.value = key2;
              next.done = false;
              return next;
            }
          }
          next.done = true;
          return next;
        };
      };
      function values(iterable) {
        if (iterable != null) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
          if (typeof iterable.next === "function") {
            return iterable;
          }
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next2() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next2.value = iterable[i];
                  next2.done = false;
                  return next2;
                }
              }
              next2.value = undefined2;
              next2.done = true;
              return next2;
            };
            return next.next = next;
          }
        }
        throw new TypeError(typeof iterable + " is not iterable");
      }
      exports2.values = values;
      function doneResult() {
        return { value: undefined2, done: true };
      }
      Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          this.sent = this._sent = undefined2;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined2;
          this.tryEntries.forEach(resetTryEntry);
          if (!skipTempReset) {
            for (var name in this) {
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined2;
              }
            }
          }
        },
        stop: function() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
          return this.rval;
        },
        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
            if (caught) {
              context.method = "next";
              context.arg = undefined2;
            }
            return !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
            if (entry.tryLoc === "root") {
              return handle("end");
            }
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            finallyEntry = null;
          }
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }
          return this.complete(record);
        },
        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
          return ContinueSentinel;
        },
        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          };
          if (this.method === "next") {
            this.arg = undefined2;
          }
          return ContinueSentinel;
        }
      };
      return exports2;
    })(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
      typeof module === "object" ? module.exports : {}
    );
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/iter-fun/index.js
var require_iter_fun = __commonJS({
  "node_modules/iter-fun/index.js"(exports, module) {
    function addSymbolIterator(obj2) {
      try {
        obj2[Symbol.iterator] = function() {
          return this;
        };
      } catch (error) {
      }
    }
    function addSymbolIteratorFallback(obj2) {
      obj2["@@iterator"] = function() {
        return this;
      };
    }
    function wrapNextFunction(next) {
      const iter = { next };
      addSymbolIterator(iter);
      addSymbolIteratorFallback(iter);
      return iter;
    }
    function isArray(data) {
      try {
        return data.constructor.name.endsWith("Array");
      } catch {
        return false;
      }
    }
    function hasNext(data) {
      try {
        return typeof data.next === "function";
      } catch {
        return false;
      }
    }
    function hasIterator(data) {
      try {
        return "@@iterator" in data;
      } catch {
        return false;
      }
    }
    function hasSymbolIterator(data) {
      try {
        return Symbol.iterator in data.constructor.prototype;
      } catch {
        return false;
      }
    }
    function isIterator(data) {
      try {
        return Symbol.iterator in data && typeof data.next === "function" && data.propertyIsEnumerable("next") === false;
      } catch {
        return false;
      }
    }
    function getIterator(data) {
      const iter = data["@@iterator"];
      if (hasNext(iter)) {
        return iter;
      } else if (typeof iter === "function") {
        return iter();
      }
    }
    function createIterator(data) {
      let i = 0;
      let len = data.length;
      const next = () => i++ < len ? { value: data[i], done: false } : { done: true };
      return wrapNextFunction(next);
    }
    function getOrCreateIterator(data) {
      if (isIterator(data)) {
        return data;
      } else if (hasSymbolIterator(data)) {
        return data[Symbol.iterator]();
      } else if (hasNext(data)) {
        return wrapNextFunction(data.next);
      } else if (hasIterator(data)) {
        return getIterator(data);
      } else if (typeof data === "string" || isArray(data)) {
        return createIterator(data);
      } else {
        throw "[iter-fun] unable to determine iterator";
      }
    }
    function zip2(iters) {
      iters = iters.map(getOrCreateIterator);
      return wrapNextFunction(function next() {
        const values = iters.map((iter) => iter.next());
        if (values.every(({ done }) => done)) {
          return { done: true };
        } else {
          return {
            done: false,
            value: values.map(({ value }) => value)
          };
        }
      });
    }
    if (typeof module === "object") {
      module.exports = {
        addSymbolIterator,
        addSymbolIteratorFallback,
        isIterator,
        isArray,
        hasNext,
        hasSymbolIterator,
        hasIterator,
        getIterator,
        createIterator,
        getOrCreateIterator,
        wrapNextFunction,
        zip: zip2
      };
    }
  }
});

// node_modules/xdim/src/prepared-select-funcs.js
var require_prepared_select_funcs = __commonJS({
  "node_modules/xdim/src/prepared-select-funcs.js"(exports, module) {
    module.exports = {
      "1": function({ point: point3 }) {
        const parent = this.data;
        const index = point3[this.d0v0];
        return { parent, index, value: parent[index] };
      },
      "2": function({ point: point3 }) {
        const parent = this.data;
        const index = this.m0v0 * point3[this.d0v0] + this.m0v1 * point3[this.d0v1];
        return { parent, index, value: parent[index] };
      },
      "3": function({ point: point3 }) {
        const parent = this.data;
        const index = this.m0v0 * point3[this.d0v0] + this.m0v1 * point3[this.d0v1] + this.m0v2 * point3[this.d0v2];
        return { parent, index, value: parent[index] };
      },
      "4": function({ point: point3 }) {
        const parent = this.data;
        const index = this.m0v0 * point3[this.d0v0] + this.m0v1 * point3[this.d0v1] + this.m0v2 * point3[this.d0v2] + this.m0v3 * point3[this.d0v3];
        return { parent, index, value: parent[index] };
      },
      "5": function({ point: point3 }) {
        const parent = this.data;
        const index = this.m0v0 * point3[this.d0v0] + this.m0v1 * point3[this.d0v1] + this.m0v2 * point3[this.d0v2] + this.m0v3 * point3[this.d0v3] + this.m0v4 * point3[this.d0v4];
        return { parent, index, value: parent[index] };
      },
      "1,1": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]];
        const index = point3[this.d1v0];
        return { parent, index, value: parent[index] };
      },
      "1,2": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]];
        const index = this.m1v0 * point3[this.d1v0] + this.m1v1 * point3[this.d1v1];
        return { parent, index, value: parent[index] };
      },
      "1,3": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]];
        const index = this.m1v0 * point3[this.d1v0] + this.m1v1 * point3[this.d1v1] + this.m1v2 * point3[this.d1v2];
        return { parent, index, value: parent[index] };
      },
      "1,4": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]];
        const index = this.m1v0 * point3[this.d1v0] + this.m1v1 * point3[this.d1v1] + this.m1v2 * point3[this.d1v2] + this.m1v3 * point3[this.d1v3];
        return { parent, index, value: parent[index] };
      },
      "1,5": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]];
        const index = this.m1v0 * point3[this.d1v0] + this.m1v1 * point3[this.d1v1] + this.m1v2 * point3[this.d1v2] + this.m1v3 * point3[this.d1v3] + this.m1v4 * point3[this.d1v4];
        return { parent, index, value: parent[index] };
      },
      "1,1,1": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]];
        const index = point3[this.d2v0];
        return { parent, index, value: parent[index] };
      },
      "1,1,2": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]];
        const index = this.m2v0 * point3[this.d2v0] + this.m2v1 * point3[this.d2v1];
        return { parent, index, value: parent[index] };
      },
      "1,1,3": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]];
        const index = this.m2v0 * point3[this.d2v0] + this.m2v1 * point3[this.d2v1] + this.m2v2 * point3[this.d2v2];
        return { parent, index, value: parent[index] };
      },
      "1,1,4": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]];
        const index = this.m2v0 * point3[this.d2v0] + this.m2v1 * point3[this.d2v1] + this.m2v2 * point3[this.d2v2] + this.m2v3 * point3[this.d2v3];
        return { parent, index, value: parent[index] };
      },
      "1,1,5": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]];
        const index = this.m2v0 * point3[this.d2v0] + this.m2v1 * point3[this.d2v1] + this.m2v2 * point3[this.d2v2] + this.m2v3 * point3[this.d2v3] + this.m2v4 * point3[this.d2v4];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,1": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]];
        const index = point3[this.d3v0];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,2": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]];
        const index = this.m3v0 * point3[this.d3v0] + this.m3v1 * point3[this.d3v1];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,3": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]];
        const index = this.m3v0 * point3[this.d3v0] + this.m3v1 * point3[this.d3v1] + this.m3v2 * point3[this.d3v2];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,4": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]];
        const index = this.m3v0 * point3[this.d3v0] + this.m3v1 * point3[this.d3v1] + this.m3v2 * point3[this.d3v2] + this.m3v3 * point3[this.d3v3];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,5": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]];
        const index = this.m3v0 * point3[this.d3v0] + this.m3v1 * point3[this.d3v1] + this.m3v2 * point3[this.d3v2] + this.m3v3 * point3[this.d3v3] + this.m3v4 * point3[this.d3v4];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,1,1": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]];
        const index = point3[this.d4v0];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,1,2": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]];
        const index = this.m4v0 * point3[this.d4v0] + this.m4v1 * point3[this.d4v1];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,1,3": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]];
        const index = this.m4v0 * point3[this.d4v0] + this.m4v1 * point3[this.d4v1] + this.m4v2 * point3[this.d4v2];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,1,4": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]];
        const index = this.m4v0 * point3[this.d4v0] + this.m4v1 * point3[this.d4v1] + this.m4v2 * point3[this.d4v2] + this.m4v3 * point3[this.d4v3];
        return { parent, index, value: parent[index] };
      },
      "1,1,1,1,5": function({ point: point3 }) {
        const parent = this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]];
        const index = this.m4v0 * point3[this.d4v0] + this.m4v1 * point3[this.d4v1] + this.m4v2 * point3[this.d4v2] + this.m4v3 * point3[this.d4v3] + this.m4v4 * point3[this.d4v4];
        return { parent, index, value: parent[index] };
      }
    };
  }
});

// node_modules/xdim/src/prepared-update-funcs.js
var require_prepared_update_funcs = __commonJS({
  "node_modules/xdim/src/prepared-update-funcs.js"(exports, module) {
    module.exports = {
      "1": function({ point: point3, value }) {
        this.data[point3[this.d0v0]] = value;
      },
      "2": function({ point: point3, value }) {
        this.data[this.m0v0 * point3[this.d0v0] + this.m0v1 * point3[this.d0v1]] = value;
      },
      "3": function({ point: point3, value }) {
        this.data[this.m0v0 * point3[this.d0v0] + this.m0v1 * point3[this.d0v1] + this.m0v2 * point3[this.d0v2]] = value;
      },
      "4": function({ point: point3, value }) {
        this.data[this.m0v0 * point3[this.d0v0] + this.m0v1 * point3[this.d0v1] + this.m0v2 * point3[this.d0v2] + this.m0v3 * point3[this.d0v3]] = value;
      },
      "5": function({ point: point3, value }) {
        this.data[this.m0v0 * point3[this.d0v0] + this.m0v1 * point3[this.d0v1] + this.m0v2 * point3[this.d0v2] + this.m0v3 * point3[this.d0v3] + this.m0v4 * point3[this.d0v4]] = value;
      },
      "1,1": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]] = value;
      },
      "1,2": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][this.m1v0 * point3[this.d1v0] + this.m1v1 * point3[this.d1v1]] = value;
      },
      "1,3": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][this.m1v0 * point3[this.d1v0] + this.m1v1 * point3[this.d1v1] + this.m1v2 * point3[this.d1v2]] = value;
      },
      "1,4": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][this.m1v0 * point3[this.d1v0] + this.m1v1 * point3[this.d1v1] + this.m1v2 * point3[this.d1v2] + this.m1v3 * point3[this.d1v3]] = value;
      },
      "1,5": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][this.m1v0 * point3[this.d1v0] + this.m1v1 * point3[this.d1v1] + this.m1v2 * point3[this.d1v2] + this.m1v3 * point3[this.d1v3] + this.m1v4 * point3[this.d1v4]] = value;
      },
      "1,1,1": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]] = value;
      },
      "1,1,2": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][this.m2v0 * point3[this.d2v0] + this.m2v1 * point3[this.d2v1]] = value;
      },
      "1,1,3": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][this.m2v0 * point3[this.d2v0] + this.m2v1 * point3[this.d2v1] + this.m2v2 * point3[this.d2v2]] = value;
      },
      "1,1,4": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][this.m2v0 * point3[this.d2v0] + this.m2v1 * point3[this.d2v1] + this.m2v2 * point3[this.d2v2] + this.m2v3 * point3[this.d2v3]] = value;
      },
      "1,1,5": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][this.m2v0 * point3[this.d2v0] + this.m2v1 * point3[this.d2v1] + this.m2v2 * point3[this.d2v2] + this.m2v3 * point3[this.d2v3] + this.m2v4 * point3[this.d2v4]] = value;
      },
      "1,1,1,1": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]] = value;
      },
      "1,1,1,2": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][this.m3v0 * point3[this.d3v0] + this.m3v1 * point3[this.d3v1]] = value;
      },
      "1,1,1,3": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][this.m3v0 * point3[this.d3v0] + this.m3v1 * point3[this.d3v1] + this.m3v2 * point3[this.d3v2]] = value;
      },
      "1,1,1,4": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][this.m3v0 * point3[this.d3v0] + this.m3v1 * point3[this.d3v1] + this.m3v2 * point3[this.d3v2] + this.m3v3 * point3[this.d3v3]] = value;
      },
      "1,1,1,5": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][this.m3v0 * point3[this.d3v0] + this.m3v1 * point3[this.d3v1] + this.m3v2 * point3[this.d3v2] + this.m3v3 * point3[this.d3v3] + this.m3v4 * point3[this.d3v4]] = value;
      },
      "1,1,1,1,1": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]][point3[this.d4v0]] = value;
      },
      "1,1,1,1,2": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]][this.m4v0 * point3[this.d4v0] + this.m4v1 * point3[this.d4v1]] = value;
      },
      "1,1,1,1,3": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]][this.m4v0 * point3[this.d4v0] + this.m4v1 * point3[this.d4v1] + this.m4v2 * point3[this.d4v2]] = value;
      },
      "1,1,1,1,4": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]][this.m4v0 * point3[this.d4v0] + this.m4v1 * point3[this.d4v1] + this.m4v2 * point3[this.d4v2] + this.m4v3 * point3[this.d4v3]] = value;
      },
      "1,1,1,1,5": function({ point: point3, value }) {
        this.data[point3[this.d0v0]][point3[this.d1v0]][point3[this.d2v0]][point3[this.d3v0]][this.m4v0 * point3[this.d4v0] + this.m4v1 * point3[this.d4v1] + this.m4v2 * point3[this.d4v2] + this.m4v3 * point3[this.d4v3] + this.m4v4 * point3[this.d4v4]] = value;
      }
    };
  }
});

// node_modules/xdim/src/xdim.js
var require_xdim = __commonJS({
  "node_modules/xdim/src/xdim.js"(exports, module) {
    var layoutCache = {};
    var { wrapNextFunction } = require_iter_fun();
    var preparedSelectFunctions = require_prepared_select_funcs();
    var preparedUpdateFunctions = require_prepared_update_funcs();
    var ARRAY_TYPES = {
      Array,
      Int8Array,
      Uint8Array,
      Uint8ClampedArray,
      Int16Array,
      Uint16Array,
      Float32Array,
      Float64Array
    };
    try {
      ARRAY_TYPES.BigInt64Array = BigInt64Array;
      ARRAY_TYPES.BigUint64Array = BigUint64Array;
    } catch (error) {
    }
    function parseDimensions(str) {
      const dims = {};
      const re = /[A-Za-z]+/g;
      let arr;
      while ((arr = re.exec(str)) !== null) {
        const [match2] = arr;
        dims[match2] = {
          name: match2
        };
      }
      return dims;
    }
    var parseVectors = (str) => str.match(/\[[^\]]+\]/g);
    var removeBraces = (str) => str.startsWith("[") && str.endsWith("]") ? str.substring(1, str.length - 1) : str;
    var removeParentheses = (str) => str.startsWith("(") && str.endsWith(")") ? str.substring(1, str.length - 1) : str;
    var matchSequences = (str) => str.match(/(\(.*?\)|[^\(,\s]+)(?=\s*,|\s*$)/g);
    var parseSequences = (str) => {
      str = removeBraces(str);
      str = removeParentheses(str);
      const seqs = matchSequences(str);
      if (seqs.length === 1) {
        return {
          type: "Vector",
          dim: seqs[0]
        };
      } else {
        return {
          type: "Matrix",
          parts: seqs.map(parseSequences)
        };
      }
    };
    function checkValidity(str) {
      const invalid = str.match(/[^ A-Za-z,\[\]]/g);
      if (invalid) {
        throw new Error("The following invalid characters were used: " + invalid.map((c) => `"${c}"`).join(", "));
      } else {
        return true;
      }
    }
    function parse2(str, { useLayoutCache = true } = { useLayoutCache: true }) {
      if (useLayoutCache && str in layoutCache) return layoutCache[str];
      checkValidity(str);
      const vectors = parseVectors(str);
      const dims = vectors.map(parseSequences);
      const result2 = {
        type: "Layout",
        summary: dims.map((it) => it.type === "Matrix" ? it.parts.length : 1),
        dims
      };
      if (useLayoutCache) layoutCache[str] = result2;
      return result2;
    }
    function update({ useLayoutCache = true, data, layout, point: point3, sizes = {}, value }) {
      if (typeof layout === "string") layout = parse2(layout, { useLayoutCache });
      const { dims } = layout;
      for (let idim = 0; idim < dims.length; idim++) {
        const last = idim === dims.length - 1;
        const arr = dims[idim];
        let offset;
        if (arr.type === "Vector") {
          offset = point3[arr.dim];
        } else {
          const { parts } = arr;
          offset = 0;
          let multiplier = 1;
          for (let i = parts.length - 1; i >= 0; i--) {
            const part = parts[i];
            const { dim } = part;
            offset += multiplier * point3[dim];
            if (i > 0) {
              if (!(dim in sizes)) throw new Error(`you cannot calculate the location without knowing the size of the "${dim}" dimension.`);
              multiplier *= sizes[dim];
            }
          }
        }
        if (last) {
          data[offset] = value;
        } else {
          data = data[offset];
        }
      }
    }
    function prepareUpdate2({ useLayoutCache = true, data, layout, sizes = {} }) {
      if (typeof layout === "string") {
        layout = parse2(layout, { useLayoutCache });
      }
      const { dims } = layout;
      const numDims = dims.length;
      const multipliers = getMultipliers({ useLayoutCache, layout, sizes });
      const end = numDims - 1;
      const key = layout.summary.toString();
      if (key in preparedUpdateFunctions) {
        const _this = { data };
        layout.dims.map((it, depth) => {
          if (it.type === "Vector") {
            _this[`d${depth}v0`] = it.dim;
          } else if (it.type === "Matrix") {
            it.parts.forEach((part, ipart) => {
              _this[`d${depth}v${ipart}`] = part.dim;
              _this[`m${depth}v${ipart}`] = multipliers[part.dim];
            });
          }
        });
        return preparedUpdateFunctions[key].bind(_this);
      }
      return ({ point: point3, value }) => {
        let currentData = data;
        for (let idim = 0; idim < numDims; idim++) {
          const last = idim === end;
          const arr = dims[idim];
          let offset;
          if (arr.type === "Vector") {
            offset = point3[arr.dim];
          } else {
            offset = arr.parts.reduce((acc, { dim }) => acc + multipliers[dim] * point3[dim], 0);
          }
          if (last) {
            currentData[offset] = value;
          } else {
            currentData = currentData[offset];
          }
        }
      };
    }
    function iterClip({ data, layout, order, rect = {}, sizes = {}, useLayoutCache = true }) {
      if (!data) throw new Error("[xdim] must specify data");
      if (!layout) throw new Error("[xdim] must specify layout");
      const points = iterPoints({ order, sizes, rect });
      return wrapNextFunction(function next() {
        const { value: point3, done } = points.next();
        if (done) {
          return { done: true };
        } else {
          const { value } = select({ data, layout, point: point3, sizes, useLayoutCache });
          return { done: false, value };
        }
      });
    }
    function validateRect({ rect = {} }) {
      if (rect) {
        for (let key in rect) {
          const value = rect[key];
          if (value.length !== 2) throw new Error(`[xdim] uh oh. invalid hyper-rectangle`);
          const [start2, end] = value;
          if (start2 > end) throw new Error(`[xdim] uh oh. invalid range for "${key}".  Start of ${start2} can't be greater than end of ${end}.`);
          if (start2 < 0) throw new Error(`[xdim] uh oh. invalid hyper-rectangle with start ${start2}`);
        }
      }
    }
    function clip({ useLayoutCache = true, data, layout, rect, sizes = {}, flat = false, validate = true }) {
      if (validate) validateRect({ rect });
      if (typeof layout === "string") layout = parse2(layout, { useLayoutCache });
      let datas = [data];
      layout.dims.forEach((arr) => {
        let new_datas = [];
        datas.forEach((data2) => {
          if (arr.type === "Vector") {
            const [start2, end] = rect[arr.dim];
            new_datas = new_datas.concat(data2.slice(start2, end + 1));
          } else {
            const { parts } = arr;
            let offsets = [0];
            let multiplier = 1;
            for (let i = parts.length - 1; i >= 0; i--) {
              const part = parts[i];
              const { dim } = part;
              const [start2, end] = rect[dim];
              const new_offsets = [];
              for (let n = start2; n <= end; n++) {
                offsets.forEach((offset) => {
                  new_offsets.push(offset + multiplier * n);
                });
              }
              offsets = new_offsets;
              multiplier *= sizes[dim];
            }
            offsets.forEach((offset) => {
              new_datas.push(data2[offset]);
            });
          }
        });
        datas = new_datas;
      });
      if (flat) {
        return {
          data: datas
        };
      }
      const out_sizes = Object.fromEntries(Object.entries(rect).map(([dim, [start2, end]]) => [dim, end - start2 + 1]));
      const { data: out_data } = prepareData2({
        layout,
        sizes: out_sizes
      });
      const max_depth = layout.dims.length;
      const step = (arr, depth) => {
        if (depth === max_depth) {
          for (let i = 0; i < arr.length; i++) {
            arr[i] = datas.shift();
          }
        } else {
          arr.forEach((sub) => step(sub, depth + 1));
        }
      };
      step(out_data, 1);
      return { data: out_data };
    }
    function getMultipliers({ useLayoutCache = true, layout, sizes }) {
      if (typeof layout === "string") {
        layout = parse2(layout, { useLayoutCache });
      }
      const { dims } = layout;
      const numDims = dims.length;
      let multipliers = {};
      for (let idim = 0; idim < numDims; idim++) {
        const arr = dims[idim];
        if (arr.type === "Vector") {
          multipliers[arr.dim] = 1;
        } else {
          const { parts } = arr;
          let multiplier = 1;
          for (let i = parts.length - 1; i >= 0; i--) {
            const { dim } = parts[i];
            multipliers[dim] = multiplier;
            multiplier *= sizes[parts[i].dim];
          }
        }
      }
      return multipliers;
    }
    function prepareSelect({ useLayoutCache = true, data, layout, sizes = {} }) {
      if (typeof layout === "string") {
        layout = parse2(layout, { useLayoutCache });
      }
      const { dims } = layout;
      const numDims = dims.length;
      const multipliers = getMultipliers({ useLayoutCache, layout, sizes });
      const end = numDims - 1;
      const key = layout.summary.toString();
      if (key in preparedSelectFunctions) {
        const _this = { data };
        layout.dims.map((it, depth) => {
          if (it.type === "Vector") {
            _this[`d${depth}v0`] = it.dim;
          } else if (it.type === "Matrix") {
            it.parts.forEach((part, ipart) => {
              _this[`d${depth}v${ipart}`] = part.dim;
              _this[`m${depth}v${ipart}`] = multipliers[part.dim];
            });
          }
        });
        return preparedSelectFunctions[key].bind(_this);
      }
      return ({ point: point3 }) => {
        let currentData = data;
        for (let idim = 0; idim < numDims; idim++) {
          const last = idim === end;
          const arr = dims[idim];
          let offset;
          if (arr.type === "Vector") {
            offset = point3[arr.dim];
          } else {
            offset = arr.parts.reduce((acc, { dim }) => acc + multipliers[dim] * point3[dim], 0);
          }
          if (last) {
            return {
              index: offset,
              parent: currentData,
              value: currentData[offset]
            };
          } else {
            currentData = currentData[offset];
          }
        }
      };
    }
    function select({ useLayoutCache = true, data, layout, point: point3, sizes = {} }) {
      if (typeof layout === "string") {
        layout = parse2(layout, { useLayoutCache });
      }
      let parent;
      let index;
      let value = data;
      const { dims } = layout;
      const len = dims.length;
      for (let idim = 0; idim < len; idim++) {
        const arr = dims[idim];
        if (arr.type === "Vector") {
          const i = point3[arr.dim];
          parent = value;
          index = i;
          value = value[i];
        } else {
          const { parts } = arr;
          let offset = 0;
          let multiplier = 1;
          for (let i = parts.length - 1; i >= 0; i--) {
            const part = parts[i];
            if (part.type === "Vector") {
              const { dim } = part;
              offset += multiplier * point3[dim];
              if (i > 0) {
                if (!(dim in sizes)) throw new Error(`you cannot calculate the location without knowing the size of the "${dim}" dimension.`);
                multiplier *= sizes[dim];
              }
            }
          }
          parent = value;
          index = offset;
          value = value[offset];
        }
      }
      return { index, value, parent };
    }
    function addDims({ arr, fill = void 0, lens, arrayTypes }) {
      if (lens.length === 0) return arr;
      const len = lens[0];
      if (lens.length === 1) {
        const lastArrayType = arrayTypes ? arrayTypes[arrayTypes.length - 1] : "Array";
        for (let i = 0; i < arr.length; i++) {
          arr[i] = new ARRAY_TYPES[lastArrayType](len).fill(fill);
        }
      } else {
        for (let i = 0; i < arr.length; i++) {
          const sub = new Array(len).fill(fill);
          arr[i] = sub;
          addDims({ arr: sub, fill, lens: lens.slice(1), arrayTypes });
        }
      }
      return arr;
    }
    function createMatrix({ fill = void 0, shape, arrayTypes }) {
      const len = shape[0];
      if (shape.length === 1) {
        if (Array.isArray(arrayTypes) && arrayTypes.length !== 1) throw new Error("[xdim] shape and arrayTypes have different lengths");
        const arrayType = Array.isArray(arrayTypes) ? arrayTypes[0] : "Array";
        return new ARRAY_TYPES[arrayType](len).fill(fill);
      }
      const arr = new Array(len).fill(fill);
      return addDims({ arr, fill, lens: shape.slice(1), arrayTypes });
    }
    function prepareData2({ fill = void 0, layout, useLayoutCache = true, sizes, arrayTypes }) {
      if (typeof layout === "string") layout = parse2(layout, { useLayoutCache });
      const shape = layout.dims.map((it) => {
        if (it.type === "Vector") {
          return sizes[it.dim];
        } else if (it.type === "Matrix") {
          return it.parts.reduce((total, part) => {
            if (!(part.dim in sizes)) throw new Error(`[xdim] could not find "${part.dim}" in sizes: { ${Object.keys(sizes).join(", ")} }`);
            return total * sizes[part.dim];
          }, 1);
        }
      });
      const data = createMatrix({ fill, shape, arrayTypes });
      return { data, shape, arrayTypes };
    }
    function iterRange({ start: start2 = 0, end = 100 }) {
      let i = start2 - 1;
      end = end + 1;
      return wrapNextFunction(function next() {
        i++;
        if (i === end) {
          return { done: true };
        } else {
          return { done: false, value: i };
        }
      });
    }
    function iterPoints({ order, sizes, rect = {} }) {
      const names36 = Array.isArray(order) ? order : Object.keys(sizes).sort((a, b) => sizes[a] - sizes[b]);
      const iters = new Array(names36.length);
      const current = {};
      for (let i = 0; i < names36.length - 1; i++) {
        const name = names36[i];
        const [start3, end2] = rect[name] || [0, sizes[name] - 1];
        iters[i] = iterRange({ start: start3 + 1, end: end2 });
        current[name] = start3;
      }
      const lastName = names36[names36.length - 1];
      const [start2, end] = rect[lastName] || [0, sizes[lastName] - 1];
      iters[iters.length - 1] = iterRange({ start: start2, end });
      current[lastName] = start2 - 1;
      return wrapNextFunction(function next() {
        for (let i = iters.length - 1; i >= 0; i--) {
          const { value, done } = iters[i].next();
          if (done) {
            if (i === 0) {
              return { done: true };
            }
          } else {
            for (let ii = i + 1; ii < iters.length; ii++) {
              const nameii = names36[ii];
              const [start3, end2] = rect[nameii] || [0, sizes[nameii] - 1];
              iters[ii] = iterRange({ start: start3 + 1, end: end2 });
              current[nameii] = start3;
            }
            current[names36[i]] = value;
            return { value: current, done: false };
          }
        }
      });
    }
    function transform2({ data, fill = void 0, from, to, sizes, useLayoutCache = true }) {
      if (typeof from === "string") from = parse2(from, { useLayoutCache });
      if (typeof to === "string") to = parse2(to, { useLayoutCache });
      const { data: out_data } = prepareData2({ fill, layout: to, sizes });
      const update2 = prepareUpdate2({
        useLayoutCache,
        data: out_data,
        layout: to,
        sizes
      });
      const points = iterPoints({ sizes });
      for (point of points) {
        const { value } = select({
          data,
          layout: from,
          point,
          sizes
        });
        update2({
          point,
          value
        });
      }
      return { data: out_data };
    }
    module.exports = {
      addDims,
      checkValidity,
      createMatrix,
      iterClip,
      iterRange,
      iterPoints,
      matchSequences,
      parse: parse2,
      parseDimensions,
      parseSequences,
      parseVectors,
      prepareData: prepareData2,
      prepareSelect,
      prepareUpdate: prepareUpdate2,
      removeBraces,
      removeParentheses,
      select,
      transform: transform2,
      update,
      clip,
      validateRect
    };
  }
});

// node_modules/quick-scale/quick-scale.js
var require_quick_scale = __commonJS({
  "node_modules/quick-scale/quick-scale.js"(exports, module) {
    function _identity(n) {
      return n;
    }
    function _scale_number(old_min, old_range, new_min, new_range, n) {
      return new_min + new_range * (n - old_min) / old_range;
    }
    function _scale_and_flip_number(old_min, old_range, new_max, new_range, n) {
      return new_max - new_range * (n - old_min) / old_range;
    }
    function _scale_and_round_number(old_min, old_range, new_min, new_range, n) {
      return Math.round(new_min + new_range * (n - old_min) / old_range);
    }
    function _scale_and_flip_and_round_number(old_min, old_range, new_max, new_range, n) {
      return Math.round(new_max - new_range * (n - old_min) / old_range);
    }
    function createScaleFunction3([old_min, old_max], [new_min, new_max], { flip, no_range_value, no_range_value_strategy = "highest", round = false } = {}) {
      const old_range = old_max - old_min;
      const new_range = new_max - new_min;
      if (old_range === 0) {
        if (typeof no_range_value === "number") {
          return _identity.bind(null, no_range_value);
        } else if (no_range_value_strategy === "highest") {
          return _identity.bind(null, new_max);
        } else if (no_range_value_strategy === "lowest") {
          return _identity.bind(null, new_min);
        } else if (no_range_value_strategy === "middle") {
          let n = (new_max - new_min) / 2;
          if (round) n = Math.round(n);
          return _identity.bind(null, n);
        }
      }
      if (flip) {
        if (round) {
          return _scale_and_flip_and_round_number.bind(null, old_min, old_range, new_max, new_range);
        } else {
          return _scale_and_flip_number.bind(null, old_min, old_range, new_max, new_range);
        }
      } else {
        if (round) {
          return _scale_and_round_number.bind(null, old_min, old_range, new_min, new_range);
        } else {
          return _scale_number.bind(null, old_min, old_range, new_min, new_range);
        }
      }
    }
    function _scale(pixel2, ...rest) {
      return create(rest)(pixel2);
    }
    var quickScale = {
      _identity,
      _scale,
      _scale_number,
      _scale_and_flip_number,
      _scale_and_round_number,
      _scale_and_flip_and_round_number,
      createScaleFunction: createScaleFunction3
    };
    if (typeof define === "object")
      define(function() {
        return quickScale;
      });
    if (typeof module === "object") module.exports = quickScale;
    if (typeof window === "object") window.quickScale = quickScale;
    if (typeof self === "object") self.quickScale = quickScale;
  }
});

// node_modules/bbox-fns/dense-polygon.js
var require_dense_polygon = __commonJS({
  "node_modules/bbox-fns/dense-polygon.js"(exports, module) {
    "use_strict";
    function densePolygon3([xmin, ymin, xmax, ymax], { density = 0 } = { density: 0 }) {
      if (typeof density === "number") density = [density, density];
      const [x_density, y_density] = density;
      const height = ymax - ymin;
      const width = xmax - xmin;
      const ring = [];
      const x_distance = width / (x_density + 1);
      const y_distance = height / (y_density + 1);
      ring.push([xmin, ymax]);
      for (let i = 1; i <= y_density; i++) ring.push([xmin, ymax - i * y_distance]);
      ring.push([xmin, ymin]);
      for (let i = 1; i <= x_density; i++) ring.push([xmin + i * x_distance, ymin]);
      ring.push([xmax, ymin]);
      for (let i = 1; i <= y_density; i++) ring.push([xmax, ymin + i * y_distance]);
      ring.push([xmax, ymax]);
      for (let i = 1; i <= x_density; i++) ring.push([xmax - i * x_distance, ymax]);
      ring.push([xmin, ymax]);
      return [ring];
    }
    module.exports = densePolygon3;
    module.exports.default = densePolygon3;
  }
});

// node_modules/utm-utils/src/isUTM.js
var require_isUTM = __commonJS({
  "node_modules/utm-utils/src/isUTM.js"(exports, module) {
    function isUTM2(projection) {
      const projstr = projection.toString();
      const replaced = projstr.replace("EPSG:", "");
      if (replaced.startsWith("326") || replaced.startsWith("327")) {
        return true;
      }
      const sorted = projstr.split(" ").sort().join(" ");
      if (sorted.match(/^\+datum=WGS84 \+ellps=WGS84 \+no_defs \+proj=utm( \+south)? \+units=m \+zone=\d{1,2}$/)) {
        return true;
      }
      return false;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return isUTM2;
      });
    }
    if (typeof module === "object") {
      module.exports = isUTM2;
      module.exports.default = isUTM2;
    }
  }
});

// node_modules/utm-utils/src/getZone.js
var require_getZone = __commonJS({
  "node_modules/utm-utils/src/getZone.js"(exports, module) {
    function getZone(projection) {
      return Number.parseInt(projection.toString().substring(3));
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return getZone;
      });
    }
    if (typeof module === "object") {
      module.exports = getZone;
      module.exports.default = getZone;
    }
  }
});

// node_modules/utm-utils/src/getHemisphere.js
var require_getHemisphere = __commonJS({
  "node_modules/utm-utils/src/getHemisphere.js"(exports, module) {
    function getHemisphere(projection) {
      const projstr = projection.toString();
      if (projstr.startsWith("326") || projstr.startsWith("269")) {
        return "N";
      } else if (projstr.startsWith("327")) {
        return "S";
      }
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return getHemisphere;
      });
    }
    if (typeof module === "object") {
      module.exports = getHemisphere;
      module.exports.default = getHemisphere;
    }
  }
});

// node_modules/utm-utils/src/getProjString.js
var require_getProjString = __commonJS({
  "node_modules/utm-utils/src/getProjString.js"(exports, module) {
    var getZone = require_getZone();
    var getHemisphere = require_getHemisphere();
    function getProjString2(projection) {
      const zone = getZone(projection);
      const hemisphere = getHemisphere(projection);
      if (projection.toString().startsWith("269")) {
        return `+proj=utm +zone=${zone} +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs`;
      } else {
        return `+proj=utm +zone=${zone}${hemisphere === "S" ? " +south " : " "}+ellps=WGS84 +datum=WGS84 +units=m +no_defs`;
      }
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return getProjString2;
      });
    }
    if (typeof module === "object") {
      module.exports = getProjString2;
      module.exports.default = getProjString2;
    }
  }
});

// node_modules/proj4-merge/proj4-merge.js
var require_proj4_merge = __commonJS({
  "node_modules/proj4-merge/proj4-merge.js"(exports, module) {
    function merge() {
      const instances = [];
      const isEmpty = (it) => typeof it === "object" && Object.keys(it).length === 0 && JSON.stringify(it) === "{}";
      const add3 = (it) => {
        if (!it) return;
        if (Array.isArray(it)) return it.forEach(add3);
        if (it.default) it = it.default;
        if (isEmpty(it)) return;
        instances.push(it);
      };
      Array.from(arguments).forEach(add3);
      if (instances.length === 0) throw Error("[proj4-merge] merge called with zero instances of proj4");
      const [first, ...rest] = instances;
      rest.forEach((instance) => {
        first.defs(Object.entries(instance.defs));
      });
      return first;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return merge;
      });
    }
    if (typeof module === "object") {
      module.exports = merge;
      module.exports.default = merge;
    }
  }
});

// node_modules/proj4/lib/global.js
function global_default(defs2) {
  defs2("EPSG:4326", "+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
  defs2("EPSG:4269", "+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");
  defs2("EPSG:3857", "+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");
  for (var i = 1; i <= 60; ++i) {
    defs2("EPSG:" + (32600 + i), "+proj=utm +zone=" + i + " +datum=WGS84 +units=m");
    defs2("EPSG:" + (32700 + i), "+proj=utm +zone=" + i + " +south +datum=WGS84 +units=m");
  }
  defs2.WGS84 = defs2["EPSG:4326"];
  defs2["EPSG:3785"] = defs2["EPSG:3857"];
  defs2.GOOGLE = defs2["EPSG:3857"];
  defs2["EPSG:900913"] = defs2["EPSG:3857"];
  defs2["EPSG:102113"] = defs2["EPSG:3857"];
}
var init_global = __esm({
  "node_modules/proj4/lib/global.js"() {
  }
});

// node_modules/proj4/lib/constants/values.js
var PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT, PJD_WGS84, PJD_NODATUM, SRS_WGS84_SEMIMAJOR, SRS_WGS84_SEMIMINOR, SRS_WGS84_ESQUARED, SEC_TO_RAD, HALF_PI, SIXTH, RA4, RA6, EPSLN, D2R, R2D, FORTPI, TWO_PI, SPI;
var init_values = __esm({
  "node_modules/proj4/lib/constants/values.js"() {
    PJD_3PARAM = 1;
    PJD_7PARAM = 2;
    PJD_GRIDSHIFT = 3;
    PJD_WGS84 = 4;
    PJD_NODATUM = 5;
    SRS_WGS84_SEMIMAJOR = 6378137;
    SRS_WGS84_SEMIMINOR = 6356752314e-3;
    SRS_WGS84_ESQUARED = 0.0066943799901413165;
    SEC_TO_RAD = 484813681109536e-20;
    HALF_PI = Math.PI / 2;
    SIXTH = 0.16666666666666666;
    RA4 = 0.04722222222222222;
    RA6 = 0.022156084656084655;
    EPSLN = 1e-10;
    D2R = 0.017453292519943295;
    R2D = 57.29577951308232;
    FORTPI = Math.PI / 4;
    TWO_PI = Math.PI * 2;
    SPI = 3.14159265359;
  }
});

// node_modules/proj4/lib/constants/PrimeMeridian.js
var primeMeridian, PrimeMeridian_default;
var init_PrimeMeridian = __esm({
  "node_modules/proj4/lib/constants/PrimeMeridian.js"() {
    primeMeridian = {};
    primeMeridian.greenwich = 0;
    primeMeridian.lisbon = -9.131906111111;
    primeMeridian.paris = 2.337229166667;
    primeMeridian.bogota = -74.080916666667;
    primeMeridian.madrid = -3.687938888889;
    primeMeridian.rome = 12.452333333333;
    primeMeridian.bern = 7.439583333333;
    primeMeridian.jakarta = 106.807719444444;
    primeMeridian.ferro = -17.666666666667;
    primeMeridian.brussels = 4.367975;
    primeMeridian.stockholm = 18.058277777778;
    primeMeridian.athens = 23.7163375;
    primeMeridian.oslo = 10.722916666667;
    PrimeMeridian_default = primeMeridian;
  }
});

// node_modules/proj4/lib/constants/units.js
var units_default;
var init_units = __esm({
  "node_modules/proj4/lib/constants/units.js"() {
    units_default = {
      mm: { to_meter: 1e-3 },
      cm: { to_meter: 0.01 },
      ft: { to_meter: 0.3048 },
      "us-ft": { to_meter: 1200 / 3937 },
      fath: { to_meter: 1.8288 },
      kmi: { to_meter: 1852 },
      "us-ch": { to_meter: 20.1168402336805 },
      "us-mi": { to_meter: 1609.34721869444 },
      km: { to_meter: 1e3 },
      "ind-ft": { to_meter: 0.30479841 },
      "ind-yd": { to_meter: 0.91439523 },
      mi: { to_meter: 1609.344 },
      yd: { to_meter: 0.9144 },
      ch: { to_meter: 20.1168 },
      link: { to_meter: 0.201168 },
      dm: { to_meter: 0.1 },
      in: { to_meter: 0.0254 },
      "ind-ch": { to_meter: 20.11669506 },
      "us-in": { to_meter: 0.025400050800101 },
      "us-yd": { to_meter: 0.914401828803658 }
    };
  }
});

// node_modules/proj4/lib/match.js
function match(obj2, key) {
  if (obj2[key]) {
    return obj2[key];
  }
  var keys = Object.keys(obj2);
  var lkey = key.toLowerCase().replace(ignoredChar, "");
  var i = -1;
  var testkey, processedKey;
  while (++i < keys.length) {
    testkey = keys[i];
    processedKey = testkey.toLowerCase().replace(ignoredChar, "");
    if (processedKey === lkey) {
      return obj2[testkey];
    }
  }
}
var ignoredChar;
var init_match = __esm({
  "node_modules/proj4/lib/match.js"() {
    ignoredChar = /[\s_\-\/\(\)]/g;
  }
});

// node_modules/proj4/lib/projString.js
function projString_default(defData) {
  var self2 = {};
  var paramObj = defData.split("+").map(function(v) {
    return v.trim();
  }).filter(function(a) {
    return a;
  }).reduce(function(p, a) {
    var split = a.split("=");
    split.push(true);
    p[split[0].toLowerCase()] = split[1];
    return p;
  }, {});
  var paramName, paramVal, paramOutname;
  var params2 = {
    proj: "projName",
    datum: "datumCode",
    rf: function(v) {
      self2.rf = parseFloat(v);
    },
    lat_0: function(v) {
      self2.lat0 = v * D2R;
    },
    lat_1: function(v) {
      self2.lat1 = v * D2R;
    },
    lat_2: function(v) {
      self2.lat2 = v * D2R;
    },
    lat_ts: function(v) {
      self2.lat_ts = v * D2R;
    },
    lon_0: function(v) {
      self2.long0 = v * D2R;
    },
    lon_1: function(v) {
      self2.long1 = v * D2R;
    },
    lon_2: function(v) {
      self2.long2 = v * D2R;
    },
    alpha: function(v) {
      self2.alpha = parseFloat(v) * D2R;
    },
    gamma: function(v) {
      self2.rectified_grid_angle = parseFloat(v) * D2R;
    },
    lonc: function(v) {
      self2.longc = v * D2R;
    },
    x_0: function(v) {
      self2.x0 = parseFloat(v);
    },
    y_0: function(v) {
      self2.y0 = parseFloat(v);
    },
    k_0: function(v) {
      self2.k0 = parseFloat(v);
    },
    k: function(v) {
      self2.k0 = parseFloat(v);
    },
    a: function(v) {
      self2.a = parseFloat(v);
    },
    b: function(v) {
      self2.b = parseFloat(v);
    },
    r: function(v) {
      self2.a = self2.b = parseFloat(v);
    },
    r_a: function() {
      self2.R_A = true;
    },
    zone: function(v) {
      self2.zone = parseInt(v, 10);
    },
    south: function() {
      self2.utmSouth = true;
    },
    towgs84: function(v) {
      self2.datum_params = v.split(",").map(function(a) {
        return parseFloat(a);
      });
    },
    to_meter: function(v) {
      self2.to_meter = parseFloat(v);
    },
    units: function(v) {
      self2.units = v;
      var unit = match(units_default, v);
      if (unit) {
        self2.to_meter = unit.to_meter;
      }
    },
    from_greenwich: function(v) {
      self2.from_greenwich = v * D2R;
    },
    pm: function(v) {
      var pm = match(PrimeMeridian_default, v);
      self2.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;
    },
    nadgrids: function(v) {
      if (v === "@null") {
        self2.datumCode = "none";
      } else {
        self2.nadgrids = v;
      }
    },
    axis: function(v) {
      var legalAxis = "ewnsud";
      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {
        self2.axis = v;
      }
    },
    approx: function() {
      self2.approx = true;
    }
  };
  for (paramName in paramObj) {
    paramVal = paramObj[paramName];
    if (paramName in params2) {
      paramOutname = params2[paramName];
      if (typeof paramOutname === "function") {
        paramOutname(paramVal);
      } else {
        self2[paramOutname] = paramVal;
      }
    } else {
      self2[paramName] = paramVal;
    }
  }
  if (typeof self2.datumCode === "string" && self2.datumCode !== "WGS84") {
    self2.datumCode = self2.datumCode.toLowerCase();
  }
  return self2;
}
var init_projString = __esm({
  "node_modules/proj4/lib/projString.js"() {
    init_values();
    init_PrimeMeridian();
    init_units();
    init_match();
  }
});

// node_modules/wkt-parser/PROJJSONBuilderBase.js
var PROJJSONBuilderBase, PROJJSONBuilderBase_default;
var init_PROJJSONBuilderBase = __esm({
  "node_modules/wkt-parser/PROJJSONBuilderBase.js"() {
    PROJJSONBuilderBase = class {
      static getId(node) {
        const idNode = node.find((child) => Array.isArray(child) && child[0] === "ID");
        if (idNode && idNode.length >= 3) {
          return {
            authority: idNode[1],
            code: parseInt(idNode[2], 10)
          };
        }
        return null;
      }
      static convertUnit(node, type = "unit") {
        if (!node || node.length < 3) {
          return { type, name: "unknown", conversion_factor: null };
        }
        const name = node[1];
        const conversionFactor = parseFloat(node[2]) || null;
        const idNode = node.find((child) => Array.isArray(child) && child[0] === "ID");
        const id = idNode ? {
          authority: idNode[1],
          code: parseInt(idNode[2], 10)
        } : null;
        return {
          type,
          name,
          conversion_factor: conversionFactor,
          id
        };
      }
      static convertAxis(node) {
        const name = node[1] || "Unknown";
        let direction;
        const abbreviationMatch = name.match(/^\((.)\)$/);
        if (abbreviationMatch) {
          const abbreviation = abbreviationMatch[1].toUpperCase();
          if (abbreviation === "E") direction = "east";
          else if (abbreviation === "N") direction = "north";
          else if (abbreviation === "U") direction = "up";
          else throw new Error(`Unknown axis abbreviation: ${abbreviation}`);
        } else {
          direction = node[2] ? node[2].toLowerCase() : "unknown";
        }
        const orderNode = node.find((child) => Array.isArray(child) && child[0] === "ORDER");
        const order = orderNode ? parseInt(orderNode[1], 10) : null;
        const unitNode = node.find(
          (child) => Array.isArray(child) && (child[0] === "LENGTHUNIT" || child[0] === "ANGLEUNIT" || child[0] === "SCALEUNIT")
        );
        const unit = this.convertUnit(unitNode);
        return {
          name,
          direction,
          // Use the valid PROJJSON direction value
          unit,
          order
        };
      }
      static extractAxes(node) {
        return node.filter((child) => Array.isArray(child) && child[0] === "AXIS").map((axis) => this.convertAxis(axis)).sort((a, b) => (a.order || 0) - (b.order || 0));
      }
      static convert(node, result2 = {}) {
        switch (node[0]) {
          case "PROJCRS":
            result2.type = "ProjectedCRS";
            result2.name = node[1];
            result2.base_crs = node.find((child) => Array.isArray(child) && child[0] === "BASEGEOGCRS") ? this.convert(node.find((child) => Array.isArray(child) && child[0] === "BASEGEOGCRS")) : null;
            result2.conversion = node.find((child) => Array.isArray(child) && child[0] === "CONVERSION") ? this.convert(node.find((child) => Array.isArray(child) && child[0] === "CONVERSION")) : null;
            const csNode = node.find((child) => Array.isArray(child) && child[0] === "CS");
            if (csNode) {
              result2.coordinate_system = {
                type: csNode[1],
                axis: this.extractAxes(node)
              };
            }
            const lengthUnitNode = node.find((child) => Array.isArray(child) && child[0] === "LENGTHUNIT");
            if (lengthUnitNode) {
              const unit2 = this.convertUnit(lengthUnitNode);
              result2.coordinate_system.unit = unit2;
            }
            result2.id = this.getId(node);
            break;
          case "BASEGEOGCRS":
          case "GEOGCRS":
            result2.type = "GeographicCRS";
            result2.name = node[1];
            const datumOrEnsembleNode = node.find(
              (child) => Array.isArray(child) && (child[0] === "DATUM" || child[0] === "ENSEMBLE")
            );
            if (datumOrEnsembleNode) {
              const datumOrEnsemble = this.convert(datumOrEnsembleNode);
              if (datumOrEnsembleNode[0] === "ENSEMBLE") {
                result2.datum_ensemble = datumOrEnsemble;
              } else {
                result2.datum = datumOrEnsemble;
              }
              const primem = node.find((child) => Array.isArray(child) && child[0] === "PRIMEM");
              if (primem && primem[1] !== "Greenwich") {
                datumOrEnsemble.prime_meridian = {
                  name: primem[1],
                  longitude: parseFloat(primem[2])
                };
              }
            }
            result2.coordinate_system = {
              type: "ellipsoidal",
              axis: this.extractAxes(node)
            };
            result2.id = this.getId(node);
            break;
          case "DATUM":
            result2.type = "GeodeticReferenceFrame";
            result2.name = node[1];
            result2.ellipsoid = node.find((child) => Array.isArray(child) && child[0] === "ELLIPSOID") ? this.convert(node.find((child) => Array.isArray(child) && child[0] === "ELLIPSOID")) : null;
            break;
          case "ENSEMBLE":
            result2.type = "DatumEnsemble";
            result2.name = node[1];
            result2.members = node.filter((child) => Array.isArray(child) && child[0] === "MEMBER").map((member) => ({
              type: "DatumEnsembleMember",
              name: member[1],
              id: this.getId(member)
              // Extract ID as { authority, code }
            }));
            const accuracyNode = node.find((child) => Array.isArray(child) && child[0] === "ENSEMBLEACCURACY");
            if (accuracyNode) {
              result2.accuracy = parseFloat(accuracyNode[1]);
            }
            const ellipsoidNode = node.find((child) => Array.isArray(child) && child[0] === "ELLIPSOID");
            if (ellipsoidNode) {
              result2.ellipsoid = this.convert(ellipsoidNode);
            }
            result2.id = this.getId(node);
            break;
          case "ELLIPSOID":
            result2.type = "Ellipsoid";
            result2.name = node[1];
            result2.semi_major_axis = parseFloat(node[2]);
            result2.inverse_flattening = parseFloat(node[3]);
            const units = node.find((child) => Array.isArray(child) && child[0] === "LENGTHUNIT") ? this.convert(node.find((child) => Array.isArray(child) && child[0] === "LENGTHUNIT"), result2) : null;
            break;
          case "CONVERSION":
            result2.type = "Conversion";
            result2.name = node[1];
            result2.method = node.find((child) => Array.isArray(child) && child[0] === "METHOD") ? this.convert(node.find((child) => Array.isArray(child) && child[0] === "METHOD")) : null;
            result2.parameters = node.filter((child) => Array.isArray(child) && child[0] === "PARAMETER").map((param) => this.convert(param));
            break;
          case "METHOD":
            result2.type = "Method";
            result2.name = node[1];
            result2.id = this.getId(node);
            break;
          case "PARAMETER":
            result2.type = "Parameter";
            result2.name = node[1];
            result2.value = parseFloat(node[2]);
            result2.unit = this.convertUnit(
              node.find(
                (child) => Array.isArray(child) && (child[0] === "LENGTHUNIT" || child[0] === "ANGLEUNIT" || child[0] === "SCALEUNIT")
              )
            );
            result2.id = this.getId(node);
            break;
          case "BOUNDCRS":
            result2.type = "BoundCRS";
            const sourceCrsNode = node.find((child) => Array.isArray(child) && child[0] === "SOURCECRS");
            if (sourceCrsNode) {
              const sourceCrsContent = sourceCrsNode.find((child) => Array.isArray(child));
              result2.source_crs = sourceCrsContent ? this.convert(sourceCrsContent) : null;
            }
            const targetCrsNode = node.find((child) => Array.isArray(child) && child[0] === "TARGETCRS");
            if (targetCrsNode) {
              const targetCrsContent = targetCrsNode.find((child) => Array.isArray(child));
              result2.target_crs = targetCrsContent ? this.convert(targetCrsContent) : null;
            }
            const transformationNode = node.find((child) => Array.isArray(child) && child[0] === "ABRIDGEDTRANSFORMATION");
            if (transformationNode) {
              result2.transformation = this.convert(transformationNode);
            } else {
              result2.transformation = null;
            }
            break;
          case "ABRIDGEDTRANSFORMATION":
            result2.type = "Transformation";
            result2.name = node[1];
            result2.method = node.find((child) => Array.isArray(child) && child[0] === "METHOD") ? this.convert(node.find((child) => Array.isArray(child) && child[0] === "METHOD")) : null;
            result2.parameters = node.filter((child) => Array.isArray(child) && (child[0] === "PARAMETER" || child[0] === "PARAMETERFILE")).map((param) => {
              if (param[0] === "PARAMETER") {
                return this.convert(param);
              } else if (param[0] === "PARAMETERFILE") {
                return {
                  name: param[1],
                  value: param[2],
                  id: {
                    "authority": "EPSG",
                    "code": 8656
                  }
                };
              }
            });
            if (result2.parameters.length === 7) {
              const scaleDifference = result2.parameters[6];
              if (scaleDifference.name === "Scale difference") {
                scaleDifference.value = Math.round((scaleDifference.value - 1) * 1e12) / 1e6;
              }
            }
            result2.id = this.getId(node);
            break;
          case "AXIS":
            if (!result2.coordinate_system) {
              result2.coordinate_system = { type: "unspecified", axis: [] };
            }
            result2.coordinate_system.axis.push(this.convertAxis(node));
            break;
          case "LENGTHUNIT":
            const unit = this.convertUnit(node, "LinearUnit");
            if (result2.coordinate_system && result2.coordinate_system.axis) {
              result2.coordinate_system.axis.forEach((axis) => {
                if (!axis.unit) {
                  axis.unit = unit;
                }
              });
            }
            if (unit.conversion_factor && unit.conversion_factor !== 1) {
              if (result2.semi_major_axis) {
                result2.semi_major_axis = {
                  value: result2.semi_major_axis,
                  unit
                };
              }
            }
            break;
          default:
            result2.keyword = node[0];
            break;
        }
        return result2;
      }
    };
    PROJJSONBuilderBase_default = PROJJSONBuilderBase;
  }
});

// node_modules/wkt-parser/PROJJSONBuilder2015.js
var PROJJSONBuilder2015, PROJJSONBuilder2015_default;
var init_PROJJSONBuilder2015 = __esm({
  "node_modules/wkt-parser/PROJJSONBuilder2015.js"() {
    init_PROJJSONBuilderBase();
    PROJJSONBuilder2015 = class extends PROJJSONBuilderBase_default {
      static convert(node, result2 = {}) {
        super.convert(node, result2);
        if (result2.coordinate_system && result2.coordinate_system.subtype === "Cartesian") {
          delete result2.coordinate_system;
        }
        if (result2.usage) {
          delete result2.usage;
        }
        return result2;
      }
    };
    PROJJSONBuilder2015_default = PROJJSONBuilder2015;
  }
});

// node_modules/wkt-parser/PROJJSONBuilder2019.js
var PROJJSONBuilder2019, PROJJSONBuilder2019_default;
var init_PROJJSONBuilder2019 = __esm({
  "node_modules/wkt-parser/PROJJSONBuilder2019.js"() {
    init_PROJJSONBuilderBase();
    PROJJSONBuilder2019 = class extends PROJJSONBuilderBase_default {
      static convert(node, result2 = {}) {
        super.convert(node, result2);
        const csNode = node.find((child) => Array.isArray(child) && child[0] === "CS");
        if (csNode) {
          result2.coordinate_system = {
            subtype: csNode[1],
            axis: this.extractAxes(node)
          };
        }
        const usageNode = node.find((child) => Array.isArray(child) && child[0] === "USAGE");
        if (usageNode) {
          const scope = usageNode.find((child) => Array.isArray(child) && child[0] === "SCOPE");
          const area = usageNode.find((child) => Array.isArray(child) && child[0] === "AREA");
          const bbox = usageNode.find((child) => Array.isArray(child) && child[0] === "BBOX");
          result2.usage = {};
          if (scope) {
            result2.usage.scope = scope[1];
          }
          if (area) {
            result2.usage.area = area[1];
          }
          if (bbox) {
            result2.usage.bbox = bbox.slice(1);
          }
        }
        return result2;
      }
    };
    PROJJSONBuilder2019_default = PROJJSONBuilder2019;
  }
});

// node_modules/wkt-parser/buildPROJJSON.js
function detectWKT2Version(root) {
  if (root.find((child) => Array.isArray(child) && child[0] === "USAGE")) {
    return "2019";
  }
  if (root.find((child) => Array.isArray(child) && child[0] === "CS")) {
    return "2015";
  }
  if (root[0] === "BOUNDCRS" || root[0] === "PROJCRS" || root[0] === "GEOGCRS") {
    return "2015";
  }
  return "2015";
}
function buildPROJJSON(root) {
  const version = detectWKT2Version(root);
  const builder = version === "2019" ? PROJJSONBuilder2019_default : PROJJSONBuilder2015_default;
  return builder.convert(root);
}
var init_buildPROJJSON = __esm({
  "node_modules/wkt-parser/buildPROJJSON.js"() {
    init_PROJJSONBuilder2015();
    init_PROJJSONBuilder2019();
  }
});

// node_modules/wkt-parser/detectWKTVersion.js
function detectWKTVersion(wkt2) {
  const normalizedWKT = wkt2.toUpperCase();
  if (normalizedWKT.includes("PROJCRS") || normalizedWKT.includes("GEOGCRS") || normalizedWKT.includes("BOUNDCRS") || normalizedWKT.includes("VERTCRS") || normalizedWKT.includes("LENGTHUNIT") || normalizedWKT.includes("ANGLEUNIT") || normalizedWKT.includes("SCALEUNIT")) {
    return "WKT2";
  }
  if (normalizedWKT.includes("PROJCS") || normalizedWKT.includes("GEOGCS") || normalizedWKT.includes("LOCAL_CS") || normalizedWKT.includes("VERT_CS") || normalizedWKT.includes("UNIT")) {
    return "WKT1";
  }
  return "WKT1";
}
var init_detectWKTVersion = __esm({
  "node_modules/wkt-parser/detectWKTVersion.js"() {
  }
});

// node_modules/wkt-parser/parser.js
function Parser(text2) {
  if (typeof text2 !== "string") {
    throw new Error("not a string");
  }
  this.text = text2.trim();
  this.level = 0;
  this.place = 0;
  this.root = null;
  this.stack = [];
  this.currentObject = null;
  this.state = NEUTRAL;
}
function parseString(txt) {
  var parser = new Parser(txt);
  return parser.output();
}
var parser_default, NEUTRAL, KEYWORD, NUMBER, QUOTED, AFTERQUOTE, ENDED, whitespace, latin, keyword, endThings, digets;
var init_parser = __esm({
  "node_modules/wkt-parser/parser.js"() {
    parser_default = parseString;
    NEUTRAL = 1;
    KEYWORD = 2;
    NUMBER = 3;
    QUOTED = 4;
    AFTERQUOTE = 5;
    ENDED = -1;
    whitespace = /\s/;
    latin = /[A-Za-z]/;
    keyword = /[A-Za-z84_]/;
    endThings = /[,\]]/;
    digets = /[\d\.E\-\+]/;
    Parser.prototype.readCharicter = function() {
      var char = this.text[this.place++];
      if (this.state !== QUOTED) {
        while (whitespace.test(char)) {
          if (this.place >= this.text.length) {
            return;
          }
          char = this.text[this.place++];
        }
      }
      switch (this.state) {
        case NEUTRAL:
          return this.neutral(char);
        case KEYWORD:
          return this.keyword(char);
        case QUOTED:
          return this.quoted(char);
        case AFTERQUOTE:
          return this.afterquote(char);
        case NUMBER:
          return this.number(char);
        case ENDED:
          return;
      }
    };
    Parser.prototype.afterquote = function(char) {
      if (char === '"') {
        this.word += '"';
        this.state = QUOTED;
        return;
      }
      if (endThings.test(char)) {
        this.word = this.word.trim();
        this.afterItem(char);
        return;
      }
      throw new Error(`havn't handled "` + char + '" in afterquote yet, index ' + this.place);
    };
    Parser.prototype.afterItem = function(char) {
      if (char === ",") {
        if (this.word !== null) {
          this.currentObject.push(this.word);
        }
        this.word = null;
        this.state = NEUTRAL;
        return;
      }
      if (char === "]") {
        this.level--;
        if (this.word !== null) {
          this.currentObject.push(this.word);
          this.word = null;
        }
        this.state = NEUTRAL;
        this.currentObject = this.stack.pop();
        if (!this.currentObject) {
          this.state = ENDED;
        }
        return;
      }
    };
    Parser.prototype.number = function(char) {
      if (digets.test(char)) {
        this.word += char;
        return;
      }
      if (endThings.test(char)) {
        this.word = parseFloat(this.word);
        this.afterItem(char);
        return;
      }
      throw new Error(`havn't handled "` + char + '" in number yet, index ' + this.place);
    };
    Parser.prototype.quoted = function(char) {
      if (char === '"') {
        this.state = AFTERQUOTE;
        return;
      }
      this.word += char;
      return;
    };
    Parser.prototype.keyword = function(char) {
      if (keyword.test(char)) {
        this.word += char;
        return;
      }
      if (char === "[") {
        var newObjects = [];
        newObjects.push(this.word);
        this.level++;
        if (this.root === null) {
          this.root = newObjects;
        } else {
          this.currentObject.push(newObjects);
        }
        this.stack.push(this.currentObject);
        this.currentObject = newObjects;
        this.state = NEUTRAL;
        return;
      }
      if (endThings.test(char)) {
        this.afterItem(char);
        return;
      }
      throw new Error(`havn't handled "` + char + '" in keyword yet, index ' + this.place);
    };
    Parser.prototype.neutral = function(char) {
      if (latin.test(char)) {
        this.word = char;
        this.state = KEYWORD;
        return;
      }
      if (char === '"') {
        this.word = "";
        this.state = QUOTED;
        return;
      }
      if (digets.test(char)) {
        this.word = char;
        this.state = NUMBER;
        return;
      }
      if (endThings.test(char)) {
        this.afterItem(char);
        return;
      }
      throw new Error(`havn't handled "` + char + '" in neutral yet, index ' + this.place);
    };
    Parser.prototype.output = function() {
      while (this.place < this.text.length) {
        this.readCharicter();
      }
      if (this.state === ENDED) {
        return this.root;
      }
      throw new Error('unable to parse string "' + this.text + '". State is ' + this.state);
    };
  }
});

// node_modules/wkt-parser/process.js
function mapit(obj2, key, value) {
  if (Array.isArray(key)) {
    value.unshift(key);
    key = null;
  }
  var thing = key ? {} : obj2;
  var out = value.reduce(function(newObj, item) {
    sExpr(item, newObj);
    return newObj;
  }, thing);
  if (key) {
    obj2[key] = out;
  }
}
function sExpr(v, obj2) {
  if (!Array.isArray(v)) {
    obj2[v] = true;
    return;
  }
  var key = v.shift();
  if (key === "PARAMETER") {
    key = v.shift();
  }
  if (v.length === 1) {
    if (Array.isArray(v[0])) {
      obj2[key] = {};
      sExpr(v[0], obj2[key]);
      return;
    }
    obj2[key] = v[0];
    return;
  }
  if (!v.length) {
    obj2[key] = true;
    return;
  }
  if (key === "TOWGS84") {
    obj2[key] = v;
    return;
  }
  if (key === "AXIS") {
    if (!(key in obj2)) {
      obj2[key] = [];
    }
    obj2[key].push(v);
    return;
  }
  if (!Array.isArray(key)) {
    obj2[key] = {};
  }
  var i;
  switch (key) {
    case "UNIT":
    case "PRIMEM":
    case "VERT_DATUM":
      obj2[key] = {
        name: v[0].toLowerCase(),
        convert: v[1]
      };
      if (v.length === 3) {
        sExpr(v[2], obj2[key]);
      }
      return;
    case "SPHEROID":
    case "ELLIPSOID":
      obj2[key] = {
        name: v[0],
        a: v[1],
        rf: v[2]
      };
      if (v.length === 4) {
        sExpr(v[3], obj2[key]);
      }
      return;
    case "EDATUM":
    case "ENGINEERINGDATUM":
    case "LOCAL_DATUM":
    case "DATUM":
    case "VERT_CS":
    case "VERTCRS":
    case "VERTICALCRS":
      v[0] = ["name", v[0]];
      mapit(obj2, key, v);
      return;
    case "COMPD_CS":
    case "COMPOUNDCRS":
    case "FITTED_CS":
    // the followings are the crs defined in
    // https://github.com/proj4js/proj4js/blob/1da4ed0b865d0fcb51c136090569210cdcc9019e/lib/parseCode.js#L11
    case "PROJECTEDCRS":
    case "PROJCRS":
    case "GEOGCS":
    case "GEOCCS":
    case "PROJCS":
    case "LOCAL_CS":
    case "GEODCRS":
    case "GEODETICCRS":
    case "GEODETICDATUM":
    case "ENGCRS":
    case "ENGINEERINGCRS":
      v[0] = ["name", v[0]];
      mapit(obj2, key, v);
      obj2[key].type = key;
      return;
    default:
      i = -1;
      while (++i < v.length) {
        if (!Array.isArray(v[i])) {
          return sExpr(v, obj2[key]);
        }
      }
      return mapit(obj2, key, v);
  }
}
var init_process = __esm({
  "node_modules/wkt-parser/process.js"() {
  }
});

// node_modules/wkt-parser/util.js
function d2r(input) {
  return input * D2R2;
}
function applyProjectionDefaults(wkt2) {
  const normalizedProjName = (wkt2.projName || "").toLowerCase().replace(/_/g, " ");
  if (!wkt2.long0 && wkt2.longc && (normalizedProjName === "albers conic equal area" || normalizedProjName === "lambert azimuthal equal area")) {
    wkt2.long0 = wkt2.longc;
  }
  if (!wkt2.lat_ts && wkt2.lat1 && (normalizedProjName === "stereographic south pole" || normalizedProjName === "polar stereographic (variant b)")) {
    wkt2.lat0 = d2r(wkt2.lat1 > 0 ? 90 : -90);
    wkt2.lat_ts = wkt2.lat1;
    delete wkt2.lat1;
  } else if (!wkt2.lat_ts && wkt2.lat0 && (normalizedProjName === "polar stereographic" || normalizedProjName === "polar stereographic (variant a)")) {
    wkt2.lat_ts = wkt2.lat0;
    wkt2.lat0 = d2r(wkt2.lat0 > 0 ? 90 : -90);
    delete wkt2.lat1;
  }
}
var D2R2;
var init_util = __esm({
  "node_modules/wkt-parser/util.js"() {
    D2R2 = 0.017453292519943295;
  }
});

// node_modules/wkt-parser/transformPROJJSON.js
function processUnit(unit) {
  let result2 = { units: null, to_meter: void 0 };
  if (typeof unit === "string") {
    result2.units = unit.toLowerCase();
    if (result2.units === "metre") {
      result2.units = "meter";
    }
    if (result2.units === "meter") {
      result2.to_meter = 1;
    }
  } else if (unit && unit.name) {
    result2.units = unit.name.toLowerCase();
    if (result2.units === "metre") {
      result2.units = "meter";
    }
    result2.to_meter = unit.conversion_factor;
  }
  return result2;
}
function toValue(valueOrObject) {
  if (typeof valueOrObject === "object") {
    return valueOrObject.value * valueOrObject.unit.conversion_factor;
  }
  return valueOrObject;
}
function calculateEllipsoid(value, result2) {
  if (value.ellipsoid.radius) {
    result2.a = value.ellipsoid.radius;
    result2.rf = 0;
  } else {
    result2.a = toValue(value.ellipsoid.semi_major_axis);
    if (value.ellipsoid.inverse_flattening !== void 0) {
      result2.rf = value.ellipsoid.inverse_flattening;
    } else if (value.ellipsoid.semi_major_axis !== void 0 && value.ellipsoid.semi_minor_axis !== void 0) {
      result2.rf = result2.a / (result2.a - toValue(value.ellipsoid.semi_minor_axis));
    }
  }
}
function transformPROJJSON(projjson, result2 = {}) {
  if (!projjson || typeof projjson !== "object") {
    return projjson;
  }
  if (projjson.type === "BoundCRS") {
    transformPROJJSON(projjson.source_crs, result2);
    if (projjson.transformation) {
      if (projjson.transformation.method && projjson.transformation.method.name === "NTv2") {
        result2.nadgrids = projjson.transformation.parameters[0].value;
      } else {
        result2.datum_params = projjson.transformation.parameters.map((param) => param.value);
      }
    }
    return result2;
  }
  Object.keys(projjson).forEach((key) => {
    const value = projjson[key];
    if (value === null) {
      return;
    }
    switch (key) {
      case "name":
        if (result2.srsCode) {
          break;
        }
        result2.name = value;
        result2.srsCode = value;
        break;
      case "type":
        if (value === "GeographicCRS") {
          result2.projName = "longlat";
        } else if (value === "ProjectedCRS" && projjson.conversion && projjson.conversion.method) {
          result2.projName = projjson.conversion.method.name;
        }
        break;
      case "datum":
      case "datum_ensemble":
        if (value.ellipsoid) {
          result2.ellps = value.ellipsoid.name;
          calculateEllipsoid(value, result2);
        }
        if (value.prime_meridian) {
          result2.from_greenwich = value.prime_meridian.longitude * Math.PI / 180;
        }
        break;
      case "ellipsoid":
        result2.ellps = value.name;
        calculateEllipsoid(value, result2);
        break;
      case "prime_meridian":
        result2.long0 = (value.longitude || 0) * Math.PI / 180;
        break;
      case "coordinate_system":
        if (value.axis) {
          result2.axis = value.axis.map((axis) => {
            const direction = axis.direction;
            if (direction === "east") return "e";
            if (direction === "north") return "n";
            if (direction === "west") return "w";
            if (direction === "south") return "s";
            throw new Error(`Unknown axis direction: ${direction}`);
          }).join("") + "u";
          if (value.unit) {
            const { units, to_meter } = processUnit(value.unit);
            result2.units = units;
            result2.to_meter = to_meter;
          } else if (value.axis[0] && value.axis[0].unit) {
            const { units, to_meter } = processUnit(value.axis[0].unit);
            result2.units = units;
            result2.to_meter = to_meter;
          }
        }
        break;
      case "id":
        if (value.authority && value.code) {
          result2.title = value.authority + ":" + value.code;
        }
        break;
      case "conversion":
        if (value.method && value.method.name) {
          result2.projName = value.method.name;
        }
        if (value.parameters) {
          value.parameters.forEach((param) => {
            const paramName = param.name.toLowerCase().replace(/\s+/g, "_");
            const paramValue = param.value;
            if (param.unit && param.unit.conversion_factor) {
              result2[paramName] = paramValue * param.unit.conversion_factor;
            } else if (param.unit === "degree") {
              result2[paramName] = paramValue * Math.PI / 180;
            } else {
              result2[paramName] = paramValue;
            }
          });
        }
        break;
      case "unit":
        if (value.name) {
          result2.units = value.name.toLowerCase();
          if (result2.units === "metre") {
            result2.units = "meter";
          }
        }
        if (value.conversion_factor) {
          result2.to_meter = value.conversion_factor;
        }
        break;
      case "base_crs":
        transformPROJJSON(value, result2);
        result2.datumCode = value.id ? value.id.authority + "_" + value.id.code : value.name;
        break;
      default:
        break;
    }
  });
  if (result2.latitude_of_false_origin !== void 0) {
    result2.lat0 = result2.latitude_of_false_origin;
  }
  if (result2.longitude_of_false_origin !== void 0) {
    result2.long0 = result2.longitude_of_false_origin;
  }
  if (result2.latitude_of_standard_parallel !== void 0) {
    result2.lat0 = result2.latitude_of_standard_parallel;
    result2.lat1 = result2.latitude_of_standard_parallel;
  }
  if (result2.latitude_of_1st_standard_parallel !== void 0) {
    result2.lat1 = result2.latitude_of_1st_standard_parallel;
  }
  if (result2.latitude_of_2nd_standard_parallel !== void 0) {
    result2.lat2 = result2.latitude_of_2nd_standard_parallel;
  }
  if (result2.latitude_of_projection_centre !== void 0) {
    result2.lat0 = result2.latitude_of_projection_centre;
  }
  if (result2.longitude_of_projection_centre !== void 0) {
    result2.longc = result2.longitude_of_projection_centre;
  }
  if (result2.easting_at_false_origin !== void 0) {
    result2.x0 = result2.easting_at_false_origin;
  }
  if (result2.northing_at_false_origin !== void 0) {
    result2.y0 = result2.northing_at_false_origin;
  }
  if (result2.latitude_of_natural_origin !== void 0) {
    result2.lat0 = result2.latitude_of_natural_origin;
  }
  if (result2.longitude_of_natural_origin !== void 0) {
    result2.long0 = result2.longitude_of_natural_origin;
  }
  if (result2.longitude_of_origin !== void 0) {
    result2.long0 = result2.longitude_of_origin;
  }
  if (result2.false_easting !== void 0) {
    result2.x0 = result2.false_easting;
  }
  if (result2.easting_at_projection_centre) {
    result2.x0 = result2.easting_at_projection_centre;
  }
  if (result2.false_northing !== void 0) {
    result2.y0 = result2.false_northing;
  }
  if (result2.northing_at_projection_centre) {
    result2.y0 = result2.northing_at_projection_centre;
  }
  if (result2.standard_parallel_1 !== void 0) {
    result2.lat1 = result2.standard_parallel_1;
  }
  if (result2.standard_parallel_2 !== void 0) {
    result2.lat2 = result2.standard_parallel_2;
  }
  if (result2.scale_factor_at_natural_origin !== void 0) {
    result2.k0 = result2.scale_factor_at_natural_origin;
  }
  if (result2.scale_factor_at_projection_centre !== void 0) {
    result2.k0 = result2.scale_factor_at_projection_centre;
  }
  if (result2.scale_factor_on_pseudo_standard_parallel !== void 0) {
    result2.k0 = result2.scale_factor_on_pseudo_standard_parallel;
  }
  if (result2.azimuth !== void 0) {
    result2.alpha = result2.azimuth;
  }
  if (result2.azimuth_at_projection_centre !== void 0) {
    result2.alpha = result2.azimuth_at_projection_centre;
  }
  if (result2.angle_from_rectified_to_skew_grid) {
    result2.rectified_grid_angle = result2.angle_from_rectified_to_skew_grid;
  }
  applyProjectionDefaults(result2);
  return result2;
}
var init_transformPROJJSON = __esm({
  "node_modules/wkt-parser/transformPROJJSON.js"() {
    init_util();
  }
});

// node_modules/wkt-parser/index.js
function rename(obj2, params2) {
  var outName = params2[0];
  var inName = params2[1];
  if (!(outName in obj2) && inName in obj2) {
    obj2[outName] = obj2[inName];
    if (params2.length === 3) {
      obj2[outName] = params2[2](obj2[outName]);
    }
  }
}
function cleanWKT(wkt2) {
  var keys = Object.keys(wkt2);
  for (var i = 0, ii = keys.length; i < ii; ++i) {
    var key = keys[i];
    if (knownTypes.indexOf(key) !== -1) {
      setPropertiesFromWkt(wkt2[key]);
    }
    if (typeof wkt2[key] === "object") {
      cleanWKT(wkt2[key]);
    }
  }
}
function setPropertiesFromWkt(wkt2) {
  if (wkt2.AUTHORITY) {
    var authority = Object.keys(wkt2.AUTHORITY)[0];
    if (authority && authority in wkt2.AUTHORITY) {
      wkt2.title = authority + ":" + wkt2.AUTHORITY[authority];
    }
  }
  if (wkt2.type === "GEOGCS") {
    wkt2.projName = "longlat";
  } else if (wkt2.type === "LOCAL_CS") {
    wkt2.projName = "identity";
    wkt2.local = true;
  } else {
    if (typeof wkt2.PROJECTION === "object") {
      wkt2.projName = Object.keys(wkt2.PROJECTION)[0];
    } else {
      wkt2.projName = wkt2.PROJECTION;
    }
  }
  if (wkt2.AXIS) {
    var axisOrder = "";
    for (var i = 0, ii = wkt2.AXIS.length; i < ii; ++i) {
      var axis = [wkt2.AXIS[i][0].toLowerCase(), wkt2.AXIS[i][1].toLowerCase()];
      if (axis[0].indexOf("north") !== -1 || (axis[0] === "y" || axis[0] === "lat") && axis[1] === "north") {
        axisOrder += "n";
      } else if (axis[0].indexOf("south") !== -1 || (axis[0] === "y" || axis[0] === "lat") && axis[1] === "south") {
        axisOrder += "s";
      } else if (axis[0].indexOf("east") !== -1 || (axis[0] === "x" || axis[0] === "lon") && axis[1] === "east") {
        axisOrder += "e";
      } else if (axis[0].indexOf("west") !== -1 || (axis[0] === "x" || axis[0] === "lon") && axis[1] === "west") {
        axisOrder += "w";
      }
    }
    if (axisOrder.length === 2) {
      axisOrder += "u";
    }
    if (axisOrder.length === 3) {
      wkt2.axis = axisOrder;
    }
  }
  if (wkt2.UNIT) {
    wkt2.units = wkt2.UNIT.name.toLowerCase();
    if (wkt2.units === "metre") {
      wkt2.units = "meter";
    }
    if (wkt2.UNIT.convert) {
      if (wkt2.type === "GEOGCS") {
        if (wkt2.DATUM && wkt2.DATUM.SPHEROID) {
          wkt2.to_meter = wkt2.UNIT.convert * wkt2.DATUM.SPHEROID.a;
        }
      } else {
        wkt2.to_meter = wkt2.UNIT.convert;
      }
    }
  }
  var geogcs = wkt2.GEOGCS;
  if (wkt2.type === "GEOGCS") {
    geogcs = wkt2;
  }
  if (geogcs) {
    if (geogcs.DATUM) {
      wkt2.datumCode = geogcs.DATUM.name.toLowerCase();
    } else {
      wkt2.datumCode = geogcs.name.toLowerCase();
    }
    if (wkt2.datumCode.slice(0, 2) === "d_") {
      wkt2.datumCode = wkt2.datumCode.slice(2);
    }
    if (wkt2.datumCode === "new_zealand_1949") {
      wkt2.datumCode = "nzgd49";
    }
    if (wkt2.datumCode === "wgs_1984" || wkt2.datumCode === "world_geodetic_system_1984") {
      if (wkt2.PROJECTION === "Mercator_Auxiliary_Sphere") {
        wkt2.sphere = true;
      }
      wkt2.datumCode = "wgs84";
    }
    if (wkt2.datumCode === "belge_1972") {
      wkt2.datumCode = "rnb72";
    }
    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {
      wkt2.ellps = geogcs.DATUM.SPHEROID.name.replace("_19", "").replace(/[Cc]larke\_18/, "clrk");
      if (wkt2.ellps.toLowerCase().slice(0, 13) === "international") {
        wkt2.ellps = "intl";
      }
      wkt2.a = geogcs.DATUM.SPHEROID.a;
      wkt2.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);
    }
    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {
      wkt2.datum_params = geogcs.DATUM.TOWGS84;
    }
    if (~wkt2.datumCode.indexOf("osgb_1936")) {
      wkt2.datumCode = "osgb36";
    }
    if (~wkt2.datumCode.indexOf("osni_1952")) {
      wkt2.datumCode = "osni52";
    }
    if (~wkt2.datumCode.indexOf("tm65") || ~wkt2.datumCode.indexOf("geodetic_datum_of_1965")) {
      wkt2.datumCode = "ire65";
    }
    if (wkt2.datumCode === "ch1903+") {
      wkt2.datumCode = "ch1903";
    }
    if (~wkt2.datumCode.indexOf("israel")) {
      wkt2.datumCode = "isr93";
    }
  }
  if (wkt2.b && !isFinite(wkt2.b)) {
    wkt2.b = wkt2.a;
  }
  if (wkt2.rectified_grid_angle) {
    wkt2.rectified_grid_angle = d2r(wkt2.rectified_grid_angle);
  }
  function toMeter(input) {
    var ratio = wkt2.to_meter || 1;
    return input * ratio;
  }
  var renamer = function(a) {
    return rename(wkt2, a);
  };
  var list = [
    ["standard_parallel_1", "Standard_Parallel_1"],
    ["standard_parallel_1", "Latitude of 1st standard parallel"],
    ["standard_parallel_2", "Standard_Parallel_2"],
    ["standard_parallel_2", "Latitude of 2nd standard parallel"],
    ["false_easting", "False_Easting"],
    ["false_easting", "False easting"],
    ["false-easting", "Easting at false origin"],
    ["false_northing", "False_Northing"],
    ["false_northing", "False northing"],
    ["false_northing", "Northing at false origin"],
    ["central_meridian", "Central_Meridian"],
    ["central_meridian", "Longitude of natural origin"],
    ["central_meridian", "Longitude of false origin"],
    ["latitude_of_origin", "Latitude_Of_Origin"],
    ["latitude_of_origin", "Central_Parallel"],
    ["latitude_of_origin", "Latitude of natural origin"],
    ["latitude_of_origin", "Latitude of false origin"],
    ["scale_factor", "Scale_Factor"],
    ["k0", "scale_factor"],
    ["latitude_of_center", "Latitude_Of_Center"],
    ["latitude_of_center", "Latitude_of_center"],
    ["lat0", "latitude_of_center", d2r],
    ["longitude_of_center", "Longitude_Of_Center"],
    ["longitude_of_center", "Longitude_of_center"],
    ["longc", "longitude_of_center", d2r],
    ["x0", "false_easting", toMeter],
    ["y0", "false_northing", toMeter],
    ["long0", "central_meridian", d2r],
    ["lat0", "latitude_of_origin", d2r],
    ["lat0", "standard_parallel_1", d2r],
    ["lat1", "standard_parallel_1", d2r],
    ["lat2", "standard_parallel_2", d2r],
    ["azimuth", "Azimuth"],
    ["alpha", "azimuth", d2r],
    ["srsCode", "name"]
  ];
  list.forEach(renamer);
  applyProjectionDefaults(wkt2);
}
function wkt_parser_default(wkt2) {
  if (typeof wkt2 === "object") {
    return transformPROJJSON(wkt2);
  }
  const version = detectWKTVersion(wkt2);
  var lisp = parser_default(wkt2);
  if (version === "WKT2") {
    const projjson = buildPROJJSON(lisp);
    return transformPROJJSON(projjson);
  }
  var type = lisp[0];
  var obj2 = {};
  sExpr(lisp, obj2);
  cleanWKT(obj2);
  return obj2[type];
}
var knownTypes;
var init_wkt_parser = __esm({
  "node_modules/wkt-parser/index.js"() {
    init_buildPROJJSON();
    init_detectWKTVersion();
    init_parser();
    init_process();
    init_transformPROJJSON();
    init_util();
    knownTypes = [
      "PROJECTEDCRS",
      "PROJCRS",
      "GEOGCS",
      "GEOCCS",
      "PROJCS",
      "LOCAL_CS",
      "GEODCRS",
      "GEODETICCRS",
      "GEODETICDATUM",
      "ENGCRS",
      "ENGINEERINGCRS"
    ];
  }
});

// node_modules/proj4/lib/defs.js
function defs(name) {
  var that = this;
  if (arguments.length === 2) {
    var def = arguments[1];
    if (typeof def === "string") {
      if (def.charAt(0) === "+") {
        defs[
          /** @type {string} */
          name
        ] = projString_default(arguments[1]);
      } else {
        defs[
          /** @type {string} */
          name
        ] = wkt_parser_default(arguments[1]);
      }
    } else {
      defs[
        /** @type {string} */
        name
      ] = def;
    }
  } else if (arguments.length === 1) {
    if (Array.isArray(name)) {
      return name.map(function(v) {
        if (Array.isArray(v)) {
          return defs.apply(that, v);
        } else {
          return defs(v);
        }
      });
    } else if (typeof name === "string") {
      if (name in defs) {
        return defs[name];
      }
    } else if ("EPSG" in name) {
      defs["EPSG:" + name.EPSG] = name;
    } else if ("ESRI" in name) {
      defs["ESRI:" + name.ESRI] = name;
    } else if ("IAU2000" in name) {
      defs["IAU2000:" + name.IAU2000] = name;
    } else {
      console.log(name);
    }
    return;
  }
}
var defs_default;
var init_defs = __esm({
  "node_modules/proj4/lib/defs.js"() {
    init_global();
    init_projString();
    init_wkt_parser();
    global_default(defs);
    defs_default = defs;
  }
});

// node_modules/proj4/lib/parseCode.js
function testObj(code) {
  return typeof code === "string";
}
function testDef(code) {
  return code in defs_default;
}
function testWKT(code) {
  return code.indexOf("+") !== 0 && code.indexOf("[") !== -1 || typeof code === "object" && !("srsCode" in code);
}
function checkMercator(item) {
  var auth = match(item, "authority");
  if (!auth) {
    return;
  }
  var code = match(auth, "epsg");
  return code && codes.indexOf(code) > -1;
}
function checkProjStr(item) {
  var ext = match(item, "extension");
  if (!ext) {
    return;
  }
  return match(ext, "proj4");
}
function testProj(code) {
  return code[0] === "+";
}
function parse(code) {
  if (testObj(code)) {
    if (testDef(code)) {
      return defs_default[code];
    }
    if (testWKT(code)) {
      var out = wkt_parser_default(code);
      if (checkMercator(out)) {
        return defs_default["EPSG:3857"];
      }
      var maybeProjStr = checkProjStr(out);
      if (maybeProjStr) {
        return projString_default(maybeProjStr);
      }
      return out;
    }
    if (testProj(code)) {
      return projString_default(code);
    }
  } else if (!("projName" in code)) {
    return wkt_parser_default(code);
  } else {
    return code;
  }
}
var codes, parseCode_default;
var init_parseCode = __esm({
  "node_modules/proj4/lib/parseCode.js"() {
    init_defs();
    init_wkt_parser();
    init_projString();
    init_match();
    codes = ["3857", "900913", "3785", "102113"];
    parseCode_default = parse;
  }
});

// node_modules/proj4/lib/extend.js
function extend_default(destination, source) {
  destination = destination || {};
  var value, property;
  if (!source) {
    return destination;
  }
  for (property in source) {
    value = source[property];
    if (value !== void 0) {
      destination[property] = value;
    }
  }
  return destination;
}
var init_extend = __esm({
  "node_modules/proj4/lib/extend.js"() {
  }
});

// node_modules/proj4/lib/common/msfnz.js
function msfnz_default(eccent, sinphi, cosphi) {
  var con = eccent * sinphi;
  return cosphi / Math.sqrt(1 - con * con);
}
var init_msfnz = __esm({
  "node_modules/proj4/lib/common/msfnz.js"() {
  }
});

// node_modules/proj4/lib/common/sign.js
function sign_default(x) {
  return x < 0 ? -1 : 1;
}
var init_sign = __esm({
  "node_modules/proj4/lib/common/sign.js"() {
  }
});

// node_modules/proj4/lib/common/adjust_lon.js
function adjust_lon_default(x) {
  return Math.abs(x) <= SPI ? x : x - sign_default(x) * TWO_PI;
}
var init_adjust_lon = __esm({
  "node_modules/proj4/lib/common/adjust_lon.js"() {
    init_values();
    init_sign();
  }
});

// node_modules/proj4/lib/common/tsfnz.js
function tsfnz_default(eccent, phi, sinphi) {
  var con = eccent * sinphi;
  var com = 0.5 * eccent;
  con = Math.pow((1 - con) / (1 + con), com);
  return Math.tan(0.5 * (HALF_PI - phi)) / con;
}
var init_tsfnz = __esm({
  "node_modules/proj4/lib/common/tsfnz.js"() {
    init_values();
  }
});

// node_modules/proj4/lib/common/phi2z.js
function phi2z_default(eccent, ts) {
  var eccnth = 0.5 * eccent;
  var con, dphi;
  var phi = HALF_PI - 2 * Math.atan(ts);
  for (var i = 0; i <= 15; i++) {
    con = eccent * Math.sin(phi);
    dphi = HALF_PI - 2 * Math.atan(ts * Math.pow((1 - con) / (1 + con), eccnth)) - phi;
    phi += dphi;
    if (Math.abs(dphi) <= 1e-10) {
      return phi;
    }
  }
  return -9999;
}
var init_phi2z = __esm({
  "node_modules/proj4/lib/common/phi2z.js"() {
    init_values();
  }
});

// node_modules/proj4/lib/projections/merc.js
function init() {
  var con = this.b / this.a;
  this.es = 1 - con * con;
  if (!("x0" in this)) {
    this.x0 = 0;
  }
  if (!("y0" in this)) {
    this.y0 = 0;
  }
  this.e = Math.sqrt(this.es);
  if (this.lat_ts) {
    if (this.sphere) {
      this.k0 = Math.cos(this.lat_ts);
    } else {
      this.k0 = msfnz_default(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
    }
  } else {
    if (!this.k0) {
      if (this.k) {
        this.k0 = this.k;
      } else {
        this.k0 = 1;
      }
    }
  }
}
function forward(p) {
  var lon = p.x;
  var lat = p.y;
  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {
    return null;
  }
  var x, y;
  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
    return null;
  } else {
    if (this.sphere) {
      x = this.x0 + this.a * this.k0 * adjust_lon_default(lon - this.long0);
      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));
    } else {
      var sinphi = Math.sin(lat);
      var ts = tsfnz_default(this.e, lat, sinphi);
      x = this.x0 + this.a * this.k0 * adjust_lon_default(lon - this.long0);
      y = this.y0 - this.a * this.k0 * Math.log(ts);
    }
    p.x = x;
    p.y = y;
    return p;
  }
}
function inverse(p) {
  var x = p.x - this.x0;
  var y = p.y - this.y0;
  var lon, lat;
  if (this.sphere) {
    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));
  } else {
    var ts = Math.exp(-y / (this.a * this.k0));
    lat = phi2z_default(this.e, ts);
    if (lat === -9999) {
      return null;
    }
  }
  lon = adjust_lon_default(this.long0 + x / (this.a * this.k0));
  p.x = lon;
  p.y = lat;
  return p;
}
var names, merc_default;
var init_merc = __esm({
  "node_modules/proj4/lib/projections/merc.js"() {
    init_msfnz();
    init_adjust_lon();
    init_tsfnz();
    init_phi2z();
    init_values();
    names = ["Mercator", "Popular Visualisation Pseudo Mercator", "Mercator_1SP", "Mercator_Auxiliary_Sphere", "Mercator_Variant_A", "merc"];
    merc_default = {
      init,
      forward,
      inverse,
      names
    };
  }
});

// node_modules/proj4/lib/projections/longlat.js
function init2() {
}
function identity(pt) {
  return pt;
}
var names2, longlat_default;
var init_longlat = __esm({
  "node_modules/proj4/lib/projections/longlat.js"() {
    names2 = ["longlat", "identity"];
    longlat_default = {
      init: init2,
      forward: identity,
      inverse: identity,
      names: names2
    };
  }
});

// node_modules/proj4/lib/projections.js
function add(proj, i) {
  var len = projStore.length;
  if (!proj.names) {
    console.log(i);
    return true;
  }
  projStore[len] = proj;
  proj.names.forEach(function(n) {
    names3[n.toLowerCase()] = len;
  });
  return this;
}
function getNormalizedProjName(n) {
  return n.replace(/[-\(\)\s]+/g, " ").trim().replace(/ /g, "_");
}
function get(name) {
  if (!name) {
    return false;
  }
  var n = name.toLowerCase();
  if (typeof names3[n] !== "undefined" && projStore[names3[n]]) {
    return projStore[names3[n]];
  }
  n = getNormalizedProjName(n);
  if (n in names3 && projStore[names3[n]]) {
    return projStore[names3[n]];
  }
}
function start() {
  projs.forEach(add);
}
var projs, names3, projStore, projections_default;
var init_projections = __esm({
  "node_modules/proj4/lib/projections.js"() {
    init_merc();
    init_longlat();
    projs = [merc_default, longlat_default];
    names3 = {};
    projStore = [];
    projections_default = {
      start,
      add,
      get
    };
  }
});

// node_modules/proj4/lib/constants/Ellipsoid.js
var ellipsoids, Ellipsoid_default;
var init_Ellipsoid = __esm({
  "node_modules/proj4/lib/constants/Ellipsoid.js"() {
    ellipsoids = {
      MERIT: {
        a: 6378137,
        rf: 298.257,
        ellipseName: "MERIT 1983"
      },
      SGS85: {
        a: 6378136,
        rf: 298.257,
        ellipseName: "Soviet Geodetic System 85"
      },
      GRS80: {
        a: 6378137,
        rf: 298.257222101,
        ellipseName: "GRS 1980(IUGG, 1980)"
      },
      IAU76: {
        a: 6378140,
        rf: 298.257,
        ellipseName: "IAU 1976"
      },
      airy: {
        a: 6377563396e-3,
        b: 635625691e-2,
        ellipseName: "Airy 1830"
      },
      APL4: {
        a: 6378137,
        rf: 298.25,
        ellipseName: "Appl. Physics. 1965"
      },
      NWL9D: {
        a: 6378145,
        rf: 298.25,
        ellipseName: "Naval Weapons Lab., 1965"
      },
      mod_airy: {
        a: 6377340189e-3,
        b: 6356034446e-3,
        ellipseName: "Modified Airy"
      },
      andrae: {
        a: 637710443e-2,
        rf: 300,
        ellipseName: "Andrae 1876 (Den., Iclnd.)"
      },
      aust_SA: {
        a: 6378160,
        rf: 298.25,
        ellipseName: "Australian Natl & S. Amer. 1969"
      },
      GRS67: {
        a: 6378160,
        rf: 298.247167427,
        ellipseName: "GRS 67(IUGG 1967)"
      },
      bessel: {
        a: 6377397155e-3,
        rf: 299.1528128,
        ellipseName: "Bessel 1841"
      },
      bess_nam: {
        a: 6377483865e-3,
        rf: 299.1528128,
        ellipseName: "Bessel 1841 (Namibia)"
      },
      clrk66: {
        a: 63782064e-1,
        b: 63565838e-1,
        ellipseName: "Clarke 1866"
      },
      clrk80: {
        a: 6378249145e-3,
        rf: 293.4663,
        ellipseName: "Clarke 1880 mod."
      },
      clrk80ign: {
        a: 63782492e-1,
        b: 6356515,
        rf: 293.4660213,
        ellipseName: "Clarke 1880 (IGN)"
      },
      clrk58: {
        a: 6378293645208759e-9,
        rf: 294.2606763692654,
        ellipseName: "Clarke 1858"
      },
      CPM: {
        a: 63757387e-1,
        rf: 334.29,
        ellipseName: "Comm. des Poids et Mesures 1799"
      },
      delmbr: {
        a: 6376428,
        rf: 311.5,
        ellipseName: "Delambre 1810 (Belgium)"
      },
      engelis: {
        a: 637813605e-2,
        rf: 298.2566,
        ellipseName: "Engelis 1985"
      },
      evrst30: {
        a: 6377276345e-3,
        rf: 300.8017,
        ellipseName: "Everest 1830"
      },
      evrst48: {
        a: 6377304063e-3,
        rf: 300.8017,
        ellipseName: "Everest 1948"
      },
      evrst56: {
        a: 6377301243e-3,
        rf: 300.8017,
        ellipseName: "Everest 1956"
      },
      evrst69: {
        a: 6377295664e-3,
        rf: 300.8017,
        ellipseName: "Everest 1969"
      },
      evrstSS: {
        a: 6377298556e-3,
        rf: 300.8017,
        ellipseName: "Everest (Sabah & Sarawak)"
      },
      fschr60: {
        a: 6378166,
        rf: 298.3,
        ellipseName: "Fischer (Mercury Datum) 1960"
      },
      fschr60m: {
        a: 6378155,
        rf: 298.3,
        ellipseName: "Fischer 1960"
      },
      fschr68: {
        a: 6378150,
        rf: 298.3,
        ellipseName: "Fischer 1968"
      },
      helmert: {
        a: 6378200,
        rf: 298.3,
        ellipseName: "Helmert 1906"
      },
      hough: {
        a: 6378270,
        rf: 297,
        ellipseName: "Hough"
      },
      intl: {
        a: 6378388,
        rf: 297,
        ellipseName: "International 1909 (Hayford)"
      },
      kaula: {
        a: 6378163,
        rf: 298.24,
        ellipseName: "Kaula 1961"
      },
      lerch: {
        a: 6378139,
        rf: 298.257,
        ellipseName: "Lerch 1979"
      },
      mprts: {
        a: 6397300,
        rf: 191,
        ellipseName: "Maupertius 1738"
      },
      new_intl: {
        a: 63781575e-1,
        b: 63567722e-1,
        ellipseName: "New International 1967"
      },
      plessis: {
        a: 6376523,
        rf: 6355863,
        ellipseName: "Plessis 1817 (France)"
      },
      krass: {
        a: 6378245,
        rf: 298.3,
        ellipseName: "Krassovsky, 1942"
      },
      SEasia: {
        a: 6378155,
        b: 63567733205e-4,
        ellipseName: "Southeast Asia"
      },
      walbeck: {
        a: 6376896,
        b: 63558348467e-4,
        ellipseName: "Walbeck"
      },
      WGS60: {
        a: 6378165,
        rf: 298.3,
        ellipseName: "WGS 60"
      },
      WGS66: {
        a: 6378145,
        rf: 298.25,
        ellipseName: "WGS 66"
      },
      WGS7: {
        a: 6378135,
        rf: 298.26,
        ellipseName: "WGS 72"
      },
      WGS84: {
        a: 6378137,
        rf: 298.257223563,
        ellipseName: "WGS 84"
      },
      sphere: {
        a: 6370997,
        b: 6370997,
        ellipseName: "Normal Sphere (r=6370997)"
      }
    };
    Ellipsoid_default = ellipsoids;
  }
});

// node_modules/proj4/lib/deriveConstants.js
function eccentricity(a, b, rf, R_A) {
  var a2 = a * a;
  var b2 = b * b;
  var es = (a2 - b2) / a2;
  var e = 0;
  if (R_A) {
    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));
    a2 = a * a;
    es = 0;
  } else {
    e = Math.sqrt(es);
  }
  var ep2 = (a2 - b2) / b2;
  return {
    es,
    e,
    ep2
  };
}
function sphere(a, b, rf, ellps, sphere2) {
  if (!a) {
    var ellipse = match(Ellipsoid_default, ellps);
    if (!ellipse) {
      ellipse = WGS84;
    }
    a = ellipse.a;
    b = ellipse.b;
    rf = ellipse.rf;
  }
  if (rf && !b) {
    b = (1 - 1 / rf) * a;
  }
  if (rf === 0 || Math.abs(a - b) < EPSLN) {
    sphere2 = true;
    b = a;
  }
  return {
    a,
    b,
    rf,
    sphere: sphere2
  };
}
var WGS84;
var init_deriveConstants = __esm({
  "node_modules/proj4/lib/deriveConstants.js"() {
    init_values();
    init_Ellipsoid();
    init_match();
    WGS84 = Ellipsoid_default.WGS84;
  }
});

// node_modules/proj4/lib/constants/Datum.js
var datums, datum2, key, Datum_default;
var init_Datum = __esm({
  "node_modules/proj4/lib/constants/Datum.js"() {
    datums = {
      wgs84: {
        towgs84: "0,0,0",
        ellipse: "WGS84",
        datumName: "WGS84"
      },
      ch1903: {
        towgs84: "674.374,15.056,405.346",
        ellipse: "bessel",
        datumName: "swiss"
      },
      ggrs87: {
        towgs84: "-199.87,74.79,246.62",
        ellipse: "GRS80",
        datumName: "Greek_Geodetic_Reference_System_1987"
      },
      nad83: {
        towgs84: "0,0,0",
        ellipse: "GRS80",
        datumName: "North_American_Datum_1983"
      },
      nad27: {
        nadgrids: "@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",
        ellipse: "clrk66",
        datumName: "North_American_Datum_1927"
      },
      potsdam: {
        towgs84: "598.1,73.7,418.2,0.202,0.045,-2.455,6.7",
        ellipse: "bessel",
        datumName: "Potsdam Rauenberg 1950 DHDN"
      },
      carthage: {
        towgs84: "-263.0,6.0,431.0",
        ellipse: "clark80",
        datumName: "Carthage 1934 Tunisia"
      },
      hermannskogel: {
        towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
        ellipse: "bessel",
        datumName: "Hermannskogel"
      },
      mgi: {
        towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
        ellipse: "bessel",
        datumName: "Militar-Geographische Institut"
      },
      osni52: {
        towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
        ellipse: "airy",
        datumName: "Irish National"
      },
      ire65: {
        towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
        ellipse: "mod_airy",
        datumName: "Ireland 1965"
      },
      rassadiran: {
        towgs84: "-133.63,-157.5,-158.62",
        ellipse: "intl",
        datumName: "Rassadiran"
      },
      nzgd49: {
        towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",
        ellipse: "intl",
        datumName: "New Zealand Geodetic Datum 1949"
      },
      osgb36: {
        towgs84: "446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",
        ellipse: "airy",
        datumName: "Ordnance Survey of Great Britain 1936"
      },
      s_jtsk: {
        towgs84: "589,76,480",
        ellipse: "bessel",
        datumName: "S-JTSK (Ferro)"
      },
      beduaram: {
        towgs84: "-106,-87,188",
        ellipse: "clrk80",
        datumName: "Beduaram"
      },
      gunung_segara: {
        towgs84: "-403,684,41",
        ellipse: "bessel",
        datumName: "Gunung Segara Jakarta"
      },
      rnb72: {
        towgs84: "106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",
        ellipse: "intl",
        datumName: "Reseau National Belge 1972"
      },
      EPSG_5451: {
        towgs84: "6.41,-49.05,-11.28,1.5657,0.5242,6.9718,-5.7649"
      },
      IGNF_LURESG: {
        towgs84: "-192.986,13.673,-39.309,-0.4099,-2.9332,2.6881,0.43"
      },
      EPSG_4614: {
        towgs84: "-119.4248,-303.65872,-11.00061,1.164298,0.174458,1.096259,3.657065"
      },
      EPSG_4615: {
        towgs84: "-494.088,-312.129,279.877,-1.423,-1.013,1.59,-0.748"
      },
      ESRI_37241: {
        towgs84: "-76.822,257.457,-12.817,2.136,-0.033,-2.392,-0.031"
      },
      ESRI_37249: {
        towgs84: "-440.296,58.548,296.265,1.128,10.202,4.559,-0.438"
      },
      ESRI_37245: {
        towgs84: "-511.151,-181.269,139.609,1.05,2.703,1.798,3.071"
      },
      EPSG_4178: {
        towgs84: "24.9,-126.4,-93.2,-0.063,-0.247,-0.041,1.01"
      },
      EPSG_4622: {
        towgs84: "-472.29,-5.63,-304.12,0.4362,-0.8374,0.2563,1.8984"
      },
      EPSG_4625: {
        towgs84: "126.93,547.94,130.41,-2.7867,5.1612,-0.8584,13.8227"
      },
      EPSG_5252: {
        towgs84: "0.023,0.036,-0.068,0.00176,0.00912,-0.01136,0.00439"
      },
      EPSG_4314: {
        towgs84: "597.1,71.4,412.1,0.894,0.068,-1.563,7.58"
      },
      EPSG_4282: {
        towgs84: "-178.3,-316.7,-131.5,5.278,6.077,10.979,19.166"
      },
      EPSG_4231: {
        towgs84: "-83.11,-97.38,-117.22,0.0276,-0.2167,0.2147,0.1218"
      },
      EPSG_4274: {
        towgs84: "-230.994,102.591,25.199,0.633,-0.239,0.9,1.95"
      },
      EPSG_4134: {
        towgs84: "-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.71006"
      },
      EPSG_4254: {
        towgs84: "18.38,192.45,96.82,0.056,-0.142,-0.2,-0.0013"
      },
      EPSG_4159: {
        towgs84: "-194.513,-63.978,-25.759,-3.4027,3.756,-3.352,-0.9175"
      },
      EPSG_4687: {
        towgs84: "0.072,-0.507,-0.245,0.0183,-0.0003,0.007,-0.0093"
      },
      EPSG_4227: {
        towgs84: "-83.58,-397.54,458.78,-17.595,-2.847,4.256,3.225"
      },
      EPSG_4746: {
        towgs84: "599.4,72.4,419.2,-0.062,-0.022,-2.723,6.46"
      },
      EPSG_4745: {
        towgs84: "612.4,77,440.2,-0.054,0.057,-2.797,2.55"
      },
      EPSG_6311: {
        towgs84: "8.846,-4.394,-1.122,-0.00237,-0.146528,0.130428,0.783926"
      },
      EPSG_4289: {
        towgs84: "565.7381,50.4018,465.2904,-1.91514,1.60363,-9.09546,4.07244"
      },
      EPSG_4230: {
        towgs84: "-68.863,-134.888,-111.49,-0.53,-0.14,0.57,-3.4"
      },
      EPSG_4154: {
        towgs84: "-123.02,-158.95,-168.47"
      },
      EPSG_4156: {
        towgs84: "570.8,85.7,462.8,4.998,1.587,5.261,3.56"
      },
      EPSG_4299: {
        towgs84: "482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15"
      },
      EPSG_4179: {
        towgs84: "33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84"
      },
      EPSG_4313: {
        towgs84: "-106.8686,52.2978,-103.7239,0.3366,-0.457,1.8422,-1.2747"
      },
      EPSG_4194: {
        towgs84: "163.511,127.533,-159.789"
      },
      EPSG_4195: {
        towgs84: "105,326,-102.5"
      },
      EPSG_4196: {
        towgs84: "-45,417,-3.5"
      },
      EPSG_4611: {
        towgs84: "-162.619,-276.959,-161.764,0.067753,-2.243649,-1.158827,-1.094246"
      },
      EPSG_4633: {
        towgs84: "137.092,131.66,91.475,-1.9436,-11.5993,-4.3321,-7.4824"
      },
      EPSG_4641: {
        towgs84: "-408.809,366.856,-412.987,1.8842,-0.5308,2.1655,-121.0993"
      },
      EPSG_4643: {
        towgs84: "-480.26,-438.32,-643.429,16.3119,20.1721,-4.0349,-111.7002"
      },
      EPSG_4300: {
        towgs84: "482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15"
      },
      EPSG_4188: {
        towgs84: "482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15"
      },
      EPSG_4660: {
        towgs84: "982.6087,552.753,-540.873,32.39344,-153.25684,-96.2266,16.805"
      },
      EPSG_4662: {
        towgs84: "97.295,-263.247,310.882,-1.5999,0.8386,3.1409,13.3259"
      },
      EPSG_3906: {
        towgs84: "577.88891,165.22205,391.18289,4.9145,-0.94729,-13.05098,7.78664"
      },
      EPSG_4307: {
        towgs84: "-209.3622,-87.8162,404.6198,0.0046,3.4784,0.5805,-1.4547"
      },
      EPSG_6892: {
        towgs84: "-76.269,-16.683,68.562,-6.275,10.536,-4.286,-13.686"
      },
      EPSG_4690: {
        towgs84: "221.597,152.441,176.523,2.403,1.3893,0.884,11.4648"
      },
      EPSG_4691: {
        towgs84: "218.769,150.75,176.75,3.5231,2.0037,1.288,10.9817"
      },
      EPSG_4629: {
        towgs84: "72.51,345.411,79.241,-1.5862,-0.8826,-0.5495,1.3653"
      },
      EPSG_4630: {
        towgs84: "165.804,216.213,180.26,-0.6251,-0.4515,-0.0721,7.4111"
      },
      EPSG_4692: {
        towgs84: "217.109,86.452,23.711,0.0183,-0.0003,0.007,-0.0093"
      },
      EPSG_9333: {
        towgs84: "0,0,0,-8.393,0.749,-10.276,0"
      },
      EPSG_9059: {
        towgs84: "0,0,0"
      },
      EPSG_4312: {
        towgs84: "601.705,84.263,485.227,4.7354,1.3145,5.393,-2.3887"
      },
      EPSG_4123: {
        towgs84: "-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496"
      },
      EPSG_4309: {
        towgs84: "-124.45,183.74,44.64,-0.4384,0.5446,-0.9706,-2.1365"
      },
      ESRI_104106: {
        towgs84: "-283.088,-70.693,117.445,-1.157,0.059,-0.652,-4.058"
      },
      EPSG_4281: {
        towgs84: "-219.247,-73.802,269.529"
      },
      EPSG_4322: {
        towgs84: "0,0,4.5"
      },
      EPSG_4324: {
        towgs84: "0,0,1.9"
      },
      EPSG_4284: {
        towgs84: "43.822,-108.842,-119.585,1.455,-0.761,0.737,0.549"
      },
      EPSG_4277: {
        towgs84: "446.448,-125.157,542.06,0.15,0.247,0.842,-20.489"
      },
      EPSG_4207: {
        towgs84: "-282.1,-72.2,120,-1.529,0.145,-0.89,-4.46"
      },
      EPSG_4688: {
        towgs84: "347.175,1077.618,2623.677,33.9058,-70.6776,9.4013,186.0647"
      },
      EPSG_4689: {
        towgs84: "410.793,54.542,80.501,-2.5596,-2.3517,-0.6594,17.3218"
      },
      EPSG_4720: {
        towgs84: "0,0,4.5"
      },
      EPSG_4273: {
        towgs84: "278.3,93,474.5,7.889,0.05,-6.61,6.21"
      },
      EPSG_4240: {
        towgs84: "204.64,834.74,293.8"
      },
      EPSG_4817: {
        towgs84: "278.3,93,474.5,7.889,0.05,-6.61,6.21"
      },
      ESRI_104131: {
        towgs84: "426.62,142.62,460.09,4.98,4.49,-12.42,-17.1"
      },
      EPSG_4265: {
        towgs84: "-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68"
      },
      EPSG_4263: {
        towgs84: "-111.92,-87.85,114.5,1.875,0.202,0.219,0.032"
      },
      EPSG_4298: {
        towgs84: "-689.5937,623.84046,-65.93566,-0.02331,1.17094,-0.80054,5.88536"
      },
      EPSG_4270: {
        towgs84: "-253.4392,-148.452,386.5267,0.15605,0.43,-0.1013,-0.0424"
      },
      EPSG_4229: {
        towgs84: "-121.8,98.1,-10.7"
      },
      EPSG_4220: {
        towgs84: "-55.5,-348,-229.2"
      },
      EPSG_4214: {
        towgs84: "12.646,-155.176,-80.863"
      },
      EPSG_4232: {
        towgs84: "-345,3,223"
      },
      EPSG_4238: {
        towgs84: "-1.977,-13.06,-9.993,0.364,0.254,0.689,-1.037"
      },
      EPSG_4168: {
        towgs84: "-170,33,326"
      },
      EPSG_4131: {
        towgs84: "199,931,318.9"
      },
      EPSG_4152: {
        towgs84: "-0.9102,2.0141,0.5602,0.029039,0.010065,0.010101,0"
      },
      EPSG_5228: {
        towgs84: "572.213,85.334,461.94,4.9732,1.529,5.2484,3.5378"
      },
      EPSG_8351: {
        towgs84: "485.021,169.465,483.839,7.786342,4.397554,4.102655,0"
      },
      EPSG_4683: {
        towgs84: "-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06"
      },
      EPSG_4133: {
        towgs84: "0,0,0"
      },
      EPSG_7373: {
        towgs84: "0.819,-0.5762,-1.6446,-0.00378,-0.03317,0.00318,0.0693"
      },
      EPSG_9075: {
        towgs84: "-0.9102,2.0141,0.5602,0.029039,0.010065,0.010101,0"
      },
      EPSG_9072: {
        towgs84: "-0.9102,2.0141,0.5602,0.029039,0.010065,0.010101,0"
      },
      EPSG_9294: {
        towgs84: "1.16835,-1.42001,-2.24431,-0.00822,-0.05508,0.01818,0.23388"
      },
      EPSG_4212: {
        towgs84: "-267.434,173.496,181.814,-13.4704,8.7154,7.3926,14.7492"
      },
      EPSG_4191: {
        towgs84: "-44.183,-0.58,-38.489,2.3867,2.7072,-3.5196,-8.2703"
      },
      EPSG_4237: {
        towgs84: "52.684,-71.194,-13.975,-0.312,-0.1063,-0.3729,1.0191"
      },
      EPSG_4740: {
        towgs84: "-1.08,-0.27,-0.9"
      },
      EPSG_4124: {
        towgs84: "419.3836,99.3335,591.3451,0.850389,1.817277,-7.862238,-0.99496"
      },
      EPSG_5681: {
        towgs84: "584.9636,107.7175,413.8067,1.1155,0.2824,-3.1384,7.9922"
      },
      EPSG_4141: {
        towgs84: "23.772,17.49,17.859,-0.3132,-1.85274,1.67299,-5.4262"
      },
      EPSG_4204: {
        towgs84: "-85.645,-273.077,-79.708,2.289,-1.421,2.532,3.194"
      },
      EPSG_4319: {
        towgs84: "226.702,-193.337,-35.371,-2.229,-4.391,9.238,0.9798"
      },
      EPSG_4200: {
        towgs84: "24.82,-131.21,-82.66"
      },
      EPSG_4130: {
        towgs84: "0,0,0"
      },
      EPSG_4127: {
        towgs84: "-82.875,-57.097,-156.768,-2.158,1.524,-0.982,-0.359"
      },
      EPSG_4149: {
        towgs84: "674.374,15.056,405.346"
      },
      EPSG_4617: {
        towgs84: "-0.991,1.9072,0.5129,1.25033e-7,4.6785e-8,5.6529e-8,0"
      },
      EPSG_4663: {
        towgs84: "-210.502,-66.902,-48.476,2.094,-15.067,-5.817,0.485"
      },
      EPSG_4664: {
        towgs84: "-211.939,137.626,58.3,-0.089,0.251,0.079,0.384"
      },
      EPSG_4665: {
        towgs84: "-105.854,165.589,-38.312,-0.003,-0.026,0.024,-0.048"
      },
      EPSG_4666: {
        towgs84: "631.392,-66.551,481.442,1.09,-4.445,-4.487,-4.43"
      },
      EPSG_4756: {
        towgs84: "-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188"
      },
      EPSG_4723: {
        towgs84: "-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925"
      },
      EPSG_4726: {
        towgs84: "8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081"
      },
      EPSG_4267: {
        towgs84: "-8.0,160.0,176.0"
      },
      EPSG_5365: {
        towgs84: "-0.16959,0.35312,0.51846,0.03385,-0.16325,0.03446,0.03693"
      },
      EPSG_4218: {
        towgs84: "304.5,306.5,-318.1"
      },
      EPSG_4242: {
        towgs84: "-33.722,153.789,94.959,-8.581,-4.478,4.54,8.95"
      },
      EPSG_4216: {
        towgs84: "-292.295,248.758,429.447,4.9971,2.99,6.6906,1.0289"
      },
      ESRI_104105: {
        towgs84: "631.392,-66.551,481.442,1.09,-4.445,-4.487,-4.43"
      },
      ESRI_104129: {
        towgs84: "0,0,0"
      },
      EPSG_4673: {
        towgs84: "174.05,-25.49,112.57"
      },
      EPSG_4202: {
        towgs84: "-124,-60,154"
      },
      EPSG_4203: {
        towgs84: "-117.763,-51.51,139.061,0.292,0.443,0.277,-0.191"
      },
      EPSG_3819: {
        towgs84: "595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408"
      },
      EPSG_8694: {
        towgs84: "-93.799,-132.737,-219.073,-1.844,0.648,-6.37,-0.169"
      },
      EPSG_4145: {
        towgs84: "275.57,676.78,229.6"
      },
      EPSG_4283: {
        towgs84: "61.55,-10.87,-40.19,39.4924,32.7221,32.8979,-9.994"
      },
      EPSG_4317: {
        towgs84: "2.3287,-147.0425,-92.0802,-0.3092483,0.32482185,0.49729934,5.68906266"
      },
      EPSG_4272: {
        towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993"
      },
      EPSG_4248: {
        towgs84: "-307.7,265.3,-363.5"
      },
      EPSG_5561: {
        towgs84: "24,-121,-76"
      },
      EPSG_5233: {
        towgs84: "-0.293,766.95,87.713,0.195704,1.695068,3.473016,-0.039338"
      },
      ESRI_104130: {
        towgs84: "-86,-98,-119"
      },
      ESRI_104102: {
        towgs84: "682,-203,480"
      },
      ESRI_37207: {
        towgs84: "7,-10,-26"
      },
      EPSG_4675: {
        towgs84: "59.935,118.4,-10.871"
      },
      ESRI_104109: {
        towgs84: "-89.121,-348.182,260.871"
      },
      ESRI_104112: {
        towgs84: "-185.583,-230.096,281.361"
      },
      ESRI_104113: {
        towgs84: "25.1,-275.6,222.6"
      },
      IGNF_WGS72G: {
        towgs84: "0,12,6"
      },
      IGNF_NTFG: {
        towgs84: "-168,-60,320"
      },
      IGNF_EFATE57G: {
        towgs84: "-127,-769,472"
      },
      IGNF_PGP50G: {
        towgs84: "324.8,153.6,172.1"
      },
      IGNF_REUN47G: {
        towgs84: "94,-948,-1262"
      },
      IGNF_CSG67G: {
        towgs84: "-186,230,110"
      },
      IGNF_GUAD48G: {
        towgs84: "-467,-16,-300"
      },
      IGNF_TAHI51G: {
        towgs84: "162,117,154"
      },
      IGNF_TAHAAG: {
        towgs84: "65,342,77"
      },
      IGNF_NUKU72G: {
        towgs84: "84,274,65"
      },
      IGNF_PETRELS72G: {
        towgs84: "365,194,166"
      },
      IGNF_WALL78G: {
        towgs84: "253,-133,-127"
      },
      IGNF_MAYO50G: {
        towgs84: "-382,-59,-262"
      },
      IGNF_TANNAG: {
        towgs84: "-139,-967,436"
      },
      IGNF_IGN72G: {
        towgs84: "-13,-348,292"
      },
      IGNF_ATIGG: {
        towgs84: "1118,23,66"
      },
      IGNF_FANGA84G: {
        towgs84: "150.57,158.33,118.32"
      },
      IGNF_RUSAT84G: {
        towgs84: "202.13,174.6,-15.74"
      },
      IGNF_KAUE70G: {
        towgs84: "126.74,300.1,-75.49"
      },
      IGNF_MOP90G: {
        towgs84: "-10.8,-1.8,12.77"
      },
      IGNF_MHPF67G: {
        towgs84: "338.08,212.58,-296.17"
      },
      IGNF_TAHI79G: {
        towgs84: "160.61,116.05,153.69"
      },
      IGNF_ANAA92G: {
        towgs84: "1.5,3.84,4.81"
      },
      IGNF_MARQUI72G: {
        towgs84: "330.91,-13.92,58.56"
      },
      IGNF_APAT86G: {
        towgs84: "143.6,197.82,74.05"
      },
      IGNF_TUBU69G: {
        towgs84: "237.17,171.61,-77.84"
      },
      IGNF_STPM50G: {
        towgs84: "11.363,424.148,373.13"
      },
      EPSG_4150: {
        towgs84: "674.374,15.056,405.346"
      },
      EPSG_4754: {
        towgs84: "-208.4058,-109.8777,-2.5764"
      },
      ESRI_104101: {
        towgs84: "374,150,588"
      },
      EPSG_4693: {
        towgs84: "0,-0.15,0.68"
      },
      EPSG_6207: {
        towgs84: "293.17,726.18,245.36"
      },
      EPSG_4153: {
        towgs84: "-133.63,-157.5,-158.62"
      },
      EPSG_4132: {
        towgs84: "-241.54,-163.64,396.06"
      },
      EPSG_4221: {
        towgs84: "-154.5,150.7,100.4"
      },
      EPSG_4266: {
        towgs84: "-80.7,-132.5,41.1"
      },
      EPSG_4193: {
        towgs84: "-70.9,-151.8,-41.4"
      },
      EPSG_5340: {
        towgs84: "-0.41,0.46,-0.35"
      },
      EPSG_4246: {
        towgs84: "-294.7,-200.1,525.5"
      },
      EPSG_4318: {
        towgs84: "-3.2,-5.7,2.8"
      },
      EPSG_4121: {
        towgs84: "-199.87,74.79,246.62"
      },
      EPSG_4223: {
        towgs84: "-260.1,5.5,432.2"
      },
      EPSG_4158: {
        towgs84: "-0.465,372.095,171.736"
      },
      EPSG_4285: {
        towgs84: "-128.16,-282.42,21.93"
      },
      EPSG_4613: {
        towgs84: "-404.78,685.68,45.47"
      },
      EPSG_4607: {
        towgs84: "195.671,332.517,274.607"
      },
      EPSG_4475: {
        towgs84: "-381.788,-57.501,-256.673"
      },
      EPSG_4208: {
        towgs84: "-157.84,308.54,-146.6"
      },
      EPSG_4743: {
        towgs84: "70.995,-335.916,262.898"
      },
      EPSG_4710: {
        towgs84: "-323.65,551.39,-491.22"
      },
      EPSG_7881: {
        towgs84: "-0.077,0.079,0.086"
      },
      EPSG_4682: {
        towgs84: "283.729,735.942,261.143"
      },
      EPSG_4739: {
        towgs84: "-156,-271,-189"
      },
      EPSG_4679: {
        towgs84: "-80.01,253.26,291.19"
      },
      EPSG_4750: {
        towgs84: "-56.263,16.136,-22.856"
      },
      EPSG_4644: {
        towgs84: "-10.18,-350.43,291.37"
      },
      EPSG_4695: {
        towgs84: "-103.746,-9.614,-255.95"
      },
      EPSG_4292: {
        towgs84: "-355,21,72"
      },
      EPSG_4302: {
        towgs84: "-61.702,284.488,472.052"
      },
      EPSG_4143: {
        towgs84: "-124.76,53,466.79"
      },
      EPSG_4606: {
        towgs84: "-153,153,307"
      },
      EPSG_4699: {
        towgs84: "-770.1,158.4,-498.2"
      },
      EPSG_4247: {
        towgs84: "-273.5,110.6,-357.9"
      },
      EPSG_4160: {
        towgs84: "8.88,184.86,106.69"
      },
      EPSG_4161: {
        towgs84: "-233.43,6.65,173.64"
      },
      EPSG_9251: {
        towgs84: "-9.5,122.9,138.2"
      },
      EPSG_9253: {
        towgs84: "-78.1,101.6,133.3"
      },
      EPSG_4297: {
        towgs84: "-198.383,-240.517,-107.909"
      },
      EPSG_4269: {
        towgs84: "0,0,0"
      },
      EPSG_4301: {
        towgs84: "-147,506,687"
      },
      EPSG_4618: {
        towgs84: "-59,-11,-52"
      },
      EPSG_4612: {
        towgs84: "0,0,0"
      },
      EPSG_4678: {
        towgs84: "44.585,-131.212,-39.544"
      },
      EPSG_4250: {
        towgs84: "-130,29,364"
      },
      EPSG_4144: {
        towgs84: "214,804,268"
      },
      EPSG_4147: {
        towgs84: "-17.51,-108.32,-62.39"
      },
      EPSG_4259: {
        towgs84: "-254.1,-5.36,-100.29"
      },
      EPSG_4164: {
        towgs84: "-76,-138,67"
      },
      EPSG_4211: {
        towgs84: "-378.873,676.002,-46.255"
      },
      EPSG_4182: {
        towgs84: "-422.651,-172.995,84.02"
      },
      EPSG_4224: {
        towgs84: "-143.87,243.37,-33.52"
      },
      EPSG_4225: {
        towgs84: "-205.57,168.77,-4.12"
      },
      EPSG_5527: {
        towgs84: "-67.35,3.88,-38.22"
      },
      EPSG_4752: {
        towgs84: "98,390,-22"
      },
      EPSG_4310: {
        towgs84: "-30,190,89"
      },
      EPSG_9248: {
        towgs84: "-192.26,65.72,132.08"
      },
      EPSG_4680: {
        towgs84: "124.5,-63.5,-281"
      },
      EPSG_4701: {
        towgs84: "-79.9,-158,-168.9"
      },
      EPSG_4706: {
        towgs84: "-146.21,112.63,4.05"
      },
      EPSG_4805: {
        towgs84: "682,-203,480"
      },
      EPSG_4201: {
        towgs84: "-165,-11,206"
      },
      EPSG_4210: {
        towgs84: "-157,-2,-299"
      },
      EPSG_4183: {
        towgs84: "-104,167,-38"
      },
      EPSG_4139: {
        towgs84: "11,72,-101"
      },
      EPSG_4668: {
        towgs84: "-86,-98,-119"
      },
      EPSG_4717: {
        towgs84: "-2,151,181"
      },
      EPSG_4732: {
        towgs84: "102,52,-38"
      },
      EPSG_4280: {
        towgs84: "-377,681,-50"
      },
      EPSG_4209: {
        towgs84: "-138,-105,-289"
      },
      EPSG_4261: {
        towgs84: "31,146,47"
      },
      EPSG_4658: {
        towgs84: "-73,46,-86"
      },
      EPSG_4721: {
        towgs84: "265.025,384.929,-194.046"
      },
      EPSG_4222: {
        towgs84: "-136,-108,-292"
      },
      EPSG_4601: {
        towgs84: "-255,-15,71"
      },
      EPSG_4602: {
        towgs84: "725,685,536"
      },
      EPSG_4603: {
        towgs84: "72,213.7,93"
      },
      EPSG_4605: {
        towgs84: "9,183,236"
      },
      EPSG_4621: {
        towgs84: "137,248,-430"
      },
      EPSG_4657: {
        towgs84: "-28,199,5"
      },
      EPSG_4316: {
        towgs84: "103.25,-100.4,-307.19"
      },
      EPSG_4642: {
        towgs84: "-13,-348,292"
      },
      EPSG_4698: {
        towgs84: "145,-187,103"
      },
      EPSG_4192: {
        towgs84: "-206.1,-174.7,-87.7"
      },
      EPSG_4311: {
        towgs84: "-265,120,-358"
      },
      EPSG_4135: {
        towgs84: "58,-283,-182"
      },
      ESRI_104138: {
        towgs84: "198,-226,-347"
      },
      EPSG_4245: {
        towgs84: "-11,851,5"
      },
      EPSG_4142: {
        towgs84: "-125,53,467"
      },
      EPSG_4213: {
        towgs84: "-106,-87,188"
      },
      EPSG_4253: {
        towgs84: "-133,-77,-51"
      },
      EPSG_4129: {
        towgs84: "-132,-110,-335"
      },
      EPSG_4713: {
        towgs84: "-77,-128,142"
      },
      EPSG_4239: {
        towgs84: "217,823,299"
      },
      EPSG_4146: {
        towgs84: "295,736,257"
      },
      EPSG_4155: {
        towgs84: "-83,37,124"
      },
      EPSG_4165: {
        towgs84: "-173,253,27"
      },
      EPSG_4672: {
        towgs84: "175,-38,113"
      },
      EPSG_4236: {
        towgs84: "-637,-549,-203"
      },
      EPSG_4251: {
        towgs84: "-90,40,88"
      },
      EPSG_4271: {
        towgs84: "-2,374,172"
      },
      EPSG_4175: {
        towgs84: "-88,4,101"
      },
      EPSG_4716: {
        towgs84: "298,-304,-375"
      },
      EPSG_4315: {
        towgs84: "-23,259,-9"
      },
      EPSG_4744: {
        towgs84: "-242.2,-144.9,370.3"
      },
      EPSG_4244: {
        towgs84: "-97,787,86"
      },
      EPSG_4293: {
        towgs84: "616,97,-251"
      },
      EPSG_4714: {
        towgs84: "-127,-769,472"
      },
      EPSG_4736: {
        towgs84: "260,12,-147"
      },
      EPSG_6883: {
        towgs84: "-235,-110,393"
      },
      EPSG_6894: {
        towgs84: "-63,176,185"
      },
      EPSG_4205: {
        towgs84: "-43,-163,45"
      },
      EPSG_4256: {
        towgs84: "41,-220,-134"
      },
      EPSG_4262: {
        towgs84: "639,405,60"
      },
      EPSG_4604: {
        towgs84: "174,359,365"
      },
      EPSG_4169: {
        towgs84: "-115,118,426"
      },
      EPSG_4620: {
        towgs84: "-106,-129,165"
      },
      EPSG_4184: {
        towgs84: "-203,141,53"
      },
      EPSG_4616: {
        towgs84: "-289,-124,60"
      },
      EPSG_9403: {
        towgs84: "-307,-92,127"
      },
      EPSG_4684: {
        towgs84: "-133,-321,50"
      },
      EPSG_4708: {
        towgs84: "-491,-22,435"
      },
      EPSG_4707: {
        towgs84: "114,-116,-333"
      },
      EPSG_4709: {
        towgs84: "145,75,-272"
      },
      EPSG_4712: {
        towgs84: "-205,107,53"
      },
      EPSG_4711: {
        towgs84: "124,-234,-25"
      },
      EPSG_4718: {
        towgs84: "230,-199,-752"
      },
      EPSG_4719: {
        towgs84: "211,147,111"
      },
      EPSG_4724: {
        towgs84: "208,-435,-229"
      },
      EPSG_4725: {
        towgs84: "189,-79,-202"
      },
      EPSG_4735: {
        towgs84: "647,1777,-1124"
      },
      EPSG_4722: {
        towgs84: "-794,119,-298"
      },
      EPSG_4728: {
        towgs84: "-307,-92,127"
      },
      EPSG_4734: {
        towgs84: "-632,438,-609"
      },
      EPSG_4727: {
        towgs84: "912,-58,1227"
      },
      EPSG_4729: {
        towgs84: "185,165,42"
      },
      EPSG_4730: {
        towgs84: "170,42,84"
      },
      EPSG_4733: {
        towgs84: "276,-57,149"
      },
      ESRI_37218: {
        towgs84: "230,-199,-752"
      },
      ESRI_37240: {
        towgs84: "-7,215,225"
      },
      ESRI_37221: {
        towgs84: "252,-209,-751"
      },
      ESRI_4305: {
        towgs84: "-123,-206,219"
      },
      ESRI_104139: {
        towgs84: "-73,-247,227"
      },
      EPSG_4748: {
        towgs84: "51,391,-36"
      },
      EPSG_4219: {
        towgs84: "-384,664,-48"
      },
      EPSG_4255: {
        towgs84: "-333,-222,114"
      },
      EPSG_4257: {
        towgs84: "-587.8,519.75,145.76"
      },
      EPSG_4646: {
        towgs84: "-963,510,-359"
      },
      EPSG_6881: {
        towgs84: "-24,-203,268"
      },
      EPSG_6882: {
        towgs84: "-183,-15,273"
      },
      EPSG_4715: {
        towgs84: "-104,-129,239"
      },
      IGNF_RGF93GDD: {
        towgs84: "0,0,0"
      },
      IGNF_RGM04GDD: {
        towgs84: "0,0,0"
      },
      IGNF_RGSPM06GDD: {
        towgs84: "0,0,0"
      },
      IGNF_RGTAAF07GDD: {
        towgs84: "0,0,0"
      },
      IGNF_RGFG95GDD: {
        towgs84: "0,0,0"
      },
      IGNF_RGNCG: {
        towgs84: "0,0,0"
      },
      IGNF_RGPFGDD: {
        towgs84: "0,0,0"
      },
      IGNF_ETRS89G: {
        towgs84: "0,0,0"
      },
      IGNF_RGR92GDD: {
        towgs84: "0,0,0"
      },
      EPSG_4173: {
        towgs84: "0,0,0"
      },
      EPSG_4180: {
        towgs84: "0,0,0"
      },
      EPSG_4619: {
        towgs84: "0,0,0"
      },
      EPSG_4667: {
        towgs84: "0,0,0"
      },
      EPSG_4075: {
        towgs84: "0,0,0"
      },
      EPSG_6706: {
        towgs84: "0,0,0"
      },
      EPSG_7798: {
        towgs84: "0,0,0"
      },
      EPSG_4661: {
        towgs84: "0,0,0"
      },
      EPSG_4669: {
        towgs84: "0,0,0"
      },
      EPSG_8685: {
        towgs84: "0,0,0"
      },
      EPSG_4151: {
        towgs84: "0,0,0"
      },
      EPSG_9702: {
        towgs84: "0,0,0"
      },
      EPSG_4758: {
        towgs84: "0,0,0"
      },
      EPSG_4761: {
        towgs84: "0,0,0"
      },
      EPSG_4765: {
        towgs84: "0,0,0"
      },
      EPSG_8997: {
        towgs84: "0,0,0"
      },
      EPSG_4023: {
        towgs84: "0,0,0"
      },
      EPSG_4670: {
        towgs84: "0,0,0"
      },
      EPSG_4694: {
        towgs84: "0,0,0"
      },
      EPSG_4148: {
        towgs84: "0,0,0"
      },
      EPSG_4163: {
        towgs84: "0,0,0"
      },
      EPSG_4167: {
        towgs84: "0,0,0"
      },
      EPSG_4189: {
        towgs84: "0,0,0"
      },
      EPSG_4190: {
        towgs84: "0,0,0"
      },
      EPSG_4176: {
        towgs84: "0,0,0"
      },
      EPSG_4659: {
        towgs84: "0,0,0"
      },
      EPSG_3824: {
        towgs84: "0,0,0"
      },
      EPSG_3889: {
        towgs84: "0,0,0"
      },
      EPSG_4046: {
        towgs84: "0,0,0"
      },
      EPSG_4081: {
        towgs84: "0,0,0"
      },
      EPSG_4558: {
        towgs84: "0,0,0"
      },
      EPSG_4483: {
        towgs84: "0,0,0"
      },
      EPSG_5013: {
        towgs84: "0,0,0"
      },
      EPSG_5264: {
        towgs84: "0,0,0"
      },
      EPSG_5324: {
        towgs84: "0,0,0"
      },
      EPSG_5354: {
        towgs84: "0,0,0"
      },
      EPSG_5371: {
        towgs84: "0,0,0"
      },
      EPSG_5373: {
        towgs84: "0,0,0"
      },
      EPSG_5381: {
        towgs84: "0,0,0"
      },
      EPSG_5393: {
        towgs84: "0,0,0"
      },
      EPSG_5489: {
        towgs84: "0,0,0"
      },
      EPSG_5593: {
        towgs84: "0,0,0"
      },
      EPSG_6135: {
        towgs84: "0,0,0"
      },
      EPSG_6365: {
        towgs84: "0,0,0"
      },
      EPSG_5246: {
        towgs84: "0,0,0"
      },
      EPSG_7886: {
        towgs84: "0,0,0"
      },
      EPSG_8431: {
        towgs84: "0,0,0"
      },
      EPSG_8427: {
        towgs84: "0,0,0"
      },
      EPSG_8699: {
        towgs84: "0,0,0"
      },
      EPSG_8818: {
        towgs84: "0,0,0"
      },
      EPSG_4757: {
        towgs84: "0,0,0"
      },
      EPSG_9140: {
        towgs84: "0,0,0"
      },
      EPSG_8086: {
        towgs84: "0,0,0"
      },
      EPSG_4686: {
        towgs84: "0,0,0"
      },
      EPSG_4737: {
        towgs84: "0,0,0"
      },
      EPSG_4702: {
        towgs84: "0,0,0"
      },
      EPSG_4747: {
        towgs84: "0,0,0"
      },
      EPSG_4749: {
        towgs84: "0,0,0"
      },
      EPSG_4674: {
        towgs84: "0,0,0"
      },
      EPSG_4755: {
        towgs84: "0,0,0"
      },
      EPSG_4759: {
        towgs84: "0,0,0"
      },
      EPSG_4762: {
        towgs84: "0,0,0"
      },
      EPSG_4763: {
        towgs84: "0,0,0"
      },
      EPSG_4764: {
        towgs84: "0,0,0"
      },
      EPSG_4166: {
        towgs84: "0,0,0"
      },
      EPSG_4170: {
        towgs84: "0,0,0"
      },
      EPSG_5546: {
        towgs84: "0,0,0"
      },
      EPSG_7844: {
        towgs84: "0,0,0"
      },
      EPSG_4818: {
        towgs84: "589,76,480"
      }
    };
    for (key in datums) {
      datum2 = datums[key];
      if (!datum2.datumName) {
        continue;
      }
      datums[datum2.datumName] = datum2;
    }
    Datum_default = datums;
  }
});

// node_modules/proj4/lib/datum.js
function datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {
  var out = {};
  if (datumCode === void 0 || datumCode === "none") {
    out.datum_type = PJD_NODATUM;
  } else {
    out.datum_type = PJD_WGS84;
  }
  if (datum_params) {
    out.datum_params = datum_params.map(parseFloat);
    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {
      out.datum_type = PJD_3PARAM;
    }
    if (out.datum_params.length > 3) {
      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {
        out.datum_type = PJD_7PARAM;
        out.datum_params[3] *= SEC_TO_RAD;
        out.datum_params[4] *= SEC_TO_RAD;
        out.datum_params[5] *= SEC_TO_RAD;
        out.datum_params[6] = out.datum_params[6] / 1e6 + 1;
      }
    }
  }
  if (nadgrids) {
    out.datum_type = PJD_GRIDSHIFT;
    out.grids = nadgrids;
  }
  out.a = a;
  out.b = b;
  out.es = es;
  out.ep2 = ep2;
  return out;
}
var datum_default;
var init_datum = __esm({
  "node_modules/proj4/lib/datum.js"() {
    init_values();
    datum_default = datum;
  }
});

// node_modules/proj4/lib/nadgrid.js
function nadgrid(key, data, options) {
  if (data instanceof ArrayBuffer) {
    return readNTV2Grid(key, data, options);
  }
  return { ready: readGeotiffGrid(key, data) };
}
function readNTV2Grid(key, data, options) {
  var includeErrorFields = true;
  if (options !== void 0 && options.includeErrorFields === false) {
    includeErrorFields = false;
  }
  var view = new DataView(data);
  var isLittleEndian = detectLittleEndian(view);
  var header = readHeader(view, isLittleEndian);
  var subgrids = readSubgrids(view, header, isLittleEndian, includeErrorFields);
  var nadgrid2 = { header, subgrids };
  loadedNadgrids[key] = nadgrid2;
  return nadgrid2;
}
async function readGeotiffGrid(key, tiff) {
  var subgrids = [];
  var subGridCount = await tiff.getImageCount();
  for (var subgridIndex = subGridCount - 1; subgridIndex >= 0; subgridIndex--) {
    var image = await tiff.getImage(subgridIndex);
    var rasters = await image.readRasters();
    var data = rasters;
    var lim = [image.getWidth(), image.getHeight()];
    var imageBBoxRadians = image.getBoundingBox().map(degreesToRadians);
    var del = [image.fileDirectory.ModelPixelScale[0], image.fileDirectory.ModelPixelScale[1]].map(degreesToRadians);
    var maxX = imageBBoxRadians[0] + (lim[0] - 1) * del[0];
    var minY = imageBBoxRadians[3] - (lim[1] - 1) * del[1];
    var latitudeOffsetBand = data[0];
    var longitudeOffsetBand = data[1];
    var nodes = [];
    for (let i = lim[1] - 1; i >= 0; i--) {
      for (let j = lim[0] - 1; j >= 0; j--) {
        var index = i * lim[0] + j;
        nodes.push([-secondsToRadians(longitudeOffsetBand[index]), secondsToRadians(latitudeOffsetBand[index])]);
      }
    }
    subgrids.push({
      del,
      lim,
      ll: [-maxX, minY],
      cvs: nodes
    });
  }
  var tifGrid = {
    header: {
      nSubgrids: subGridCount
    },
    subgrids
  };
  loadedNadgrids[key] = tifGrid;
  return tifGrid;
}
function getNadgrids(nadgrids) {
  if (nadgrids === void 0) {
    return null;
  }
  var grids = nadgrids.split(",");
  return grids.map(parseNadgridString);
}
function parseNadgridString(value) {
  if (value.length === 0) {
    return null;
  }
  var optional = value[0] === "@";
  if (optional) {
    value = value.slice(1);
  }
  if (value === "null") {
    return { name: "null", mandatory: !optional, grid: null, isNull: true };
  }
  return {
    name: value,
    mandatory: !optional,
    grid: loadedNadgrids[value] || null,
    isNull: false
  };
}
function degreesToRadians(degrees) {
  return degrees * Math.PI / 180;
}
function secondsToRadians(seconds) {
  return seconds / 3600 * Math.PI / 180;
}
function detectLittleEndian(view) {
  var nFields = view.getInt32(8, false);
  if (nFields === 11) {
    return false;
  }
  nFields = view.getInt32(8, true);
  if (nFields !== 11) {
    console.warn("Failed to detect nadgrid endian-ness, defaulting to little-endian");
  }
  return true;
}
function readHeader(view, isLittleEndian) {
  return {
    nFields: view.getInt32(8, isLittleEndian),
    nSubgridFields: view.getInt32(24, isLittleEndian),
    nSubgrids: view.getInt32(40, isLittleEndian),
    shiftType: decodeString(view, 56, 56 + 8).trim(),
    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),
    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),
    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),
    toSemiMinorAxis: view.getFloat64(168, isLittleEndian)
  };
}
function decodeString(view, start2, end) {
  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start2, end)));
}
function readSubgrids(view, header, isLittleEndian, includeErrorFields) {
  var gridOffset = 176;
  var grids = [];
  for (var i = 0; i < header.nSubgrids; i++) {
    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);
    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian, includeErrorFields);
    var lngColumnCount = Math.round(
      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval
    );
    var latColumnCount = Math.round(
      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval
    );
    grids.push({
      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],
      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],
      lim: [lngColumnCount, latColumnCount],
      count: subHeader.gridNodeCount,
      cvs: mapNodes(nodes)
    });
    var rowSize = 16;
    if (includeErrorFields === false) {
      rowSize = 8;
    }
    gridOffset += 176 + subHeader.gridNodeCount * rowSize;
  }
  return grids;
}
function mapNodes(nodes) {
  return nodes.map(function(r) {
    return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];
  });
}
function readGridHeader(view, offset, isLittleEndian) {
  return {
    name: decodeString(view, offset + 8, offset + 16).trim(),
    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),
    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),
    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),
    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),
    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),
    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),
    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),
    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)
  };
}
function readGridNodes(view, offset, gridHeader, isLittleEndian, includeErrorFields) {
  var nodesOffset = offset + 176;
  var gridRecordLength = 16;
  if (includeErrorFields === false) {
    gridRecordLength = 8;
  }
  var gridShiftRecords = [];
  for (var i = 0; i < gridHeader.gridNodeCount; i++) {
    var record = {
      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),
      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian)
    };
    if (includeErrorFields !== false) {
      record.latitudeAccuracy = view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian);
      record.longitudeAccuracy = view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian);
    }
    gridShiftRecords.push(record);
  }
  return gridShiftRecords;
}
var loadedNadgrids;
var init_nadgrid = __esm({
  "node_modules/proj4/lib/nadgrid.js"() {
    loadedNadgrids = {};
  }
});

// node_modules/proj4/lib/Proj.js
function Projection(srsCode, callback) {
  if (!(this instanceof Projection)) {
    return new Projection(srsCode);
  }
  this.forward = null;
  this.inverse = null;
  this.init = null;
  this.name;
  this.names = null;
  this.title;
  callback = callback || function(error) {
    if (error) {
      throw error;
    }
  };
  var json = parseCode_default(srsCode);
  if (typeof json !== "object") {
    callback("Could not parse to valid json: " + srsCode);
    return;
  }
  var ourProj = Projection.projections.get(json.projName);
  if (!ourProj) {
    callback("Could not get projection name from: " + srsCode);
    return;
  }
  if (json.datumCode && json.datumCode !== "none") {
    var datumDef = match(Datum_default, json.datumCode);
    if (datumDef) {
      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(",") : null);
      json.ellps = datumDef.ellipse;
      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;
    }
  }
  json.k0 = json.k0 || 1;
  json.axis = json.axis || "enu";
  json.ellps = json.ellps || "wgs84";
  json.lat1 = json.lat1 || json.lat0;
  var sphere_ = sphere(json.a, json.b, json.rf, json.ellps, json.sphere);
  var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);
  var nadgrids = getNadgrids(json.nadgrids);
  var datumObj = json.datum || datum_default(
    json.datumCode,
    json.datum_params,
    sphere_.a,
    sphere_.b,
    ecc.es,
    ecc.ep2,
    nadgrids
  );
  extend_default(this, json);
  extend_default(this, ourProj);
  this.a = sphere_.a;
  this.b = sphere_.b;
  this.rf = sphere_.rf;
  this.sphere = sphere_.sphere;
  this.es = ecc.es;
  this.e = ecc.e;
  this.ep2 = ecc.ep2;
  this.datum = datumObj;
  if ("init" in this && typeof this.init === "function") {
    this.init();
  }
  callback(null, this);
}
var Proj_default;
var init_Proj = __esm({
  "node_modules/proj4/lib/Proj.js"() {
    init_parseCode();
    init_extend();
    init_projections();
    init_deriveConstants();
    init_Datum();
    init_datum();
    init_match();
    init_nadgrid();
    Projection.projections = projections_default;
    Projection.projections.start();
    Proj_default = Projection;
  }
});

// node_modules/proj4/lib/datumUtils.js
function compareDatums(source, dest) {
  if (source.datum_type !== dest.datum_type) {
    return false;
  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 5e-11) {
    return false;
  } else if (source.datum_type === PJD_3PARAM) {
    return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2];
  } else if (source.datum_type === PJD_7PARAM) {
    return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6];
  } else {
    return true;
  }
}
function geodeticToGeocentric(p, es, a) {
  var Longitude = p.x;
  var Latitude = p.y;
  var Height = p.z ? p.z : 0;
  var Rn;
  var Sin_Lat;
  var Sin2_Lat;
  var Cos_Lat;
  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {
    Latitude = -HALF_PI;
  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {
    Latitude = HALF_PI;
  } else if (Latitude < -HALF_PI) {
    return { x: -Infinity, y: -Infinity, z: p.z };
  } else if (Latitude > HALF_PI) {
    return { x: Infinity, y: Infinity, z: p.z };
  }
  if (Longitude > Math.PI) {
    Longitude -= 2 * Math.PI;
  }
  Sin_Lat = Math.sin(Latitude);
  Cos_Lat = Math.cos(Latitude);
  Sin2_Lat = Sin_Lat * Sin_Lat;
  Rn = a / Math.sqrt(1 - es * Sin2_Lat);
  return {
    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),
    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),
    z: (Rn * (1 - es) + Height) * Sin_Lat
  };
}
function geocentricToGeodetic(p, es, a, b) {
  var genau = 1e-12;
  var genau2 = genau * genau;
  var maxiter = 30;
  var P;
  var RR;
  var CT;
  var ST;
  var RX;
  var RK;
  var RN;
  var CPHI0;
  var SPHI0;
  var CPHI;
  var SPHI;
  var SDPHI;
  var iter;
  var X = p.x;
  var Y = p.y;
  var Z2 = p.z ? p.z : 0;
  var Longitude;
  var Latitude;
  var Height;
  P = Math.sqrt(X * X + Y * Y);
  RR = Math.sqrt(X * X + Y * Y + Z2 * Z2);
  if (P / a < genau) {
    Longitude = 0;
    if (RR / a < genau) {
      Latitude = HALF_PI;
      Height = -b;
      return {
        x: p.x,
        y: p.y,
        z: p.z
      };
    }
  } else {
    Longitude = Math.atan2(Y, X);
  }
  CT = Z2 / RR;
  ST = P / RR;
  RX = 1 / Math.sqrt(1 - es * (2 - es) * ST * ST);
  CPHI0 = ST * (1 - es) * RX;
  SPHI0 = CT * RX;
  iter = 0;
  do {
    iter++;
    RN = a / Math.sqrt(1 - es * SPHI0 * SPHI0);
    Height = P * CPHI0 + Z2 * SPHI0 - RN * (1 - es * SPHI0 * SPHI0);
    RK = es * RN / (RN + Height);
    RX = 1 / Math.sqrt(1 - RK * (2 - RK) * ST * ST);
    CPHI = ST * (1 - RK) * RX;
    SPHI = CT * RX;
    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;
    CPHI0 = CPHI;
    SPHI0 = SPHI;
  } while (SDPHI * SDPHI > genau2 && iter < maxiter);
  Latitude = Math.atan(SPHI / Math.abs(CPHI));
  return {
    x: Longitude,
    y: Latitude,
    z: Height
  };
}
function geocentricToWgs84(p, datum_type, datum_params) {
  if (datum_type === PJD_3PARAM) {
    return {
      x: p.x + datum_params[0],
      y: p.y + datum_params[1],
      z: p.z + datum_params[2]
    };
  } else if (datum_type === PJD_7PARAM) {
    var Dx_BF = datum_params[0];
    var Dy_BF = datum_params[1];
    var Dz_BF = datum_params[2];
    var Rx_BF = datum_params[3];
    var Ry_BF = datum_params[4];
    var Rz_BF = datum_params[5];
    var M_BF = datum_params[6];
    return {
      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,
      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,
      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF
    };
  }
}
function geocentricFromWgs84(p, datum_type, datum_params) {
  if (datum_type === PJD_3PARAM) {
    return {
      x: p.x - datum_params[0],
      y: p.y - datum_params[1],
      z: p.z - datum_params[2]
    };
  } else if (datum_type === PJD_7PARAM) {
    var Dx_BF = datum_params[0];
    var Dy_BF = datum_params[1];
    var Dz_BF = datum_params[2];
    var Rx_BF = datum_params[3];
    var Ry_BF = datum_params[4];
    var Rz_BF = datum_params[5];
    var M_BF = datum_params[6];
    var x_tmp = (p.x - Dx_BF) / M_BF;
    var y_tmp = (p.y - Dy_BF) / M_BF;
    var z_tmp = (p.z - Dz_BF) / M_BF;
    return {
      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,
      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,
      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp
    };
  }
}
var init_datumUtils = __esm({
  "node_modules/proj4/lib/datumUtils.js"() {
    "use strict";
    init_values();
  }
});

// node_modules/proj4/lib/datum_transform.js
function checkParams(type) {
  return type === PJD_3PARAM || type === PJD_7PARAM;
}
function datum_transform_default(source, dest, point3) {
  if (compareDatums(source, dest)) {
    return point3;
  }
  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {
    return point3;
  }
  var source_a = source.a;
  var source_es = source.es;
  if (source.datum_type === PJD_GRIDSHIFT) {
    var gridShiftCode = applyGridShift(source, false, point3);
    if (gridShiftCode !== 0) {
      return void 0;
    }
    source_a = SRS_WGS84_SEMIMAJOR;
    source_es = SRS_WGS84_ESQUARED;
  }
  var dest_a = dest.a;
  var dest_b = dest.b;
  var dest_es = dest.es;
  if (dest.datum_type === PJD_GRIDSHIFT) {
    dest_a = SRS_WGS84_SEMIMAJOR;
    dest_b = SRS_WGS84_SEMIMINOR;
    dest_es = SRS_WGS84_ESQUARED;
  }
  if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) && !checkParams(dest.datum_type)) {
    return point3;
  }
  point3 = geodeticToGeocentric(point3, source_es, source_a);
  if (checkParams(source.datum_type)) {
    point3 = geocentricToWgs84(point3, source.datum_type, source.datum_params);
  }
  if (checkParams(dest.datum_type)) {
    point3 = geocentricFromWgs84(point3, dest.datum_type, dest.datum_params);
  }
  point3 = geocentricToGeodetic(point3, dest_es, dest_a, dest_b);
  if (dest.datum_type === PJD_GRIDSHIFT) {
    var destGridShiftResult = applyGridShift(dest, true, point3);
    if (destGridShiftResult !== 0) {
      return void 0;
    }
  }
  return point3;
}
function applyGridShift(source, inverse33, point3) {
  if (source.grids === null || source.grids.length === 0) {
    console.log("Grid shift grids not found");
    return -1;
  }
  var input = { x: -point3.x, y: point3.y };
  var output = { x: Number.NaN, y: Number.NaN };
  var attemptedGrids = [];
  outer:
    for (var i = 0; i < source.grids.length; i++) {
      var grid = source.grids[i];
      attemptedGrids.push(grid.name);
      if (grid.isNull) {
        output = input;
        break;
      }
      if (grid.grid === null) {
        if (grid.mandatory) {
          console.log("Unable to find mandatory grid '" + grid.name + "'");
          return -1;
        }
        continue;
      }
      var subgrids = grid.grid.subgrids;
      for (var j = 0, jj = subgrids.length; j < jj; j++) {
        var subgrid = subgrids[j];
        var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 1e4;
        var minX = subgrid.ll[0] - epsilon;
        var minY = subgrid.ll[1] - epsilon;
        var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;
        var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;
        if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x) {
          continue;
        }
        output = applySubgridShift(input, inverse33, subgrid);
        if (!isNaN(output.x)) {
          break outer;
        }
      }
    }
  if (isNaN(output.x)) {
    console.log("Failed to find a grid shift table for location '" + -input.x * R2D + " " + input.y * R2D + " tried: '" + attemptedGrids + "'");
    return -1;
  }
  point3.x = -output.x;
  point3.y = output.y;
  return 0;
}
function applySubgridShift(pin, inverse33, ct) {
  var val = { x: Number.NaN, y: Number.NaN };
  if (isNaN(pin.x)) {
    return val;
  }
  var tb = { x: pin.x, y: pin.y };
  tb.x -= ct.ll[0];
  tb.y -= ct.ll[1];
  tb.x = adjust_lon_default(tb.x - Math.PI) + Math.PI;
  var t = nadInterpolate(tb, ct);
  if (inverse33) {
    if (isNaN(t.x)) {
      return val;
    }
    t.x = tb.x - t.x;
    t.y = tb.y - t.y;
    var i = 9, tol = 1e-12;
    var dif, del;
    do {
      del = nadInterpolate(t, ct);
      if (isNaN(del.x)) {
        console.log("Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.");
        break;
      }
      dif = { x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y) };
      t.x += dif.x;
      t.y += dif.y;
    } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);
    if (i < 0) {
      console.log("Inverse grid shift iterator failed to converge.");
      return val;
    }
    val.x = adjust_lon_default(t.x + ct.ll[0]);
    val.y = t.y + ct.ll[1];
  } else {
    if (!isNaN(t.x)) {
      val.x = pin.x + t.x;
      val.y = pin.y + t.y;
    }
  }
  return val;
}
function nadInterpolate(pin, ct) {
  var t = { x: pin.x / ct.del[0], y: pin.y / ct.del[1] };
  var indx = { x: Math.floor(t.x), y: Math.floor(t.y) };
  var frct = { x: t.x - 1 * indx.x, y: t.y - 1 * indx.y };
  var val = { x: Number.NaN, y: Number.NaN };
  var inx;
  if (indx.x < 0 || indx.x >= ct.lim[0]) {
    return val;
  }
  if (indx.y < 0 || indx.y >= ct.lim[1]) {
    return val;
  }
  inx = indx.y * ct.lim[0] + indx.x;
  var f00 = { x: ct.cvs[inx][0], y: ct.cvs[inx][1] };
  inx++;
  var f10 = { x: ct.cvs[inx][0], y: ct.cvs[inx][1] };
  inx += ct.lim[0];
  var f11 = { x: ct.cvs[inx][0], y: ct.cvs[inx][1] };
  inx--;
  var f01 = { x: ct.cvs[inx][0], y: ct.cvs[inx][1] };
  var m11 = frct.x * frct.y, m10 = frct.x * (1 - frct.y), m00 = (1 - frct.x) * (1 - frct.y), m01 = (1 - frct.x) * frct.y;
  val.x = m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x;
  val.y = m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y;
  return val;
}
var init_datum_transform = __esm({
  "node_modules/proj4/lib/datum_transform.js"() {
    init_values();
    init_datumUtils();
    init_adjust_lon();
  }
});

// node_modules/proj4/lib/adjust_axis.js
function adjust_axis_default(crs, denorm, point3) {
  var xin = point3.x, yin = point3.y, zin = point3.z || 0;
  var v, t, i;
  var out = {};
  for (i = 0; i < 3; i++) {
    if (denorm && i === 2 && point3.z === void 0) {
      continue;
    }
    if (i === 0) {
      v = xin;
      if ("ew".indexOf(crs.axis[i]) !== -1) {
        t = "x";
      } else {
        t = "y";
      }
    } else if (i === 1) {
      v = yin;
      if ("ns".indexOf(crs.axis[i]) !== -1) {
        t = "y";
      } else {
        t = "x";
      }
    } else {
      v = zin;
      t = "z";
    }
    switch (crs.axis[i]) {
      case "e":
        out[t] = v;
        break;
      case "w":
        out[t] = -v;
        break;
      case "n":
        out[t] = v;
        break;
      case "s":
        out[t] = -v;
        break;
      case "u":
        if (point3[t] !== void 0) {
          out.z = v;
        }
        break;
      case "d":
        if (point3[t] !== void 0) {
          out.z = -v;
        }
        break;
      default:
        return null;
    }
  }
  return out;
}
var init_adjust_axis = __esm({
  "node_modules/proj4/lib/adjust_axis.js"() {
  }
});

// node_modules/proj4/lib/common/toPoint.js
function toPoint_default(array) {
  var out = {
    x: array[0],
    y: array[1]
  };
  if (array.length > 2) {
    out.z = array[2];
  }
  if (array.length > 3) {
    out.m = array[3];
  }
  return out;
}
var init_toPoint = __esm({
  "node_modules/proj4/lib/common/toPoint.js"() {
  }
});

// node_modules/proj4/lib/checkSanity.js
function checkSanity_default(point3) {
  checkCoord(point3.x);
  checkCoord(point3.y);
}
function checkCoord(num) {
  if (typeof Number.isFinite === "function") {
    if (Number.isFinite(num)) {
      return;
    }
    throw new TypeError("coordinates must be finite numbers");
  }
  if (typeof num !== "number" || num !== num || !isFinite(num)) {
    throw new TypeError("coordinates must be finite numbers");
  }
}
var init_checkSanity = __esm({
  "node_modules/proj4/lib/checkSanity.js"() {
  }
});

// node_modules/proj4/lib/transform.js
function checkNotWGS(source, dest) {
  return (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM || source.datum.datum_type === PJD_GRIDSHIFT) && dest.datumCode !== "WGS84" || (dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM || dest.datum.datum_type === PJD_GRIDSHIFT) && source.datumCode !== "WGS84";
}
function transform(source, dest, point3, enforceAxis) {
  var wgs842;
  if (Array.isArray(point3)) {
    point3 = toPoint_default(point3);
  } else {
    point3 = {
      x: point3.x,
      y: point3.y,
      z: point3.z,
      m: point3.m
    };
  }
  var hasZ = point3.z !== void 0;
  checkSanity_default(point3);
  if (source.datum && dest.datum && checkNotWGS(source, dest)) {
    wgs842 = new Proj_default("WGS84");
    point3 = transform(source, wgs842, point3, enforceAxis);
    source = wgs842;
  }
  if (enforceAxis && source.axis !== "enu") {
    point3 = adjust_axis_default(source, false, point3);
  }
  if (source.projName === "longlat") {
    point3 = {
      x: point3.x * D2R,
      y: point3.y * D2R,
      z: point3.z || 0
    };
  } else {
    if (source.to_meter) {
      point3 = {
        x: point3.x * source.to_meter,
        y: point3.y * source.to_meter,
        z: point3.z || 0
      };
    }
    point3 = source.inverse(point3);
    if (!point3) {
      return;
    }
  }
  if (source.from_greenwich) {
    point3.x += source.from_greenwich;
  }
  point3 = datum_transform_default(source.datum, dest.datum, point3);
  if (!point3) {
    return;
  }
  point3 = /** @type {import('./core').InterfaceCoordinates} */
  point3;
  if (dest.from_greenwich) {
    point3 = {
      x: point3.x - dest.from_greenwich,
      y: point3.y,
      z: point3.z || 0
    };
  }
  if (dest.projName === "longlat") {
    point3 = {
      x: point3.x * R2D,
      y: point3.y * R2D,
      z: point3.z || 0
    };
  } else {
    point3 = dest.forward(point3);
    if (dest.to_meter) {
      point3 = {
        x: point3.x / dest.to_meter,
        y: point3.y / dest.to_meter,
        z: point3.z || 0
      };
    }
  }
  if (enforceAxis && dest.axis !== "enu") {
    return adjust_axis_default(dest, true, point3);
  }
  if (point3 && !hasZ) {
    delete point3.z;
  }
  return point3;
}
var init_transform = __esm({
  "node_modules/proj4/lib/transform.js"() {
    init_values();
    init_datum_transform();
    init_adjust_axis();
    init_Proj();
    init_toPoint();
    init_checkSanity();
  }
});

// node_modules/proj4/lib/core.js
function transformer(from, to, coords, enforceAxis) {
  var transformedArray, out, keys;
  if (Array.isArray(coords)) {
    transformedArray = transform(from, to, coords, enforceAxis) || { x: NaN, y: NaN };
    if (coords.length > 2) {
      if (typeof from.name !== "undefined" && from.name === "geocent" || typeof to.name !== "undefined" && to.name === "geocent") {
        if (typeof transformedArray.z === "number") {
          return (
            /** @type {T} */
            [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.slice(3))
          );
        } else {
          return (
            /** @type {T} */
            [transformedArray.x, transformedArray.y, coords[2]].concat(coords.slice(3))
          );
        }
      } else {
        return (
          /** @type {T} */
          [transformedArray.x, transformedArray.y].concat(coords.slice(2))
        );
      }
    } else {
      return (
        /** @type {T} */
        [transformedArray.x, transformedArray.y]
      );
    }
  } else {
    out = transform(from, to, coords, enforceAxis);
    keys = Object.keys(coords);
    if (keys.length === 2) {
      return (
        /** @type {T} */
        out
      );
    }
    keys.forEach(function(key) {
      if (typeof from.name !== "undefined" && from.name === "geocent" || typeof to.name !== "undefined" && to.name === "geocent") {
        if (key === "x" || key === "y" || key === "z") {
          return;
        }
      } else {
        if (key === "x" || key === "y") {
          return;
        }
      }
      out[key] = coords[key];
    });
    return (
      /** @type {T} */
      out
    );
  }
}
function checkProj(item) {
  if (item instanceof Proj_default) {
    return item;
  }
  if (typeof item === "object" && "oProj" in item) {
    return item.oProj;
  }
  return Proj_default(
    /** @type {string | PROJJSONDefinition} */
    item
  );
}
function proj4(fromProjOrToProj, toProjOrCoord, coord) {
  var fromProj;
  var toProj;
  var single = false;
  var obj2;
  if (typeof toProjOrCoord === "undefined") {
    toProj = checkProj(fromProjOrToProj);
    fromProj = wgs84;
    single = true;
  } else if (typeof /** @type {?} */
  toProjOrCoord.x !== "undefined" || Array.isArray(toProjOrCoord)) {
    coord = /** @type {T} */
    /** @type {?} */
    toProjOrCoord;
    toProj = checkProj(fromProjOrToProj);
    fromProj = wgs84;
    single = true;
  }
  if (!fromProj) {
    fromProj = checkProj(fromProjOrToProj);
  }
  if (!toProj) {
    toProj = checkProj(
      /** @type {string | PROJJSONDefinition | proj } */
      toProjOrCoord
    );
  }
  if (coord) {
    return transformer(fromProj, toProj, coord);
  } else {
    obj2 = {
      /**
       * @template {TemplateCoordinates} T
       * @param {T} coords
       * @param {boolean=} enforceAxis
       * @returns {T}
       */
      forward: function(coords, enforceAxis) {
        return transformer(fromProj, toProj, coords, enforceAxis);
      },
      /**
       * @template {TemplateCoordinates} T
       * @param {T} coords
       * @param {boolean=} enforceAxis
       * @returns {T}
       */
      inverse: function(coords, enforceAxis) {
        return transformer(toProj, fromProj, coords, enforceAxis);
      }
    };
    if (single) {
      obj2.oProj = toProj;
    }
    return obj2;
  }
}
var wgs84, core_default;
var init_core = __esm({
  "node_modules/proj4/lib/core.js"() {
    init_Proj();
    init_transform();
    wgs84 = Proj_default("WGS84");
    core_default = proj4;
  }
});

// node_modules/mgrs/mgrs.js
function forward2(ll, accuracy) {
  accuracy = accuracy || 5;
  return encode(LLtoUTM({
    lat: ll[1],
    lon: ll[0]
  }), accuracy);
}
function inverse2(mgrs) {
  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));
  if (bbox.lat && bbox.lon) {
    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];
  }
  return [bbox.left, bbox.bottom, bbox.right, bbox.top];
}
function toPoint(mgrs) {
  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));
  if (bbox.lat && bbox.lon) {
    return [bbox.lon, bbox.lat];
  }
  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];
}
function degToRad(deg) {
  return deg * (Math.PI / 180);
}
function radToDeg(rad) {
  return 180 * (rad / Math.PI);
}
function LLtoUTM(ll) {
  var Lat = ll.lat;
  var Long = ll.lon;
  var a = 6378137;
  var eccSquared = 669438e-8;
  var k0 = 0.9996;
  var LongOrigin;
  var eccPrimeSquared;
  var N, T, C, A5, M2;
  var LatRad = degToRad(Lat);
  var LongRad = degToRad(Long);
  var LongOriginRad;
  var ZoneNumber;
  ZoneNumber = Math.floor((Long + 180) / 6) + 1;
  if (Long === 180) {
    ZoneNumber = 60;
  }
  if (Lat >= 56 && Lat < 64 && Long >= 3 && Long < 12) {
    ZoneNumber = 32;
  }
  if (Lat >= 72 && Lat < 84) {
    if (Long >= 0 && Long < 9) {
      ZoneNumber = 31;
    } else if (Long >= 9 && Long < 21) {
      ZoneNumber = 33;
    } else if (Long >= 21 && Long < 33) {
      ZoneNumber = 35;
    } else if (Long >= 33 && Long < 42) {
      ZoneNumber = 37;
    }
  }
  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3;
  LongOriginRad = degToRad(LongOrigin);
  eccPrimeSquared = eccSquared / (1 - eccSquared);
  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));
  T = Math.tan(LatRad) * Math.tan(LatRad);
  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);
  A5 = Math.cos(LatRad) * (LongRad - LongOriginRad);
  M2 = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - 35 * eccSquared * eccSquared * eccSquared / 3072 * Math.sin(6 * LatRad));
  var UTMEasting = k0 * N * (A5 + (1 - T + C) * A5 * A5 * A5 / 6 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A5 * A5 * A5 * A5 * A5 / 120) + 5e5;
  var UTMNorthing = k0 * (M2 + N * Math.tan(LatRad) * (A5 * A5 / 2 + (5 - T + 9 * C + 4 * C * C) * A5 * A5 * A5 * A5 / 24 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A5 * A5 * A5 * A5 * A5 * A5 / 720));
  if (Lat < 0) {
    UTMNorthing += 1e7;
  }
  return {
    northing: Math.round(UTMNorthing),
    easting: Math.round(UTMEasting),
    zoneNumber: ZoneNumber,
    zoneLetter: getLetterDesignator(Lat)
  };
}
function UTMtoLL(utm) {
  var UTMNorthing = utm.northing;
  var UTMEasting = utm.easting;
  var zoneLetter = utm.zoneLetter;
  var zoneNumber = utm.zoneNumber;
  if (zoneNumber < 0 || zoneNumber > 60) {
    return null;
  }
  var k0 = 0.9996;
  var a = 6378137;
  var eccSquared = 669438e-8;
  var eccPrimeSquared;
  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));
  var N1, T1, C12, R1, D, M2;
  var LongOrigin;
  var mu, phi1Rad;
  var x = UTMEasting - 5e5;
  var y = UTMNorthing;
  if (zoneLetter < "N") {
    y -= 1e7;
  }
  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3;
  eccPrimeSquared = eccSquared / (1 - eccSquared);
  M2 = y / k0;
  mu = M2 / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));
  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + 151 * e1 * e1 * e1 / 96 * Math.sin(6 * mu);
  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));
  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);
  C12 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);
  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);
  D = x / (N1 * k0);
  var lat = phi1Rad - N1 * Math.tan(phi1Rad) / R1 * (D * D / 2 - (5 + 3 * T1 + 10 * C12 - 4 * C12 * C12 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C12 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C12 * C12) * D * D * D * D * D * D / 720);
  lat = radToDeg(lat);
  var lon = (D - (1 + 2 * T1 + C12) * D * D * D / 6 + (5 - 2 * C12 + 28 * T1 - 3 * C12 * C12 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);
  lon = LongOrigin + radToDeg(lon);
  var result2;
  if (utm.accuracy) {
    var topRight = UTMtoLL({
      northing: utm.northing + utm.accuracy,
      easting: utm.easting + utm.accuracy,
      zoneLetter: utm.zoneLetter,
      zoneNumber: utm.zoneNumber
    });
    result2 = {
      top: topRight.lat,
      right: topRight.lon,
      bottom: lat,
      left: lon
    };
  } else {
    result2 = {
      lat,
      lon
    };
  }
  return result2;
}
function getLetterDesignator(lat) {
  var LetterDesignator = "Z";
  if (84 >= lat && lat >= 72) {
    LetterDesignator = "X";
  } else if (72 > lat && lat >= 64) {
    LetterDesignator = "W";
  } else if (64 > lat && lat >= 56) {
    LetterDesignator = "V";
  } else if (56 > lat && lat >= 48) {
    LetterDesignator = "U";
  } else if (48 > lat && lat >= 40) {
    LetterDesignator = "T";
  } else if (40 > lat && lat >= 32) {
    LetterDesignator = "S";
  } else if (32 > lat && lat >= 24) {
    LetterDesignator = "R";
  } else if (24 > lat && lat >= 16) {
    LetterDesignator = "Q";
  } else if (16 > lat && lat >= 8) {
    LetterDesignator = "P";
  } else if (8 > lat && lat >= 0) {
    LetterDesignator = "N";
  } else if (0 > lat && lat >= -8) {
    LetterDesignator = "M";
  } else if (-8 > lat && lat >= -16) {
    LetterDesignator = "L";
  } else if (-16 > lat && lat >= -24) {
    LetterDesignator = "K";
  } else if (-24 > lat && lat >= -32) {
    LetterDesignator = "J";
  } else if (-32 > lat && lat >= -40) {
    LetterDesignator = "H";
  } else if (-40 > lat && lat >= -48) {
    LetterDesignator = "G";
  } else if (-48 > lat && lat >= -56) {
    LetterDesignator = "F";
  } else if (-56 > lat && lat >= -64) {
    LetterDesignator = "E";
  } else if (-64 > lat && lat >= -72) {
    LetterDesignator = "D";
  } else if (-72 > lat && lat >= -80) {
    LetterDesignator = "C";
  }
  return LetterDesignator;
}
function encode(utm, accuracy) {
  var seasting = "00000" + utm.easting, snorthing = "00000" + utm.northing;
  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);
}
function get100kID(easting, northing, zoneNumber) {
  var setParm = get100kSetForZone(zoneNumber);
  var setColumn = Math.floor(easting / 1e5);
  var setRow = Math.floor(northing / 1e5) % 20;
  return getLetter100kID(setColumn, setRow, setParm);
}
function get100kSetForZone(i) {
  var setParm = i % NUM_100K_SETS;
  if (setParm === 0) {
    setParm = NUM_100K_SETS;
  }
  return setParm;
}
function getLetter100kID(column, row, parm) {
  var index = parm - 1;
  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);
  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);
  var colInt = colOrigin + column - 1;
  var rowInt = rowOrigin + row;
  var rollover = false;
  if (colInt > Z) {
    colInt = colInt - Z + A - 1;
    rollover = true;
  }
  if (colInt === I || colOrigin < I && colInt > I || (colInt > I || colOrigin < I) && rollover) {
    colInt++;
  }
  if (colInt === O || colOrigin < O && colInt > O || (colInt > O || colOrigin < O) && rollover) {
    colInt++;
    if (colInt === I) {
      colInt++;
    }
  }
  if (colInt > Z) {
    colInt = colInt - Z + A - 1;
  }
  if (rowInt > V) {
    rowInt = rowInt - V + A - 1;
    rollover = true;
  } else {
    rollover = false;
  }
  if (rowInt === I || rowOrigin < I && rowInt > I || (rowInt > I || rowOrigin < I) && rollover) {
    rowInt++;
  }
  if (rowInt === O || rowOrigin < O && rowInt > O || (rowInt > O || rowOrigin < O) && rollover) {
    rowInt++;
    if (rowInt === I) {
      rowInt++;
    }
  }
  if (rowInt > V) {
    rowInt = rowInt - V + A - 1;
  }
  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);
  return twoLetter;
}
function decode(mgrsString) {
  if (mgrsString && mgrsString.length === 0) {
    throw "MGRSPoint coverting from nothing";
  }
  var length = mgrsString.length;
  var hunK = null;
  var sb = "";
  var testChar;
  var i = 0;
  while (!/[A-Z]/.test(testChar = mgrsString.charAt(i))) {
    if (i >= 2) {
      throw "MGRSPoint bad conversion from: " + mgrsString;
    }
    sb += testChar;
    i++;
  }
  var zoneNumber = parseInt(sb, 10);
  if (i === 0 || i + 3 > length) {
    throw "MGRSPoint bad conversion from: " + mgrsString;
  }
  var zoneLetter = mgrsString.charAt(i++);
  if (zoneLetter <= "A" || zoneLetter === "B" || zoneLetter === "Y" || zoneLetter >= "Z" || zoneLetter === "I" || zoneLetter === "O") {
    throw "MGRSPoint zone letter " + zoneLetter + " not handled: " + mgrsString;
  }
  hunK = mgrsString.substring(i, i += 2);
  var set = get100kSetForZone(zoneNumber);
  var east100k = getEastingFromChar(hunK.charAt(0), set);
  var north100k = getNorthingFromChar(hunK.charAt(1), set);
  while (north100k < getMinNorthing(zoneLetter)) {
    north100k += 2e6;
  }
  var remainder = length - i;
  if (remainder % 2 !== 0) {
    throw "MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters" + mgrsString;
  }
  var sep = remainder / 2;
  var sepEasting = 0;
  var sepNorthing = 0;
  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;
  if (sep > 0) {
    accuracyBonus = 1e5 / Math.pow(10, sep);
    sepEastingString = mgrsString.substring(i, i + sep);
    sepEasting = parseFloat(sepEastingString) * accuracyBonus;
    sepNorthingString = mgrsString.substring(i + sep);
    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;
  }
  easting = sepEasting + east100k;
  northing = sepNorthing + north100k;
  return {
    easting,
    northing,
    zoneLetter,
    zoneNumber,
    accuracy: accuracyBonus
  };
}
function getEastingFromChar(e, set) {
  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);
  var eastingValue = 1e5;
  var rewindMarker = false;
  while (curCol !== e.charCodeAt(0)) {
    curCol++;
    if (curCol === I) {
      curCol++;
    }
    if (curCol === O) {
      curCol++;
    }
    if (curCol > Z) {
      if (rewindMarker) {
        throw "Bad character: " + e;
      }
      curCol = A;
      rewindMarker = true;
    }
    eastingValue += 1e5;
  }
  return eastingValue;
}
function getNorthingFromChar(n, set) {
  if (n > "V") {
    throw "MGRSPoint given invalid Northing " + n;
  }
  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);
  var northingValue = 0;
  var rewindMarker = false;
  while (curRow !== n.charCodeAt(0)) {
    curRow++;
    if (curRow === I) {
      curRow++;
    }
    if (curRow === O) {
      curRow++;
    }
    if (curRow > V) {
      if (rewindMarker) {
        throw "Bad character: " + n;
      }
      curRow = A;
      rewindMarker = true;
    }
    northingValue += 1e5;
  }
  return northingValue;
}
function getMinNorthing(zoneLetter) {
  var northing;
  switch (zoneLetter) {
    case "C":
      northing = 11e5;
      break;
    case "D":
      northing = 2e6;
      break;
    case "E":
      northing = 28e5;
      break;
    case "F":
      northing = 37e5;
      break;
    case "G":
      northing = 46e5;
      break;
    case "H":
      northing = 55e5;
      break;
    case "J":
      northing = 64e5;
      break;
    case "K":
      northing = 73e5;
      break;
    case "L":
      northing = 82e5;
      break;
    case "M":
      northing = 91e5;
      break;
    case "N":
      northing = 0;
      break;
    case "P":
      northing = 8e5;
      break;
    case "Q":
      northing = 17e5;
      break;
    case "R":
      northing = 26e5;
      break;
    case "S":
      northing = 35e5;
      break;
    case "T":
      northing = 44e5;
      break;
    case "U":
      northing = 53e5;
      break;
    case "V":
      northing = 62e5;
      break;
    case "W":
      northing = 7e6;
      break;
    case "X":
      northing = 79e5;
      break;
    default:
      northing = -1;
  }
  if (northing >= 0) {
    return northing;
  } else {
    throw "Invalid zone letter: " + zoneLetter;
  }
}
var NUM_100K_SETS, SET_ORIGIN_COLUMN_LETTERS, SET_ORIGIN_ROW_LETTERS, A, I, O, V, Z, mgrs_default;
var init_mgrs = __esm({
  "node_modules/mgrs/mgrs.js"() {
    NUM_100K_SETS = 6;
    SET_ORIGIN_COLUMN_LETTERS = "AJSAJS";
    SET_ORIGIN_ROW_LETTERS = "AFAFAF";
    A = 65;
    I = 73;
    O = 79;
    V = 86;
    Z = 90;
    mgrs_default = {
      forward: forward2,
      inverse: inverse2,
      toPoint
    };
  }
});

// node_modules/proj4/lib/Point.js
function Point(x, y, z) {
  if (!(this instanceof Point)) {
    return new Point(x, y, z);
  }
  if (Array.isArray(x)) {
    this.x = x[0];
    this.y = x[1];
    this.z = x[2] || 0;
  } else if (typeof x === "object") {
    this.x = x.x;
    this.y = x.y;
    this.z = x.z || 0;
  } else if (typeof x === "string" && typeof y === "undefined") {
    var coords = x.split(",");
    this.x = parseFloat(coords[0]);
    this.y = parseFloat(coords[1]);
    this.z = parseFloat(coords[2]) || 0;
  } else {
    this.x = x;
    this.y = y;
    this.z = z || 0;
  }
  console.warn("proj4.Point will be removed in version 3, use proj4.toPoint");
}
var Point_default;
var init_Point = __esm({
  "node_modules/proj4/lib/Point.js"() {
    init_mgrs();
    Point.fromMGRS = function(mgrsStr) {
      return new Point(toPoint(mgrsStr));
    };
    Point.prototype.toMGRS = function(accuracy) {
      return forward2([this.x, this.y], accuracy);
    };
    Point_default = Point;
  }
});

// node_modules/proj4/lib/common/pj_enfn.js
function pj_enfn_default(es) {
  var en = [];
  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));
  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));
  var t = es * es;
  en[2] = t * (C44 - es * (C46 + es * C48));
  t *= es;
  en[3] = t * (C66 - es * C68);
  en[4] = t * es * C88;
  return en;
}
var C00, C02, C04, C06, C08, C22, C44, C46, C48, C66, C68, C88;
var init_pj_enfn = __esm({
  "node_modules/proj4/lib/common/pj_enfn.js"() {
    C00 = 1;
    C02 = 0.25;
    C04 = 0.046875;
    C06 = 0.01953125;
    C08 = 0.01068115234375;
    C22 = 0.75;
    C44 = 0.46875;
    C46 = 0.013020833333333334;
    C48 = 0.007120768229166667;
    C66 = 0.3645833333333333;
    C68 = 0.005696614583333333;
    C88 = 0.3076171875;
  }
});

// node_modules/proj4/lib/common/pj_mlfn.js
function pj_mlfn_default(phi, sphi, cphi, en) {
  cphi *= sphi;
  sphi *= sphi;
  return en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4])));
}
var init_pj_mlfn = __esm({
  "node_modules/proj4/lib/common/pj_mlfn.js"() {
  }
});

// node_modules/proj4/lib/common/pj_inv_mlfn.js
function pj_inv_mlfn_default(arg, es, en) {
  var k = 1 / (1 - es);
  var phi = arg;
  for (var i = MAX_ITER; i; --i) {
    var s = Math.sin(phi);
    var t = 1 - es * s * s;
    t = (pj_mlfn_default(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;
    phi -= t;
    if (Math.abs(t) < EPSLN) {
      return phi;
    }
  }
  return phi;
}
var MAX_ITER;
var init_pj_inv_mlfn = __esm({
  "node_modules/proj4/lib/common/pj_inv_mlfn.js"() {
    init_pj_mlfn();
    init_values();
    MAX_ITER = 20;
  }
});

// node_modules/proj4/lib/projections/tmerc.js
function init3() {
  this.x0 = this.x0 !== void 0 ? this.x0 : 0;
  this.y0 = this.y0 !== void 0 ? this.y0 : 0;
  this.long0 = this.long0 !== void 0 ? this.long0 : 0;
  this.lat0 = this.lat0 !== void 0 ? this.lat0 : 0;
  if (this.es) {
    this.en = pj_enfn_default(this.es);
    this.ml0 = pj_mlfn_default(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);
  }
}
function forward3(p) {
  var lon = p.x;
  var lat = p.y;
  var delta_lon = adjust_lon_default(lon - this.long0);
  var con;
  var x, y;
  var sin_phi = Math.sin(lat);
  var cos_phi = Math.cos(lat);
  if (!this.es) {
    var b = cos_phi * Math.sin(delta_lon);
    if (Math.abs(Math.abs(b) - 1) < EPSLN) {
      return 93;
    } else {
      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;
      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));
      b = Math.abs(y);
      if (b >= 1) {
        if (b - 1 > EPSLN) {
          return 93;
        } else {
          y = 0;
        }
      } else {
        y = Math.acos(y);
      }
      if (lat < 0) {
        y = -y;
      }
      y = this.a * this.k0 * (y - this.lat0) + this.y0;
    }
  } else {
    var al = cos_phi * delta_lon;
    var als = Math.pow(al, 2);
    var c = this.ep2 * Math.pow(cos_phi, 2);
    var cs = Math.pow(c, 2);
    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;
    var t = Math.pow(tq, 2);
    var ts = Math.pow(t, 2);
    con = 1 - this.es * Math.pow(sin_phi, 2);
    al = al / Math.sqrt(con);
    var ml = pj_mlfn_default(lat, sin_phi, cos_phi, this.en);
    x = this.a * (this.k0 * al * (1 + als / 6 * (1 - t + c + als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c + als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) + this.x0;
    y = this.a * (this.k0 * (ml - this.ml0 + sin_phi * delta_lon * al / 2 * (1 + als / 12 * (5 - t + 9 * c + 4 * cs + als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c + als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) + this.y0;
  }
  p.x = x;
  p.y = y;
  return p;
}
function inverse3(p) {
  var con, phi;
  var lat, lon;
  var x = (p.x - this.x0) * (1 / this.a);
  var y = (p.y - this.y0) * (1 / this.a);
  if (!this.es) {
    var f = Math.exp(x / this.k0);
    var g = 0.5 * (f - 1 / f);
    var temp = this.lat0 + y / this.k0;
    var h = Math.cos(temp);
    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));
    lat = Math.asin(con);
    if (y < 0) {
      lat = -lat;
    }
    if (g === 0 && h === 0) {
      lon = 0;
    } else {
      lon = adjust_lon_default(Math.atan2(g, h) + this.long0);
    }
  } else {
    con = this.ml0 + y / this.k0;
    phi = pj_inv_mlfn_default(con, this.es, this.en);
    if (Math.abs(phi) < HALF_PI) {
      var sin_phi = Math.sin(phi);
      var cos_phi = Math.cos(phi);
      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;
      var c = this.ep2 * Math.pow(cos_phi, 2);
      var cs = Math.pow(c, 2);
      var t = Math.pow(tan_phi, 2);
      var ts = Math.pow(t, 2);
      con = 1 - this.es * Math.pow(sin_phi, 2);
      var d = x * Math.sqrt(con) / this.k0;
      var ds = Math.pow(d, 2);
      con = con * tan_phi;
      lat = phi - con * ds / (1 - this.es) * 0.5 * (1 - ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs - ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c - ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));
      lon = adjust_lon_default(this.long0 + d * (1 - ds / 6 * (1 + 2 * t + c - ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c - ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi);
    } else {
      lat = HALF_PI * sign_default(y);
      lon = 0;
    }
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var names4, tmerc_default;
var init_tmerc = __esm({
  "node_modules/proj4/lib/projections/tmerc.js"() {
    init_pj_enfn();
    init_pj_mlfn();
    init_pj_inv_mlfn();
    init_adjust_lon();
    init_values();
    init_sign();
    names4 = ["Fast_Transverse_Mercator", "Fast Transverse Mercator"];
    tmerc_default = {
      init: init3,
      forward: forward3,
      inverse: inverse3,
      names: names4
    };
  }
});

// node_modules/proj4/lib/common/sinh.js
function sinh_default(x) {
  var r = Math.exp(x);
  r = (r - 1 / r) / 2;
  return r;
}
var init_sinh = __esm({
  "node_modules/proj4/lib/common/sinh.js"() {
  }
});

// node_modules/proj4/lib/common/hypot.js
function hypot_default(x, y) {
  x = Math.abs(x);
  y = Math.abs(y);
  var a = Math.max(x, y);
  var b = Math.min(x, y) / (a ? a : 1);
  return a * Math.sqrt(1 + Math.pow(b, 2));
}
var init_hypot = __esm({
  "node_modules/proj4/lib/common/hypot.js"() {
  }
});

// node_modules/proj4/lib/common/log1py.js
function log1py_default(x) {
  var y = 1 + x;
  var z = y - 1;
  return z === 0 ? x : x * Math.log(y) / z;
}
var init_log1py = __esm({
  "node_modules/proj4/lib/common/log1py.js"() {
  }
});

// node_modules/proj4/lib/common/asinhy.js
function asinhy_default(x) {
  var y = Math.abs(x);
  y = log1py_default(y * (1 + y / (hypot_default(1, y) + 1)));
  return x < 0 ? -y : y;
}
var init_asinhy = __esm({
  "node_modules/proj4/lib/common/asinhy.js"() {
    init_hypot();
    init_log1py();
  }
});

// node_modules/proj4/lib/common/gatg.js
function gatg_default(pp, B) {
  var cos_2B = 2 * Math.cos(2 * B);
  var i = pp.length - 1;
  var h1 = pp[i];
  var h2 = 0;
  var h;
  while (--i >= 0) {
    h = -h2 + cos_2B * h1 + pp[i];
    h2 = h1;
    h1 = h;
  }
  return B + h * Math.sin(2 * B);
}
var init_gatg = __esm({
  "node_modules/proj4/lib/common/gatg.js"() {
  }
});

// node_modules/proj4/lib/common/clens.js
function clens_default(pp, arg_r) {
  var r = 2 * Math.cos(arg_r);
  var i = pp.length - 1;
  var hr1 = pp[i];
  var hr2 = 0;
  var hr;
  while (--i >= 0) {
    hr = -hr2 + r * hr1 + pp[i];
    hr2 = hr1;
    hr1 = hr;
  }
  return Math.sin(arg_r) * hr;
}
var init_clens = __esm({
  "node_modules/proj4/lib/common/clens.js"() {
  }
});

// node_modules/proj4/lib/common/cosh.js
function cosh_default(x) {
  var r = Math.exp(x);
  r = (r + 1 / r) / 2;
  return r;
}
var init_cosh = __esm({
  "node_modules/proj4/lib/common/cosh.js"() {
  }
});

// node_modules/proj4/lib/common/clens_cmplx.js
function clens_cmplx_default(pp, arg_r, arg_i) {
  var sin_arg_r = Math.sin(arg_r);
  var cos_arg_r = Math.cos(arg_r);
  var sinh_arg_i = sinh_default(arg_i);
  var cosh_arg_i = cosh_default(arg_i);
  var r = 2 * cos_arg_r * cosh_arg_i;
  var i = -2 * sin_arg_r * sinh_arg_i;
  var j = pp.length - 1;
  var hr = pp[j];
  var hi1 = 0;
  var hr1 = 0;
  var hi = 0;
  var hr2;
  var hi2;
  while (--j >= 0) {
    hr2 = hr1;
    hi2 = hi1;
    hr1 = hr;
    hi1 = hi;
    hr = -hr2 + r * hr1 - i * hi1 + pp[j];
    hi = -hi2 + i * hr1 + r * hi1;
  }
  r = sin_arg_r * cosh_arg_i;
  i = cos_arg_r * sinh_arg_i;
  return [r * hr - i * hi, r * hi + i * hr];
}
var init_clens_cmplx = __esm({
  "node_modules/proj4/lib/common/clens_cmplx.js"() {
    init_sinh();
    init_cosh();
  }
});

// node_modules/proj4/lib/projections/etmerc.js
function init4() {
  if (!this.approx && (isNaN(this.es) || this.es <= 0)) {
    throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION["Fast_Transverse_Mercator"] in the WKT.');
  }
  if (this.approx) {
    tmerc_default.init.apply(this);
    this.forward = tmerc_default.forward;
    this.inverse = tmerc_default.inverse;
  }
  this.x0 = this.x0 !== void 0 ? this.x0 : 0;
  this.y0 = this.y0 !== void 0 ? this.y0 : 0;
  this.long0 = this.long0 !== void 0 ? this.long0 : 0;
  this.lat0 = this.lat0 !== void 0 ? this.lat0 : 0;
  this.cgb = [];
  this.cbg = [];
  this.utg = [];
  this.gtu = [];
  var f = this.es / (1 + Math.sqrt(1 - this.es));
  var n = f / (2 - f);
  var np = n;
  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675))))));
  this.cbg[0] = n * (-2 + n * (2 / 3 + n * (4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));
  np = np * n;
  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));
  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * (-13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));
  np = np * n;
  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));
  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));
  np = np * n;
  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));
  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * (-24832 / 14175)));
  np = np * n;
  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));
  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));
  np = np * n;
  this.cgb[5] = np * (601676 / 22275);
  this.cbg[5] = np * (444337 / 155925);
  np = Math.pow(n, 2);
  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));
  this.utg[0] = n * (-0.5 + n * (2 / 3 + n * (-37 / 96 + n * (1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));
  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));
  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));
  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));
  np = np * n;
  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720))));
  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));
  np = np * n;
  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));
  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));
  np = np * n;
  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));
  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));
  np = np * n;
  this.utg[5] = np * (-20648693 / 638668800);
  this.gtu[5] = np * (212378941 / 319334400);
  var Z2 = gatg_default(this.cbg, this.lat0);
  this.Zb = -this.Qn * (Z2 + clens_default(this.gtu, 2 * Z2));
}
function forward4(p) {
  var Ce = adjust_lon_default(p.x - this.long0);
  var Cn = p.y;
  Cn = gatg_default(this.cbg, Cn);
  var sin_Cn = Math.sin(Cn);
  var cos_Cn = Math.cos(Cn);
  var sin_Ce = Math.sin(Ce);
  var cos_Ce = Math.cos(Ce);
  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);
  Ce = Math.atan2(sin_Ce * cos_Cn, hypot_default(sin_Cn, cos_Cn * cos_Ce));
  Ce = asinhy_default(Math.tan(Ce));
  var tmp = clens_cmplx_default(this.gtu, 2 * Cn, 2 * Ce);
  Cn = Cn + tmp[0];
  Ce = Ce + tmp[1];
  var x;
  var y;
  if (Math.abs(Ce) <= 2.623395162778) {
    x = this.a * (this.Qn * Ce) + this.x0;
    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;
  } else {
    x = Infinity;
    y = Infinity;
  }
  p.x = x;
  p.y = y;
  return p;
}
function inverse4(p) {
  var Ce = (p.x - this.x0) * (1 / this.a);
  var Cn = (p.y - this.y0) * (1 / this.a);
  Cn = (Cn - this.Zb) / this.Qn;
  Ce = Ce / this.Qn;
  var lon;
  var lat;
  if (Math.abs(Ce) <= 2.623395162778) {
    var tmp = clens_cmplx_default(this.utg, 2 * Cn, 2 * Ce);
    Cn = Cn + tmp[0];
    Ce = Ce + tmp[1];
    Ce = Math.atan(sinh_default(Ce));
    var sin_Cn = Math.sin(Cn);
    var cos_Cn = Math.cos(Cn);
    var sin_Ce = Math.sin(Ce);
    var cos_Ce = Math.cos(Ce);
    Cn = Math.atan2(sin_Cn * cos_Ce, hypot_default(sin_Ce, cos_Ce * cos_Cn));
    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);
    lon = adjust_lon_default(Ce + this.long0);
    lat = gatg_default(this.cgb, Cn);
  } else {
    lon = Infinity;
    lat = Infinity;
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var names5, etmerc_default;
var init_etmerc = __esm({
  "node_modules/proj4/lib/projections/etmerc.js"() {
    init_tmerc();
    init_sinh();
    init_hypot();
    init_asinhy();
    init_gatg();
    init_clens();
    init_clens_cmplx();
    init_adjust_lon();
    names5 = ["Extended_Transverse_Mercator", "Extended Transverse Mercator", "etmerc", "Transverse_Mercator", "Transverse Mercator", "Gauss Kruger", "Gauss_Kruger", "tmerc"];
    etmerc_default = {
      init: init4,
      forward: forward4,
      inverse: inverse4,
      names: names5
    };
  }
});

// node_modules/proj4/lib/common/adjust_zone.js
function adjust_zone_default(zone, lon) {
  if (zone === void 0) {
    zone = Math.floor((adjust_lon_default(lon) + Math.PI) * 30 / Math.PI) + 1;
    if (zone < 0) {
      return 0;
    } else if (zone > 60) {
      return 60;
    }
  }
  return zone;
}
var init_adjust_zone = __esm({
  "node_modules/proj4/lib/common/adjust_zone.js"() {
    init_adjust_lon();
  }
});

// node_modules/proj4/lib/projections/utm.js
function init5() {
  var zone = adjust_zone_default(this.zone, this.long0);
  if (zone === void 0) {
    throw new Error("unknown utm zone");
  }
  this.lat0 = 0;
  this.long0 = (6 * Math.abs(zone) - 183) * D2R;
  this.x0 = 5e5;
  this.y0 = this.utmSouth ? 1e7 : 0;
  this.k0 = 0.9996;
  etmerc_default.init.apply(this);
  this.forward = etmerc_default.forward;
  this.inverse = etmerc_default.inverse;
}
var dependsOn, names6, utm_default;
var init_utm = __esm({
  "node_modules/proj4/lib/projections/utm.js"() {
    init_adjust_zone();
    init_etmerc();
    init_values();
    dependsOn = "etmerc";
    names6 = ["Universal Transverse Mercator System", "utm"];
    utm_default = {
      init: init5,
      names: names6,
      dependsOn
    };
  }
});

// node_modules/proj4/lib/common/srat.js
function srat_default(esinp, exp) {
  return Math.pow((1 - esinp) / (1 + esinp), exp);
}
var init_srat = __esm({
  "node_modules/proj4/lib/common/srat.js"() {
  }
});

// node_modules/proj4/lib/projections/gauss.js
function init6() {
  var sphi = Math.sin(this.lat0);
  var cphi = Math.cos(this.lat0);
  cphi *= cphi;
  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);
  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));
  this.phic0 = Math.asin(sphi / this.C);
  this.ratexp = 0.5 * this.C * this.e;
  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat_default(this.e * sphi, this.ratexp));
}
function forward5(p) {
  var lon = p.x;
  var lat = p.y;
  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat_default(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;
  p.x = this.C * lon;
  return p;
}
function inverse5(p) {
  var DEL_TOL = 1e-14;
  var lon = p.x / this.C;
  var lat = p.y;
  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);
  for (var i = MAX_ITER2; i > 0; --i) {
    lat = 2 * Math.atan(num * srat_default(this.e * Math.sin(p.y), -0.5 * this.e)) - HALF_PI;
    if (Math.abs(lat - p.y) < DEL_TOL) {
      break;
    }
    p.y = lat;
  }
  if (!i) {
    return null;
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var MAX_ITER2, names7, gauss_default;
var init_gauss = __esm({
  "node_modules/proj4/lib/projections/gauss.js"() {
    init_srat();
    init_values();
    MAX_ITER2 = 20;
    names7 = ["gauss"];
    gauss_default = {
      init: init6,
      forward: forward5,
      inverse: inverse5,
      names: names7
    };
  }
});

// node_modules/proj4/lib/projections/sterea.js
function init7() {
  gauss_default.init.apply(this);
  if (!this.rc) {
    return;
  }
  this.sinc0 = Math.sin(this.phic0);
  this.cosc0 = Math.cos(this.phic0);
  this.R2 = 2 * this.rc;
  if (!this.title) {
    this.title = "Oblique Stereographic Alternative";
  }
}
function forward6(p) {
  var sinc, cosc, cosl, k;
  p.x = adjust_lon_default(p.x - this.long0);
  gauss_default.forward.apply(this, [p]);
  sinc = Math.sin(p.y);
  cosc = Math.cos(p.y);
  cosl = Math.cos(p.x);
  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);
  p.x = k * cosc * Math.sin(p.x);
  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);
  p.x = this.a * p.x + this.x0;
  p.y = this.a * p.y + this.y0;
  return p;
}
function inverse6(p) {
  var sinc, cosc, lon, lat, rho;
  p.x = (p.x - this.x0) / this.a;
  p.y = (p.y - this.y0) / this.a;
  p.x /= this.k0;
  p.y /= this.k0;
  if (rho = hypot_default(p.x, p.y)) {
    var c = 2 * Math.atan2(rho, this.R2);
    sinc = Math.sin(c);
    cosc = Math.cos(c);
    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);
    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);
  } else {
    lat = this.phic0;
    lon = 0;
  }
  p.x = lon;
  p.y = lat;
  gauss_default.inverse.apply(this, [p]);
  p.x = adjust_lon_default(p.x + this.long0);
  return p;
}
var names8, sterea_default;
var init_sterea = __esm({
  "node_modules/proj4/lib/projections/sterea.js"() {
    init_gauss();
    init_adjust_lon();
    init_hypot();
    names8 = ["Stereographic_North_Pole", "Oblique_Stereographic", "sterea", "Oblique Stereographic Alternative", "Double_Stereographic"];
    sterea_default = {
      init: init7,
      forward: forward6,
      inverse: inverse6,
      names: names8
    };
  }
});

// node_modules/proj4/lib/projections/stere.js
function ssfn_(phit, sinphi, eccen) {
  sinphi *= eccen;
  return Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);
}
function init8() {
  this.x0 = this.x0 || 0;
  this.y0 = this.y0 || 0;
  this.lat0 = this.lat0 || 0;
  this.long0 = this.long0 || 0;
  this.coslat0 = Math.cos(this.lat0);
  this.sinlat0 = Math.sin(this.lat0);
  if (this.sphere) {
    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
      this.k0 = 0.5 * (1 + sign_default(this.lat0) * Math.sin(this.lat_ts));
    }
  } else {
    if (Math.abs(this.coslat0) <= EPSLN) {
      if (this.lat0 > 0) {
        this.con = 1;
      } else {
        this.con = -1;
      }
    }
    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));
    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN && Math.abs(Math.cos(this.lat_ts)) > EPSLN) {
      this.k0 = 0.5 * this.cons * msfnz_default(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz_default(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));
    }
    this.ms1 = msfnz_default(this.e, this.sinlat0, this.coslat0);
    this.X0 = 2 * Math.atan(ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;
    this.cosX0 = Math.cos(this.X0);
    this.sinX0 = Math.sin(this.X0);
  }
}
function forward7(p) {
  var lon = p.x;
  var lat = p.y;
  var sinlat = Math.sin(lat);
  var coslat = Math.cos(lat);
  var A5, X, sinX, cosX, ts, rh;
  var dlon = adjust_lon_default(lon - this.long0);
  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {
    p.x = NaN;
    p.y = NaN;
    return p;
  }
  if (this.sphere) {
    A5 = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));
    p.x = this.a * A5 * coslat * Math.sin(dlon) + this.x0;
    p.y = this.a * A5 * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;
    return p;
  } else {
    X = 2 * Math.atan(ssfn_(lat, sinlat, this.e)) - HALF_PI;
    cosX = Math.cos(X);
    sinX = Math.sin(X);
    if (Math.abs(this.coslat0) <= EPSLN) {
      ts = tsfnz_default(this.e, lat * this.con, this.con * sinlat);
      rh = 2 * this.a * this.k0 * ts / this.cons;
      p.x = this.x0 + rh * Math.sin(lon - this.long0);
      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);
      return p;
    } else if (Math.abs(this.sinlat0) < EPSLN) {
      A5 = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));
      p.y = A5 * sinX;
    } else {
      A5 = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));
      p.y = A5 * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;
    }
    p.x = A5 * cosX * Math.sin(dlon) + this.x0;
  }
  return p;
}
function inverse7(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var lon, lat, ts, ce, Chi;
  var rh = Math.sqrt(p.x * p.x + p.y * p.y);
  if (this.sphere) {
    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));
    lon = this.long0;
    lat = this.lat0;
    if (rh <= EPSLN) {
      p.x = lon;
      p.y = lat;
      return p;
    }
    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);
    if (Math.abs(this.coslat0) < EPSLN) {
      if (this.lat0 > 0) {
        lon = adjust_lon_default(this.long0 + Math.atan2(p.x, -1 * p.y));
      } else {
        lon = adjust_lon_default(this.long0 + Math.atan2(p.x, p.y));
      }
    } else {
      lon = adjust_lon_default(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));
    }
    p.x = lon;
    p.y = lat;
    return p;
  } else {
    if (Math.abs(this.coslat0) <= EPSLN) {
      if (rh <= EPSLN) {
        lat = this.lat0;
        lon = this.long0;
        p.x = lon;
        p.y = lat;
        return p;
      }
      p.x *= this.con;
      p.y *= this.con;
      ts = rh * this.cons / (2 * this.a * this.k0);
      lat = this.con * phi2z_default(this.e, ts);
      lon = this.con * adjust_lon_default(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));
    } else {
      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));
      lon = this.long0;
      if (rh <= EPSLN) {
        Chi = this.X0;
      } else {
        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);
        lon = adjust_lon_default(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));
      }
      lat = -1 * phi2z_default(this.e, Math.tan(0.5 * (HALF_PI + Chi)));
    }
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var names9, stere_default;
var init_stere = __esm({
  "node_modules/proj4/lib/projections/stere.js"() {
    init_values();
    init_sign();
    init_msfnz();
    init_tsfnz();
    init_phi2z();
    init_adjust_lon();
    names9 = ["stere", "Stereographic_South_Pole", "Polar_Stereographic_variant_A", "Polar_Stereographic_variant_B", "Polar_Stereographic"];
    stere_default = {
      init: init8,
      forward: forward7,
      inverse: inverse7,
      names: names9,
      ssfn_
    };
  }
});

// node_modules/proj4/lib/projections/somerc.js
function init9() {
  var phy0 = this.lat0;
  this.lambda0 = this.long0;
  var sinPhy0 = Math.sin(phy0);
  var semiMajorAxis = this.a;
  var invF = this.rf;
  var flattening = 1 / invF;
  var e2 = 2 * flattening - Math.pow(flattening, 2);
  var e = this.e = Math.sqrt(e2);
  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));
  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));
  this.b0 = Math.asin(sinPhy0 / this.alpha);
  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));
  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));
  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));
  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;
}
function forward8(p) {
  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));
  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));
  var S = -this.alpha * (Sa1 + Sa2) + this.K;
  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);
  var I2 = this.alpha * (p.x - this.lambda0);
  var rotI = Math.atan(Math.sin(I2) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I2)));
  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I2));
  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;
  p.x = this.R * rotI + this.x0;
  return p;
}
function inverse8(p) {
  var Y = p.x - this.x0;
  var X = p.y - this.y0;
  var rotI = Y / this.R;
  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);
  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));
  var I2 = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));
  var lambda = this.lambda0 + I2 / this.alpha;
  var S = 0;
  var phy = b;
  var prevPhy = -1e3;
  var iteration = 0;
  while (Math.abs(phy - prevPhy) > 1e-7) {
    if (++iteration > 20) {
      return;
    }
    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));
    prevPhy = phy;
    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;
  }
  p.x = lambda;
  p.y = phy;
  return p;
}
var names10, somerc_default;
var init_somerc = __esm({
  "node_modules/proj4/lib/projections/somerc.js"() {
    names10 = ["somerc"];
    somerc_default = {
      init: init9,
      forward: forward8,
      inverse: inverse8,
      names: names10
    };
  }
});

// node_modules/proj4/lib/projections/omerc.js
function isTypeA(P) {
  var typeAProjections = ["Hotine_Oblique_Mercator", "Hotine_Oblique_Mercator_variant_A", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin"];
  var projectionName = typeof P.projName === "object" ? Object.keys(P.projName)[0] : P.projName;
  return "no_uoff" in P || "no_off" in P || typeAProjections.indexOf(projectionName) !== -1 || typeAProjections.indexOf(getNormalizedProjName(projectionName)) !== -1;
}
function init10() {
  var con, com, cosph0, D, F, H, L2, sinph0, p, J, gamma = 0, gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0;
  this.no_off = isTypeA(this);
  this.no_rot = "no_rot" in this;
  var alp = false;
  if ("alpha" in this) {
    alp = true;
  }
  var gam = false;
  if ("rectified_grid_angle" in this) {
    gam = true;
  }
  if (alp) {
    alpha_c = this.alpha;
  }
  if (gam) {
    gamma = this.rectified_grid_angle;
  }
  if (alp || gam) {
    lamc = this.longc;
  } else {
    lam1 = this.long1;
    phi1 = this.lat1;
    lam2 = this.long2;
    phi2 = this.lat2;
    if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL || Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL || Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {
      throw new Error();
    }
  }
  var one_es = 1 - this.es;
  com = Math.sqrt(one_es);
  if (Math.abs(this.lat0) > EPSLN) {
    sinph0 = Math.sin(this.lat0);
    cosph0 = Math.cos(this.lat0);
    con = 1 - this.es * sinph0 * sinph0;
    this.B = cosph0 * cosph0;
    this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);
    this.A = this.B * this.k0 * com / con;
    D = this.B * com / (cosph0 * Math.sqrt(con));
    F = D * D - 1;
    if (F <= 0) {
      F = 0;
    } else {
      F = Math.sqrt(F);
      if (this.lat0 < 0) {
        F = -F;
      }
    }
    this.E = F += D;
    this.E *= Math.pow(tsfnz_default(this.e, this.lat0, sinph0), this.B);
  } else {
    this.B = 1 / com;
    this.A = this.k0;
    this.E = D = F = 1;
  }
  if (alp || gam) {
    if (alp) {
      gamma0 = Math.asin(Math.sin(alpha_c) / D);
      if (!gam) {
        gamma = alpha_c;
      }
    } else {
      gamma0 = gamma;
      alpha_c = Math.asin(D * Math.sin(gamma0));
    }
    this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;
  } else {
    H = Math.pow(tsfnz_default(this.e, phi1, Math.sin(phi1)), this.B);
    L2 = Math.pow(tsfnz_default(this.e, phi2, Math.sin(phi2)), this.B);
    F = this.E / H;
    p = (L2 - H) / (L2 + H);
    J = this.E * this.E;
    J = (J - L2 * H) / (J + L2 * H);
    con = lam1 - lam2;
    if (con < -Math.PI) {
      lam2 -= TWO_PI;
    } else if (con > Math.PI) {
      lam2 += TWO_PI;
    }
    this.lam0 = adjust_lon_default(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);
    gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon_default(lam1 - this.lam0)) / (F - 1 / F));
    gamma = alpha_c = Math.asin(D * Math.sin(gamma0));
  }
  this.singam = Math.sin(gamma0);
  this.cosgam = Math.cos(gamma0);
  this.sinrot = Math.sin(gamma);
  this.cosrot = Math.cos(gamma);
  this.rB = 1 / this.B;
  this.ArB = this.A * this.rB;
  this.BrA = 1 / this.ArB;
  if (this.no_off) {
    this.u_0 = 0;
  } else {
    this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));
    if (this.lat0 < 0) {
      this.u_0 = -this.u_0;
    }
  }
  F = 0.5 * gamma0;
  this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));
  this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));
}
function forward9(p) {
  var coords = {};
  var S, T, U, V2, W, temp, u, v;
  p.x = p.x - this.lam0;
  if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {
    W = this.E / Math.pow(tsfnz_default(this.e, p.y, Math.sin(p.y)), this.B);
    temp = 1 / W;
    S = 0.5 * (W - temp);
    T = 0.5 * (W + temp);
    V2 = Math.sin(this.B * p.x);
    U = (S * this.singam - V2 * this.cosgam) / T;
    if (Math.abs(Math.abs(U) - 1) < EPSLN) {
      throw new Error();
    }
    v = 0.5 * this.ArB * Math.log((1 - U) / (1 + U));
    temp = Math.cos(this.B * p.x);
    if (Math.abs(temp) < TOL) {
      u = this.A * p.x;
    } else {
      u = this.ArB * Math.atan2(S * this.cosgam + V2 * this.singam, temp);
    }
  } else {
    v = p.y > 0 ? this.v_pole_n : this.v_pole_s;
    u = this.ArB * p.y;
  }
  if (this.no_rot) {
    coords.x = u;
    coords.y = v;
  } else {
    u -= this.u_0;
    coords.x = v * this.cosrot + u * this.sinrot;
    coords.y = u * this.cosrot - v * this.sinrot;
  }
  coords.x = this.a * coords.x + this.x0;
  coords.y = this.a * coords.y + this.y0;
  return coords;
}
function inverse9(p) {
  var u, v, Qp, Sp, Tp, Vp, Up;
  var coords = {};
  p.x = (p.x - this.x0) * (1 / this.a);
  p.y = (p.y - this.y0) * (1 / this.a);
  if (this.no_rot) {
    v = p.y;
    u = p.x;
  } else {
    v = p.x * this.cosrot - p.y * this.sinrot;
    u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;
  }
  Qp = Math.exp(-this.BrA * v);
  Sp = 0.5 * (Qp - 1 / Qp);
  Tp = 0.5 * (Qp + 1 / Qp);
  Vp = Math.sin(this.BrA * u);
  Up = (Vp * this.cosgam + Sp * this.singam) / Tp;
  if (Math.abs(Math.abs(Up) - 1) < EPSLN) {
    coords.x = 0;
    coords.y = Up < 0 ? -HALF_PI : HALF_PI;
  } else {
    coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));
    coords.y = phi2z_default(this.e, Math.pow(coords.y, 1 / this.B));
    if (coords.y === Infinity) {
      throw new Error();
    }
    coords.x = -this.rB * Math.atan2(Sp * this.cosgam - Vp * this.singam, Math.cos(this.BrA * u));
  }
  coords.x += this.lam0;
  return coords;
}
var TOL, names11, omerc_default;
var init_omerc = __esm({
  "node_modules/proj4/lib/projections/omerc.js"() {
    init_tsfnz();
    init_adjust_lon();
    init_phi2z();
    init_values();
    init_projections();
    TOL = 1e-7;
    names11 = ["Hotine_Oblique_Mercator", "Hotine Oblique Mercator", "Hotine_Oblique_Mercator_variant_A", "Hotine_Oblique_Mercator_Variant_B", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin", "Hotine_Oblique_Mercator_Two_Point_Natural_Origin", "Hotine_Oblique_Mercator_Azimuth_Center", "Oblique_Mercator", "omerc"];
    omerc_default = {
      init: init10,
      forward: forward9,
      inverse: inverse9,
      names: names11
    };
  }
});

// node_modules/proj4/lib/projections/lcc.js
function init11() {
  if (!this.lat2) {
    this.lat2 = this.lat1;
  }
  if (!this.k0) {
    this.k0 = 1;
  }
  this.x0 = this.x0 || 0;
  this.y0 = this.y0 || 0;
  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
    return;
  }
  var temp = this.b / this.a;
  this.e = Math.sqrt(1 - temp * temp);
  var sin1 = Math.sin(this.lat1);
  var cos1 = Math.cos(this.lat1);
  var ms1 = msfnz_default(this.e, sin1, cos1);
  var ts1 = tsfnz_default(this.e, this.lat1, sin1);
  var sin2 = Math.sin(this.lat2);
  var cos2 = Math.cos(this.lat2);
  var ms2 = msfnz_default(this.e, sin2, cos2);
  var ts2 = tsfnz_default(this.e, this.lat2, sin2);
  var ts0 = Math.abs(Math.abs(this.lat0) - HALF_PI) < EPSLN ? 0 : tsfnz_default(this.e, this.lat0, Math.sin(this.lat0));
  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);
  } else {
    this.ns = sin1;
  }
  if (isNaN(this.ns)) {
    this.ns = sin1;
  }
  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);
  if (!this.title) {
    this.title = "Lambert Conformal Conic";
  }
}
function forward10(p) {
  var lon = p.x;
  var lat = p.y;
  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {
    lat = sign_default(lat) * (HALF_PI - 2 * EPSLN);
  }
  var con = Math.abs(Math.abs(lat) - HALF_PI);
  var ts, rh1;
  if (con > EPSLN) {
    ts = tsfnz_default(this.e, lat, Math.sin(lat));
    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
  } else {
    con = lat * this.ns;
    if (con <= 0) {
      return null;
    }
    rh1 = 0;
  }
  var theta = this.ns * adjust_lon_default(lon - this.long0);
  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;
  return p;
}
function inverse10(p) {
  var rh1, con, ts;
  var lat, lon;
  var x = (p.x - this.x0) / this.k0;
  var y = this.rh - (p.y - this.y0) / this.k0;
  if (this.ns > 0) {
    rh1 = Math.sqrt(x * x + y * y);
    con = 1;
  } else {
    rh1 = -Math.sqrt(x * x + y * y);
    con = -1;
  }
  var theta = 0;
  if (rh1 !== 0) {
    theta = Math.atan2(con * x, con * y);
  }
  if (rh1 !== 0 || this.ns > 0) {
    con = 1 / this.ns;
    ts = Math.pow(rh1 / (this.a * this.f0), con);
    lat = phi2z_default(this.e, ts);
    if (lat === -9999) {
      return null;
    }
  } else {
    lat = -HALF_PI;
  }
  lon = adjust_lon_default(theta / this.ns + this.long0);
  p.x = lon;
  p.y = lat;
  return p;
}
var names12, lcc_default;
var init_lcc = __esm({
  "node_modules/proj4/lib/projections/lcc.js"() {
    init_msfnz();
    init_tsfnz();
    init_sign();
    init_adjust_lon();
    init_phi2z();
    init_values();
    names12 = [
      "Lambert Tangential Conformal Conic Projection",
      "Lambert_Conformal_Conic",
      "Lambert_Conformal_Conic_1SP",
      "Lambert_Conformal_Conic_2SP",
      "lcc",
      "Lambert Conic Conformal (1SP)",
      "Lambert Conic Conformal (2SP)"
    ];
    lcc_default = {
      init: init11,
      forward: forward10,
      inverse: inverse10,
      names: names12
    };
  }
});

// node_modules/proj4/lib/projections/krovak.js
function init12() {
  this.a = 6377397155e-3;
  this.es = 0.006674372230614;
  this.e = Math.sqrt(this.es);
  if (!this.lat0) {
    this.lat0 = 0.863937979737193;
  }
  if (!this.long0) {
    this.long0 = 0.7417649320975901 - 0.308341501185665;
  }
  if (!this.k0) {
    this.k0 = 0.9999;
  }
  this.s45 = 0.785398163397448;
  this.s90 = 2 * this.s45;
  this.fi0 = this.lat0;
  this.e2 = this.es;
  this.e = Math.sqrt(this.e2);
  this.alfa = Math.sqrt(1 + this.e2 * Math.pow(Math.cos(this.fi0), 4) / (1 - this.e2));
  this.uq = 1.04216856380474;
  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);
  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);
  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;
  this.k1 = this.k0;
  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));
  this.s0 = 1.37008346281555;
  this.n = Math.sin(this.s0);
  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);
  this.ad = this.s90 - this.uq;
}
function forward11(p) {
  var gfi, u, deltav, s, d, eps, ro;
  var lon = p.x;
  var lat = p.y;
  var delta_lon = adjust_lon_default(lon - this.long0);
  gfi = Math.pow((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat)), this.alfa * this.e / 2);
  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);
  deltav = -delta_lon * this.alfa;
  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));
  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));
  eps = this.n * d;
  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);
  p.y = ro * Math.cos(eps) / 1;
  p.x = ro * Math.sin(eps) / 1;
  if (!this.czech) {
    p.y *= -1;
    p.x *= -1;
  }
  return p;
}
function inverse11(p) {
  var u, deltav, s, d, eps, ro, fi1;
  var ok;
  var tmp = p.x;
  p.x = p.y;
  p.y = tmp;
  if (!this.czech) {
    p.y *= -1;
    p.x *= -1;
  }
  ro = Math.sqrt(p.x * p.x + p.y * p.y);
  eps = Math.atan2(p.y, p.x);
  d = eps / Math.sin(this.s0);
  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);
  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));
  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));
  p.x = this.long0 - deltav / this.alfa;
  fi1 = u;
  ok = 0;
  var iter = 0;
  do {
    p.y = 2 * (Math.atan(Math.pow(this.k, -1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);
    if (Math.abs(fi1 - p.y) < 1e-10) {
      ok = 1;
    }
    fi1 = p.y;
    iter += 1;
  } while (ok === 0 && iter < 15);
  if (iter >= 15) {
    return null;
  }
  return p;
}
var names13, krovak_default;
var init_krovak = __esm({
  "node_modules/proj4/lib/projections/krovak.js"() {
    init_adjust_lon();
    names13 = ["Krovak", "krovak"];
    krovak_default = {
      init: init12,
      forward: forward11,
      inverse: inverse11,
      names: names13
    };
  }
});

// node_modules/proj4/lib/common/mlfn.js
function mlfn_default(e0, e1, e2, e3, phi) {
  return e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi);
}
var init_mlfn = __esm({
  "node_modules/proj4/lib/common/mlfn.js"() {
  }
});

// node_modules/proj4/lib/common/e0fn.js
function e0fn_default(x) {
  return 1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x));
}
var init_e0fn = __esm({
  "node_modules/proj4/lib/common/e0fn.js"() {
  }
});

// node_modules/proj4/lib/common/e1fn.js
function e1fn_default(x) {
  return 0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x));
}
var init_e1fn = __esm({
  "node_modules/proj4/lib/common/e1fn.js"() {
  }
});

// node_modules/proj4/lib/common/e2fn.js
function e2fn_default(x) {
  return 0.05859375 * x * x * (1 + 0.75 * x);
}
var init_e2fn = __esm({
  "node_modules/proj4/lib/common/e2fn.js"() {
  }
});

// node_modules/proj4/lib/common/e3fn.js
function e3fn_default(x) {
  return x * x * x * (35 / 3072);
}
var init_e3fn = __esm({
  "node_modules/proj4/lib/common/e3fn.js"() {
  }
});

// node_modules/proj4/lib/common/gN.js
function gN_default(a, e, sinphi) {
  var temp = e * sinphi;
  return a / Math.sqrt(1 - temp * temp);
}
var init_gN = __esm({
  "node_modules/proj4/lib/common/gN.js"() {
  }
});

// node_modules/proj4/lib/common/adjust_lat.js
function adjust_lat_default(x) {
  return Math.abs(x) < HALF_PI ? x : x - sign_default(x) * Math.PI;
}
var init_adjust_lat = __esm({
  "node_modules/proj4/lib/common/adjust_lat.js"() {
    init_values();
    init_sign();
  }
});

// node_modules/proj4/lib/common/imlfn.js
function imlfn_default(ml, e0, e1, e2, e3) {
  var phi;
  var dphi;
  phi = ml / e0;
  for (var i = 0; i < 15; i++) {
    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));
    phi += dphi;
    if (Math.abs(dphi) <= 1e-10) {
      return phi;
    }
  }
  return NaN;
}
var init_imlfn = __esm({
  "node_modules/proj4/lib/common/imlfn.js"() {
  }
});

// node_modules/proj4/lib/projections/cass.js
function init13() {
  if (!this.sphere) {
    this.e0 = e0fn_default(this.es);
    this.e1 = e1fn_default(this.es);
    this.e2 = e2fn_default(this.es);
    this.e3 = e3fn_default(this.es);
    this.ml0 = this.a * mlfn_default(this.e0, this.e1, this.e2, this.e3, this.lat0);
  }
}
function forward12(p) {
  var x, y;
  var lam = p.x;
  var phi = p.y;
  lam = adjust_lon_default(lam - this.long0);
  if (this.sphere) {
    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));
    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);
  } else {
    var sinphi = Math.sin(phi);
    var cosphi = Math.cos(phi);
    var nl = gN_default(this.a, this.e, sinphi);
    var tl = Math.tan(phi) * Math.tan(phi);
    var al = lam * Math.cos(phi);
    var asq = al * al;
    var cl = this.es * cosphi * cosphi / (1 - this.es);
    var ml = this.a * mlfn_default(this.e0, this.e1, this.e2, this.e3, phi);
    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);
  }
  p.x = x + this.x0;
  p.y = y + this.y0;
  return p;
}
function inverse12(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var x = p.x / this.a;
  var y = p.y / this.a;
  var phi, lam;
  if (this.sphere) {
    var dd = y + this.lat0;
    phi = Math.asin(Math.sin(dd) * Math.cos(x));
    lam = Math.atan2(Math.tan(x), Math.cos(dd));
  } else {
    var ml1 = this.ml0 / this.a + y;
    var phi1 = imlfn_default(ml1, this.e0, this.e1, this.e2, this.e3);
    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {
      p.x = this.long0;
      p.y = HALF_PI;
      if (y < 0) {
        p.y *= -1;
      }
      return p;
    }
    var nl1 = gN_default(this.a, this.e, Math.sin(phi1));
    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);
    var tl1 = Math.pow(Math.tan(phi1), 2);
    var dl = x * this.a / nl1;
    var dsq = dl * dl;
    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);
  }
  p.x = adjust_lon_default(lam + this.long0);
  p.y = adjust_lat_default(phi);
  return p;
}
var names14, cass_default;
var init_cass = __esm({
  "node_modules/proj4/lib/projections/cass.js"() {
    init_mlfn();
    init_e0fn();
    init_e1fn();
    init_e2fn();
    init_e3fn();
    init_gN();
    init_adjust_lon();
    init_adjust_lat();
    init_imlfn();
    init_values();
    names14 = ["Cassini", "Cassini_Soldner", "cass"];
    cass_default = {
      init: init13,
      forward: forward12,
      inverse: inverse12,
      names: names14
    };
  }
});

// node_modules/proj4/lib/common/qsfnz.js
function qsfnz_default(eccent, sinphi) {
  var con;
  if (eccent > 1e-7) {
    con = eccent * sinphi;
    return (1 - eccent * eccent) * (sinphi / (1 - con * con) - 0.5 / eccent * Math.log((1 - con) / (1 + con)));
  } else {
    return 2 * sinphi;
  }
}
var init_qsfnz = __esm({
  "node_modules/proj4/lib/common/qsfnz.js"() {
  }
});

// node_modules/proj4/lib/projections/laea.js
function init14() {
  var t = Math.abs(this.lat0);
  if (Math.abs(t - HALF_PI) < EPSLN) {
    this.mode = this.lat0 < 0 ? S_POLE : N_POLE;
  } else if (Math.abs(t) < EPSLN) {
    this.mode = EQUIT;
  } else {
    this.mode = OBLIQ;
  }
  if (this.es > 0) {
    var sinphi;
    this.qp = qsfnz_default(this.e, 1);
    this.mmf = 0.5 / (1 - this.es);
    this.apa = authset(this.es);
    switch (this.mode) {
      case N_POLE:
        this.dd = 1;
        break;
      case S_POLE:
        this.dd = 1;
        break;
      case EQUIT:
        this.rq = Math.sqrt(0.5 * this.qp);
        this.dd = 1 / this.rq;
        this.xmf = 1;
        this.ymf = 0.5 * this.qp;
        break;
      case OBLIQ:
        this.rq = Math.sqrt(0.5 * this.qp);
        sinphi = Math.sin(this.lat0);
        this.sinb1 = qsfnz_default(this.e, sinphi) / this.qp;
        this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);
        this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);
        this.ymf = (this.xmf = this.rq) / this.dd;
        this.xmf *= this.dd;
        break;
    }
  } else {
    if (this.mode === OBLIQ) {
      this.sinph0 = Math.sin(this.lat0);
      this.cosph0 = Math.cos(this.lat0);
    }
  }
}
function forward13(p) {
  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;
  var lam = p.x;
  var phi = p.y;
  lam = adjust_lon_default(lam - this.long0);
  if (this.sphere) {
    sinphi = Math.sin(phi);
    cosphi = Math.cos(phi);
    coslam = Math.cos(lam);
    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
      y = this.mode === this.EQUIT ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
      if (y <= EPSLN) {
        return null;
      }
      y = Math.sqrt(2 / y);
      x = y * cosphi * Math.sin(lam);
      y *= this.mode === this.EQUIT ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
    } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
      if (this.mode === this.N_POLE) {
        coslam = -coslam;
      }
      if (Math.abs(phi + this.lat0) < EPSLN) {
        return null;
      }
      y = FORTPI - phi * 0.5;
      y = 2 * (this.mode === this.S_POLE ? Math.cos(y) : Math.sin(y));
      x = y * Math.sin(lam);
      y *= coslam;
    }
  } else {
    sinb = 0;
    cosb = 0;
    b = 0;
    coslam = Math.cos(lam);
    sinlam = Math.sin(lam);
    sinphi = Math.sin(phi);
    q = qsfnz_default(this.e, sinphi);
    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
      sinb = q / this.qp;
      cosb = Math.sqrt(1 - sinb * sinb);
    }
    switch (this.mode) {
      case this.OBLIQ:
        b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;
        break;
      case this.EQUIT:
        b = 1 + cosb * coslam;
        break;
      case this.N_POLE:
        b = HALF_PI + phi;
        q = this.qp - q;
        break;
      case this.S_POLE:
        b = phi - HALF_PI;
        q = this.qp + q;
        break;
    }
    if (Math.abs(b) < EPSLN) {
      return null;
    }
    switch (this.mode) {
      case this.OBLIQ:
      case this.EQUIT:
        b = Math.sqrt(2 / b);
        if (this.mode === this.OBLIQ) {
          y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);
        } else {
          y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;
        }
        x = this.xmf * b * cosb * sinlam;
        break;
      case this.N_POLE:
      case this.S_POLE:
        if (q >= 0) {
          x = (b = Math.sqrt(q)) * sinlam;
          y = coslam * (this.mode === this.S_POLE ? b : -b);
        } else {
          x = y = 0;
        }
        break;
    }
  }
  p.x = this.a * x + this.x0;
  p.y = this.a * y + this.y0;
  return p;
}
function inverse13(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var x = p.x / this.a;
  var y = p.y / this.a;
  var lam, phi, cCe, sCe, q, rho, ab;
  if (this.sphere) {
    var cosz = 0, rh, sinz = 0;
    rh = Math.sqrt(x * x + y * y);
    phi = rh * 0.5;
    if (phi > 1) {
      return null;
    }
    phi = 2 * Math.asin(phi);
    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
      sinz = Math.sin(phi);
      cosz = Math.cos(phi);
    }
    switch (this.mode) {
      case this.EQUIT:
        phi = Math.abs(rh) <= EPSLN ? 0 : Math.asin(y * sinz / rh);
        x *= sinz;
        y = cosz * rh;
        break;
      case this.OBLIQ:
        phi = Math.abs(rh) <= EPSLN ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);
        x *= sinz * this.cosph0;
        y = (cosz - Math.sin(phi) * this.sinph0) * rh;
        break;
      case this.N_POLE:
        y = -y;
        phi = HALF_PI - phi;
        break;
      case this.S_POLE:
        phi -= HALF_PI;
        break;
    }
    lam = y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ) ? 0 : Math.atan2(x, y);
  } else {
    ab = 0;
    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
      x /= this.dd;
      y *= this.dd;
      rho = Math.sqrt(x * x + y * y);
      if (rho < EPSLN) {
        p.x = this.long0;
        p.y = this.lat0;
        return p;
      }
      sCe = 2 * Math.asin(0.5 * rho / this.rq);
      cCe = Math.cos(sCe);
      x *= sCe = Math.sin(sCe);
      if (this.mode === this.OBLIQ) {
        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;
        q = this.qp * ab;
        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;
      } else {
        ab = y * sCe / rho;
        q = this.qp * ab;
        y = rho * cCe;
      }
    } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
      if (this.mode === this.N_POLE) {
        y = -y;
      }
      q = x * x + y * y;
      if (!q) {
        p.x = this.long0;
        p.y = this.lat0;
        return p;
      }
      ab = 1 - q / this.qp;
      if (this.mode === this.S_POLE) {
        ab = -ab;
      }
    }
    lam = Math.atan2(x, y);
    phi = authlat(Math.asin(ab), this.apa);
  }
  p.x = adjust_lon_default(this.long0 + lam);
  p.y = phi;
  return p;
}
function authset(es) {
  var t;
  var APA = [];
  APA[0] = es * P00;
  t = es * es;
  APA[0] += t * P01;
  APA[1] = t * P10;
  t *= es;
  APA[0] += t * P02;
  APA[1] += t * P11;
  APA[2] = t * P20;
  return APA;
}
function authlat(beta, APA) {
  var t = beta + beta;
  return beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t);
}
var S_POLE, N_POLE, EQUIT, OBLIQ, P00, P01, P02, P10, P11, P20, names15, laea_default;
var init_laea = __esm({
  "node_modules/proj4/lib/projections/laea.js"() {
    init_values();
    init_qsfnz();
    init_adjust_lon();
    S_POLE = 1;
    N_POLE = 2;
    EQUIT = 3;
    OBLIQ = 4;
    P00 = 0.3333333333333333;
    P01 = 0.17222222222222222;
    P02 = 0.10257936507936508;
    P10 = 0.06388888888888888;
    P11 = 0.0664021164021164;
    P20 = 0.016415012942191543;
    names15 = ["Lambert Azimuthal Equal Area", "Lambert_Azimuthal_Equal_Area", "laea"];
    laea_default = {
      init: init14,
      forward: forward13,
      inverse: inverse13,
      names: names15,
      S_POLE,
      N_POLE,
      EQUIT,
      OBLIQ
    };
  }
});

// node_modules/proj4/lib/common/asinz.js
function asinz_default(x) {
  if (Math.abs(x) > 1) {
    x = x > 1 ? 1 : -1;
  }
  return Math.asin(x);
}
var init_asinz = __esm({
  "node_modules/proj4/lib/common/asinz.js"() {
  }
});

// node_modules/proj4/lib/projections/aea.js
function init15() {
  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
    return;
  }
  this.temp = this.b / this.a;
  this.es = 1 - Math.pow(this.temp, 2);
  this.e3 = Math.sqrt(this.es);
  this.sin_po = Math.sin(this.lat1);
  this.cos_po = Math.cos(this.lat1);
  this.t1 = this.sin_po;
  this.con = this.sin_po;
  this.ms1 = msfnz_default(this.e3, this.sin_po, this.cos_po);
  this.qs1 = qsfnz_default(this.e3, this.sin_po);
  this.sin_po = Math.sin(this.lat2);
  this.cos_po = Math.cos(this.lat2);
  this.t2 = this.sin_po;
  this.ms2 = msfnz_default(this.e3, this.sin_po, this.cos_po);
  this.qs2 = qsfnz_default(this.e3, this.sin_po);
  this.sin_po = Math.sin(this.lat0);
  this.cos_po = Math.cos(this.lat0);
  this.t3 = this.sin_po;
  this.qs0 = qsfnz_default(this.e3, this.sin_po);
  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);
  } else {
    this.ns0 = this.con;
  }
  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;
  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;
}
function forward14(p) {
  var lon = p.x;
  var lat = p.y;
  this.sin_phi = Math.sin(lat);
  this.cos_phi = Math.cos(lat);
  var qs = qsfnz_default(this.e3, this.sin_phi);
  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;
  var theta = this.ns0 * adjust_lon_default(lon - this.long0);
  var x = rh1 * Math.sin(theta) + this.x0;
  var y = this.rh - rh1 * Math.cos(theta) + this.y0;
  p.x = x;
  p.y = y;
  return p;
}
function inverse14(p) {
  var rh1, qs, con, theta, lon, lat;
  p.x -= this.x0;
  p.y = this.rh - p.y + this.y0;
  if (this.ns0 >= 0) {
    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
    con = 1;
  } else {
    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
    con = -1;
  }
  theta = 0;
  if (rh1 !== 0) {
    theta = Math.atan2(con * p.x, con * p.y);
  }
  con = rh1 * this.ns0 / this.a;
  if (this.sphere) {
    lat = Math.asin((this.c - con * con) / (2 * this.ns0));
  } else {
    qs = (this.c - con * con) / this.ns0;
    lat = this.phi1z(this.e3, qs);
  }
  lon = adjust_lon_default(theta / this.ns0 + this.long0);
  p.x = lon;
  p.y = lat;
  return p;
}
function phi1z(eccent, qs) {
  var sinphi, cosphi, con, com, dphi;
  var phi = asinz_default(0.5 * qs);
  if (eccent < EPSLN) {
    return phi;
  }
  var eccnts = eccent * eccent;
  for (var i = 1; i <= 25; i++) {
    sinphi = Math.sin(phi);
    cosphi = Math.cos(phi);
    con = eccent * sinphi;
    com = 1 - con * con;
    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
    phi = phi + dphi;
    if (Math.abs(dphi) <= 1e-7) {
      return phi;
    }
  }
  return null;
}
var names16, aea_default;
var init_aea = __esm({
  "node_modules/proj4/lib/projections/aea.js"() {
    init_msfnz();
    init_qsfnz();
    init_adjust_lon();
    init_asinz();
    init_values();
    names16 = ["Albers_Conic_Equal_Area", "Albers_Equal_Area", "Albers", "aea"];
    aea_default = {
      init: init15,
      forward: forward14,
      inverse: inverse14,
      names: names16,
      phi1z
    };
  }
});

// node_modules/proj4/lib/projections/gnom.js
function init16() {
  this.sin_p14 = Math.sin(this.lat0);
  this.cos_p14 = Math.cos(this.lat0);
  this.infinity_dist = 1e3 * this.a;
  this.rc = 1;
}
function forward15(p) {
  var sinphi, cosphi;
  var dlon;
  var coslon;
  var ksp;
  var g;
  var x, y;
  var lon = p.x;
  var lat = p.y;
  dlon = adjust_lon_default(lon - this.long0);
  sinphi = Math.sin(lat);
  cosphi = Math.cos(lat);
  coslon = Math.cos(dlon);
  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
  ksp = 1;
  if (g > 0 || Math.abs(g) <= EPSLN) {
    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;
    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;
  } else {
    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);
    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
  }
  p.x = x;
  p.y = y;
  return p;
}
function inverse15(p) {
  var rh;
  var sinc, cosc;
  var c;
  var lon, lat;
  p.x = (p.x - this.x0) / this.a;
  p.y = (p.y - this.y0) / this.a;
  p.x /= this.k0;
  p.y /= this.k0;
  if (rh = Math.sqrt(p.x * p.x + p.y * p.y)) {
    c = Math.atan2(rh, this.rc);
    sinc = Math.sin(c);
    cosc = Math.cos(c);
    lat = asinz_default(cosc * this.sin_p14 + p.y * sinc * this.cos_p14 / rh);
    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);
    lon = adjust_lon_default(this.long0 + lon);
  } else {
    lat = this.phic0;
    lon = 0;
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var names17, gnom_default;
var init_gnom = __esm({
  "node_modules/proj4/lib/projections/gnom.js"() {
    init_adjust_lon();
    init_asinz();
    init_values();
    names17 = ["gnom"];
    gnom_default = {
      init: init16,
      forward: forward15,
      inverse: inverse15,
      names: names17
    };
  }
});

// node_modules/proj4/lib/common/iqsfnz.js
function iqsfnz_default(eccent, q) {
  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));
  if (Math.abs(Math.abs(q) - temp) < 1e-6) {
    if (q < 0) {
      return -1 * HALF_PI;
    } else {
      return HALF_PI;
    }
  }
  var phi = Math.asin(0.5 * q);
  var dphi;
  var sin_phi;
  var cos_phi;
  var con;
  for (var i = 0; i < 30; i++) {
    sin_phi = Math.sin(phi);
    cos_phi = Math.cos(phi);
    con = eccent * sin_phi;
    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
    phi += dphi;
    if (Math.abs(dphi) <= 1e-10) {
      return phi;
    }
  }
  return NaN;
}
var init_iqsfnz = __esm({
  "node_modules/proj4/lib/common/iqsfnz.js"() {
    init_values();
  }
});

// node_modules/proj4/lib/projections/cea.js
function init17() {
  if (!this.sphere) {
    this.k0 = msfnz_default(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
  }
}
function forward16(p) {
  var lon = p.x;
  var lat = p.y;
  var x, y;
  var dlon = adjust_lon_default(lon - this.long0);
  if (this.sphere) {
    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);
    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);
  } else {
    var qs = qsfnz_default(this.e, Math.sin(lat));
    x = this.x0 + this.a * this.k0 * dlon;
    y = this.y0 + this.a * qs * 0.5 / this.k0;
  }
  p.x = x;
  p.y = y;
  return p;
}
function inverse16(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var lon, lat;
  if (this.sphere) {
    lon = adjust_lon_default(this.long0 + p.x / this.a / Math.cos(this.lat_ts));
    lat = Math.asin(p.y / this.a * Math.cos(this.lat_ts));
  } else {
    lat = iqsfnz_default(this.e, 2 * p.y * this.k0 / this.a);
    lon = adjust_lon_default(this.long0 + p.x / (this.a * this.k0));
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var names18, cea_default;
var init_cea = __esm({
  "node_modules/proj4/lib/projections/cea.js"() {
    init_adjust_lon();
    init_qsfnz();
    init_msfnz();
    init_iqsfnz();
    names18 = ["cea"];
    cea_default = {
      init: init17,
      forward: forward16,
      inverse: inverse16,
      names: names18
    };
  }
});

// node_modules/proj4/lib/projections/eqc.js
function init18() {
  this.x0 = this.x0 || 0;
  this.y0 = this.y0 || 0;
  this.lat0 = this.lat0 || 0;
  this.long0 = this.long0 || 0;
  this.lat_ts = this.lat_ts || 0;
  this.title = this.title || "Equidistant Cylindrical (Plate Carre)";
  this.rc = Math.cos(this.lat_ts);
}
function forward17(p) {
  var lon = p.x;
  var lat = p.y;
  var dlon = adjust_lon_default(lon - this.long0);
  var dlat = adjust_lat_default(lat - this.lat0);
  p.x = this.x0 + this.a * dlon * this.rc;
  p.y = this.y0 + this.a * dlat;
  return p;
}
function inverse17(p) {
  var x = p.x;
  var y = p.y;
  p.x = adjust_lon_default(this.long0 + (x - this.x0) / (this.a * this.rc));
  p.y = adjust_lat_default(this.lat0 + (y - this.y0) / this.a);
  return p;
}
var names19, eqc_default;
var init_eqc = __esm({
  "node_modules/proj4/lib/projections/eqc.js"() {
    init_adjust_lon();
    init_adjust_lat();
    names19 = ["Equirectangular", "Equidistant_Cylindrical", "Equidistant_Cylindrical_Spherical", "eqc"];
    eqc_default = {
      init: init18,
      forward: forward17,
      inverse: inverse17,
      names: names19
    };
  }
});

// node_modules/proj4/lib/projections/poly.js
function init19() {
  this.temp = this.b / this.a;
  this.es = 1 - Math.pow(this.temp, 2);
  this.e = Math.sqrt(this.es);
  this.e0 = e0fn_default(this.es);
  this.e1 = e1fn_default(this.es);
  this.e2 = e2fn_default(this.es);
  this.e3 = e3fn_default(this.es);
  this.ml0 = this.a * mlfn_default(this.e0, this.e1, this.e2, this.e3, this.lat0);
}
function forward18(p) {
  var lon = p.x;
  var lat = p.y;
  var x, y, el;
  var dlon = adjust_lon_default(lon - this.long0);
  el = dlon * Math.sin(lat);
  if (this.sphere) {
    if (Math.abs(lat) <= EPSLN) {
      x = this.a * dlon;
      y = -1 * this.a * this.lat0;
    } else {
      x = this.a * Math.sin(el) / Math.tan(lat);
      y = this.a * (adjust_lat_default(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));
    }
  } else {
    if (Math.abs(lat) <= EPSLN) {
      x = this.a * dlon;
      y = -1 * this.ml0;
    } else {
      var nl = gN_default(this.a, this.e, Math.sin(lat)) / Math.tan(lat);
      x = nl * Math.sin(el);
      y = this.a * mlfn_default(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));
    }
  }
  p.x = x + this.x0;
  p.y = y + this.y0;
  return p;
}
function inverse18(p) {
  var lon, lat, x, y, i;
  var al, bl;
  var phi, dphi;
  x = p.x - this.x0;
  y = p.y - this.y0;
  if (this.sphere) {
    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {
      lon = adjust_lon_default(x / this.a + this.long0);
      lat = 0;
    } else {
      al = this.lat0 + y / this.a;
      bl = x * x / this.a / this.a + al * al;
      phi = al;
      var tanphi;
      for (i = MAX_ITER3; i; --i) {
        tanphi = Math.tan(phi);
        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);
        phi += dphi;
        if (Math.abs(dphi) <= EPSLN) {
          lat = phi;
          break;
        }
      }
      lon = adjust_lon_default(this.long0 + Math.asin(x * Math.tan(phi) / this.a) / Math.sin(lat));
    }
  } else {
    if (Math.abs(y + this.ml0) <= EPSLN) {
      lat = 0;
      lon = adjust_lon_default(this.long0 + x / this.a);
    } else {
      al = (this.ml0 + y) / this.a;
      bl = x * x / this.a / this.a + al * al;
      phi = al;
      var cl, mln, mlnp, ma;
      var con;
      for (i = MAX_ITER3; i; --i) {
        con = this.e * Math.sin(phi);
        cl = Math.sqrt(1 - con * con) * Math.tan(phi);
        mln = this.a * mlfn_default(this.e0, this.e1, this.e2, this.e3, phi);
        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);
        ma = mln / this.a;
        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);
        phi -= dphi;
        if (Math.abs(dphi) <= EPSLN) {
          lat = phi;
          break;
        }
      }
      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);
      lon = adjust_lon_default(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));
    }
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var MAX_ITER3, names20, poly_default;
var init_poly = __esm({
  "node_modules/proj4/lib/projections/poly.js"() {
    init_e0fn();
    init_e1fn();
    init_e2fn();
    init_e3fn();
    init_adjust_lon();
    init_adjust_lat();
    init_mlfn();
    init_values();
    init_gN();
    MAX_ITER3 = 20;
    names20 = ["Polyconic", "American_Polyconic", "poly"];
    poly_default = {
      init: init19,
      forward: forward18,
      inverse: inverse18,
      names: names20
    };
  }
});

// node_modules/proj4/lib/projections/nzmg.js
function init20() {
  this.A = [];
  this.A[1] = 0.6399175073;
  this.A[2] = -0.1358797613;
  this.A[3] = 0.063294409;
  this.A[4] = -0.02526853;
  this.A[5] = 0.0117879;
  this.A[6] = -55161e-7;
  this.A[7] = 26906e-7;
  this.A[8] = -1333e-6;
  this.A[9] = 67e-5;
  this.A[10] = -34e-5;
  this.B_re = [];
  this.B_im = [];
  this.B_re[1] = 0.7557853228;
  this.B_im[1] = 0;
  this.B_re[2] = 0.249204646;
  this.B_im[2] = 3371507e-9;
  this.B_re[3] = -1541739e-9;
  this.B_im[3] = 0.04105856;
  this.B_re[4] = -0.10162907;
  this.B_im[4] = 0.01727609;
  this.B_re[5] = -0.26623489;
  this.B_im[5] = -0.36249218;
  this.B_re[6] = -0.6870983;
  this.B_im[6] = -1.1651967;
  this.C_re = [];
  this.C_im = [];
  this.C_re[1] = 1.3231270439;
  this.C_im[1] = 0;
  this.C_re[2] = -0.577245789;
  this.C_im[2] = -7809598e-9;
  this.C_re[3] = 0.508307513;
  this.C_im[3] = -0.112208952;
  this.C_re[4] = -0.15094762;
  this.C_im[4] = 0.18200602;
  this.C_re[5] = 1.01418179;
  this.C_im[5] = 1.64497696;
  this.C_re[6] = 1.9660549;
  this.C_im[6] = 2.5127645;
  this.D = [];
  this.D[1] = 1.5627014243;
  this.D[2] = 0.5185406398;
  this.D[3] = -0.03333098;
  this.D[4] = -0.1052906;
  this.D[5] = -0.0368594;
  this.D[6] = 7317e-6;
  this.D[7] = 0.0122;
  this.D[8] = 394e-5;
  this.D[9] = -13e-4;
}
function forward19(p) {
  var n;
  var lon = p.x;
  var lat = p.y;
  var delta_lat = lat - this.lat0;
  var delta_lon = lon - this.long0;
  var d_phi = delta_lat / SEC_TO_RAD * 1e-5;
  var d_lambda = delta_lon;
  var d_phi_n = 1;
  var d_psi = 0;
  for (n = 1; n <= 10; n++) {
    d_phi_n = d_phi_n * d_phi;
    d_psi = d_psi + this.A[n] * d_phi_n;
  }
  var th_re = d_psi;
  var th_im = d_lambda;
  var th_n_re = 1;
  var th_n_im = 0;
  var th_n_re1;
  var th_n_im1;
  var z_re = 0;
  var z_im = 0;
  for (n = 1; n <= 6; n++) {
    th_n_re1 = th_n_re * th_re - th_n_im * th_im;
    th_n_im1 = th_n_im * th_re + th_n_re * th_im;
    th_n_re = th_n_re1;
    th_n_im = th_n_im1;
    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;
    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;
  }
  p.x = z_im * this.a + this.x0;
  p.y = z_re * this.a + this.y0;
  return p;
}
function inverse19(p) {
  var n;
  var x = p.x;
  var y = p.y;
  var delta_x = x - this.x0;
  var delta_y = y - this.y0;
  var z_re = delta_y / this.a;
  var z_im = delta_x / this.a;
  var z_n_re = 1;
  var z_n_im = 0;
  var z_n_re1;
  var z_n_im1;
  var th_re = 0;
  var th_im = 0;
  for (n = 1; n <= 6; n++) {
    z_n_re1 = z_n_re * z_re - z_n_im * z_im;
    z_n_im1 = z_n_im * z_re + z_n_re * z_im;
    z_n_re = z_n_re1;
    z_n_im = z_n_im1;
    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;
    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;
  }
  for (var i = 0; i < this.iterations; i++) {
    var th_n_re = th_re;
    var th_n_im = th_im;
    var th_n_re1;
    var th_n_im1;
    var num_re = z_re;
    var num_im = z_im;
    for (n = 2; n <= 6; n++) {
      th_n_re1 = th_n_re * th_re - th_n_im * th_im;
      th_n_im1 = th_n_im * th_re + th_n_re * th_im;
      th_n_re = th_n_re1;
      th_n_im = th_n_im1;
      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
    }
    th_n_re = 1;
    th_n_im = 0;
    var den_re = this.B_re[1];
    var den_im = this.B_im[1];
    for (n = 2; n <= 6; n++) {
      th_n_re1 = th_n_re * th_re - th_n_im * th_im;
      th_n_im1 = th_n_im * th_re + th_n_re * th_im;
      th_n_re = th_n_re1;
      th_n_im = th_n_im1;
      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
    }
    var den2 = den_re * den_re + den_im * den_im;
    th_re = (num_re * den_re + num_im * den_im) / den2;
    th_im = (num_im * den_re - num_re * den_im) / den2;
  }
  var d_psi = th_re;
  var d_lambda = th_im;
  var d_psi_n = 1;
  var d_phi = 0;
  for (n = 1; n <= 9; n++) {
    d_psi_n = d_psi_n * d_psi;
    d_phi = d_phi + this.D[n] * d_psi_n;
  }
  var lat = this.lat0 + d_phi * SEC_TO_RAD * 1e5;
  var lon = this.long0 + d_lambda;
  p.x = lon;
  p.y = lat;
  return p;
}
var names21, nzmg_default;
var init_nzmg = __esm({
  "node_modules/proj4/lib/projections/nzmg.js"() {
    init_values();
    names21 = ["New_Zealand_Map_Grid", "nzmg"];
    nzmg_default = {
      init: init20,
      forward: forward19,
      inverse: inverse19,
      names: names21
    };
  }
});

// node_modules/proj4/lib/projections/mill.js
function init21() {
}
function forward20(p) {
  var lon = p.x;
  var lat = p.y;
  var dlon = adjust_lon_default(lon - this.long0);
  var x = this.x0 + this.a * dlon;
  var y = this.y0 + this.a * Math.log(Math.tan(Math.PI / 4 + lat / 2.5)) * 1.25;
  p.x = x;
  p.y = y;
  return p;
}
function inverse20(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var lon = adjust_lon_default(this.long0 + p.x / this.a);
  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);
  p.x = lon;
  p.y = lat;
  return p;
}
var names22, mill_default;
var init_mill = __esm({
  "node_modules/proj4/lib/projections/mill.js"() {
    init_adjust_lon();
    names22 = ["Miller_Cylindrical", "mill"];
    mill_default = {
      init: init21,
      forward: forward20,
      inverse: inverse20,
      names: names22
    };
  }
});

// node_modules/proj4/lib/projections/sinu.js
function init22() {
  if (!this.sphere) {
    this.en = pj_enfn_default(this.es);
  } else {
    this.n = 1;
    this.m = 0;
    this.es = 0;
    this.C_y = Math.sqrt((this.m + 1) / this.n);
    this.C_x = this.C_y / (this.m + 1);
  }
}
function forward21(p) {
  var x, y;
  var lon = p.x;
  var lat = p.y;
  lon = adjust_lon_default(lon - this.long0);
  if (this.sphere) {
    if (!this.m) {
      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;
    } else {
      var k = this.n * Math.sin(lat);
      for (var i = MAX_ITER4; i; --i) {
        var V2 = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));
        lat -= V2;
        if (Math.abs(V2) < EPSLN) {
          break;
        }
      }
    }
    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));
    y = this.a * this.C_y * lat;
  } else {
    var s = Math.sin(lat);
    var c = Math.cos(lat);
    y = this.a * pj_mlfn_default(lat, s, c, this.en);
    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);
  }
  p.x = x;
  p.y = y;
  return p;
}
function inverse21(p) {
  var lat, temp, lon, s;
  p.x -= this.x0;
  lon = p.x / this.a;
  p.y -= this.y0;
  lat = p.y / this.a;
  if (this.sphere) {
    lat /= this.C_y;
    lon = lon / (this.C_x * (this.m + Math.cos(lat)));
    if (this.m) {
      lat = asinz_default((this.m * lat + Math.sin(lat)) / this.n);
    } else if (this.n !== 1) {
      lat = asinz_default(Math.sin(lat) / this.n);
    }
    lon = adjust_lon_default(lon + this.long0);
    lat = adjust_lat_default(lat);
  } else {
    lat = pj_inv_mlfn_default(p.y / this.a, this.es, this.en);
    s = Math.abs(lat);
    if (s < HALF_PI) {
      s = Math.sin(lat);
      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));
      lon = adjust_lon_default(temp);
    } else if (s - EPSLN < HALF_PI) {
      lon = this.long0;
    }
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var MAX_ITER4, names23, sinu_default;
var init_sinu = __esm({
  "node_modules/proj4/lib/projections/sinu.js"() {
    init_adjust_lon();
    init_adjust_lat();
    init_pj_enfn();
    init_pj_mlfn();
    init_pj_inv_mlfn();
    init_values();
    init_asinz();
    MAX_ITER4 = 20;
    names23 = ["Sinusoidal", "sinu"];
    sinu_default = {
      init: init22,
      forward: forward21,
      inverse: inverse21,
      names: names23
    };
  }
});

// node_modules/proj4/lib/projections/moll.js
function init23() {
}
function forward22(p) {
  var lon = p.x;
  var lat = p.y;
  var delta_lon = adjust_lon_default(lon - this.long0);
  var theta = lat;
  var con = Math.PI * Math.sin(lat);
  while (true) {
    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));
    theta += delta_theta;
    if (Math.abs(delta_theta) < EPSLN) {
      break;
    }
  }
  theta /= 2;
  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {
    delta_lon = 0;
  }
  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;
  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;
  p.x = x;
  p.y = y;
  return p;
}
function inverse22(p) {
  var theta;
  var arg;
  p.x -= this.x0;
  p.y -= this.y0;
  arg = p.y / (1.4142135623731 * this.a);
  if (Math.abs(arg) > 0.999999999999) {
    arg = 0.999999999999;
  }
  theta = Math.asin(arg);
  var lon = adjust_lon_default(this.long0 + p.x / (0.900316316158 * this.a * Math.cos(theta)));
  if (lon < -Math.PI) {
    lon = -Math.PI;
  }
  if (lon > Math.PI) {
    lon = Math.PI;
  }
  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;
  if (Math.abs(arg) > 1) {
    arg = 1;
  }
  var lat = Math.asin(arg);
  p.x = lon;
  p.y = lat;
  return p;
}
var names24, moll_default;
var init_moll = __esm({
  "node_modules/proj4/lib/projections/moll.js"() {
    init_adjust_lon();
    init_values();
    names24 = ["Mollweide", "moll"];
    moll_default = {
      init: init23,
      forward: forward22,
      inverse: inverse22,
      names: names24
    };
  }
});

// node_modules/proj4/lib/projections/eqdc.js
function init24() {
  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
    return;
  }
  this.lat2 = this.lat2 || this.lat1;
  this.temp = this.b / this.a;
  this.es = 1 - Math.pow(this.temp, 2);
  this.e = Math.sqrt(this.es);
  this.e0 = e0fn_default(this.es);
  this.e1 = e1fn_default(this.es);
  this.e2 = e2fn_default(this.es);
  this.e3 = e3fn_default(this.es);
  this.sin_phi = Math.sin(this.lat1);
  this.cos_phi = Math.cos(this.lat1);
  this.ms1 = msfnz_default(this.e, this.sin_phi, this.cos_phi);
  this.ml1 = mlfn_default(this.e0, this.e1, this.e2, this.e3, this.lat1);
  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {
    this.ns = this.sin_phi;
  } else {
    this.sin_phi = Math.sin(this.lat2);
    this.cos_phi = Math.cos(this.lat2);
    this.ms2 = msfnz_default(this.e, this.sin_phi, this.cos_phi);
    this.ml2 = mlfn_default(this.e0, this.e1, this.e2, this.e3, this.lat2);
    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);
  }
  this.g = this.ml1 + this.ms1 / this.ns;
  this.ml0 = mlfn_default(this.e0, this.e1, this.e2, this.e3, this.lat0);
  this.rh = this.a * (this.g - this.ml0);
}
function forward23(p) {
  var lon = p.x;
  var lat = p.y;
  var rh1;
  if (this.sphere) {
    rh1 = this.a * (this.g - lat);
  } else {
    var ml = mlfn_default(this.e0, this.e1, this.e2, this.e3, lat);
    rh1 = this.a * (this.g - ml);
  }
  var theta = this.ns * adjust_lon_default(lon - this.long0);
  var x = this.x0 + rh1 * Math.sin(theta);
  var y = this.y0 + this.rh - rh1 * Math.cos(theta);
  p.x = x;
  p.y = y;
  return p;
}
function inverse23(p) {
  p.x -= this.x0;
  p.y = this.rh - p.y + this.y0;
  var con, rh1, lat, lon;
  if (this.ns >= 0) {
    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
    con = 1;
  } else {
    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
    con = -1;
  }
  var theta = 0;
  if (rh1 !== 0) {
    theta = Math.atan2(con * p.x, con * p.y);
  }
  if (this.sphere) {
    lon = adjust_lon_default(this.long0 + theta / this.ns);
    lat = adjust_lat_default(this.g - rh1 / this.a);
    p.x = lon;
    p.y = lat;
    return p;
  } else {
    var ml = this.g - rh1 / this.a;
    lat = imlfn_default(ml, this.e0, this.e1, this.e2, this.e3);
    lon = adjust_lon_default(this.long0 + theta / this.ns);
    p.x = lon;
    p.y = lat;
    return p;
  }
}
var names25, eqdc_default;
var init_eqdc = __esm({
  "node_modules/proj4/lib/projections/eqdc.js"() {
    init_e0fn();
    init_e1fn();
    init_e2fn();
    init_e3fn();
    init_msfnz();
    init_mlfn();
    init_adjust_lon();
    init_adjust_lat();
    init_imlfn();
    init_values();
    names25 = ["Equidistant_Conic", "eqdc"];
    eqdc_default = {
      init: init24,
      forward: forward23,
      inverse: inverse23,
      names: names25
    };
  }
});

// node_modules/proj4/lib/projections/vandg.js
function init25() {
  this.R = this.a;
}
function forward24(p) {
  var lon = p.x;
  var lat = p.y;
  var dlon = adjust_lon_default(lon - this.long0);
  var x, y;
  if (Math.abs(lat) <= EPSLN) {
    x = this.x0 + this.R * dlon;
    y = this.y0;
  }
  var theta = asinz_default(2 * Math.abs(lat / Math.PI));
  if (Math.abs(dlon) <= EPSLN || Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
    x = this.x0;
    if (lat >= 0) {
      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);
    } else {
      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);
    }
  }
  var al = 0.5 * Math.abs(Math.PI / dlon - dlon / Math.PI);
  var asq = al * al;
  var sinth = Math.sin(theta);
  var costh = Math.cos(theta);
  var g = costh / (sinth + costh - 1);
  var gsq = g * g;
  var m = g * (2 / sinth - 1);
  var msq = m * m;
  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);
  if (dlon < 0) {
    con = -con;
  }
  x = this.x0 + con;
  var q = asq + g;
  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);
  if (lat >= 0) {
    y = this.y0 + con;
  } else {
    y = this.y0 - con;
  }
  p.x = x;
  p.y = y;
  return p;
}
function inverse24(p) {
  var lon, lat;
  var xx, yy, xys, c1, c2, c3;
  var a1;
  var m1;
  var con;
  var th1;
  var d;
  p.x -= this.x0;
  p.y -= this.y0;
  con = Math.PI * this.R;
  xx = p.x / con;
  yy = p.y / con;
  xys = xx * xx + yy * yy;
  c1 = -Math.abs(yy) * (1 + xys);
  c2 = c1 - 2 * yy * yy + xx * xx;
  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;
  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;
  a1 = (c1 - c2 * c2 / 3 / c3) / c3;
  m1 = 2 * Math.sqrt(-a1 / 3);
  con = 3 * d / a1 / m1;
  if (Math.abs(con) > 1) {
    if (con >= 0) {
      con = 1;
    } else {
      con = -1;
    }
  }
  th1 = Math.acos(con) / 3;
  if (p.y >= 0) {
    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
  } else {
    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
  }
  if (Math.abs(xx) < EPSLN) {
    lon = this.long0;
  } else {
    lon = adjust_lon_default(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);
  }
  p.x = lon;
  p.y = lat;
  return p;
}
var names26, vandg_default;
var init_vandg = __esm({
  "node_modules/proj4/lib/projections/vandg.js"() {
    init_adjust_lon();
    init_values();
    init_asinz();
    names26 = ["Van_der_Grinten_I", "VanDerGrinten", "Van_der_Grinten", "vandg"];
    vandg_default = {
      init: init25,
      forward: forward24,
      inverse: inverse24,
      names: names26
    };
  }
});

// node_modules/proj4/lib/common/vincenty.js
function vincentyInverse(lat1, lon1, lat2, lon2, a, f) {
  const L2 = lon2 - lon1;
  const U1 = Math.atan((1 - f) * Math.tan(lat1));
  const U2 = Math.atan((1 - f) * Math.tan(lat2));
  const sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
  const sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);
  let lambda = L2, lambdaP, iterLimit = 100;
  let sinLambda, cosLambda, sinSigma, cosSigma, sigma, sinAlpha, cos2Alpha, cos2SigmaM, C;
  let uSq, A5, B, deltaSigma, s;
  do {
    sinLambda = Math.sin(lambda);
    cosLambda = Math.cos(lambda);
    sinSigma = Math.sqrt(
      cosU2 * sinLambda * (cosU2 * sinLambda) + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda)
    );
    if (sinSigma === 0) {
      return { azi1: 0, s12: 0 };
    }
    cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;
    sigma = Math.atan2(sinSigma, cosSigma);
    sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;
    cos2Alpha = 1 - sinAlpha * sinAlpha;
    cos2SigmaM = cos2Alpha !== 0 ? cosSigma - 2 * sinU1 * sinU2 / cos2Alpha : 0;
    C = f / 16 * cos2Alpha * (4 + f * (4 - 3 * cos2Alpha));
    lambdaP = lambda;
    lambda = L2 + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
  } while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0);
  if (iterLimit === 0) {
    return { azi1: NaN, s12: NaN };
  }
  uSq = cos2Alpha * (a * a - a * (1 - f) * (a * (1 - f))) / (a * (1 - f) * (a * (1 - f)));
  A5 = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
  B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));
  deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
  s = a * (1 - f) * A5 * (sigma - deltaSigma);
  const azi1 = Math.atan2(cosU2 * sinLambda, cosU1 * sinU2 - sinU1 * cosU2 * cosLambda);
  return { azi1, s12: s };
}
function vincentyDirect(lat1, lon1, azi1, s12, a, f) {
  const U1 = Math.atan((1 - f) * Math.tan(lat1));
  const sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);
  const sinAlpha1 = Math.sin(azi1), cosAlpha1 = Math.cos(azi1);
  const sigma1 = Math.atan2(sinU1, cosU1 * cosAlpha1);
  const sinAlpha = cosU1 * sinAlpha1;
  const cos2Alpha = 1 - sinAlpha * sinAlpha;
  const uSq = cos2Alpha * (a * a - a * (1 - f) * (a * (1 - f))) / (a * (1 - f) * (a * (1 - f)));
  const A5 = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));
  const B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));
  let sigma = s12 / (a * (1 - f) * A5), sigmaP, iterLimit = 100;
  let cos2SigmaM, sinSigma, cosSigma, deltaSigma;
  do {
    cos2SigmaM = Math.cos(2 * sigma1 + sigma);
    sinSigma = Math.sin(sigma);
    cosSigma = Math.cos(sigma);
    deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));
    sigmaP = sigma;
    sigma = s12 / (a * (1 - f) * A5) + deltaSigma;
  } while (Math.abs(sigma - sigmaP) > 1e-12 && --iterLimit > 0);
  if (iterLimit === 0) {
    return { lat2: NaN, lon2: NaN };
  }
  const tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;
  const lat2 = Math.atan2(
    sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1,
    (1 - f) * Math.sqrt(sinAlpha * sinAlpha + tmp * tmp)
  );
  const lambda = Math.atan2(
    sinSigma * sinAlpha1,
    cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1
  );
  const C = f / 16 * cos2Alpha * (4 + f * (4 - 3 * cos2Alpha));
  const L2 = lambda - (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));
  const lon2 = lon1 + L2;
  return { lat2, lon2 };
}
var init_vincenty = __esm({
  "node_modules/proj4/lib/common/vincenty.js"() {
  }
});

// node_modules/proj4/lib/projections/aeqd.js
function init26() {
  this.sin_p12 = Math.sin(this.lat0);
  this.cos_p12 = Math.cos(this.lat0);
  this.f = this.es / (1 + Math.sqrt(1 - this.es));
}
function forward25(p) {
  var lon = p.x;
  var lat = p.y;
  var sinphi = Math.sin(p.y);
  var cosphi = Math.cos(p.y);
  var dlon = adjust_lon_default(lon - this.long0);
  var e0, e1, e2, e3, Mlp, Ml, c, kp, cos_c, vars, azi1;
  if (this.sphere) {
    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);
      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);
      return p;
    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);
      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);
      return p;
    } else {
      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);
      c = Math.acos(cos_c);
      kp = c ? c / Math.sin(c) : 1;
      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);
      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));
      return p;
    }
  } else {
    e0 = e0fn_default(this.es);
    e1 = e1fn_default(this.es);
    e2 = e2fn_default(this.es);
    e3 = e3fn_default(this.es);
    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
      Mlp = this.a * mlfn_default(e0, e1, e2, e3, HALF_PI);
      Ml = this.a * mlfn_default(e0, e1, e2, e3, lat);
      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);
      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);
      return p;
    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
      Mlp = this.a * mlfn_default(e0, e1, e2, e3, HALF_PI);
      Ml = this.a * mlfn_default(e0, e1, e2, e3, lat);
      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);
      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);
      return p;
    } else {
      if (Math.abs(lon) < EPSLN && Math.abs(lat - this.lat0) < EPSLN) {
        p.x = p.y = 0;
        return p;
      }
      vars = vincentyInverse(this.lat0, this.long0, lat, lon, this.a, this.f);
      azi1 = vars.azi1;
      p.x = vars.s12 * Math.sin(azi1);
      p.y = vars.s12 * Math.cos(azi1);
      return p;
    }
  }
}
function inverse25(p) {
  p.x -= this.x0;
  p.y -= this.y0;
  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M2, azi1, s12, vars;
  if (this.sphere) {
    rh = Math.sqrt(p.x * p.x + p.y * p.y);
    if (rh > 2 * HALF_PI * this.a) {
      return;
    }
    z = rh / this.a;
    sinz = Math.sin(z);
    cosz = Math.cos(z);
    lon = this.long0;
    if (Math.abs(rh) <= EPSLN) {
      lat = this.lat0;
    } else {
      lat = asinz_default(cosz * this.sin_p12 + p.y * sinz * this.cos_p12 / rh);
      con = Math.abs(this.lat0) - HALF_PI;
      if (Math.abs(con) <= EPSLN) {
        if (this.lat0 >= 0) {
          lon = adjust_lon_default(this.long0 + Math.atan2(p.x, -p.y));
        } else {
          lon = adjust_lon_default(this.long0 - Math.atan2(-p.x, p.y));
        }
      } else {
        lon = adjust_lon_default(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));
      }
    }
    p.x = lon;
    p.y = lat;
    return p;
  } else {
    e0 = e0fn_default(this.es);
    e1 = e1fn_default(this.es);
    e2 = e2fn_default(this.es);
    e3 = e3fn_default(this.es);
    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
      Mlp = this.a * mlfn_default(e0, e1, e2, e3, HALF_PI);
      rh = Math.sqrt(p.x * p.x + p.y * p.y);
      M2 = Mlp - rh;
      lat = imlfn_default(M2 / this.a, e0, e1, e2, e3);
      lon = adjust_lon_default(this.long0 + Math.atan2(p.x, -1 * p.y));
      p.x = lon;
      p.y = lat;
      return p;
    } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
      Mlp = this.a * mlfn_default(e0, e1, e2, e3, HALF_PI);
      rh = Math.sqrt(p.x * p.x + p.y * p.y);
      M2 = rh - Mlp;
      lat = imlfn_default(M2 / this.a, e0, e1, e2, e3);
      lon = adjust_lon_default(this.long0 + Math.atan2(p.x, p.y));
      p.x = lon;
      p.y = lat;
      return p;
    } else {
      azi1 = Math.atan2(p.x, p.y);
      s12 = Math.sqrt(p.x * p.x + p.y * p.y);
      vars = vincentyDirect(this.lat0, this.long0, azi1, s12, this.a, this.f);
      p.x = vars.lon2;
      p.y = vars.lat2;
      return p;
    }
  }
}
var names27, aeqd_default;
var init_aeqd = __esm({
  "node_modules/proj4/lib/projections/aeqd.js"() {
    init_adjust_lon();
    init_values();
    init_mlfn();
    init_e0fn();
    init_e1fn();
    init_e2fn();
    init_e3fn();
    init_asinz();
    init_imlfn();
    init_vincenty();
    names27 = ["Azimuthal_Equidistant", "aeqd"];
    aeqd_default = {
      init: init26,
      forward: forward25,
      inverse: inverse25,
      names: names27
    };
  }
});

// node_modules/proj4/lib/projections/ortho.js
function init27() {
  this.sin_p14 = Math.sin(this.lat0);
  this.cos_p14 = Math.cos(this.lat0);
}
function forward26(p) {
  var sinphi, cosphi;
  var dlon;
  var coslon;
  var ksp;
  var g, x, y;
  var lon = p.x;
  var lat = p.y;
  dlon = adjust_lon_default(lon - this.long0);
  sinphi = Math.sin(lat);
  cosphi = Math.cos(lat);
  coslon = Math.cos(dlon);
  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
  ksp = 1;
  if (g > 0 || Math.abs(g) <= EPSLN) {
    x = this.a * ksp * cosphi * Math.sin(dlon);
    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
  }
  p.x = x;
  p.y = y;
  return p;
}
function inverse26(p) {
  var rh;
  var z;
  var sinz, cosz;
  var con;
  var lon, lat;
  p.x -= this.x0;
  p.y -= this.y0;
  rh = Math.sqrt(p.x * p.x + p.y * p.y);
  z = asinz_default(rh / this.a);
  sinz = Math.sin(z);
  cosz = Math.cos(z);
  lon = this.long0;
  if (Math.abs(rh) <= EPSLN) {
    lat = this.lat0;
    p.x = lon;
    p.y = lat;
    return p;
  }
  lat = asinz_default(cosz * this.sin_p14 + p.y * sinz * this.cos_p14 / rh);
  con = Math.abs(this.lat0) - HALF_PI;
  if (Math.abs(con) <= EPSLN) {
    if (this.lat0 >= 0) {
      lon = adjust_lon_default(this.long0 + Math.atan2(p.x, -p.y));
    } else {
      lon = adjust_lon_default(this.long0 - Math.atan2(-p.x, p.y));
    }
    p.x = lon;
    p.y = lat;
    return p;
  }
  lon = adjust_lon_default(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));
  p.x = lon;
  p.y = lat;
  return p;
}
var names28, ortho_default;
var init_ortho = __esm({
  "node_modules/proj4/lib/projections/ortho.js"() {
    init_adjust_lon();
    init_asinz();
    init_values();
    names28 = ["ortho"];
    ortho_default = {
      init: init27,
      forward: forward26,
      inverse: inverse26,
      names: names28
    };
  }
});

// node_modules/proj4/lib/projections/qsc.js
function init28() {
  this.x0 = this.x0 || 0;
  this.y0 = this.y0 || 0;
  this.lat0 = this.lat0 || 0;
  this.long0 = this.long0 || 0;
  this.lat_ts = this.lat_ts || 0;
  this.title = this.title || "Quadrilateralized Spherical Cube";
  if (this.lat0 >= HALF_PI - FORTPI / 2) {
    this.face = FACE_ENUM.TOP;
  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2)) {
    this.face = FACE_ENUM.BOTTOM;
  } else if (Math.abs(this.long0) <= FORTPI) {
    this.face = FACE_ENUM.FRONT;
  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {
    this.face = this.long0 > 0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;
  } else {
    this.face = FACE_ENUM.BACK;
  }
  if (this.es !== 0) {
    this.one_minus_f = 1 - (this.a - this.b) / this.a;
    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;
  }
}
function forward27(p) {
  var xy = { x: 0, y: 0 };
  var lat, lon;
  var theta, phi;
  var t, mu;
  var area = { value: 0 };
  p.x -= this.long0;
  if (this.es !== 0) {
    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));
  } else {
    lat = p.y;
  }
  lon = p.x;
  if (this.face === FACE_ENUM.TOP) {
    phi = HALF_PI - lat;
    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
      area.value = AREA_ENUM.AREA_0;
      theta = lon - HALF_PI;
    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {
      area.value = AREA_ENUM.AREA_1;
      theta = lon > 0 ? lon - SPI : lon + SPI;
    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {
      area.value = AREA_ENUM.AREA_2;
      theta = lon + HALF_PI;
    } else {
      area.value = AREA_ENUM.AREA_3;
      theta = lon;
    }
  } else if (this.face === FACE_ENUM.BOTTOM) {
    phi = HALF_PI + lat;
    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
      area.value = AREA_ENUM.AREA_0;
      theta = -lon + HALF_PI;
    } else if (lon < FORTPI && lon >= -FORTPI) {
      area.value = AREA_ENUM.AREA_1;
      theta = -lon;
    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {
      area.value = AREA_ENUM.AREA_2;
      theta = -lon - HALF_PI;
    } else {
      area.value = AREA_ENUM.AREA_3;
      theta = lon > 0 ? -lon + SPI : -lon - SPI;
    }
  } else {
    var q, r, s;
    var sinlat, coslat;
    var sinlon, coslon;
    if (this.face === FACE_ENUM.RIGHT) {
      lon = qsc_shift_lon_origin(lon, +HALF_PI);
    } else if (this.face === FACE_ENUM.BACK) {
      lon = qsc_shift_lon_origin(lon, +SPI);
    } else if (this.face === FACE_ENUM.LEFT) {
      lon = qsc_shift_lon_origin(lon, -HALF_PI);
    }
    sinlat = Math.sin(lat);
    coslat = Math.cos(lat);
    sinlon = Math.sin(lon);
    coslon = Math.cos(lon);
    q = coslat * coslon;
    r = coslat * sinlon;
    s = sinlat;
    if (this.face === FACE_ENUM.FRONT) {
      phi = Math.acos(q);
      theta = qsc_fwd_equat_face_theta(phi, s, r, area);
    } else if (this.face === FACE_ENUM.RIGHT) {
      phi = Math.acos(r);
      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);
    } else if (this.face === FACE_ENUM.BACK) {
      phi = Math.acos(-q);
      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);
    } else if (this.face === FACE_ENUM.LEFT) {
      phi = Math.acos(-r);
      theta = qsc_fwd_equat_face_theta(phi, s, q, area);
    } else {
      phi = theta = 0;
      area.value = AREA_ENUM.AREA_0;
    }
  }
  mu = Math.atan(12 / SPI * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));
  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));
  if (area.value === AREA_ENUM.AREA_1) {
    mu += HALF_PI;
  } else if (area.value === AREA_ENUM.AREA_2) {
    mu += SPI;
  } else if (area.value === AREA_ENUM.AREA_3) {
    mu += 1.5 * SPI;
  }
  xy.x = t * Math.cos(mu);
  xy.y = t * Math.sin(mu);
  xy.x = xy.x * this.a + this.x0;
  xy.y = xy.y * this.a + this.y0;
  p.x = xy.x;
  p.y = xy.y;
  return p;
}
function inverse27(p) {
  var lp = { lam: 0, phi: 0 };
  var mu, nu, cosmu, tannu;
  var tantheta, theta, cosphi, phi;
  var t;
  var area = { value: 0 };
  p.x = (p.x - this.x0) / this.a;
  p.y = (p.y - this.y0) / this.a;
  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));
  mu = Math.atan2(p.y, p.x);
  if (p.x >= 0 && p.x >= Math.abs(p.y)) {
    area.value = AREA_ENUM.AREA_0;
  } else if (p.y >= 0 && p.y >= Math.abs(p.x)) {
    area.value = AREA_ENUM.AREA_1;
    mu -= HALF_PI;
  } else if (p.x < 0 && -p.x >= Math.abs(p.y)) {
    area.value = AREA_ENUM.AREA_2;
    mu = mu < 0 ? mu + SPI : mu - SPI;
  } else {
    area.value = AREA_ENUM.AREA_3;
    mu += HALF_PI;
  }
  t = SPI / 12 * Math.tan(mu);
  tantheta = Math.sin(t) / (Math.cos(t) - 1 / Math.sqrt(2));
  theta = Math.atan(tantheta);
  cosmu = Math.cos(mu);
  tannu = Math.tan(nu);
  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));
  if (cosphi < -1) {
    cosphi = -1;
  } else if (cosphi > 1) {
    cosphi = 1;
  }
  if (this.face === FACE_ENUM.TOP) {
    phi = Math.acos(cosphi);
    lp.phi = HALF_PI - phi;
    if (area.value === AREA_ENUM.AREA_0) {
      lp.lam = theta + HALF_PI;
    } else if (area.value === AREA_ENUM.AREA_1) {
      lp.lam = theta < 0 ? theta + SPI : theta - SPI;
    } else if (area.value === AREA_ENUM.AREA_2) {
      lp.lam = theta - HALF_PI;
    } else {
      lp.lam = theta;
    }
  } else if (this.face === FACE_ENUM.BOTTOM) {
    phi = Math.acos(cosphi);
    lp.phi = phi - HALF_PI;
    if (area.value === AREA_ENUM.AREA_0) {
      lp.lam = -theta + HALF_PI;
    } else if (area.value === AREA_ENUM.AREA_1) {
      lp.lam = -theta;
    } else if (area.value === AREA_ENUM.AREA_2) {
      lp.lam = -theta - HALF_PI;
    } else {
      lp.lam = theta < 0 ? -theta - SPI : -theta + SPI;
    }
  } else {
    var q, r, s;
    q = cosphi;
    t = q * q;
    if (t >= 1) {
      s = 0;
    } else {
      s = Math.sqrt(1 - t) * Math.sin(theta);
    }
    t += s * s;
    if (t >= 1) {
      r = 0;
    } else {
      r = Math.sqrt(1 - t);
    }
    if (area.value === AREA_ENUM.AREA_1) {
      t = r;
      r = -s;
      s = t;
    } else if (area.value === AREA_ENUM.AREA_2) {
      r = -r;
      s = -s;
    } else if (area.value === AREA_ENUM.AREA_3) {
      t = r;
      r = s;
      s = -t;
    }
    if (this.face === FACE_ENUM.RIGHT) {
      t = q;
      q = -r;
      r = t;
    } else if (this.face === FACE_ENUM.BACK) {
      q = -q;
      r = -r;
    } else if (this.face === FACE_ENUM.LEFT) {
      t = q;
      q = r;
      r = -t;
    }
    lp.phi = Math.acos(-s) - HALF_PI;
    lp.lam = Math.atan2(r, q);
    if (this.face === FACE_ENUM.RIGHT) {
      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);
    } else if (this.face === FACE_ENUM.BACK) {
      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);
    } else if (this.face === FACE_ENUM.LEFT) {
      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);
    }
  }
  if (this.es !== 0) {
    var invert_sign;
    var tanphi, xa;
    invert_sign = lp.phi < 0 ? 1 : 0;
    tanphi = Math.tan(lp.phi);
    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);
    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));
    if (invert_sign) {
      lp.phi = -lp.phi;
    }
  }
  lp.lam += this.long0;
  p.x = lp.lam;
  p.y = lp.phi;
  return p;
}
function qsc_fwd_equat_face_theta(phi, y, x, area) {
  var theta;
  if (phi < EPSLN) {
    area.value = AREA_ENUM.AREA_0;
    theta = 0;
  } else {
    theta = Math.atan2(y, x);
    if (Math.abs(theta) <= FORTPI) {
      area.value = AREA_ENUM.AREA_0;
    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {
      area.value = AREA_ENUM.AREA_1;
      theta -= HALF_PI;
    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {
      area.value = AREA_ENUM.AREA_2;
      theta = theta >= 0 ? theta - SPI : theta + SPI;
    } else {
      area.value = AREA_ENUM.AREA_3;
      theta += HALF_PI;
    }
  }
  return theta;
}
function qsc_shift_lon_origin(lon, offset) {
  var slon = lon + offset;
  if (slon < -SPI) {
    slon += TWO_PI;
  } else if (slon > +SPI) {
    slon -= TWO_PI;
  }
  return slon;
}
var FACE_ENUM, AREA_ENUM, names29, qsc_default;
var init_qsc = __esm({
  "node_modules/proj4/lib/projections/qsc.js"() {
    init_values();
    FACE_ENUM = {
      FRONT: 1,
      RIGHT: 2,
      BACK: 3,
      LEFT: 4,
      TOP: 5,
      BOTTOM: 6
    };
    AREA_ENUM = {
      AREA_0: 1,
      AREA_1: 2,
      AREA_2: 3,
      AREA_3: 4
    };
    names29 = ["Quadrilateralized Spherical Cube", "Quadrilateralized_Spherical_Cube", "qsc"];
    qsc_default = {
      init: init28,
      forward: forward27,
      inverse: inverse27,
      names: names29
    };
  }
});

// node_modules/proj4/lib/projections/robin.js
function newton_rapshon(f_df, start2, max_err, iters) {
  var x = start2;
  for (; iters; --iters) {
    var upd = f_df(x);
    x -= upd;
    if (Math.abs(upd) < max_err) {
      break;
    }
  }
  return x;
}
function init29() {
  this.x0 = this.x0 || 0;
  this.y0 = this.y0 || 0;
  this.long0 = this.long0 || 0;
  this.es = 0;
  this.title = this.title || "Robinson";
}
function forward28(ll) {
  var lon = adjust_lon_default(ll.x - this.long0);
  var dphi = Math.abs(ll.y);
  var i = Math.floor(dphi * C1);
  if (i < 0) {
    i = 0;
  } else if (i >= NODES) {
    i = NODES - 1;
  }
  dphi = R2D * (dphi - RC1 * i);
  var xy = {
    x: poly3_val(COEFS_X[i], dphi) * lon,
    y: poly3_val(COEFS_Y[i], dphi)
  };
  if (ll.y < 0) {
    xy.y = -xy.y;
  }
  xy.x = xy.x * this.a * FXC + this.x0;
  xy.y = xy.y * this.a * FYC + this.y0;
  return xy;
}
function inverse28(xy) {
  var ll = {
    x: (xy.x - this.x0) / (this.a * FXC),
    y: Math.abs(xy.y - this.y0) / (this.a * FYC)
  };
  if (ll.y >= 1) {
    ll.x /= COEFS_X[NODES][0];
    ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;
  } else {
    var i = Math.floor(ll.y * NODES);
    if (i < 0) {
      i = 0;
    } else if (i >= NODES) {
      i = NODES - 1;
    }
    for (; ; ) {
      if (COEFS_Y[i][0] > ll.y) {
        --i;
      } else if (COEFS_Y[i + 1][0] <= ll.y) {
        ++i;
      } else {
        break;
      }
    }
    var coefs = COEFS_Y[i];
    var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i + 1][0] - coefs[0]);
    t = newton_rapshon(function(x) {
      return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);
    }, t, EPSLN, 100);
    ll.x /= poly3_val(COEFS_X[i], t);
    ll.y = (5 * i + t) * D2R;
    if (xy.y < 0) {
      ll.y = -ll.y;
    }
  }
  ll.x = adjust_lon_default(ll.x + this.long0);
  return ll;
}
var COEFS_X, COEFS_Y, FXC, FYC, C1, RC1, NODES, poly3_val, poly3_der, names30, robin_default;
var init_robin = __esm({
  "node_modules/proj4/lib/projections/robin.js"() {
    init_values();
    init_adjust_lon();
    COEFS_X = [
      [1, 22199e-21, -715515e-10, 31103e-10],
      [0.9986, -482243e-9, -24897e-9, -13309e-10],
      [0.9954, -83103e-8, -448605e-10, -986701e-12],
      [0.99, -135364e-8, -59661e-9, 36777e-10],
      [0.9822, -167442e-8, -449547e-11, -572411e-11],
      [0.973, -214868e-8, -903571e-10, 18736e-12],
      [0.96, -305085e-8, -900761e-10, 164917e-11],
      [0.9427, -382792e-8, -653386e-10, -26154e-10],
      [0.9216, -467746e-8, -10457e-8, 481243e-11],
      [0.8962, -536223e-8, -323831e-10, -543432e-11],
      [0.8679, -609363e-8, -113898e-9, 332484e-11],
      [0.835, -698325e-8, -640253e-10, 934959e-12],
      [0.7986, -755338e-8, -500009e-10, 935324e-12],
      [0.7597, -798324e-8, -35971e-9, -227626e-11],
      [0.7186, -851367e-8, -701149e-10, -86303e-10],
      [0.6732, -986209e-8, -199569e-9, 191974e-10],
      [0.6213, -0.010418, 883923e-10, 624051e-11],
      [0.5722, -906601e-8, 182e-6, 624051e-11],
      [0.5322, -677797e-8, 275608e-9, 624051e-11]
    ];
    COEFS_Y = [
      [-520417e-23, 0.0124, 121431e-23, -845284e-16],
      [0.062, 0.0124, -126793e-14, 422642e-15],
      [0.124, 0.0124, 507171e-14, -160604e-14],
      [0.186, 0.0123999, -190189e-13, 600152e-14],
      [0.248, 0.0124002, 710039e-13, -224e-10],
      [0.31, 0.0123992, -264997e-12, 835986e-13],
      [0.372, 0.0124029, 988983e-12, -311994e-12],
      [0.434, 0.0123893, -369093e-11, -435621e-12],
      [0.4958, 0.0123198, -102252e-10, -345523e-12],
      [0.5571, 0.0121916, -154081e-10, -582288e-12],
      [0.6176, 0.0119938, -241424e-10, -525327e-12],
      [0.6769, 0.011713, -320223e-10, -516405e-12],
      [0.7346, 0.0113541, -397684e-10, -609052e-12],
      [0.7903, 0.0109107, -489042e-10, -104739e-11],
      [0.8435, 0.0103431, -64615e-9, -140374e-14],
      [0.8936, 969686e-8, -64636e-9, -8547e-9],
      [0.9394, 840947e-8, -192841e-9, -42106e-10],
      [0.9761, 616527e-8, -256e-6, -42106e-10],
      [1, 328947e-8, -319159e-9, -42106e-10]
    ];
    FXC = 0.8487;
    FYC = 1.3523;
    C1 = R2D / 5;
    RC1 = 1 / C1;
    NODES = 18;
    poly3_val = function(coefs, x) {
      return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));
    };
    poly3_der = function(coefs, x) {
      return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);
    };
    names30 = ["Robinson", "robin"];
    robin_default = {
      init: init29,
      forward: forward28,
      inverse: inverse28,
      names: names30
    };
  }
});

// node_modules/proj4/lib/projections/geocent.js
function init30() {
  this.name = "geocent";
}
function forward29(p) {
  var point3 = geodeticToGeocentric(p, this.es, this.a);
  return point3;
}
function inverse29(p) {
  var point3 = geocentricToGeodetic(p, this.es, this.a, this.b);
  return point3;
}
var names31, geocent_default;
var init_geocent = __esm({
  "node_modules/proj4/lib/projections/geocent.js"() {
    init_datumUtils();
    names31 = ["Geocentric", "geocentric", "geocent", "Geocent"];
    geocent_default = {
      init: init30,
      forward: forward29,
      inverse: inverse29,
      names: names31
    };
  }
});

// node_modules/proj4/lib/projections/tpers.js
function init31() {
  Object.keys(params).forEach((function(p) {
    if (typeof this[p] === "undefined") {
      this[p] = params[p].def;
    } else if (params[p].num && isNaN(this[p])) {
      throw new Error("Invalid parameter value, must be numeric " + p + " = " + this[p]);
    } else if (params[p].num) {
      this[p] = parseFloat(this[p]);
    }
    if (params[p].degrees) {
      this[p] = this[p] * D2R;
    }
  }).bind(this));
  if (Math.abs(Math.abs(this.lat0) - HALF_PI) < EPSLN) {
    this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;
  } else if (Math.abs(this.lat0) < EPSLN) {
    this.mode = mode.EQUIT;
  } else {
    this.mode = mode.OBLIQ;
    this.sinph0 = Math.sin(this.lat0);
    this.cosph0 = Math.cos(this.lat0);
  }
  this.pn1 = this.h / this.a;
  if (this.pn1 <= 0 || this.pn1 > 1e10) {
    throw new Error("Invalid height");
  }
  this.p = 1 + this.pn1;
  this.rp = 1 / this.p;
  this.h1 = 1 / this.pn1;
  this.pfact = (this.p + 1) * this.h1;
  this.es = 0;
  var omega = this.tilt;
  var gamma = this.azi;
  this.cg = Math.cos(gamma);
  this.sg = Math.sin(gamma);
  this.cw = Math.cos(omega);
  this.sw = Math.sin(omega);
}
function forward30(p) {
  p.x -= this.long0;
  var sinphi = Math.sin(p.y);
  var cosphi = Math.cos(p.y);
  var coslam = Math.cos(p.x);
  var x, y;
  switch (this.mode) {
    case mode.OBLIQ:
      y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
      break;
    case mode.EQUIT:
      y = cosphi * coslam;
      break;
    case mode.S_POLE:
      y = -sinphi;
      break;
    case mode.N_POLE:
      y = sinphi;
      break;
  }
  y = this.pn1 / (this.p - y);
  x = y * cosphi * Math.sin(p.x);
  switch (this.mode) {
    case mode.OBLIQ:
      y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
      break;
    case mode.EQUIT:
      y *= sinphi;
      break;
    case mode.N_POLE:
      y *= -(cosphi * coslam);
      break;
    case mode.S_POLE:
      y *= cosphi * coslam;
      break;
  }
  var yt, ba;
  yt = y * this.cg + x * this.sg;
  ba = 1 / (yt * this.sw * this.h1 + this.cw);
  x = (x * this.cg - y * this.sg) * this.cw * ba;
  y = yt * ba;
  p.x = x * this.a;
  p.y = y * this.a;
  return p;
}
function inverse30(p) {
  p.x /= this.a;
  p.y /= this.a;
  var r = { x: p.x, y: p.y };
  var bm, bq, yt;
  yt = 1 / (this.pn1 - p.y * this.sw);
  bm = this.pn1 * p.x * yt;
  bq = this.pn1 * p.y * this.cw * yt;
  p.x = bm * this.cg + bq * this.sg;
  p.y = bq * this.cg - bm * this.sg;
  var rh = hypot_default(p.x, p.y);
  if (Math.abs(rh) < EPSLN) {
    r.x = 0;
    r.y = p.y;
  } else {
    var cosz, sinz;
    sinz = 1 - rh * rh * this.pfact;
    sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);
    cosz = Math.sqrt(1 - sinz * sinz);
    switch (this.mode) {
      case mode.OBLIQ:
        r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);
        p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;
        p.x *= sinz * this.cosph0;
        break;
      case mode.EQUIT:
        r.y = Math.asin(p.y * sinz / rh);
        p.y = cosz * rh;
        p.x *= sinz;
        break;
      case mode.N_POLE:
        r.y = Math.asin(cosz);
        p.y = -p.y;
        break;
      case mode.S_POLE:
        r.y = -Math.asin(cosz);
        break;
    }
    r.x = Math.atan2(p.x, p.y);
  }
  p.x = r.x + this.long0;
  p.y = r.y;
  return p;
}
var mode, params, names32, tpers_default;
var init_tpers = __esm({
  "node_modules/proj4/lib/projections/tpers.js"() {
    init_values();
    init_hypot();
    mode = {
      N_POLE: 0,
      S_POLE: 1,
      EQUIT: 2,
      OBLIQ: 3
    };
    params = {
      h: { def: 1e5, num: true },
      // default is Karman line, no default in PROJ.7
      azi: { def: 0, num: true, degrees: true },
      // default is North
      tilt: { def: 0, num: true, degrees: true },
      // default is Nadir
      long0: { def: 0, num: true },
      // default is Greenwich, conversion to rad is automatic
      lat0: { def: 0, num: true }
      // default is Equator, conversion to rad is automatic
    };
    names32 = ["Tilted_Perspective", "tpers"];
    tpers_default = {
      init: init31,
      forward: forward30,
      inverse: inverse30,
      names: names32
    };
  }
});

// node_modules/proj4/lib/projections/geos.js
function init32() {
  this.flip_axis = this.sweep === "x" ? 1 : 0;
  this.h = Number(this.h);
  this.radius_g_1 = this.h / this.a;
  if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {
    throw new Error();
  }
  this.radius_g = 1 + this.radius_g_1;
  this.C = this.radius_g * this.radius_g - 1;
  if (this.es !== 0) {
    var one_es = 1 - this.es;
    var rone_es = 1 / one_es;
    this.radius_p = Math.sqrt(one_es);
    this.radius_p2 = one_es;
    this.radius_p_inv2 = rone_es;
    this.shape = "ellipse";
  } else {
    this.radius_p = 1;
    this.radius_p2 = 1;
    this.radius_p_inv2 = 1;
    this.shape = "sphere";
  }
  if (!this.title) {
    this.title = "Geostationary Satellite View";
  }
}
function forward31(p) {
  var lon = p.x;
  var lat = p.y;
  var tmp, v_x, v_y, v_z;
  lon = lon - this.long0;
  if (this.shape === "ellipse") {
    lat = Math.atan(this.radius_p2 * Math.tan(lat));
    var r = this.radius_p / hypot_default(this.radius_p * Math.cos(lat), Math.sin(lat));
    v_x = r * Math.cos(lon) * Math.cos(lat);
    v_y = r * Math.sin(lon) * Math.cos(lat);
    v_z = r * Math.sin(lat);
    if ((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2 < 0) {
      p.x = Number.NaN;
      p.y = Number.NaN;
      return p;
    }
    tmp = this.radius_g - v_x;
    if (this.flip_axis) {
      p.x = this.radius_g_1 * Math.atan(v_y / hypot_default(v_z, tmp));
      p.y = this.radius_g_1 * Math.atan(v_z / tmp);
    } else {
      p.x = this.radius_g_1 * Math.atan(v_y / tmp);
      p.y = this.radius_g_1 * Math.atan(v_z / hypot_default(v_y, tmp));
    }
  } else if (this.shape === "sphere") {
    tmp = Math.cos(lat);
    v_x = Math.cos(lon) * tmp;
    v_y = Math.sin(lon) * tmp;
    v_z = Math.sin(lat);
    tmp = this.radius_g - v_x;
    if (this.flip_axis) {
      p.x = this.radius_g_1 * Math.atan(v_y / hypot_default(v_z, tmp));
      p.y = this.radius_g_1 * Math.atan(v_z / tmp);
    } else {
      p.x = this.radius_g_1 * Math.atan(v_y / tmp);
      p.y = this.radius_g_1 * Math.atan(v_z / hypot_default(v_y, tmp));
    }
  }
  p.x = p.x * this.a;
  p.y = p.y * this.a;
  return p;
}
function inverse31(p) {
  var v_x = -1;
  var v_y = 0;
  var v_z = 0;
  var a, b, det, k;
  p.x = p.x / this.a;
  p.y = p.y / this.a;
  if (this.shape === "ellipse") {
    if (this.flip_axis) {
      v_z = Math.tan(p.y / this.radius_g_1);
      v_y = Math.tan(p.x / this.radius_g_1) * hypot_default(1, v_z);
    } else {
      v_y = Math.tan(p.x / this.radius_g_1);
      v_z = Math.tan(p.y / this.radius_g_1) * hypot_default(1, v_y);
    }
    var v_zp = v_z / this.radius_p;
    a = v_y * v_y + v_zp * v_zp + v_x * v_x;
    b = 2 * this.radius_g * v_x;
    det = b * b - 4 * a * this.C;
    if (det < 0) {
      p.x = Number.NaN;
      p.y = Number.NaN;
      return p;
    }
    k = (-b - Math.sqrt(det)) / (2 * a);
    v_x = this.radius_g + k * v_x;
    v_y *= k;
    v_z *= k;
    p.x = Math.atan2(v_y, v_x);
    p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
    p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));
  } else if (this.shape === "sphere") {
    if (this.flip_axis) {
      v_z = Math.tan(p.y / this.radius_g_1);
      v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1 + v_z * v_z);
    } else {
      v_y = Math.tan(p.x / this.radius_g_1);
      v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1 + v_y * v_y);
    }
    a = v_y * v_y + v_z * v_z + v_x * v_x;
    b = 2 * this.radius_g * v_x;
    det = b * b - 4 * a * this.C;
    if (det < 0) {
      p.x = Number.NaN;
      p.y = Number.NaN;
      return p;
    }
    k = (-b - Math.sqrt(det)) / (2 * a);
    v_x = this.radius_g + k * v_x;
    v_y *= k;
    v_z *= k;
    p.x = Math.atan2(v_y, v_x);
    p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
  }
  p.x = p.x + this.long0;
  return p;
}
var names33, geos_default;
var init_geos = __esm({
  "node_modules/proj4/lib/projections/geos.js"() {
    init_hypot();
    names33 = ["Geostationary Satellite View", "Geostationary_Satellite", "geos"];
    geos_default = {
      init: init32,
      forward: forward31,
      inverse: inverse31,
      names: names33
    };
  }
});

// node_modules/proj4/lib/projections/eqearth.js
function init33() {
  this.es = 0;
  this.long0 = this.long0 !== void 0 ? this.long0 : 0;
}
function forward32(p) {
  var lam = adjust_lon_default(p.x - this.long0);
  var phi = p.y;
  var paramLat = Math.asin(M * Math.sin(phi)), paramLatSq = paramLat * paramLat, paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
  p.x = lam * Math.cos(paramLat) / (M * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)));
  p.y = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq));
  p.x = this.a * p.x + this.x0;
  p.y = this.a * p.y + this.y0;
  return p;
}
function inverse32(p) {
  p.x = (p.x - this.x0) / this.a;
  p.y = (p.y - this.y0) / this.a;
  var EPS = 1e-9, NITER = 12, paramLat = p.y, paramLatSq, paramLatPow6, fy, fpy, dlat, i;
  for (i = 0; i < NITER; ++i) {
    paramLatSq = paramLat * paramLat;
    paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
    fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - p.y;
    fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);
    paramLat -= dlat = fy / fpy;
    if (Math.abs(dlat) < EPS) {
      break;
    }
  }
  paramLatSq = paramLat * paramLat;
  paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;
  p.x = M * p.x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)) / Math.cos(paramLat);
  p.y = Math.asin(Math.sin(paramLat) / M);
  p.x = adjust_lon_default(p.x + this.long0);
  return p;
}
var A1, A2, A3, A4, M, names34, eqearth_default;
var init_eqearth = __esm({
  "node_modules/proj4/lib/projections/eqearth.js"() {
    init_adjust_lon();
    A1 = 1.340264;
    A2 = -0.081106;
    A3 = 893e-6;
    A4 = 3796e-6;
    M = Math.sqrt(3) / 2;
    names34 = ["eqearth", "Equal Earth", "Equal_Earth"];
    eqearth_default = {
      init: init33,
      forward: forward32,
      inverse: inverse32,
      names: names34
    };
  }
});

// node_modules/proj4/lib/projections/bonne.js
function init34() {
  var c;
  this.phi1 = this.lat1;
  if (Math.abs(this.phi1) < EPS10) {
    throw new Error();
  }
  if (this.es) {
    this.en = pj_enfn_default(this.es);
    this.m1 = pj_mlfn_default(
      this.phi1,
      this.am1 = Math.sin(this.phi1),
      c = Math.cos(this.phi1),
      this.en
    );
    this.am1 = c / (Math.sqrt(1 - this.es * this.am1 * this.am1) * this.am1);
    this.inverse = e_inv;
    this.forward = e_fwd;
  } else {
    if (Math.abs(this.phi1) + EPS10 >= HALF_PI) {
      this.cphi1 = 0;
    } else {
      this.cphi1 = 1 / Math.tan(this.phi1);
    }
    this.inverse = s_inv;
    this.forward = s_fwd;
  }
}
function e_fwd(p) {
  var lam = adjust_lon_default(p.x - (this.long0 || 0));
  var phi = p.y;
  var rh, E, c;
  rh = this.am1 + this.m1 - pj_mlfn_default(phi, E = Math.sin(phi), c = Math.cos(phi), this.en);
  E = c * lam / (rh * Math.sqrt(1 - this.es * E * E));
  p.x = rh * Math.sin(E);
  p.y = this.am1 - rh * Math.cos(E);
  p.x = this.a * p.x + (this.x0 || 0);
  p.y = this.a * p.y + (this.y0 || 0);
  return p;
}
function e_inv(p) {
  p.x = (p.x - (this.x0 || 0)) / this.a;
  p.y = (p.y - (this.y0 || 0)) / this.a;
  var s, rh, lam, phi;
  rh = hypot_default(p.x, p.y = this.am1 - p.y);
  phi = pj_inv_mlfn_default(this.am1 + this.m1 - rh, this.es, this.en);
  if ((s = Math.abs(phi)) < HALF_PI) {
    s = Math.sin(phi);
    lam = rh * Math.atan2(p.x, p.y) * Math.sqrt(1 - this.es * s * s) / Math.cos(phi);
  } else if (Math.abs(s - HALF_PI) <= EPS10) {
    lam = 0;
  } else {
    throw new Error();
  }
  p.x = adjust_lon_default(lam + (this.long0 || 0));
  p.y = adjust_lat_default(phi);
  return p;
}
function s_fwd(p) {
  var lam = adjust_lon_default(p.x - (this.long0 || 0));
  var phi = p.y;
  var E, rh;
  rh = this.cphi1 + this.phi1 - phi;
  if (Math.abs(rh) > EPS10) {
    p.x = rh * Math.sin(E = lam * Math.cos(phi) / rh);
    p.y = this.cphi1 - rh * Math.cos(E);
  } else {
    p.x = p.y = 0;
  }
  p.x = this.a * p.x + (this.x0 || 0);
  p.y = this.a * p.y + (this.y0 || 0);
  return p;
}
function s_inv(p) {
  p.x = (p.x - (this.x0 || 0)) / this.a;
  p.y = (p.y - (this.y0 || 0)) / this.a;
  var lam, phi;
  var rh = hypot_default(p.x, p.y = this.cphi1 - p.y);
  phi = this.cphi1 + this.phi1 - rh;
  if (Math.abs(phi) > HALF_PI) {
    throw new Error();
  }
  if (Math.abs(Math.abs(phi) - HALF_PI) <= EPS10) {
    lam = 0;
  } else {
    lam = rh * Math.atan2(p.x, p.y) / Math.cos(phi);
  }
  p.x = adjust_lon_default(lam + (this.long0 || 0));
  p.y = adjust_lat_default(phi);
  return p;
}
var EPS10, names35, bonne_default;
var init_bonne = __esm({
  "node_modules/proj4/lib/projections/bonne.js"() {
    init_adjust_lat();
    init_adjust_lon();
    init_hypot();
    init_pj_enfn();
    init_pj_inv_mlfn();
    init_pj_mlfn();
    init_values();
    EPS10 = 1e-10;
    names35 = ["bonne", "Bonne (Werner lat_1=90)"];
    bonne_default = {
      init: init34,
      names: names35
    };
  }
});

// node_modules/proj4/projs.js
function projs_default(proj43) {
  proj43.Proj.projections.add(tmerc_default);
  proj43.Proj.projections.add(etmerc_default);
  proj43.Proj.projections.add(utm_default);
  proj43.Proj.projections.add(sterea_default);
  proj43.Proj.projections.add(stere_default);
  proj43.Proj.projections.add(somerc_default);
  proj43.Proj.projections.add(omerc_default);
  proj43.Proj.projections.add(lcc_default);
  proj43.Proj.projections.add(krovak_default);
  proj43.Proj.projections.add(cass_default);
  proj43.Proj.projections.add(laea_default);
  proj43.Proj.projections.add(aea_default);
  proj43.Proj.projections.add(gnom_default);
  proj43.Proj.projections.add(cea_default);
  proj43.Proj.projections.add(eqc_default);
  proj43.Proj.projections.add(poly_default);
  proj43.Proj.projections.add(nzmg_default);
  proj43.Proj.projections.add(mill_default);
  proj43.Proj.projections.add(sinu_default);
  proj43.Proj.projections.add(moll_default);
  proj43.Proj.projections.add(eqdc_default);
  proj43.Proj.projections.add(vandg_default);
  proj43.Proj.projections.add(aeqd_default);
  proj43.Proj.projections.add(ortho_default);
  proj43.Proj.projections.add(qsc_default);
  proj43.Proj.projections.add(robin_default);
  proj43.Proj.projections.add(geocent_default);
  proj43.Proj.projections.add(tpers_default);
  proj43.Proj.projections.add(geos_default);
  proj43.Proj.projections.add(eqearth_default);
  proj43.Proj.projections.add(bonne_default);
}
var init_projs = __esm({
  "node_modules/proj4/projs.js"() {
    init_tmerc();
    init_etmerc();
    init_utm();
    init_sterea();
    init_stere();
    init_somerc();
    init_omerc();
    init_lcc();
    init_krovak();
    init_cass();
    init_laea();
    init_aea();
    init_gnom();
    init_cea();
    init_eqc();
    init_poly();
    init_nzmg();
    init_mill();
    init_sinu();
    init_moll();
    init_eqdc();
    init_vandg();
    init_aeqd();
    init_ortho();
    init_qsc();
    init_robin();
    init_geocent();
    init_tpers();
    init_geos();
    init_eqearth();
    init_bonne();
  }
});

// node_modules/proj4/lib/index.js
var lib_exports = {};
__export(lib_exports, {
  default: () => lib_default
});
var proj42, lib_default;
var init_lib = __esm({
  "node_modules/proj4/lib/index.js"() {
    init_core();
    init_Proj();
    init_Point();
    init_toPoint();
    init_defs();
    init_nadgrid();
    init_transform();
    init_mgrs();
    init_projs();
    proj42 = Object.assign(core_default, {
      defaultDatum: "WGS84",
      Proj: Proj_default,
      WGS84: new Proj_default("WGS84"),
      Point: Point_default,
      toPoint: toPoint_default,
      defs: defs_default,
      nadgrid,
      transform,
      mgrs: mgrs_default,
      version: "__VERSION__"
    });
    projs_default(proj42);
    lib_default = proj42;
  }
});

// node_modules/proj4js-definitions/proj4js-definitions.js
var require_proj4js_definitions = __commonJS({
  "node_modules/proj4js-definitions/proj4js-definitions.js"(exports, module) {
    var A5 = " +no_defs";
    var B = " +towgs84=0,0,0,0,0,0,0";
    var C = " +ellps=GRS80";
    var D = "+proj=tmerc";
    var E = " +units=m";
    var F = " +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12";
    var G = " +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22";
    var H = "+proj=lcc";
    var I2 = "+proj=utm";
    var J = " +units=us-ft";
    var K = "+proj=longlat";
    var L2 = " +lat_0=0";
    var M2 = " +ellps=krass";
    var N = " +y_0=0";
    var O2 = " +x_0=500000";
    var P = " +towgs84=0,0,4.5,0,0,0.554,0.2263";
    var Q = " +towgs84=0,0,1.9,0,0,0.814,-0.38";
    var R = " +ellps=intl";
    var S = " +datum=WGS84";
    var T = " +ellps=WGS72";
    var U = " +towgs84=15.8,-154.4,-82.3,0,0,0,0";
    var V2 = " +k=0.9999";
    var W = " +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993";
    var X = " +datum=NAD27";
    var Y = " +ellps=bessel";
    var Z2 = " +x_0=609601.2192024384";
    var a = " +x_0=600000";
    var b = " +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84";
    var c = " +ellps=clrk80";
    var d = " +b=6356755.288157528";
    var e = " +x_0=152400.3048006096";
    var f = " +lat_0=36.66666666666666";
    var g = " +towgs84=-146.414,507.337,680.507,0,0,0,0";
    var h = " +x_0=200000";
    var i = " +ellps=clrk66";
    var j = " +ellps=WGS84";
    var k = " +x_0=500000.001016002";
    var l = " +x_0=240000";
    var m = " +lat_0=-90";
    var n = " +towgs84=-87,-98,-121,0,0,0,0";
    var o = " +south";
    var p = " +lat_0=41.66666666666666";
    var q = " +y_0=36000";
    var r = " +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29";
    var s = " +x_0=0";
    var t = " +units=ft";
    var u = " +x_0=400000";
    var v = " +towgs84=-115.854,-99.0583,-152.462,0,0,0,0";
    var w = " +towgs84=-208.406,-109.878,-2.5764,0,0,0,0";
    var x = " +ellps=aust_SA";
    var y = " +lat_0=39.33333333333334";
    var z = " +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232";
    var AA = " +lat_0=37.66666666666666";
    var AB = " +lat_0=36.33333333333334";
    var AC = " +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7";
    var AD = " +y_0=500000.0001016001";
    var AE = " +x_0=200000.0001016002";
    var AF = " +x_0=500000.0001016001";
    var AG = " +x_0=500000.00001016";
    var AH = " +y_0=1000000";
    var AI = " +x_0=300000";
    var AJ = " +lon_0=-120.5";
    var AK = " +lat_0=43.66666666666666";
    var AL = " +lat_0=43.83333333333334";
    var AM = " +lat_1=-68.66666666666667";
    var AN = " +lat_2=-71.33333333333333";
    var AO = " +k=0.999966667";
    var AP = " +k=0.9996";
    var AQ = " +lat_0=38.33333333333334";
    var AR = " +lat_1=73.66666666666667";
    var AS = " +lat_2=70.33333333333333";
    var AT = " +lat_0=72.02500919444445";
    var AU = " +a=6378249.2";
    var AV = " +x_0=1500000";
    var AW = " +lat_ts=-80.23861111111111";
    var AX = " +towgs84=-288,175,-376,0,0,0,0";
    var AY = " +lat_1=41.78333333333333";
    var AZ = " +lat_2=-75.33333333333333";
    var Aa = " +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21";
    var Ab = " +x_0=304800";
    var Ac = " +x_0=2000000.0001016";
    var Ad = " +k=0.9999375";
    var Ae = " +y_0=500000";
    var Af = " +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547";
    var Ag = " +lon_0=-100.3333333333333";
    var Ah = " +lat_1=-72.66666666666667";
    var Ai = " +lat_1=-76.66666666666667";
    var Aj = " +lat_2=-79.33333333333333";
    var Ak = " +y_0=10000000";
    var Al = " +towgs84=-57,1,-41,0,0,0,0";
    var Am = " +k=0.999941177";
    var An = " +x_0=800000.0000101599";
    var Ao = " +y_0=99999.99998983997";
    var Ap = " +lat_1=38.43333333333333";
    var Aq = " +lat_0=24.33333333333333";
    var Ar = " +towgs84=26,-121,-78,0,0,0,0";
    var As = " +a=6378140";
    var At = " +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496";
    var Au = " +x_0=399999.99998984";
    var Av = " +towgs84=-24,-15,5,0,0,0,0";
    var Aw = " +towgs84=682,-203,480,0,0,0,0";
    var Ax = " +towgs84=-136,-108,-292,0,0,0,0";
    var Ay = " +b=6356075.41314024";
    var Az = " +lat_1=37.96666666666667";
    var BA = " +lat_0=38.83333333333334";
    var BB = " +lat_0=40.16666666666666";
    var BC = " +lat_0=34.33333333333334";
    var BD = " +lat_0=42.83333333333334";
    var BE = " +lon_0=-84.36666666666666";
    var BF = " +x_0=300000.0000000001";
    var BG = " +k=0.999933333";
    var BH = " +lat_1=48.73333333333333";
    var BI = " +lon_0=-111.5";
    var BJ = " +k=0.9999473679999999";
    var BK = " +towgs84=-67.35,3.88,-38.22,0,0,0,0";
    var BL = " +lat_2=73.66666666666667";
    var BM = " +lat_0=75.36440330555556";
    var BN = " +b=6356515";
    var BO = " +towgs84=25,-141,-78.5,-0,0.35,0.736,0";
    var BP = "+proj=stere";
    var BQ = " +lat_1=-64.66666666666667";
    var BR = " +lat_2=-67.33333333333333";
    var BS = " +b=6356514.966398753";
    var BT = " +towgs84=295,736,257,0,0,0,0";
    var BU = " +x_0=100000";
    var BV = " +towgs84=-11,851,5,0,0,0,0";
    var BW = " +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0";
    var BX = " +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06";
    var BY = " +lat_0=39.66666666666666";
    var BZ = " +x_0=1000000";
    var Ba = " +lon_0=-105.5";
    var Bb = " +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15";
    var Bc = " +a=6378249.145";
    var Bd = " +x_0=2000000";
    var Be = " +lat_0=45.66666666666666";
    var Bf = " +lat_1=80.33333333333333";
    var Bg = " +lat_0=78.70733752777778";
    var Bh = " +b=6356774.50408554";
    var Bi = " +lon_0=-91.33333333333333";
    var Bj = " +lon_0=-123.3333333333333";
    var Bk = " +towgs84=-168,-60,320,0,0,0,0";
    var Bl = " +lat_0=31";
    var Bm = " +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093";
    var Bn = " +x_0=150000";
    var Bo = " +x_0=3500000";
    var Bp = " +towgs84=213.11,9.37,-74.95,0,0,0,0";
    var Bq = " +lat_1=43.66666666666666";
    var Br = " +lat_0=40.33333333333334";
    var Bs = " +towgs84=-148,136,90,0,0,0,0";
    var Bt = " +towgs84=616,97,-251,0,0,0,0";
    var Bu = " +lon_0=-90";
    var Bv = " +x_0=250000";
    var Bw = " +x_0=914401.8288036576";
    var Bx = " +lon_0=-90.33333333333333";
    var By = " +a=6377276.345";
    var Bz = " +b=6356103.038993155";
    var CA = " +lat_0=40.5";
    var CB = " +towgs84=-134,-48,149,0,0,0,0";
    var CC = " +towgs84=25,-141,-78.5,0,0.35,0.736,0";
    var CD = " +lat_1=27.83333333333333";
    var CE = " +lat_2=26.16666666666667";
    var CF = " +lat_2=40.71666666666667";
    var CG = " +lat_2=39.01666666666667";
    var CH = " +lat_2=37.21666666666667";
    var CI = " +lat_1=70.33333333333333";
    var CJ = " +lat_0=68.68747555555557";
    var CK = " +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68";
    var CL = " +y_0=304800.6096012192";
    var CM = " +x_0=699999.9998983998";
    var CN = " +y_0=999999.9998983998";
    var CO = " +y_0=800000";
    var CP = " +k=0.99995";
    var CQ = " +lat_0=34.75";
    var CR = " +lon_0=-81";
    var CS = " +lon_0=-100";
    var CT = " +b=6356098.145120132";
    var CU = "+proj=omerc";
    var CV = " +lon_0=-98.5";
    var CW = " +towgs84=-103.746,-9.614,-255.95,0,0,0,0";
    var CX = " +x_0=800000";
    var CY = " +lat_0=37.83333333333334";
    var CZ = " +lat_2=44.33333333333334";
    var Ca = " +lat_2=42.33333333333334";
    var Cb = " +lat_0=29.66666666666667";
    var Cc = " +lat_0=25.66666666666667";
    var Cd = " +lat_0=35.83333333333334";
    var Ce = " +lat_1=83.66666666666667";
    var Cf = " +lat_2=80.33333333333333";
    var Cg = " +lat_0=82.05842488888888";
    var Ch = " +lat_0=38";
    var Ci = " +x_0=2500000";
    var Cj = " +towgs84=-377,681,-50,0,0,0,0";
    var Ck = "+proj=cass";
    var Cl = " +y_0=2000000";
    var Cm = " +towgs84=-143,-236,7,0,0,0,0";
    var Cn = " +lon_0=-110.1666666666667";
    var Co = " +lon_0=-111.9166666666667";
    var Cp = " +lon_0=-75.41666666666667";
    var Cq = " +lon_0=-82.16666666666667";
    var Cr = " +lon_0=-84.16666666666667";
    var Cs = " +lon_0=-112.1666666666667";
    var Ct = " +lon_0=-88.83333333333333";
    var Cu = " +lon_0=-104.3333333333333";
    var Cv = " +lon_0=-107.8333333333333";
    var Cw = " +lon_0=-76.58333333333333";
    var Cx = " +lon_0=-78.58333333333333";
    var Cy = " +lon_0=-120.8333333333333";
    var Cz = " +lon_0=-88.33333333333333";
    var DA = " +lon_0=-90.16666666666667";
    var DB = " +lon_0=-85.66666666666667";
    var DC = " +lon_0=-87.08333333333333";
    var DD = " +lon_0=-70.16666666666667";
    var DE = " +lon_0=-93.09999999999999";
    var DF = " +lon_0=-115.5833333333333";
    var DG = " +lon_0=-116.6666666666667";
    var DH = " +lon_0=-118.5833333333333";
    var DI = " +lon_0=-71.66666666666667";
    var DJ = " +lon_0=-105.1666666666667";
    var DK = " +lon_0=-107.3333333333333";
    var DL = " +lon_0=-110.0833333333333";
    var DM = " +lat_0=37.5";
    var DN = " +y_0=700000";
    var DO = " +towgs84=-242.2,-144.9,370.3,0,0,0,0";
    var DP = " +x_0=4500000";
    var DQ = " +y_0=1500000";
    var DR = " +x_0=599999.9999976";
    var DS = " +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1";
    var DT = "+proj=aea";
    var DU = " +y_0=-2500000";
    var DV = " +lat_2=38.96666666666667";
    var DW = " +lat_1=41.66666666666666";
    var DX = " +lat_1=39.83333333333334";
    var DY = " +lat_2=38.33333333333334";
    var DZ = " +lat_2=37.06666666666667";
    var Da = " +lat_0=35.33333333333334";
    var Db = " +lat_1=35.46666666666667";
    var Dc = " +lat_2=34.03333333333333";
    var Dd = " +lat_1=33.88333333333333";
    var De = " +lat_2=32.78333333333333";
    var Df = " +lat_0=32.16666666666666";
    var Dg = " +lat_2=37.23333333333333";
    var Dh = " +lat_1=41.86666666666667";
    var Di = " +lat_0=40.83333333333334";
    var Dj = " +lat_2=29.58333333333333";
    var Dk = " +lat_2=41.71666666666667";
    var Dl = " +lat_1=41.03333333333333";
    var Dm = " +lat_2=40.66666666666666";
    var Dn = " +lat_1=36.76666666666667";
    var Do = " +lat_0=33.33333333333334";
    var Dp = " +lat_1=40.96666666666667";
    var Dq = " +lat_2=39.93333333333333";
    var Dr = " +lat_0=31.83333333333333";
    var Ds = " +lat_0=31.66666666666667";
    var Dt = " +lat_0=27.83333333333333";
    var Du = " +lat_2=36.76666666666667";
    var Dv = " +lat_0=45.33333333333334";
    var Dw = " +lat_0=45.16666666666666";
    var Dx = " +lat_1=36.23333333333333";
    var Dy = " +lat_2=34.93333333333333";
    var Dz = " +lat_1=34.76666666666667";
    var EA = " +lat_0=32.66666666666666";
    var EB = " +lat_1=43.26666666666667";
    var EC = " +lat_2=42.06666666666667";
    var ED = " +lat_2=40.61666666666667";
    var EE = " +lat_1=39.78333333333333";
    var EF = " +lat_2=38.71666666666667";
    var EG = " +lat_1=38.56666666666667";
    var EH = " +lat_2=37.26666666666667";
    var EI = " +lat_0=41.08333333333334";
    var EJ = " +lat_0=42.33333333333334";
    var EK = " +y_0=100000";
    var EL = " +b=6356173.508712696";
    var EM = " +y_0=5500000";
    var EN = " +lon_0=105";
    var EO = " +y_0=-5000000";
    var EP = " +k=0.9995000000000001";
    var EQ = " +k=0.9999749999999999";
    var ER = " +towgs84=-160,-6,-302,0,0,0,0";
    var ES = " +towgs84=307,304,-318,0,0,0,0";
    var ET = " +lon_0=-82.5";
    var EU = " +towgs84=70.995,-335.916,262.898,0,0,0,0";
    var EV = " +towgs84=-304.046,-60.576,103.64,0,0,0,0";
    var EW = " +x_0=700000";
    var EX = " +x_0=213360";
    var EY = " +lon_0=-85.75";
    var EZ = " +lon_0=-100.5";
    var Ea = " +lon_0=-77.75";
    var Eb = " +x_0=999999.9999898402";
    var Ec = " +towgs84=-151.99,287.04,-147.45,0,0,0,0";
    var Ed = " +lon_0=129";
    var Ee = " +a=6378293.645208759";
    var Ef = " +b=6356617.987679838";
    var Eg = " +x_0=5500000";
    var Eh = " +lat_1=40.78333333333333";
    var Ei = " +lat_2=39.71666666666667";
    var Ej = " +lat_1=37.93333333333333";
    var Ek = " +lat_2=36.73333333333333";
    var El = " +lat_1=42.68333333333333";
    var Em = " +lat_1=41.48333333333333";
    var En = " +lat_2=41.28333333333333";
    var Eo = " +lat_1=47.08333333333334";
    var Ep = " +lat_2=45.48333333333333";
    var Eq = " +lat_0=44.78333333333333";
    var Er = " +lat_2=44.18333333333333";
    var Es = " +lat_0=43.31666666666667";
    var Et = " +lat_1=36.16666666666666";
    var Eu = " +lat_2=34.33333333333334";
    var Ev = " +lat_2=47.43333333333333";
    var Ew = " +lat_1=47.48333333333333";
    var Ex = " +lat_2=46.18333333333333";
    var Ey = " +lat_2=35.56666666666667";
    var Ez = " +lat_1=35.23333333333333";
    var FA = " +lat_2=33.93333333333333";
    var FB = " +lat_2=40.88333333333333";
    var FC = " +lat_1=34.83333333333334";
    var FD = " +lat_1=36.41666666666666";
    var FE = " +lat_1=36.18333333333333";
    var FF = " +lat_1=33.96666666666667";
    var FG = " +lat_2=32.13333333333333";
    var FH = " +lat_1=31.88333333333333";
    var FI = " +lat_2=30.11666666666667";
    var FJ = " +lat_1=30.28333333333333";
    var FK = " +lat_2=28.38333333333333";
    var FL = " +lat_2=38.03333333333333";
    var FM = " +lat_1=47.33333333333334";
    var FN = " +lat_2=45.83333333333334";
    var FO = " +lat_1=46.76666666666667";
    var FP = " +lat_2=45.56666666666667";
    var FQ = " +lat_1=44.06666666666667";
    var FR = " +lat_2=42.73333333333333";
    var FS = " +lat_1=32.66666666666666";
    var FT = " +lat_2=31.16666666666667";
    var FU = " +lat_1=48.63333333333333";
    var FV = " +lat_2=47.03333333333333";
    var FW = " +lat_2=45.61666666666667";
    var FX = " +lat_1=45.21666666666667";
    var FY = " +lat_2=43.78333333333333";
    var FZ = " +lat_0=39.83333333333334";
    var Fa = " +lat_2=40.43333333333333";
    var Fb = " +lat_1=40.03333333333333";
    var Fc = " +lat_2=38.73333333333333";
    var Fd = " +lat_1=45.68333333333333";
    var Fe = " +lat_2=44.41666666666666";
    var Ff = " +lat_2=42.83333333333334";
    var Fg = " +lat_1=38.88333333333333";
    var Fh = " +lat_2=37.48333333333333";
    var Fi = " +lat_1=37.08333333333334";
    var Fj = " +lat_2=38.66666666666666";
    var Fk = " +lat_0=58";
    var Fl = " +lon_0=-98";
    var Fm = " +lon_0=117";
    var Fn = " +lon_0=135";
    var Fo = " +lat_0=41.5";
    var Fp = " +lat_0=42.5";
    var Fq = " +y_0=3000000";
    var Fr = " +lon_0=123";
    var Fs = " +lat_0=40";
    var Ft = " +lat_0=54";
    var Fu = " +towgs84=-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188";
    var Fv = " +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725";
    var Fw = " +x_0=914401.8289";
    var Fx = " +y_0=304800.6096";
    var Fy = " +lon_0=111";
    var Fz = " +k_0=0.99878641";
    var GA = " +lon_0=-66.43333333333334";
    var GB = " +towgs84=61,-285,-181,0,0,0,0";
    var GC = " +towgs84=-133,-77,-51,0,0,0,0";
    var GD = " +towgs84=-679,669,-48,0,0,0,0";
    var GE = " +lon_0=-71.5";
    var GF = " +lon_0=-78.5";
    var GG = " +lon_0=-93.5";
    var GH = " +lat_0=41.75";
    var GI = " +y_0=249999.9998983998";
    var GJ = " +y_0=999999.9999898402";
    var GK = " +to_meter=1.0000135965";
    var GL = " +a=6377304.063";
    var GM = " +lat_0=36";
    var GN = " +towgs84=-79.9,-158,-168.9,0,0,0,0";
    var GO = " +towgs84=-50.9,-347.6,-231,0,0,0,0";
    var GP = " +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747";
    var GQ = " +towgs84=283,682,231,0,0,0,0";
    var GR = " +towgs84=-206,172,-6,0,0,0,0";
    var GS = " +towgs84=-92,-93,122,0,0,0,0";
    var GT = " +to_meter=0.9143985307444408";
    var GU = "+proj=sterea";
    var GV = " +lat_0=21.16666666666667";
    var GW = " +lat_1=18.43333333333333";
    var GX = " +lat_2=18.03333333333333";
    var GY = " +lat_0=17.83333333333333";
    var GZ = " +gamma=323.1301023611111";
    var Ga = " +lon_0=-79.5";
    var Gb = " +y_0=4500000";
    var Gc = " +x_0=31500000";
    var Gd = " +x_0=500000.0001504";
    var Ge = " +b=6356514.96582849";
    var Gf = " +towgs84=674.4,15.1,405.3,0,0,0,0";
    var Gg = " +towgs84=-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.7101";
    var Gh = " +towgs84=589,76,480,0,0,0,0";
    var Gi = " +towgs84=-263,6,431,0,0,0,0";
    var Gj = " +lon_0=15";
    var Gk = " +axis=wsu";
    var Gl = " +lon_0=21";
    var Gm = " +lat_0=30";
    var Gn = " +ellps=helmert";
    var Go = " +a=6377299.151";
    var Gp = " +lon_0=-74.5";
    var Gq = " +b=6356750.304921594";
    var Gr = " +y_0=2000000.0001016";
    var Gs = " +x_0=3500000.0001016";
    var Gt = " +y_0=399999.99998984";
    var Gu = " +x_0=200000.00001016";
    var Gv = " +b=6356098.359005156";
    var Gw = " +x_0=14500000";
    var Gx = " +x_0=29500000";
    var Gy = " +towgs84=-117,-132,-164,0,0,0,0";
    var Gz = " +zone=20";
    var HA = " +lon_0=-122";
    var HB = " +ellps=bess_nam";
    var HC = " +lon_0=-86.15000000000001";
    var HD = " +towgs84=-189,-242,-91,0,0,0,0";
    var HE = " +towgs84=-265,120,-358,0,0,0,0";
    var HF = " +towgs84=-73.472,-51.66,-112.482,0.953,4.6,-2.368,0.586";
    var HG = " +towgs84=-17.51,-108.32,-62.39,0,0,0,0";
    var HH = " +towgs84=-10.18,-350.43,291.37,0,0,0,0";
    var HI = " +towgs84=-190.421,8.532,238.69,0,0,0,0";
    var HJ = " +lon_0=-68.5";
    var HK = " +a=6377299.36559538";
    var HL = " +x_0=79999.99999968";
    var HM = " +x_0=50000.00001504";
    var HN = " +lon_0=0";
    var HO = " +lon_0=27";
    var HP = " +lon_0=75";
    var HQ = " +lon_0=81";
    var HR = " +lon_0=93";
    var HS = " +lon_0=99";
    var HT = " +x_0=900000";
    var HU = " +x_0=13500000";
    var HV = " +x_0=20500000";
    var HW = " +x_0=22500000";
    var HX = " +towgs84=-166,-15,204,0,0,0,0";
    var HY = " +towgs84=-130,110,-13,0,0,0,0";
    var HZ = " +towgs84=-587.8,519.75,145.76,0,0,0,0";
    var Ha = " +lat_2=83.66666666666667";
    var Hb = " +lat_0=85.43711833333333";
    var Hc = " +towgs84=-273.5,110.6,-357.9,0,0,0,0";
    var Hd = " +lon_0=87";
    var He = "+proj=laea";
    var Hf = " +towgs84=-403,684,41,0,0,0,0";
    var Hg = " +lon_0=-92.5";
    var Hh = " +y_0=6000000";
    var Hi = " +zone=19";
    var Hj = " +lat_0=29.5";
    var Hk = " +y_0=300000";
    var Hl = " +lat_2=45.5";
    var Hm = " +k=0.999909091";
    var Hn = " +a=6377492.018";
    var Ho = " +b=6356751.689189189";
    var Hp = " +b=6356100.230165384";
    var Hq = " +lon_0=90";
    var Hr = " +lat_0=90";
    var Hs = " +x_0=18500000";
    var Ht = " +x_0=19500000";
    var Hu = " +x_0=15500000";
    var Hv = " +x_0=16500000";
    var Hw = " +x_0=21500000";
    var Hx = " +x_0=23500000";
    var Hy = " +x_0=25500000";
    var Hz = " +x_0=26500000";
    var IA = " +x_0=27500000";
    var IB = " +x_0=28500000";
    var IC = " +zone=18";
    var ID = " +zone=21";
    var IE = " +towgs84=-124.76,53,466.79,0,0,0,0";
    var IF = " +lon_0=-92";
    var IG = " +lon_0=33";
    var IH = " +lon_0=12";
    var II = " +lon_0=24";
    var IJ = " +lat_2=77";
    var IK = " +y_0=200000";
    var IL = " +lon_0=-70.5";
    var IM = " +x_0=7500000";
    var IN = " +y_0=3500000";
    var IO = " +towgs84=31,146,47,0,0,0,0";
    var IP = " +lat_0=45";
    var IQ = " +lat_0=26";
    var IR = " +a=6378160";
    var IS = " +lon_0=-109.5";
    var IT = " +x_0=30500000";
    var IU = " +x_0=32500000";
    var IV = " +lon_0=-85.83333333333333";
    var IW = " +lon_0=-118.3333333333333";
    var IX = " +y_0=0.003048006096012192";
    var IY = " +lat_0=30.5";
    var IZ = " +lat_0=44";
    var Ia = " +lon_0=30";
    var Ib = " +lat_0=47";
    var Ic = " +lat_1=77";
    var Id = " +lat_0=36.16666666666666";
    var Ie = " +lat_0=4.596200416666666";
    var If = " +gamma=53.13010236111111";
    var Ig = " +lon_0=13.33333333333333";
    var Ih = " +lat_0=81.31722600000001";
    var Ii = " +lat_0=73.15574086111111";
    var Ij = " +lat_0=65.10127088888888";
    var Ik = " +zone=17";
    var Il = " +lon_0=132";
    var Im = " +lon_0=114";
    var In = " +towgs84=-143,-90,-294,0,0,0,0";
    var Io = " +zone=22";
    var Ip = " +lat_0=41";
    var Iq = " +lat_0=46.5";
    var Ir = " +lon_0=-118";
    var Is = " +y_0=400000";
    var It = " +x_0=17500000";
    var Iu = " +x_0=33500000";
    var Iv = " +lon_0=-113.75";
    var Iw = " +lon_0=-116.25";
    var Ix = " +lon_0=-115.75";
    var Iy = " +lon_0=-106.25";
    var Iz = " +k=0.999916667";
    var JA = " +k=0.999964286";
    var JB = " +lon_0=-108.75";
    var JC = " +towgs84=-73,-247,227,0,0,0,0";
    var JD = " +towgs84=265.025,384.929,-194.046,0,0,0,0";
    var JE = " +k=0.99998";
    var JF = " +lat_1=40.65";
    var JG = " +lat_1=38.35";
    var JH = " +y_0=2500000";
    var JI = " +y_0=6500000";
    var JJ = " +x_0=39999.99999984";
    var JK = " +towgs84=-61.702,284.488,472.052,0,0,0,0";
    var JL = " +towgs84=-223.237,110.193,36.649,0,0,0,0";
    var JM = " +zone=39";
    var JN = " +zone=32";
    var JO = " +towgs84=-125,53,467,0,0,0,0";
    var JP = " +towgs84=198,881,317,0,0,0,0";
    var JQ = " +towgs84=214,804,268,0,0,0,0";
    var JR = " +towgs84=217,823,299,0,0,0,0";
    var JS = " +lon_0=45";
    var JT = " +lat_1=43";
    var JU = "+proj=merc";
    var JV = " +x_0=99999.99998983997";
    var JW = " +x_0=99999.99999960001";
    var JX = " +x_0=2743195.592233322";
    var JY = " +y_0=914398.5307444407";
    var JZ = " +zone=38";
    var Ja = " +zone=28";
    var Jb = " +lon_0=-114";
    var Jc = " +lat_1=45.5";
    var Jd = " +towgs84=-73,46,-86,0,0,0,0";
    var Je = " +towgs84=11,72,-101,0,0,0,0";
    var Jf = " +towgs84=287.58,177.78,-135.41,0,0,0,0";
    var Jg = " +towgs84=-162.619,-276.959,-161.764,0.067753,-2.24365,-1.15883,-1.09425";
    var Jh = " +lon_0=-87";
    var Ji = " +lon_0=-99";
    var Jj = " +lon_0=102";
    var Jk = " +lon_0=126";
    var Jl = " +k=0.99999";
    var Jm = " +x_0=50000";
    var Jn = " +lat_2=40";
    var Jo = " +lon_0=-84.25";
    var Jp = " +x_0=11500000";
    var Jq = " +lon_0=-72.75";
    var Jr = " +lon_0=-101.5";
    var Js = " +lon_0=-94.25";
    var Jt = " +x_0=6500000";
    var Ju = " +y_0=5000000";
    var Jv = " +x_0=1700000";
    var Jw = " +towgs84=31.95,300.99,419.19,0,0,0,0";
    var Jx = " +towgs84=-189.681,18.3463,-42.7695,-0.33746,-3.09264,2.53861,0.4598";
    var Jy = " +towgs84=-119.425,-303.659,-11.0006,1.1643,0.174458,1.09626,3.65706";
    var Jz = " +towgs84=982.609,552.753,-540.873,6.68163,-31.6115,-19.8482,16.805";
    var KA = " +zone=29";
    var KB = " +lon_0=9";
    var KC = " +zone=33";
    var KD = " +zone=37";
    var KE = " +no_uoff";
    var KF = " +lon_0=120";
    var KG = " +lon_0=177";
    var KH = " +lon_0=-177";
    var KI = " +lon_0=-158";
    var KJ = " +y_0=250000";
    var KK = " +lon_0=-111";
    var KL = " +x_0=2500000.0001424";
    var KM = " +x_0=1500000.0001464";
    var KN = " +lon_0=-71.60561777777777";
    var KO = " +lon_0=-156.6666666666667";
    var KP = " +lon_0=-160.1666666666667";
    var KQ = " +lat_0=0.1166666666666667";
    var KR = " +towgs84=0,0,0,-0,-0,-0,0";
    var KS = " +lon_0=-117.8333333333333";
    var KT = " +lon_0=-123.1666666666667";
    var KU = " +lon_0=-122.3333333333333";
    var KV = " +lon_0=-119.1666666666667";
    var KW = " +lon_0=-123.0833333333333";
    var KX = " +lon_0=-85.84999999999999";
    var KY = " +lon_0=-87.09999999999999";
    var KZ = " +lon_0=-86.90000000000001";
    var Ka = " +lon_0=-89.24166666666667";
    var Kb = " +lon_0=-92.63333333333334";
    var Kc = " +towgs84=347.103,1078.12,2623.92,-33.8875,70.6773,-9.3943,186.074";
    var Kd = " +towgs84=8.846,-4.394,-1.122,-0.00237,-0.146528,0.130428,0.783926";
    var Ke = " +towgs84=-480.26,-438.32,-643.429,16.3119,20.1721,-4.0349,-111.7";
    var Kf = " +towgs84=-0.293,766.95,87.713,0.195704,1.69507,3.47302,-0.039338";
    var Kg = " +towgs84=221.525,152.948,176.768,-2.3847,-1.3896,-0.877,11.4741";
    var Kh = " +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773";
    var Ki = " +zone=35";
    var Kj = " +lat_0=46.95240555555556";
    var Kk = " +alpha=30.28813972222222";
    var Kl = " +lat_1=10.16666666666667";
    var Km = " +lat_0=10.16666666666667";
    var Kn = " +lat_0=18.83333333333333";
    var Ko = " +lat_0=20.33333333333333";
    var Kp = " +lat_0=21.83333333333333";
    var Kq = " +lat_0=21.66666666666667";
    var Kr = " +lat_0=45.30916666666666";
    var Ks = " +lat_1=49.83333333333334";
    var Kt = " +lat_2=51.16666666666666";
    var Ku = " +lonc=-133.6666666666667";
    var Kv = " +alpha=323.1301023611111";
    var Kw = " +lat_1=53.83333333333334";
    var Kx = " +lat_2=51.83333333333334";
    var Ky = " +lat_1=44.66666666666666";
    var Kz = " +lat_0=44.66666666666666";
    var LA = " +lat_1=45.66666666666666";
    var LB = " +lat_0=45.91666666666666";
    var LC = " +lat_0=45.08333333333334";
    var LD = " +lat_0=44.33333333333334";
    var LE = " +lat_0=44.08333333333334";
    var LF = " +lat_1=48.33333333333334";
    var LG = " +lat_0=48.33333333333334";
    var LH = " +lat_0=31.73409694444445";
    var LI = " +lon_0=35.21208055555556";
    var LJ = " +lat_0=44.03611111111111";
    var LK = " +lat_0=4.599047222222222";
    var LL = " +lat_0=40.66666666666666";
    var LM = " +lat_1=49";
    var LN = " +lon_0=39";
    var LO = " +lat_1=37.25";
    var LP = " +lat_1=39.75";
    var LQ = " +lat_2=38.45";
    var LR = " +lat_1=30.75";
    var LS = " +lon_0=-84.5";
    var LT = " +lat_0=33.75";
    var LU = " +x_0=4000000";
    var LV = " +y_0=4000000";
    var LW = " +lon_0=-72.5";
    var LX = " +x_0=5000000";
    var LY = " +x_0=10500000";
    var LZ = " +x_0=12500000";
    var La = " +x_0=24500000";
    var Lb = " +k=0.99999375";
    var Lc = " +x_0=399999.9999984";
    var Ld = " +lon_0=-77";
    var Le = " +lon_0=108";
    var Lf = " +lon_0=171";
    var Lg = " +towgs84=-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925";
    var Lh = " +lon_0=-171";
    var Li = " +lat_0=32.5";
    var Lj = " +lon_0=-117";
    var Lk = " +k=1.000015";
    var Ll = " +k=1.000034";
    var Lm = " +k=1.000031";
    var Ln = " +k=1.000026";
    var Lo = " +ellps=evrstSS";
    var Lp = " +a=6377301.243";
    var Lq = " +towgs84=410.721,55.049,80.746,2.5779,2.3514,0.6664,17.3311";
    var Lr = " +towgs84=72.438,345.918,79.486,1.6045,0.8823,0.5565,1.3746";
    var Ls = " +pm=ferro";
    var Lt = " +lon_0=78";
    var Lu = " +lon_0=10";
    var Lv = " +pm=paris";
    var Lw = " +towgs84=0.055,-0.541,-0.185,0.0183,-0.0003,-0.007,-0.014";
    var Lx = " +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489";
    var Ly = " +towgs84=8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081";
    var Lz = " +towgs84=572.213,85.334,461.94,4.9732,1.529,5.2484,3.5378";
    var MA = " +zone=58";
    var MB = " +zone=23";
    var MC = " +x_0=304800.6096012192";
    var MD = " +y_0=152400.3048006096";
    var ME = " +x_0=800000.0001016001";
    var MF = " +x_0=399999.9998983998";
    var MG = " +x_0=7999999.999968001";
    var MH = " +x_0=5999999.999976001";
    var MI = " +x_0=830000.0001016001";
    var MJ = " +x_0=249999.9998983998";
    var MK = " +x_0=350000.0001016001";
    var ML = " +to_meter=0.3047972654";
    var MM = " +x_0=99999.99989839978";
    var MN = " +y_0=8000000.000010163";
    var MO = " +x_0=699999.9999898402";
    var MP = " +lon_0=-69";
    var MQ = " +lon_0=-86";
    var MR = " +towgs84=-3.2,-5.7,2.8,0,0,0,0";
    var MS = " +x_0=8500000";
    var MT = " +x_0=9500000";
    var MU = " +lat_1=39.45";
    var MV = " +lat_0=44.25";
    var MW = " +lat_1=41.95";
    var MX = " +lat_2=35.25";
    var MY = " +lat_2=34.65";
    var MZ = " +lat_2=44.25";
    var Ma = " +lat_1=47.05";
    var Mb = " +lat_1=40.25";
    var Mc = " +k_0=1.00012";
    var Md = " +lat_0=40.25";
    var Me = " +zone=40";
    var Mf = " +zone=36";
    var Mg = " +zone=51";
    var Mh = " +zone=48";
    var Mi = " +zone=49";
    var Mj = " +lon_0=96";
    var Mk = " +y_0=750000";
    var Ml = " +lat_0=36.5";
    var Mm = " +lon_0=-119";
    var Mn = " +lat_0=33.5";
    var Mo = " +lat_2=41.2";
    var Mp = " +k=0.999995";
    var Mq = " +lat_2=33.3";
    var Mr = " +lat_0=38.5";
    var Ms = " +lon_0=-154";
    var Mt = " +lon_0=-120";
    var Mu = " +x_0=34500000";
    var Mv = " +x_0=35500000";
    var Mw = " +x_0=36500000";
    var Mx = " +x_0=37500000";
    var My = " +x_0=38500000";
    var Mz = " +x_0=39500000";
    var NA = " +x_0=40500000";
    var NB = " +x_0=41500000";
    var NC = " +x_0=43500000";
    var ND = " +x_0=45500000";
    var NE = " +y_0=3999999.99998984";
    var NF = " +y_0=2000000.00001016";
    var NG = " +towgs84=164,138,-189,0,0,0,0";
    var NH = " +towgs84=-186,230,110,0,0,0,0";
    var NI = " +towgs84=-199,32,322,0,0,0,0";
    var NJ = " +to_meter=0.3047997101815088";
    var NK = " +towgs84=-76,-138,67,0,0,0,0";
    var NL = " +towgs84=-43,-163,45,0,0,0,0";
    var NM = " +towgs84=-346,-1,224,0,0,0,0";
    var NN = " +towgs84=210,814,289,0,0,0,0";
    var NO = " +towgs84=-74,-130,42,0,0,0,0";
    var NP = " +zone=15";
    var NQ = " +zone=16";
    var NR = " +zone=34";
    var NS = " +zone=50";
    var NT = " +zone=52";
    var NU = " +lon_0=-62";
    var NV = " +lon_0=-84";
    var NW = " +lon_0=-79";
    var NX = " +lon_0=131";
    var NY = " +lon_0=153";
    var NZ = " +lon_0=165";
    var Na = " +lon_0=-94";
    var Nb = " +lon_0=-54";
    var Nc = " +a=6378300.789";
    var Nd = " +b=6356566.435";
    var Ne = " +y_0=3999999.9998984";
    var Nf = " +y_0=5000000.0001016";
    var Ng = " +x_0=150000.00001464";
    var Nh = " +lat_2=46";
    var Ni = " +lon_0=84";
    var Nj = " +lat_0=43";
    var Nk = " +k_0=0.999625769";
    var Nl = " +towgs84=51,391,-36,0,0,0,0";
    var Nm = " +towgs84=-83,37,124,0,0,0,0";
    var Nn = " +towgs84=-355,21,72,0,0,0,0";
    var No = " +towgs84=-23,259,-9,0,0,0,0";
    var Np = " +towgs84=174.05,-25.49,112.57,-0,-0,0.554,0.2263";
    var Nq = " +zone=59";
    var Nr = " +zone=25";
    var Ns = " +zone=11";
    var Nt = " +zone=12";
    var Nu = " +zone=13";
    var Nv = " +zone=54";
    var Nw = " +zone=14";
    var Nx = " +zone=24";
    var Ny = " +zone=47";
    var Nz = " +lat_2=38.3";
    var OA = " +lat_1=45.7";
    var OB = " +lat_2=42.1";
    var OC = " +x_0=165000";
    var OD = " +lat_2=32.5";
    var OE = " +x_0=609600";
    var OF = " +lat_1=39.2";
    var OG = " +lat_2=47.5";
    var OH = " +lat_1=30.7";
    var OI = " +lat_2=29.3";
    var OJ = " +lat_0=28.5";
    var OK = " +lat_1=41.7";
    var OL = " +lat_1=44.4";
    var OM = " +lat_1=27.5";
    var ON = " +lon_0=-150";
    var OO = " +lat_0=44.5";
    var OP = " +k=1.000027";
    var OQ = " +k=1.000038";
    var OR = " +k=1.000036";
    var OS = " +lon_0=-87.5";
    var OT = " +x_0=3999999.999984";
    var OU = " +x_0=199999.9999992";
    var OV = " +towgs84=16,196,93,0,0,0,0";
    var OW = " +towgs84=-88,4,101,0,0,0,0";
    var OX = " +lat_0=18";
    var OY = " +lat_2=67";
    var OZ = " +lon_0=-96";
    var Oa = " +x_0=80000";
    var Ob = " +lon_0=-82";
    var Oc = " +lon_0=-74";
    var Od = " +lon_0=147";
    var Oe = " +lon_0=150";
    var Of = " +x_0=40000";
    var Og = " +k=1.00002";
    var Oh = " +x_0=42500000";
    var Oi = " +x_0=44500000";
    var Oj = " +lon_0=-85.05";
    var Ok = " +ellps=mod_airy";
    var Ol = " +lat_0=0.1333333333333333";
    var Om = " +lat_1=-60.66666666666666";
    var On = " +lat_2=-63.33333333333334";
    var Oo = " +lon_0=-91.91666666666667";
    var Op = " +y_0=0.003352806705613411";
    var Oq = " +zone=30";
    var Or = " +lon_0=3";
    var Os = " +zone=26";
    var Ot = " +zone=53";
    var Ou = " +lat_0=31.73439361111111";
    var Ov = " +lon_0=35.20451694444445";
    var Ow = " +lon_0=7.439583333333333";
    var Ox = " +lon_0=132.1666666666667";
    var Oy = " +lon_0=134.3333333333333";
    var Oz = " +lon_0=137.1666666666667";
    var PA = " +lon_0=139.8333333333333";
    var PB = " +lon_0=140.8333333333333";
    var PC = " +lon_0=3.192280555555556";
    var PD = " +lat_1=49.50000000000001";
    var PE = " +lat_0=49.50000000000001";
    var PF = " +alpha=53.31582047222222";
    var PG = " +lon_0=10.33333333333333";
    var PH = " +lon_0=16.33333333333333";
    var PI = " +towgs84=-502.862,-247.438,312.724,0,0,0,0";
    var PJ = " +towgs84=-381.788,-57.501,-256.673,0,0,0,0";
    var PK = " +towgs84=-43.685,-179.785,-267.721,0,0,0,0";
    var PL = " +zone=60";
    var PM = " +zone=55";
    var PN = " +lon_0=36";
    var PO = " +lon_0=42";
    var PP = " +lat_1=46";
    var PQ = " +lat_1=44";
    var PR = " +lat_0=42";
    var PS = " +lon_0=51";
    var PT = " +lat_0=33";
    var PU = " +lat_0=52";
    var PV = " +ellps=airy";
    var PW = " +pm=jakarta";
    var PX = " +x_0=2743195.5";
    var PY = " +y_0=-4354009.816";
    var PZ = " +k_0=0.9987864078000001";
    var Pa = " +towgs84=-106.226,166.366,-37.893,0,0,0,0";
    var Pb = " +towgs84=508.088,-191.042,565.223,0,0,0,0";
    var Pc = " +k=0.99996";
    var Pd = " +a=6378135";
    var Pe = " +lon_0=-66";
    var Pf = " +lon_0=141";
    var Pg = " +lon_0=159";
    var Ph = " +k=0.99984";
    var Pi = " +lat_0=-22";
    var Pj = " +lon_0=127.5";
    var Pk = " +x_0=6000000";
    var Pl = " +x_0=3900000";
    var Pm = " +y_0=1300000";
    var Pn = " +lat_0=44.75";
    var Po = " +lat_0=37.75";
    var Pp = " +lat_0=40.55";
    var Pq = " +lon_0=-87.3";
    var Pr = " +lon_0=-86.5";
    var Ps = " +towgs84=195.671,332.517,274.607,0,0,0,0";
    var Pt = " +towgs84=-204.619,140.176,55.226,0,0,0,0";
    var Pu = "+proj=somerc";
    var Pv = " +y_0=30480.06096012192";
    var Pw = " +y_0=999999.9999960001";
    var Px = " +x_0=182880.3657607315";
    var Py = " +towgs84=674.374,15.056,405.346,0,0,0,0";
    var Pz = " +towgs84=-133.63,-157.5,-158.62,0,0,0,0";
    var QA = " +towgs84=-0.465,372.095,171.736,0,0,0,0";
    var QB = " +towgs84=-56.263,16.136,-22.856,0,0,0,0";
    var QC = " +towgs84=-241.54,-163.64,396.06,0,0,0,0";
    var QD = " +zone=31";
    var QE = " +zone=10";
    var QF = " +zone=46";
    var QG = " +x_0=304800.6096";
    var QH = " +y_0=152400.3048";
    var QI = " +alpha=337.25556";
    var QJ = " +x_0=2546731.496";
    var QK = " +gamma=337.25556";
    var QL = " +k_0=0.999625544";
    var QM = " +towgs84=335.47,222.58,-230.94,0,0,0,0";
    var QN = " +towgs84=217.037,86.959,23.956,0,0,0,0";
    var QO = " +towgs84=-128.16,-282.42,21.93,0,0,0,0";
    var QP = " +towgs84=103.25,-100.4,-307.19,0,0,0,0";
    var QQ = " +lon_0=31";
    var QR = " +lon_0=18";
    var QS = " +lat_2=36";
    var QT = " +lat_0=29";
    var QU = " +lat_0=35";
    var QV = " +lat_0=34";
    var QW = " +lon_0=63";
    var QX = " +lat_0=37";
    var QY = " +lat_2=65";
    var QZ = " +y_0=-4000000";
    var Qa = " +y_0=914398.5";
    var Qb = " +towgs84=-199.87,74.79,246.62,0,0,0,0";
    var Qc = " +towgs84=-11.64,-348.6,291.98,0,0,0,0";
    var Qd = " +towgs84=-254.1,-5.36,-100.29,0,0,0,0";
    var Qe = " +towgs84=-206.1,-174.7,-87.7,0,0,0,0";
    var Qf = " +towgs84=-770.1,158.4,-498.2,0,0,0,0";
    var Qg = " +towgs84=-146.21,112.63,4.05,0,0,0,0";
    var Qh = " +towgs84=-294.7,-200.1,525.5,0,0,0,0";
    var Qi = " +lat_0=4";
    var Qj = " +a=6378300";
    var Qk = " +lon_0=-63";
    var Ql = " +lon_0=162";
    var Qm = " +lat_ts=90";
    var Qn = " +y_0=600000";
    var Qo = " +x_0=350000";
    var Qp = " +y_0=900000";
    var Qq = " +lat_1=32.5";
    var Qr = " +lon_0=-147";
    var Qs = " +k=1.000043";
    var Qt = " +lat_0=48.5";
    var Qu = " +lat_0=40.9";
    var Qv = " +k=1.000028";
    var Qw = " +k=1.000025";
    var Qx = " +x_0=170251.555";
    var Qy = " +b=6356657.142669561";
    var Qz = " +b=6356094.667915204";
    var RA = " +b=6355862.933255573";
    var RB = " +a=6378249.144808011";
    var RC = " +b=6356514.966204134";
    var RD = " +towgs84=-70.9,-151.8,-41.4,0,0,0,0";
    var RE = " +towgs84=52.17,-71.82,-14.9,0,0,0,0";
    var RF = " +towgs84=283.7,735.9,261.1,0,0,0,0";
    var RG = " +zone=5";
    var RH = " +zone=7";
    var RI = " +lon_0=19";
    var RJ = " +lon_0=25";
    var RK = " +lat_2=45";
    var RL = " +lon_0=57";
    var RM = " +lon_0=69";
    var RN = " +lat_2=39";
    var RO = " +lat_2=35";
    var RP = " +lon_0=28";
    var RQ = " +lon_0=-61.5";
    var RR = " +lon_0=-64.5";
    var RS = " +lon_0=-90.5";
    var RT = " +lon_0=-94.5";
    var RU = " +y_0=2800000";
    var RV = " +x_0=4321000";
    var RW = " +y_0=3210000";
    var RX = " +y_0=14743.5";
    var RY = " +y_0=1999999.999992";
    var RZ = " +y_0=2999999.999988";
    var Ra = " +y_0=50000.00001504";
    var Rb = " +zone=41";
    var Rc = " +zone=42";
    var Rd = " +k=0.994";
    var Re = " +zone=56";
    var Rf = " +lon_0=-67.875";
    var Rg = " +lon_0=-70.375";
    var Rh = " +x_0=609601.22";
    var Ri = " +b=6356889.449";
    var Rj = " +lon_0=-69.125";
    var Rk = " +lon_0=-121.75";
    var Rl = " +lon_0=-121.25";
    var Rm = " +lon_0=-119.75";
    var Rn = " +lon_0=-122.75";
    var Ro = " +zone=6";
    var Rp = "+proj=krovak";
    var Rq = " +towgs84=-637,-549,-203,0,0,0,0";
    var Rr = " +towgs84=-20.8,11.3,2.4,0,0,0,0";
    var Rs = " +lon_0=-93";
    var Rt = " +lon_0=127";
    var Ru = " +lon_0=125";
    var Rv = " +k=0.99975";
    var Rw = " +lon_0=136";
    var Rx = " +lon_0=138";
    var Ry = " +lon_0=180";
    var Rz = " +y_0=50000";
    var SA = " +lon_0=-85";
    var SB = " +k=1.00016";
    var SC = " +lon_0=2.7";
    var SD = " +towgs84=27.5,14,186.4,0,0,0,0";
    var SE = " +towgs84=-499,-249,314,0,0,0,0";
    var SF = " +towgs84=-467,-16,-300,0,0,0,0";
    var SG = " +towgs84=-382,-59,-262,0,0,0,0";
    var SH = " +towgs84=253,-132,-127,0,0,0,0";
    var SI = " +towgs84=-963,510,-359,0,0,0,0";
    var SJ = " +towgs84=94,-948,-1262,0,0,0,0";
    var SK = " +zone=1";
    var SL = " +zone=27";
    var SM = " +zone=57";
    var SN = " +pm=oslo";
    var SO = " +zone=43";
    var SP = " +lon_0=23";
    var SQ = " +lon_0=48";
    var SR = " +lon_0=54";
    var SS = " +lat_0=49.5";
    var ST = " +k=0.999912";
    var SU = " +lon_0=-174";
    var SV = " +lon_0=-168";
    var SW = " +lon_0=-170";
    var SX = " +lon_0=-165";
    var SY = " +lat_2=40.5";
    var SZ = " +lon_0=-115";
    var Sa = " +lat_1=29.5";
    var Sb = " +k=1.000045";
    var Sc = " +lat_1=39.5";
    var Sd = " +lat_1=33.3";
    var Se = " +lat_0=33.3";
    var Sf = " +lon_0=-155.5";
    var Sg = " +lon_0=-159.5";
    var Sh = " +y_0=-4480000";
    var Si = " +lon_0=-176.5";
    var Sj = " +lon_0=-89.75";
    var Sk = " +k_0=1.000008";
    var Sl = " +lonc=-124.05";
    var Sm = " +k_0=1.000002";
    var Sn = " +lon_0=-122.5";
    var So = " +lon_0=-98.25";
    var Sp = " +lon_0=-112.5";
    var Sq = " +lon_0=-84.95";
    var Sr = " +lon_0=-86.95";
    var Ss = " +lon_0=-85.45";
    var St = " +lon_0=-87.45";
    var Su = " +lon_0=-87.55";
    var Sv = " +towgs84=-149,128,296,0,0,0,0";
    var Sw = " +towgs84=-425,-169,81,0,0,0,0";
    var Sx = " +towgs84=-104,167,-38,0,0,0,0";
    var Sy = " +towgs84=-106,-87,188,0,0,0,0";
    var Sz = " +towgs84=-289,-124,60,0,0,0,0";
    var TA = " +towgs84=137,248,-430,0,0,0,0";
    var TB = " +towgs84=-13,-348,292,0,0,0,0";
    var TC = " +towgs84=-115,118,426,0,0,0,0";
    var TD = " +towgs84=0,-0.15,0.68,0,0,0,0";
    var TE = " +towgs84=145,-187,103,0,0,0,0";
    var TF = " +towgs84=-134,229,-29,0,0,0,0";
    var TG = " +towgs84=70,207,389.5,0,0,0,0";
    var TH = " +towgs84=-148,51,-291,0,0,0,0";
    var TI = " +towgs84=-255,-15,71,0,0,0,0";
    var TJ = " +towgs84=725,685,536,0,0,0,0";
    var TK = " +towgs84=72,213.7,93,0,0,0,0";
    var TL = " +towgs84=174,359,365,0,0,0,0";
    var TM = " +towgs84=-173,253,27,0,0,0,0";
    var TN = " +towgs84=-203,141,53,0,0,0,0";
    var TO = " +towgs84=186,482,151,0,0,0,0";
    var TP = " +towgs84=162,117,154,0,0,0,0";
    var TQ = " +towgs84=-73,213,296,0,0,0,0";
    var TR = " +towgs84=-130,29,364,0,0,0,0";
    var TS = " +towgs84=-10,375,165,0,0,0,0";
    var TT = " +towgs84=175,-38,113,0,0,0,0";
    var TU = " +to_meter=0.9143984146160287";
    var TV = " +zone=2";
    var TW = " +zone=8";
    var TX = " +zone=9";
    var TY = " +zone=4";
    var TZ = " +towgs84=30,430,368,0,0,0,0";
    var Ta = " +towgs84=185,165,42,0,0,0,0";
    var Tb = " +towgs84=-97,787,86,0,0,0,0";
    var Tc = " +towgs84=639,405,60,0,0,0,0";
    var Td = " +zone=44";
    var Te = " +zone=45";
    var Tf = " +lon_0=-58.5";
    var Tg = " +lon_0=-67.5";
    var Th = " +lon_0=-73.5";
    var Ti = " +lon_0=-76.5";
    var Tj = " +y_0=1200000";
    var Tk = " +lon_0=133.5";
    var Tl = " +x_0=8000000";
    var Tm = " +y_0=8000000";
    var Tn = " +k=0.9998335";
    var To = " +lon_0=-85.5";
    var Tp = " +x_0=7000000";
    var Tq = " +lat_0=43.75";
    var Tr = " +lat_0=43.25";
    var Ts = " +lat_0=45.25";
    var Tt = " +lon_0=-86.3";
    var Tu = " +lat_0=38.15";
    var Tv = " +lat_0=39.15";
    var Tw = " +lat_0=41.25";
    var Tx = " +lat_0=40.65";
    var Ty = " +lat_0=39.25";
    var Tz = " +lat_0=40.35";
    var UA = " +lon_0=-85.8";
    var UB = " +towgs84=9,183,236,0,0,0,0";
    var UC = " +towgs84=-48,55,52,0,0,0,0";
    var UD = " +towgs84=84,274,65,0,0,0,0";
    var UE = " +lon_0=17";
    var UF = " +lat_1=60";
    var UG = " +k=0.9998";
    var UH = " +lon_0=66";
    var UI = " +lon_0=20";
    var UJ = " +lon_0=26";
    var UK = " +lat_0=51";
    var UL = " +lat_1=87";
    var UM = " +lat_1=26";
    var UN = " +lon_0=144";
    var UO = " +lon_0=168";
    var UP = " +lon_0=174";
    var UQ = " +lon_0=-72";
    var UR = " +lon_0=-75";
    var US = " +lon_0=-60";
    var UT = " +lon_0=-39";
    var UU = "+proj=poly";
    var UV = " +x_0=219529.584";
    var UW = " +a=6378306.3696";
    var UX = " +lon_0=-61.33333333333334";
    var UY = " +lon_0=-91.86666666666666";
    var UZ = " +lon_0=-8.131906111111112";
    var Ua = " +lon_0=-83.66666666666667";
    var Ub = " +lon_0=-108.4166666666667";
    var Uc = " +lon_0=-108.3333333333333";
    var Ud = " +lon_0=-85.40000000000001";
    var Ue = " +lon_0=-86.65000000000001";
    var Uf = " +lon_0=-86.40000000000001";
    var Ug = " +lon_0=-85.59999999999999";
    var Uh = " +lon_0=-87.15000000000001";
    var Ui = " +lon_0=-86.59999999999999";
    var Uj = " +lon_0=-84.90000000000001";
    var Uk = " +lon_0=-85.65000000000001";
    var Ul = " +lon_0=-87.65000000000001";
    var Um = " +lon_0=-85.34999999999999";
    var Un = " +lon_0=-87.40000000000001";
    var Uo = " +lon_0=-87.34999999999999";
    var Up = " +lon_0=-85.90000000000001";
    var Uq = " +lon_0=-90.62222222222222";
    var Ur = " +lon_0=-91.84999999999999";
    var Us = " +lon_0=-91.15277777777779";
    var Ut = " +lon_0=-91.79722222222222";
    var Uu = " +lon_0=-92.45777777777778";
    var Uv = " +lon_0=-91.29444444444444";
    var Uw = " +lon_0=-90.70833333333334";
    var Ux = " +lon_0=-89.39444444444445";
    var Uy = " +lon_0=-89.42222222222223";
    var Uz = " +lon_0=-88.77500000000001";
    var VA = " +lon_0=-87.27222222222223";
    var VB = " +lon_0=-91.89444444444445";
    var VC = " +lon_0=-91.28888888888889";
    var VD = " +lon_0=-88.14166666666668";
    var VE = " +lon_0=-88.63333333333334";
    var VF = " +lon_0=-89.83888888888889";
    var VG = " +lon_0=-90.16111111111111";
    var VH = " +lon_0=-90.25555555555556";
    var VI = " +lon_0=-90.84429651944444";
    var VJ = " +lon_0=-87.89444444444445";
    var VK = " +lon_0=-91.31666666666666";
    var VL = " +lon_0=-89.03333333333333";
    var VM = " +lon_0=-89.73333333333333";
    var VN = " +lon_0=-87.71111111111111";
    var VO = " +lon_0=-88.41666666666667";
    var VP = " +lon_0=-90.64166666666668";
    var VQ = " +lon_0=-87.90833333333335";
    var VR = " +lon_0=-89.54444444444444";
    var VS = " +lon_0=-92.22777777777777";
    var VT = " +lon_0=-90.48888888888889";
    var VU = " +lon_0=-90.43055555555556";
    var VV = " +lon_0=-89.07222222222222";
    var VW = " +lon_0=-91.06666666666666";
    var VX = " +lon_0=-89.90000000000001";
    var VY = " +lon_0=-91.11666666666666";
    var VZ = " +lon_0=-88.60555555555555";
    var Va = " +lon_0=-90.48333333333333";
    var Vb = " +lon_0=-91.36666666666666";
    var Vc = " +lon_0=-90.78333333333333";
    var Vd = " +lon_0=-89.48888888888889";
    var Ve = " +lon_0=-88.54166666666667";
    var Vf = " +lon_0=-91.78333333333333";
    var Vg = " +lon_0=-88.06388888888888";
    var Vh = " +lon_0=-88.22499999999999";
    var Vi = " +lon_0=-88.81666666666666";
    var Vj = " +y_0=0.004876809753619507";
    var Vk = " +y_0=0.008534417068834137";
    var Vl = " +y_0=0.003962407924815849";
    var Vm = " +y_0=0.005791211582423164";
    var Vn = " +lon_0=-55.68333333333333";
    var Vo = " +to_meter=0.201166195164";
    var Vp = " +lat_0=4.666666666666667";
    var Vq = " +lat_0=6.666666666666667";
    var Vr = " +lon_0=6.166666666666667";
    var Vs = " +lat_0=10.44166666666667";
    var Vt = " +lat_0=22.31213333333334";
    var Vu = " +lon_0=114.1785555555556";
    var Vv = " +lon_0=51.21666666666667";
    var Vw = " +lon_0=11.30827777777778";
    var Vx = " +lon_0=13.55827777777778";
    var Vy = " +lon_0=15.80827777777778";
    var Vz = " +lon_0=18.05827777777778";
    var WA = " +lon_0=20.30827777777778";
    var WB = " +lon_0=22.55827777777778";
    var WC = " +lat_1=27.41666666666667";
    var WD = " +lat_2=34.91666666666666";
    var WE = " +lat_0=31.16666666666667";
    var WF = " +lat_1=59.33333333333334";
    var WG = " +lat_0=57.51755393055556";
    var WH = " +lon_0=4.359215833333333";
    var WI = " +lat_1=61.66666666666666";
    var WJ = " +lat_0=29.02626833333333";
    var WK = " +lat_1=48.66666666666666";
    var WL = " +lat_2=53.66666666666666";
    var WM = " +lon_0=127.0028902777778";
    var WN = " +lon_0=89.84999999999999";
    var WO = " +lon_0=91.56666666666666";
    var WP = " +lon_0=24.83333333333333";
    var WQ = " +lat_2=63.66666666666666";
    var WR = " +lat_0=65.35103930555555";
    var WS = " +lat_1=63.66666666666666";
    var WT = " +lat_2=60.33333333333334";
    var WU = " +lat_0=62.01530688888889";
    var WV = " +lat_1=45.78333333333333";
    var WW = " +lat_0=45.78333333333333";
    var WX = " +lat_0=42.66666666666666";
    var WY = " +lat_0=43.36666666666667";
    var WZ = " +lat_0=45.70611111111111";
    var Wa = " +lat_0=45.13333333333333";
    var Wb = " +lat_1=46.66964837722222";
    var Wc = " +lat_0=46.66964837722222";
    var Wd = " +lat_0=43.48138888888889";
    var We = " +lat_1=45.89871486583333";
    var Wf = " +lat_0=45.89871486583333";
    var Wg = " +lat_0=42.71944444444445";
    var Wh = " +lat_1=44.97785689861112";
    var Wi = " +lat_0=44.97785689861112";
    var Wj = " +lat_1=43.46254664583333";
    var Wk = " +lat_0=43.46254664583333";
    var Wl = " +lon_0=-90.9388888888889";
    var Wm = " +lat_0=41.47222222222222";
    var Wn = " +lat_0=45.88333333333333";
    var Wo = " +lat_0=44.40833333333333";
    var Wp = " +lat_1=44.87228112638889";
    var Wq = " +lat_0=44.87228112638889";
    var Wr = " +lat_0=45.43888888888888";
    var Ws = " +lat_0=44.00555555555555";
    var Wt = " +lat_0=41.41111111111111";
    var Wu = " +lat_1=42.63756227694444";
    var Wv = " +lat_0=42.63756227694444";
    var Ww = " +lat_1=43.80700011777778";
    var Wx = " +lat_0=43.80700011777778";
    var Wy = " +lat_0=42.53888888888888";
    var Wz = " +lat_0=45.43333333333333";
    var XA = " +lat_0=44.25333512777778";
    var XB = " +lat_0=42.21666666666667";
    var XC = " +lat_0=43.26666666666667";
    var XD = " +lat_0=43.45111111111111";
    var XE = " +lat_1=45.15423710527778";
    var XF = " +lat_0=45.15423710527778";
    var XG = " +lat_0=44.84444444444445";
    var XH = " +lat_1=44.90090442361111";
    var XI = " +lat_0=44.90090442361111";
    var XJ = " +lat_0=44.69166666666666";
    var XK = " +lat_0=44.71666666666667";
    var XL = " +lat_1=44.00007392861111";
    var XM = " +lat_0=44.00007392861111";
    var XN = " +lat_0=44.39722222222222";
    var XO = " +lat_1=45.70422377027778";
    var XP = " +lat_0=45.70422377027778";
    var XQ = " +lat_1=44.63614887194444";
    var XR = " +lat_0=44.63614887194444";
    var XS = " +lat_0=44.66111111111111";
    var XT = " +lat_1=44.41682397527777";
    var XU = " +lat_0=44.41682397527777";
    var XV = " +lat_0=44.55555555555555";
    var XW = " +lat_0=41.94444444444444";
    var XX = " +lat_0=43.91944444444444";
    var XY = " +lat_0=42.81944444444445";
    var XZ = " +lat_1=45.90009913138888";
    var Xa = " +lat_0=45.90009913138888";
    var Xb = " +lat_1=45.17782208583333";
    var Xc = " +lat_0=45.17782208583333";
    var Xd = " +lat_0=43.16111111111111";
    var Xe = " +lat_1=43.57503293972223";
    var Xf = " +lat_0=43.57503293972223";
    var Xg = " +lat_1=46.07784409055556";
    var Xh = " +lat_0=46.07784409055556";
    var Xi = " +lat_1=42.66946209694444";
    var Xj = " +lat_0=42.66946209694444";
    var Xk = " +lat_1=45.96121983333334";
    var Xl = " +lat_0=45.96121983333334";
    var Xm = " +lat_0=42.91805555555555";
    var Xn = " +lat_0=42.56944444444445";
    var Xo = " +lat_0=43.42027777777778";
    var Xp = " +lat_1=44.11394404583334";
    var Xq = " +lat_0=44.11394404583334";
    var Xr = " +lat_1=44.36259546944444";
    var Xs = " +lat_0=44.36259546944444";
    var Xt = " +lat_1=44.10000000000001";
    var Xu = " +lat_0=44.10000000000001";
    var Xv = " +lat_1=42.16500000000001";
    var Xw = " +lat_0=42.16500000000001";
    var Xx = " +lat_0=52.15616055555555";
    var Xy = " +lat_2=48.73333333333333";
    var Xz = " +zone=3";
    var YA = " +lat_0=53.5";
    var YB = " +k=0.999923";
    var YC = " +x_0=850000";
    var YD = " +x_0=830000";
    var YE = " +lon_0=16.5";
    var YF = " +x_0=520000";
    var YG = " +lat_2=31.5";
    var YH = " +lon_0=10.5";
    var YI = " +lat_1=44.5";
    var YJ = " +lon_0=-153";
    var YK = " +lon_0=-135";
    var YL = " +x_0=750000";
    var YM = " +lat_0=43.5";
    var YN = " +lon_0=-142";
    var YO = " +lon_0=-146";
    var YP = " +lon_0=-162";
    var YQ = " +lon_0=-166";
    var YR = " +lon_0=-176";
    var YS = " +lat_2=39.5";
    var YT = " +lon_0=-129";
    var YU = " +k_0=1.0002";
    var YV = " +k=1.000023";
    var YW = " +lon_0=-121";
    var YX = " +k=1.000175";
    var YY = " +lat_0=45.5";
    var YZ = " +k=1.000155";
    var Ya = " +lat_2=37.5";
    var Yb = " +lat_1=48.5";
    var Yc = " +k=1.000029";
    var Yd = " +lat_0=39.6";
    var Ye = " +k=1.000013";
    var Yf = " +k=1.000022";
    var Yg = " +lat_0=40.7";
    var Yh = " +lat_0=39.3";
    var Yi = " +lat_0=37.8";
    var Yj = " +lat_0=38.9";
    var Yk = " +lon_0=-5.4";
    var Yl = " +y_0=626907.39";
    var Ym = " +b=6356571.996";
    var Yn = " +a=6377295.664";
    var Yo = " +lon_0=5.38763888888889";
    var Yp = " +y_0=-4600000.00001208";
    var Yq = " +y_0=1889763.779527559";
    var Yr = " +y_0=99999.99999960001";
    var Ys = " +x_0=120091.4401828804";
    var Yt = " +lon_0=72";
    var Yu = " +lat_0=50";
    var Yv = " +lat_1=50";
    var Yw = " +lat_1=35";
    var Yx = " +lon_0=22";
    var Yy = " +lat_1=34";
    var Yz = " +lonc=115";
    var ZA = " +lat_0=-9";
    var ZB = " +lat_0=23";
    var ZC = " +lat_1=85";
    var ZD = " +lat_2=69";
    var ZE = " +lat_1=69";
    var ZF = " +lat_2=61";
    var ZG = " +lon_0=34";
    var ZH = " +lon_0=140.25";
    var ZI = " +lon_0=142.25";
    var ZJ = " +lon_0=144.25";
    var ZK = " +x_0=47500000";
    var ZL = " +y_0=-3000000";
    var ZM = " +pm=2.337208333333333";
    var ZN = " +x_0=7000000.00000248";
    var ZO = " +lon_0=6";
    var ZP = " +k=0.997";
    var ZQ = " +lon_0=106";
    var ZR = " +lon_0=154";
    var ZS = " +lon_0=156";
    var ZT = " +lat_2=-36";
    var ZU = " +lon_0=119";
    var ZV = " +lon_0=121";
    var ZW = " +lon_0=166";
    var ZX = " +a=6371228";
    var ZY = " +b=6371228";
    var ZZ = " +a=6378273";
    var Za = " +lat_0=-44";
    var Zb = " +pm=lisbon";
    var Zc = " +lon_0=-57";
    var Zd = " +lon_0=-56";
    var Ze = " +k=1.00007";
    var Zf = " +lonc=-123";
    var Zg = " +alpha=295";
    var Zh = " +gamma=295";
    var Zi = " +k=1.00011";
    var Zj = " +k=1.00005";
    var Zk = " +k=1.00013";
    var Zl = " +x_0=30000";
    var Zm = " +k=1.00001";
    var Zn = " +k=1.00003";
    var Zo = " +y_0=130000.00001472";
    var Zp = " +x_0=119999.99999952";
    var Zq = " +y_0=-2999999.999988";
    var Zr = " +x_0=-299999.9999988";
    var Zs = " +lat_1=43.0695160375";
    var Zt = " +lat_0=43.0695160375";
    var Zu = " +lat_1=43.3223129275";
    var Zv = " +lat_0=43.3223129275";
    var Zw = " +k=1.0000067";
    var Zx = " +a=6378298.3";
    var Zy = " +lon_0=-66.5";
    var Zz = " +lon_0=129.5";
    var aA = " +lon_0=138.5";
    var aB = " +x_0=2300000";
    var aC = " +x_0=3300000";
    var aD = " +x_0=4300000";
    var aE = " +y_0=7500000";
    var aF = " +lonc=102.25";
    var aG = " +y_0=1166200";
    var aH = " +x_0=3000000";
    var aI = " +lat_1=46.25";
    var aJ = " +ellps=WGS66";
    var aK = " +ellps=GRS67";
    var aL = " +lat_1=34.65";
    var aM = " +y_0=59999.99999976";
    var aN = " +y_0=30000.00001512";
    var aO = " +x_0=59999.99999976";
    var aP = " +x_0=30000.00001512";
    var aQ = " +lat_1=43.200055605";
    var aR = " +lat_0=43.200055605";
    var aS = " +y_0=65379.0134283";
    var aT = " +alpha=323.0257905";
    var aU = " +alpha=53.31580995";
    var aV = " +x_0=10000.0000152";
    module.exports = [2e3, D + L2 + NU + EP + u + N + c + E + A5, 1, D + L2 + NU + EP + u + N + c + TI + E + A5, 1, D + L2 + NU + EP + u + N + c + TJ + E + A5, 1, D + L2 + NU + EP + u + N + c + TK + E + A5, 1, D + L2 + NU + EP + u + N + c + TL + E + A5, 1, D + L2 + NU + EP + u + N + c + UB + E + A5, 1, D + L2 + NU + EP + u + N + c + Sv + E + A5, 1, D + L2 + NU + EP + u + N + c + Ps + E + A5, 2, D + L2 + Tf + V2 + Ab + N + i + E + A5, 1, D + L2 + RQ + V2 + Ab + N + i + E + A5, 1, D + L2 + RR + V2 + Ab + N + i + E + A5, 1, D + L2 + Tg + V2 + Ab + N + i + E + A5, 1, D + L2 + IL + V2 + Ab + N + i + E + A5, 1, D + L2 + Th + V2 + Ab + N + i + E + A5, 1, D + L2 + Ti + V2 + Ab + N + i + E + A5, 1, D + L2 + Ga + V2 + Ab + N + i + E + A5, 1, D + L2 + Th + V2 + Ab + N + i + E + A5, 1, D + L2 + Ti + V2 + Ab + N + i + E + A5, 1, D + L2 + Ga + V2 + Ab + N + i + E + A5, 1, D + L2 + ET + V2 + Ab + N + i + E + A5, 1, D + L2 + CR + V2 + Ab + N + i + E + A5, 1, D + L2 + NV + V2 + Ab + N + i + E + A5, 1, D + L2 + Jh + V2 + Ab + N + i + E + A5, 1, D + L2 + Bu + V2 + Ab + N + i + E + A5, 1, D + L2 + Rs + V2 + Ab + N + i + E + A5, 1, D + L2 + OZ + V2 + Ab + N + i + E + A5, 1, I2 + NP + i + E + A5, 1, I2 + NQ + i + E + A5, 1, I2 + Ik + i + E + A5, 1, I2 + IC + i + E + A5, 1, I2 + Ik + i + E + A5, 1, I2 + IC + i + E + A5, 1, I2 + Hi + i + E + A5, 1, I2 + Gz + i + E + A5, 1, I2 + ID + i + E + A5, 4, D + Ou + Ov + Zw + UV + Yl + C + UC + E + A5, 1, I2 + Oq + c + JO + E + A5, 1, I2 + Oq + c + IE + E + A5, 1, I2 + KA + c + JO + E + A5, 1, I2 + KA + c + IE + E + A5, 1, D + L2 + EN + " +k=1" + Hs + N + M2 + HG + E + A5, 1, D + L2 + Fy + " +k=1" + Ht + N + M2 + HG + E + A5, 1, D + L2 + Gj + " +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + UE + " +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + RI + " +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + Gl + " +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + SP + " +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + RJ + " +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + HO + " +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + " +lon_0=29 +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + QQ + " +k=1" + s + N + Gk + j + B + E + A5, 1, D + L2 + IG + " +k=1" + s + N + Gk + j + B + E + A5, 1, Pu + Kj + Ow + " +k_0=1 +x_0=2600000" + Tj + Y + Py + E + A5, 1, CU + " +lat_0=27.51882880555555 +lonc=52.60353916666667 +alpha=0.5716611944444444 +k=0.999895934 +x_0=658377.437 +y_0=3044969.194 +gamma=0.5716611944444444" + R + Pz + E + A5, 1, I2 + JZ + R + Gy + E + A5, 1, I2 + JM + R + Gy + E + A5, 1, I2 + Me + R + Gy + E + A5, 1, I2 + Rb + R + Gy + E + A5, 1, H + " +lat_1=40" + Fs + HN + " +k_0=0.9988085293" + a + Qn + Zx + Qy + " +pm=madrid" + E + A5, 3, Rp + SS + " +lon_0=42.5" + Kk + V2 + s + N + Y + Gh + Ls + E + A5, 1, Ck + " +lat_0=11.25217861111111 +lon_0=-60.68600888888889 +x_0=37718.66159325 +y_0=36209.91512952" + Ee + Ef + Vo + A5, 1, I2 + Gz + R + QA + E + A5, 1, D + L2 + KB + V2 + h + N + R + v + E + A5, 1, D + L2 + " +lon_0=11" + V2 + h + N + R + v + E + A5, 1, D + L2 + " +lon_0=13" + V2 + h + N + R + v + E + A5, 1, D + L2 + Gj + V2 + h + N + R + v + E + A5, 1, D + L2 + UE + V2 + h + N + R + v + E + A5, 1, D + L2 + RI + V2 + h + N + R + v + E + A5, 1, D + L2 + Gl + V2 + h + N + R + v + E + A5, 1, D + L2 + SP + V2 + h + N + R + v + E + A5, 1, D + L2 + RJ + V2 + h + N + R + v + E + A5, 1, I2 + JN + R + v + E + A5, 1, I2 + KC + R + v + E + A5, 1, I2 + NR + R + v + E + A5, 1, I2 + Ki + R + v + E + A5, 1, D + m + MP + " +k=1" + Ci + N + R + E + A5, 1, D + m + MP + " +k=1" + Ci + N + R + SD + E + A5, 1, D + m + MP + " +k=1" + Ci + N + R + OV + E + A5, 1, I2 + Hi + o + R + OV + E + A5, 3, D + L2 + IH + AP + O2 + N + R + v + E + A5, 1, D + L2 + " +lon_0=11" + AP + O2 + N + AU + BN + Gi + E + A5, 1, I2 + JZ + j + B + E + A5, 1, I2 + JM + j + B + E + A5, 3, D + L2 + ZQ + " +k=1" + O2 + N + M2 + HG + E + A5, 1, D + L2 + ZQ + AP + O2 + N + T + Q + E + A5, 1, I2 + Ja + R + TM + E + A5, 1, D + Ch + Ed + " +k=1" + h + Ae + Y + E + A5, 1, D + Ch + Rt + " +k=1" + h + Ae + Y + E + A5, 1, D + Ch + Ru + " +k=1" + h + Ae + Y + E + A5, 1, Ck + " +lat_0=25.38236111111111 +lon_0=50.76138888888889" + BU + EK + Gn + E + A5, 1, D + L2 + II + AP + O2 + N + C + Qb + E + A5, 1, H + Kl + Km + KN + " +k_0=1" + s + " +y_0=-52684.972" + R + E + A5, 1, H + Kl + Km + KN + " +k_0=1" + h + " +y_0=147315.028" + R + E + A5, 1, H + Kl + Km + KN + " +k_0=1" + O2 + " +y_0=447315.028" + R + E + A5, 1, H + Kl + Km + KN + " +k_0=1 +x_0=-17044 +y_0=-23139.97" + R + E + A5, 1, D + " +lat_0=-36.87972222222222 +lon_0=174.7641666666667" + V2 + u + CO + C + B + E + A5, 1, D + " +lat_0=-37.76111111111111 +lon_0=176.4661111111111 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-38.62444444444444 +lon_0=177.8855555555556 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-39.65083333333333 +lon_0=176.6736111111111 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-39.13555555555556 +lon_0=174.2277777777778 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-39.51222222222222 +lon_0=175.64 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-40.24194444444444 +lon_0=175.4880555555555 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-40.92527777777777 +lon_0=175.6472222222222 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-41.3011111111111 +lon_0=174.7763888888889 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-40.71472222222223 +lon_0=172.6719444444444 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-41.27444444444444 +lon_0=173.2991666666667 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-41.28972222222222 +lon_0=172.1088888888889 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-41.81055555555555 +lon_0=171.5811111111111 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-42.33361111111111 +lon_0=171.5497222222222 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-42.68888888888888 +lon_0=173.01 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-41.54444444444444 +lon_0=173.8019444444444 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-42.88611111111111 +lon_0=170.9797222222222 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-43.11 +lon_0=170.2608333333333 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-43.97777777777778 +lon_0=168.6061111111111 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-43.59055555555556 +lon_0=172.7269444444445 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-43.74861111111111 +lon_0=171.3605555555555 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-44.40194444444445 +lon_0=171.0572222222222 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-44.735 +lon_0=169.4675 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-45.13277777777778 +lon_0=168.3986111111111 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-45.56361111111111 +lon_0=167.7386111111111 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-45.81611111111111 +lon_0=170.6283333333333 +k=1" + u + CO + C + B + E + A5, 1, D + " +lat_0=-45.86138888888889 +lon_0=170.2825" + Pc + u + CO + C + B + E + A5, 1, D + " +lat_0=-46.6 +lon_0=168.3427777777778 +k=1" + u + CO + C + B + E + A5, 1, I2 + MA + o + C + B + E + A5, 1, I2 + Nq + o + C + B + E + A5, 1, I2 + PL + o + C + B + E + A5, 1, D + Vp + " +lon_0=-1" + Rv + " +x_0=274319.7391633579" + N + Qj + Ho + NI + NJ + A5, 1, D + L2 + " +lon_0=-1" + AP + O2 + N + Qj + Ho + NI + E + A5, 1, H + UF + Nh + IZ + HJ + s + N + i + E + A5, 16, H + LM + " +lat_2=44" + Iq + Or + EW + " +y_0=6600000" + C + B + E + A5, 3, D + YA + " +lon_0=-8 +k=0.99982" + a + Mk + C + B + E + A5, 1, I2 + KA + C + B + E + A5, 1, D + Vq + " +lon_0=-12 +k=1 +x_0=152399.8550907544" + N + Qj + Ho + NJ + A5, 1, D + Vq + " +lon_0=-12 +k=1 +x_0=243839.7681452071 +y_0=182879.8261089053" + Qj + Ho + NJ + A5, 1, I2 + Ja + c + OW + E + A5, 1, I2 + KA + c + OW + E + A5, 1, He + IP + CS + s + N + " +a=6370997 +b=6370997" + E + A5, 1, D + L2 + " +lon_0=-5" + AP + O2 + N + c + JO + E + A5, 1, D + L2 + " +lon_0=-5" + AP + O2 + N + c + IE + E + A5, 4, D + " +lat_0=49.83333333333334" + Vr + " +k=1" + Oa + EK + R + Jx + E + A5, 3, GU + " +lat_0=53.00194444444445 +lon_0=21.50277777777778" + UG + " +x_0=4603000 +y_0=5806000" + M2 + b + E + A5, 1, GU + " +lat_0=53.58333333333334 +lon_0=17.00833333333333" + UG + " +x_0=3501000 +y_0=5999000" + M2 + b + E + A5, 1, GU + " +lat_0=51.67083333333333 +lon_0=16.67222222222222" + UG + " +x_0=3703000 +y_0=5627000" + M2 + b + E + A5, 1, D + L2 + " +lon_0=18.95833333333333 +k=0.999983 +x_0=237000 +y_0=-4700000" + M2 + b + E + A5, 1, D + L2 + Gj + YB + Eg + N + C + B + E + A5, 1, D + L2 + QR + YB + Jt + N + C + B + E + A5, 1, D + L2 + Gl + YB + IM + N + C + B + E + A5, 1, D + L2 + II + YB + MS + N + C + B + E + A5, 1, D + L2 + RI + " +k=0.9993" + O2 + " +y_0=-5300000" + C + B + E + A5, 8, I2 + Nr + R + Sw + E + A5, 1, I2 + Os + R + Sx + E + A5, 1, I2 + Os + R + TN + E + A5, 3, D + L2 + " +lon_0=173" + AP + " +x_0=1600000" + Ak + C + B + E + A5, 2, I2 + TV + o + C + B + E + A5, 1, D + L2 + " +lon_0=9.5" + CP + h + N + C + B + E + A5, 1, D + L2 + IH + CP + O2 + N + C + B + E + A5, 1, D + L2 + Gj + " +k=1" + HT + N + C + B + E + A5, 2, GU + Iq + Zy + ST + AI + CO + Pd + Gq + E + A5, 1, I2 + IC + C + B + E + A5, 1, I2 + Hi + C + B + E + A5, 1, I2 + Gz + C + B + E + A5, 1, H + " +lat_1=35.25 +lat_2=36.41666666666666 +lat_0=34.66666666666666" + MQ + Z2 + Pv + X + J + A5, 1, H + Az + DV + DM + Jo + O2 + N + C + B + E + A5, 1, D + L2 + HO + " +k=1" + MT + N + R + n + E + A5, 1, D + L2 + Ia + " +k=1" + LY + N + R + n + E + A5, 1, D + L2 + IG + " +k=1" + Jp + N + R + n + E + A5, 1, D + L2 + PN + " +k=1" + LZ + N + R + n + E + A5, 1, D + L2 + LN + " +k=1" + HU + N + R + n + E + A5, 1, D + L2 + PO + " +k=1" + Gw + N + R + n + E + A5, 1, D + L2 + JS + " +k=1" + Hu + N + R + n + E + A5, 1, D + L2 + Ia + AP + O2 + N + C + B + E + A5, 2, I2 + JN + AU + BN + RD + E + A5, 1, I2 + Io + R + NG + E + A5, 1, I2 + MB + R + NG + E + A5, 2, I2 + Hi + Pd + Gq + E + A5, 1, I2 + Gz + Pd + Gq + E + A5, 2, D + Bl + Cn + V2 + EX + N + C + B + t + A5, 1, D + Bl + Co + V2 + EX + N + C + B + t + A5, 1, D + Bl + Iv + BG + EX + N + C + B + t + A5, 1, H + DW + Jn + y + HA + Ac + AD + C + B + J + A5, 1, H + DX + DY + AA + HA + Ac + AD + C + B + J + A5, 1, H + Ap + DZ + Ml + AJ + Ac + AD + C + B + J + A5, 1, H + LO + QS + Da + Mm + Ac + AD + C + B + J + A5, 1, H + Db + Dc + Mn + Ir + Ac + AD + C + B + J + A5, 1, H + Dd + De + Df + Iw + Ac + AD + C + B + J + A5, 1, H + Eh + Ei + y + Ba + Bw + CL + C + B + J + A5, 1, H + LP + LQ + CY + Ba + Bw + CL + C + B + J + A5, 1, H + Ap + Dg + f + Ba + Bw + CL + C + B + J + A5, 1, H + Dh + Mo + Di + Jq + MC + MD + C + B + J + A5, 1, D + Ch + Cp + Mp + AE + N + C + B + J + A5, 1, D + Aq + CR + Am + AE + N + C + B + J + A5, 1, D + Aq + Ob + Am + AE + N + C + B + J + A5, 1, H + LR + Dj + QT + LS + a + N + C + B + J + A5, 1, D + Gm + Cq + V2 + AE + N + C + B + J + A5, 1, D + Gm + Cr + V2 + CM + N + C + B + J + A5, 1, D + p + Cs + BJ + AE + N + C + B + J + A5, 1, D + p + Jb + BJ + AF + N + C + B + J + A5, 1, D + p + Ix + BG + ME + N + C + B + J + A5, 3, H + Az + DV + DM + Jo + AF + N + C + B + J + A5, 1, H + Ej + Ek + AB + EY + AF + AD + C + B + J + A5, 1, H + MU + Nz + AA + Ld + MF + N + C + B + J + A5, 1, H + El + Dk + Ip + GE + AE + Mk + C + B + J + A5, 1, H + Em + En + Ip + IL + AF + N + C + B + J + A5, 1, H + Eo + Ep + Eq + Jh + MG + N + C + B + t + A5, 1, H + OA + Er + Es + BE + MH + N + C + B + t + A5, 1, H + Bq + OB + Fo + BE + OT + N + C + B + t + A5, 1, D + Hj + Ct + CP + BF + N + C + B + J + A5, 1, D + Hj + Bx + CP + CM + N + C + B + J + A5, 1, H + LM + RK + MV + IS + DR + N + C + B + t + A5, 1, D + Bl + Cu + Hm + OC + N + C + B + J + A5, 1, D + Bl + Iy + V2 + AF + N + C + B + J + A5, 1, D + Bl + Cv + Iz + MI + N + C + B + J + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + J + A5, 1, D + Fs + Cw + Ad + MJ + N + C + B + J + A5, 1, D + Fs + Cx + Ad + MK + N + C + B + J + A5, 1, H + Dl + Dm + BB + Oc + BF + N + C + B + J + A5, 1, H + Et + Eu + LT + NW + Z2 + N + C + B + J + A5, 1, H + BH + Ev + Ib + EZ + DR + N + C + B + t + A5, 1, H + Ew + Ex + Be + EZ + DR + N + C + B + t + A5, 1, H + Dn + Ey + QU + Fl + a + N + C + B + J + A5, 1, H + Ez + FA + Do + Fl + a + N + C + B + J + A5, 1, H + PP + CZ + AK + AJ + KL + N + C + B + t + A5, 1, H + PQ + Ca + p + AJ + KM + N + C + B + t + A5, 1, H + MW + FB + BB + Ea + a + N + C + B + J + A5, 1, H + Dp + Dq + y + Ea + a + N + C + B + J + A5, 1, H + FC + OD + Dr + CR + OE + N + C + B + t + A5, 1, H + FD + MX + BC + MQ + a + N + C + B + J + A5, 1, H + FE + MY + QV + Jr + AE + CN + C + B + J + A5, 1, H + FF + FG + Ds + CV + a + Gr + C + B + J + A5, 1, H + FH + FI + Cb + Ag + CM + Fq + C + B + J + A5, 1, H + FJ + FK + Dt + Ji + a + Ne + C + B + J + A5, 1, H + CD + CE + Cc + CV + BF + Nf + C + B + J + A5, 1, H + AY + CF + Br + BI + Gd + Pw + C + B + t + A5, 1, H + JF + CG + AQ + BI + Gd + RY + C + B + t + A5, 1, H + JG + CH + f + BI + Gd + RZ + C + B + t + A5, 1, H + OF + FL + AA + GF + Gs + Gr + C + B + J + A5, 1, H + Az + Du + AB + GF + Gs + CN + C + B + J + A5, 1, H + BH + OG + Ib + Cy + AF + N + C + B + J + A5, 1, H + FM + FN + Dv + AJ + AF + N + C + B + J + A5, 1, H + FO + FP + Dw + Bu + a + N + C + B + J + A5, 1, H + Jc + MZ + AL + Bu + a + N + C + B + J + A5, 1, H + FQ + FR + PR + Bu + a + N + C + B + J + A5, 1, GU + " +lat_0=47.25" + Qk + ST + EW + Is + Pd + Gq + E + A5, 4, D + L2 + RQ + V2 + DP + N + Pd + Gq + E + A5, 1, D + L2 + RR + V2 + Eg + N + Pd + Gq + E + A5, 13, D + L2 + " +lon_0=109" + AP + O2 + Ak + Y + Cj + E + A5, 1, D + L2 + " +lon_0=116" + AP + O2 + Ak + S + E + A5, 1, D + L2 + Il + AP + O2 + Ak + S + E + A5, 1, D + L2 + ZO + AP + O2 + N + S + E + A5, 1, I2 + KC + c + E + A5, 1, I2 + KC + c + E + A5, 1, Ck + Vs + UX + " +x_0=86501.46392052001" + aS + Ee + Ef + JK + ML + A5, 1, I2 + Hi + o + R + Bs + E + A5, 1, I2 + Gz + o + R + Bs + E + A5, 1, H + " +lat_1=9 +lat_2=3 +lat_0=6" + Pe + BZ + AH + R + AX + E + A5, 1, H + " +lat_1=17 +lat_2=33 +lat_0=25.08951" + SQ + s + N + R + Cm + E + A5, 1, D + L2 + HO + " +k=1" + O2 + N + R + n + E + A5, 1, D + L2 + Ia + " +k=1" + O2 + N + R + n + E + A5, 1, D + L2 + IG + " +k=1" + O2 + N + R + n + E + A5, 1, D + L2 + PN + " +k=1" + O2 + N + R + n + E + A5, 1, D + L2 + LN + " +k=1" + O2 + N + R + n + E + A5, 1, D + L2 + PO + " +k=1" + O2 + N + R + n + E + A5, 1, D + L2 + JS + " +k=1" + O2 + N + R + n + E + A5, 1, D + Vt + Vu + " +k=1 +x_0=836694.05 +y_0=819069.8" + R + Jg + E + A5, 1, D + L2 + HP + " +k=1" + HU + N + As + d + E + A5, 1, D + L2 + HQ + " +k=1" + Gw + N + As + d + E + A5, 1, D + L2 + Hd + " +k=1" + Hu + N + As + d + E + A5, 1, D + L2 + HR + " +k=1" + Hv + N + As + d + E + A5, 1, D + L2 + HS + " +k=1" + It + N + As + d + E + A5, 1, D + L2 + EN + " +k=1" + Hs + N + As + d + E + A5, 1, D + L2 + Fy + " +k=1" + Ht + N + As + d + E + A5, 1, D + L2 + Fm + " +k=1" + HV + N + As + d + E + A5, 1, D + L2 + Fr + " +k=1" + Hw + N + As + d + E + A5, 1, D + L2 + Ed + " +k=1" + HW + N + As + d + E + A5, 1, D + L2 + Fn + " +k=1" + Hx + N + As + d + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + HP + " +k=1" + Hy + N + As + d + E + A5, 1, D + L2 + Lt + " +k=1" + Hz + N + As + d + E + A5, 1, D + L2 + HQ + " +k=1" + IA + N + As + d + E + A5, 1, D + L2 + Ni + " +k=1" + IB + N + As + d + E + A5, 1, D + L2 + Hd + " +k=1" + Gx + N + As + d + E + A5, 1, D + L2 + Hq + " +k=1" + IT + N + As + d + E + A5, 1, D + L2 + HR + " +k=1" + Gc + N + As + d + E + A5, 1, D + L2 + Mj + " +k=1" + IU + N + As + d + E + A5, 1, D + L2 + HS + " +k=1" + Iu + N + As + d + E + A5, 1, D + L2 + Jj + " +k=1" + Mu + N + As + d + E + A5, 1, D + L2 + EN + " +k=1" + Mv + N + As + d + E + A5, 1, D + L2 + Le + " +k=1" + Mw + N + As + d + E + A5, 1, D + L2 + Fy + " +k=1" + Mx + N + As + d + E + A5, 1, D + L2 + Im + " +k=1" + My + N + As + d + E + A5, 1, D + L2 + Fm + " +k=1" + Mz + N + As + d + E + A5, 1, D + L2 + KF + " +k=1" + NA + N + As + d + E + A5, 1, D + L2 + Fr + " +k=1" + NB + N + As + d + E + A5, 1, D + L2 + Jk + " +k=1" + Oh + N + As + d + E + A5, 1, D + L2 + Ed + " +k=1" + NC + N + As + d + E + A5, 1, D + L2 + Il + " +k=1" + Oi + N + As + d + E + A5, 1, D + L2 + Fn + " +k=1" + ND + N + As + d + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Lt + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Ni + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Hq + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Mj + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Jj + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Le + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Im + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + KF + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Jk + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Il + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + As + d + E + A5, 1, D + L2 + Gl + " +k=1" + AV + N + R + At + E + A5, 1, D + L2 + II + " +k=1" + Ci + N + R + At + E + A5, 1, D + L2 + HO + " +k=1" + Bo + N + R + At + E + A5, 1, D + L2 + Ia + " +k=1" + DP + N + R + At + E + A5, 1, D + L2 + JS + " +k=1" + MS + N + M2 + NK + E + A5, 1, D + L2 + PS + " +k=1" + MT + N + M2 + NK + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + M2 + Ar + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + M2 + Ar + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + M2 + Ar + E + A5, 2, D + L2 + HP + " +k=1" + Hy + N + M2 + U + E + A5, 1, D + L2 + Lt + " +k=1" + Hz + N + M2 + U + E + A5, 1, D + L2 + HQ + " +k=1" + IA + N + M2 + U + E + A5, 1, D + L2 + Ni + " +k=1" + IB + N + M2 + U + E + A5, 1, D + L2 + Hd + " +k=1" + Gx + N + M2 + U + E + A5, 1, D + L2 + Hq + " +k=1" + IT + N + M2 + U + E + A5, 1, D + L2 + HR + " +k=1" + Gc + N + M2 + U + E + A5, 1, D + L2 + Mj + " +k=1" + IU + N + M2 + U + E + A5, 1, D + L2 + HS + " +k=1" + Iu + N + M2 + U + E + A5, 1, D + L2 + Jj + " +k=1" + Mu + N + M2 + U + E + A5, 1, D + L2 + EN + " +k=1" + Mv + N + M2 + U + E + A5, 1, D + L2 + Le + " +k=1" + Mw + N + M2 + U + E + A5, 1, D + L2 + Fy + " +k=1" + Mx + N + M2 + U + E + A5, 1, D + L2 + Im + " +k=1" + My + N + M2 + U + E + A5, 1, D + L2 + Fm + " +k=1" + Mz + N + M2 + U + E + A5, 1, D + L2 + KF + " +k=1" + NA + N + M2 + U + E + A5, 1, D + L2 + Fr + " +k=1" + NB + N + M2 + U + E + A5, 1, D + L2 + Jk + " +k=1" + Oh + N + M2 + U + E + A5, 1, D + L2 + Ed + " +k=1" + NC + N + M2 + U + E + A5, 1, D + L2 + Il + " +k=1" + Oi + N + M2 + U + E + A5, 1, D + L2 + Fn + " +k=1" + ND + N + M2 + U + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Lt + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Ni + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Hq + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Mj + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Jj + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Le + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Im + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + KF + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Jk + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Il + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + PT + Zz + V2 + s + N + C + B + E + A5, 1, D + PT + NX + V2 + s + N + C + B + E + A5, 1, D + GM + Ox + V2 + s + N + C + B + E + A5, 1, D + PT + Tk + V2 + s + N + C + B + E + A5, 1, D + GM + Oy + V2 + s + N + C + B + E + A5, 1, D + GM + Rw + V2 + s + N + C + B + E + A5, 1, D + GM + Oz + V2 + s + N + C + B + E + A5, 1, D + GM + aA + V2 + s + N + C + B + E + A5, 1, D + GM + PA + V2 + s + N + C + B + E + A5, 1, D + Fs + PB + V2 + s + N + C + B + E + A5, 1, D + IZ + ZH + V2 + s + N + C + B + E + A5, 1, D + IZ + ZI + V2 + s + N + C + B + E + A5, 1, D + IZ + ZJ + V2 + s + N + C + B + E + A5, 1, D + IQ + " +lon_0=142" + V2 + s + N + C + B + E + A5, 1, D + IQ + Pj + V2 + s + N + C + B + E + A5, 1, D + IQ + " +lon_0=124" + V2 + s + N + C + B + E + A5, 1, D + IQ + NX + V2 + s + N + C + B + E + A5, 1, D + " +lat_0=20" + Rw + V2 + s + N + C + B + E + A5, 1, D + IQ + ZR + V2 + s + N + C + B + E + A5, 1, D + L2 + Gl + " +k=1" + DP + N + M2 + E + A5, 1, D + L2 + Gl + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HO + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + IG + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + LN + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + JS + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + PS + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + RL + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + QW + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + RM + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Pf + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Od + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + NY + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Pg + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + NZ + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Lf + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + KG + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + KH + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Lh + " +k=1" + O2 + N + M2 + G + E + A5, 3, D + L2 + Gl + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HO + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + IG + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + LN + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + JS + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + PS + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + RL + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + QW + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + RM + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Pf + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Od + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + NY + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Pg + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + NZ + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Lf + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + KG + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + KH + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Lh + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Gl + " +k=1" + IM + N + M2 + F + E + A5, 1, D + L2 + II + " +k=1" + MS + N + M2 + F + E + A5, 1, D + L2 + HO + " +k=1" + MT + N + M2 + F + E + A5, 1, D + L2 + Ia + " +k=1" + LY + N + M2 + F + E + A5, 1, D + L2 + IG + " +k=1" + Jp + N + M2 + F + E + A5, 1, D + L2 + PN + " +k=1" + LZ + N + M2 + F + E + A5, 1, D + L2 + LN + " +k=1" + HU + N + M2 + F + E + A5, 1, D + L2 + PO + " +k=1" + Gw + N + M2 + F + E + A5, 1, D + L2 + JS + " +k=1" + Hu + N + M2 + F + E + A5, 1, D + L2 + SQ + " +k=1" + Hv + N + M2 + F + E + A5, 1, D + L2 + PS + " +k=1" + It + N + M2 + F + E + A5, 1, D + L2 + SR + " +k=1" + Hs + N + M2 + F + E + A5, 1, D + L2 + RL + " +k=1" + Ht + N + M2 + F + E + A5, 1, D + L2 + " +lon_0=60 +k=1" + HV + N + M2 + F + E + A5, 1, D + L2 + QW + " +k=1" + Hw + N + M2 + F + E + A5, 1, D + L2 + UH + " +k=1" + HW + N + M2 + F + E + A5, 1, D + L2 + RM + " +k=1" + Hx + N + M2 + F + E + A5, 1, D + L2 + Yt + " +k=1" + La + N + M2 + F + E + A5, 1, D + L2 + HP + " +k=1" + Hy + N + M2 + F + E + A5, 1, D + L2 + Lt + " +k=1" + Hz + N + M2 + F + E + A5, 1, D + L2 + HQ + " +k=1" + IA + N + M2 + F + E + A5, 1, D + L2 + Ni + " +k=1" + IB + N + M2 + F + E + A5, 1, D + L2 + Hd + " +k=1" + Gx + N + M2 + F + E + A5, 1, D + L2 + Hq + " +k=1" + IT + N + M2 + F + E + A5, 1, D + L2 + HR + " +k=1" + Gc + N + M2 + F + E + A5, 1, D + L2 + Mj + " +k=1" + IU + N + M2 + F + E + A5, 1, D + L2 + HS + " +k=1" + Iu + N + M2 + F + E + A5, 2, D + L2 + Jj + " +k=1" + Mu + N + M2 + F + E + A5, 1, D + L2 + EN + " +k=1" + Mv + N + M2 + F + E + A5, 1, D + L2 + Le + " +k=1" + Mw + N + M2 + F + E + A5, 1, D + L2 + Fy + " +k=1" + Mx + N + M2 + F + E + A5, 1, D + L2 + Im + " +k=1" + My + N + M2 + F + E + A5, 1, D + L2 + Fm + " +k=1" + Mz + N + M2 + F + E + A5, 1, D + L2 + KF + " +k=1" + NA + N + M2 + F + E + A5, 1, D + L2 + Fr + " +k=1" + NB + N + M2 + F + E + A5, 1, D + L2 + Jk + " +k=1" + Oh + N + M2 + F + E + A5, 1, D + L2 + Ed + " +k=1" + NC + N + M2 + F + E + A5, 1, D + L2 + Il + " +k=1" + Oi + N + M2 + F + E + A5, 1, D + L2 + Fn + " +k=1" + ND + N + M2 + F + E + A5, 1, D + L2 + Rx + " +k=1 +x_0=46500000" + N + M2 + F + E + A5, 1, D + L2 + Pf + " +k=1" + ZK + N + M2 + F + E + A5, 1, D + L2 + UN + " +k=1 +x_0=48500000" + N + M2 + F + E + A5, 1, D + L2 + Od + " +k=1 +x_0=49500000" + N + M2 + F + E + A5, 1, D + L2 + Oe + " +k=1 +x_0=50500000" + N + M2 + F + E + A5, 1, D + L2 + NY + " +k=1 +x_0=51500000" + N + M2 + F + E + A5, 1, D + L2 + ZS + " +k=1 +x_0=52500000" + N + M2 + F + E + A5, 1, D + L2 + Pg + " +k=1 +x_0=53500000" + N + M2 + F + E + A5, 1, D + L2 + Ql + " +k=1 +x_0=54500000" + N + M2 + F + E + A5, 1, D + L2 + NZ + " +k=1 +x_0=55500000" + N + M2 + F + E + A5, 1, D + L2 + UO + " +k=1 +x_0=56500000" + N + M2 + F + E + A5, 1, D + L2 + Lf + " +k=1 +x_0=57500000" + N + M2 + F + E + A5, 1, D + L2 + UP + " +k=1 +x_0=58500000" + N + M2 + F + E + A5, 1, D + L2 + KG + " +k=1 +x_0=59500000" + N + M2 + F + E + A5, 2, D + L2 + KH + " +k=1 +x_0=61500000" + N + M2 + F + E + A5, 1, D + L2 + SU + " +k=1 +x_0=62500000" + N + M2 + F + E + A5, 1, D + L2 + Lh + " +k=1 +x_0=63500000" + N + M2 + F + E + A5, 1, D + L2 + SV + " +k=1 +x_0=64500000" + N + M2 + F + E + A5, 1, D + L2 + Gl + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + II + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HO + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Ia + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + IG + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + PN + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + LN + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + PO + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + JS + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + SQ + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + PS + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + SR + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + RL + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + " +lon_0=60 +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + QW + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + UH + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + RM + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Yt + " +k=1" + O2 + N + M2 + F + E + A5, 2, D + L2 + HP + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Lt + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Ni + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Hq + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Mj + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Jj + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Le + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Im + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + KF + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Jk + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Il + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Rx + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Pf + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + UN + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Od + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Oe + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + NY + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + ZS + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Pg + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Ql + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + NZ + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + UO + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Lf + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + UP + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + KG + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Ry + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + KH + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + SU + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Lh + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + SV + " +k=1" + O2 + N + M2 + F + E + A5, 1, D + L2 + Gl + " +k=1" + IM + N + M2 + G + E + A5, 1, D + L2 + II + " +k=1" + MS + N + M2 + G + E + A5, 1, D + L2 + HO + " +k=1" + MT + N + M2 + G + E + A5, 1, D + L2 + Ia + " +k=1" + LY + N + M2 + G + E + A5, 1, D + L2 + IG + " +k=1" + Jp + N + M2 + G + E + A5, 1, D + L2 + PN + " +k=1" + LZ + N + M2 + G + E + A5, 1, D + L2 + LN + " +k=1" + HU + N + M2 + G + E + A5, 1, D + L2 + PO + " +k=1" + Gw + N + M2 + G + E + A5, 1, D + L2 + JS + " +k=1" + Hu + N + M2 + G + E + A5, 1, D + L2 + SQ + " +k=1" + Hv + N + M2 + G + E + A5, 1, D + L2 + PS + " +k=1" + It + N + M2 + G + E + A5, 1, D + L2 + SR + " +k=1" + Hs + N + M2 + G + E + A5, 1, D + L2 + RL + " +k=1" + Ht + N + M2 + G + E + A5, 1, D + L2 + " +lon_0=60 +k=1" + HV + N + M2 + G + E + A5, 1, D + L2 + QW + " +k=1" + Hw + N + M2 + G + E + A5, 1, D + L2 + UH + " +k=1" + HW + N + M2 + G + E + A5, 1, D + L2 + RM + " +k=1" + Hx + N + M2 + G + E + A5, 1, D + L2 + Yt + " +k=1" + La + N + M2 + G + E + A5, 1, D + L2 + HP + " +k=1" + Hy + N + M2 + G + E + A5, 1, D + L2 + Lt + " +k=1" + Hz + N + M2 + G + E + A5, 1, D + L2 + HQ + " +k=1" + IA + N + M2 + G + E + A5, 1, D + L2 + Ni + " +k=1" + IB + N + M2 + G + E + A5, 1, D + L2 + Hd + " +k=1" + Gx + N + M2 + G + E + A5, 1, D + L2 + Hq + " +k=1" + IT + N + M2 + G + E + A5, 1, D + L2 + HR + " +k=1" + Gc + N + M2 + G + E + A5, 1, D + L2 + Mj + " +k=1" + IU + N + M2 + G + E + A5, 1, D + L2 + HS + " +k=1" + Iu + N + M2 + G + E + A5, 1, D + L2 + Jj + " +k=1" + Mu + N + M2 + G + E + A5, 1, D + L2 + EN + " +k=1" + Mv + N + M2 + G + E + A5, 1, D + L2 + Le + " +k=1" + Mw + N + M2 + G + E + A5, 1, D + L2 + Fy + " +k=1" + Mx + N + M2 + G + E + A5, 1, D + L2 + Im + " +k=1" + My + N + M2 + G + E + A5, 1, D + L2 + Fm + " +k=1" + Mz + N + M2 + G + E + A5, 1, D + L2 + KF + " +k=1" + NA + N + M2 + G + E + A5, 1, D + L2 + Fr + " +k=1" + NB + N + M2 + G + E + A5, 1, D + L2 + Jk + " +k=1" + Oh + N + M2 + G + E + A5, 1, D + L2 + Ed + " +k=1" + NC + N + M2 + G + E + A5, 1, D + L2 + Il + " +k=1" + Oi + N + M2 + G + E + A5, 1, D + L2 + Fn + " +k=1" + ND + N + M2 + G + E + A5, 1, D + L2 + Rx + " +k=1 +x_0=46500000" + N + M2 + G + E + A5, 1, D + L2 + Pf + " +k=1" + ZK + N + M2 + G + E + A5, 1, D + L2 + UN + " +k=1 +x_0=48500000" + N + M2 + G + E + A5, 1, D + L2 + Od + " +k=1 +x_0=49500000" + N + M2 + G + E + A5, 1, D + L2 + Oe + " +k=1 +x_0=50500000" + N + M2 + G + E + A5, 1, D + L2 + NY + " +k=1 +x_0=51500000" + N + M2 + G + E + A5, 1, D + L2 + ZS + " +k=1 +x_0=52500000" + N + M2 + G + E + A5, 1, D + L2 + Pg + " +k=1 +x_0=53500000" + N + M2 + G + E + A5, 1, D + L2 + Ql + " +k=1 +x_0=54500000" + N + M2 + G + E + A5, 1, D + L2 + NZ + " +k=1 +x_0=55500000" + N + M2 + G + E + A5, 1, D + L2 + UO + " +k=1 +x_0=56500000" + N + M2 + G + E + A5, 1, D + L2 + Lf + " +k=1 +x_0=57500000" + N + M2 + G + E + A5, 1, D + L2 + UP + " +k=1 +x_0=58500000" + N + M2 + G + E + A5, 1, D + L2 + KG + " +k=1 +x_0=59500000" + N + M2 + G + E + A5, 2, D + L2 + KH + " +k=1 +x_0=61500000" + N + M2 + G + E + A5, 1, D + L2 + SU + " +k=1 +x_0=62500000" + N + M2 + G + E + A5, 1, D + L2 + Lh + " +k=1 +x_0=63500000" + N + M2 + G + E + A5, 1, D + L2 + SV + " +k=1 +x_0=64500000" + N + M2 + G + E + A5, 1, D + L2 + Gl + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + II + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HO + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Ia + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + IG + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + PN + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + LN + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + PO + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + JS + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + SQ + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + PS + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + SR + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + RL + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + " +lon_0=60 +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + QW + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + UH + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + RM + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Yt + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Lt + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Ni + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Hq + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Mj + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Jj + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Le + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Im + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + KF + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Jk + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + M2 + G + E + A5, 1, I2 + Mf + o + i + HF + E + A5, 1, I2 + KD + o + i + HF + E + A5, 1, D + L2 + Il + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Rx + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Pf + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + UN + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Od + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Oe + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + NY + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + ZS + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Pg + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Ql + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + NZ + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + UO + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Lf + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + UP + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + KG + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Ry + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + KH + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + SU + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + Lh + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + L2 + SV + " +k=1" + O2 + N + M2 + G + E + A5, 1, D + IY + IV + Pc + h + N + C + B + E + A5, 1, D + Gm + OS + BG + a + N + C + B + E + A5, 1, D + Bl + Cn + V2 + EX + N + C + B + E + A5, 1, D + Bl + Co + V2 + EX + N + C + B + E + A5, 1, D + Bl + Iv + BG + EX + N + C + B + E + A5, 1, H + Dx + Dy + BC + IF + u + N + C + B + E + A5, 1, H + Dz + Mq + EA + IF + u + Is + C + B + E + A5, 1, H + DW + Jn + y + HA + Bd + Ae + C + B + E + A5, 1, H + DX + DY + AA + HA + Bd + Ae + C + B + E + A5, 1, H + Ap + DZ + Ml + AJ + Bd + Ae + C + B + E + A5, 1, H + LO + QS + Da + Mm + Bd + Ae + C + B + E + A5, 1, H + Db + Dc + Mn + Ir + Bd + Ae + C + B + E + A5, 1, H + Dd + De + Df + Iw + Bd + Ae + C + B + E + A5, 1, H + Eh + Ei + y + Ba + Fw + Fx + C + B + E + A5, 1, H + LP + LQ + CY + Ba + Fw + Fx + C + B + E + A5, 1, H + Ap + Dg + f + Ba + Fw + Fx + C + B + E + A5, 1, H + Dh + Mo + Di + Jq + QG + QH + C + B + E + A5, 1, D + Ch + Cp + Mp + h + N + C + B + E + A5, 1, D + Aq + CR + Am + h + N + C + B + E + A5, 1, D + Aq + Ob + Am + h + N + C + B + E + A5, 1, H + LR + Dj + QT + LS + a + N + C + B + E + A5, 1, D + Gm + Cq + V2 + h + N + C + B + E + A5, 1, D + Gm + Cr + V2 + EW + N + C + B + E + A5, 1, D + Kn + Sf + AO + O2 + N + C + B + E + A5, 1, D + Ko + KO + AO + O2 + N + C + B + E + A5, 1, D + GV + KI + Jl + O2 + N + C + B + E + A5, 1, D + Kp + Sg + Jl + O2 + N + C + B + E + A5, 1, D + Kq + KP + " +k=1" + O2 + N + C + B + E + A5, 1, D + p + Cs + BJ + h + N + C + B + E + A5, 1, D + p + Jb + BJ + O2 + N + C + B + E + A5, 1, D + p + Ix + BG + CX + N + C + B + E + A5, 1, D + f + Cz + EQ + AI + N + C + B + E + A5, 1, D + f + DA + Am + EW + N + C + B + E + A5, 1, D + DM + DB + AO + BU + KJ + C + B + E + A5, 1, D + DM + DC + AO + HT + KJ + C + B + E + A5, 1, H + EB + EC + Fo + GG + AV + AH + C + B + E + A5, 1, H + AY + ED + Fs + GG + O2 + N + C + B + E + A5, 1, H + EE + EF + AQ + Fl + u + N + C + B + E + A5, 1, H + EG + EH + f + CV + u + Is + C + B + E + A5, 1, H + Az + DV + DM + Jo + O2 + N + C + B + E + A5, 1, H + Ej + Ek + AB + EY + O2 + Ae + C + B + E + A5, 1, H + FS + FT + IY + Hg + BZ + N + C + B + E + A5, 1, H + OH + OI + OJ + Bi + BZ + N + C + B + E + A5, 1, D + AK + HJ + V2 + AI + N + C + B + E + A5, 1, D + BD + DD + AO + HT + N + C + B + E + A5, 1, H + MU + Nz + AA + Ld + u + N + C + B + E + A5, 1, H + El + Dk + Ip + GE + h + Mk + C + B + E + A5, 1, H + Em + En + Ip + IL + O2 + N + C + B + E + A5, 1, H + Eo + Ep + Eq + Jh + Tl + N + C + B + E + A5, 1, H + OA + Er + Es + BE + Pk + N + C + B + E + A5, 1, H + Bq + OB + Fo + BE + LU + N + C + B + E + A5, 1, H + FU + FV + Iq + DE + CX + EK + C + B + E + A5, 1, H + Ma + FW + IP + Js + CX + EK + C + B + E + A5, 1, H + FX + FY + Nj + Na + CX + EK + C + B + E + A5, 1, D + Hj + Ct + CP + AI + N + C + B + E + A5, 1, D + Hj + Bx + CP + EW + N + C + B + E + A5, 1, D + Cd + RS + BG + Bv + N + C + B + E + A5, 1, D + Cd + Hg + BG + O2 + N + C + B + E + A5, 1, D + Id + RT + Am + YC + N + C + B + E + A5, 1, H + LM + RK + MV + IS + a + N + C + B + E + A5, 1, H + JT + Jn + FZ + CS + O2 + N + C + B + E + A5, 1, D + CQ + DF + V2 + h + Tm + C + B + E + A5, 1, D + CQ + DG + V2 + O2 + Hh + C + B + E + A5, 1, D + CQ + DH + V2 + CX + LV + C + B + E + A5, 1, D + Fp + DI + AO + AI + N + C + B + E + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + E + A5, 1, D + Bl + Cu + Hm + OC + N + C + B + E + A5, 1, D + Bl + Iy + V2 + O2 + N + C + B + E + A5, 1, D + Bl + Cv + Iz + YD + N + C + B + E + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + E + A5, 1, D + Fs + Cw + Ad + Bv + N + C + B + E + A5, 1, D + Fs + Cx + Ad + Qo + N + C + B + E + A5, 1, H + Dl + Dm + BB + Oc + AI + N + C + B + E + A5, 1, H + BH + Ev + Ib + EZ + a + N + C + B + E + A5, 1, H + Ew + Ex + Be + EZ + a + N + C + B + E + A5, 1, H + OK + Fa + BY + ET + a + N + C + B + E + A5, 1, H + Fb + Fc + Ch + ET + a + N + C + B + E + A5, 1, H + Dn + Ey + QU + Fl + a + N + C + B + E + A5, 1, H + Ez + FA + Do + Fl + a + N + C + B + E + A5, 1, H + PP + CZ + AK + AJ + Ci + N + C + B + E + A5, 1, H + PQ + Ca + p + AJ + AV + N + C + B + E + A5, 1, D + EI + GE + Lb + BU + N + C + B + E + A5, 1, H + Fd + Fe + AL + CS + a + N + C + B + E + A5, 1, H + OL + Ff + EJ + Ag + a + N + C + B + E + A5, 1, H + FD + MX + BC + MQ + a + N + C + B + E + A5, 1, H + FE + MY + QV + Jr + h + AH + C + B + E + A5, 1, H + FF + FG + Ds + CV + a + Cl + C + B + E + A5, 1, H + FH + FI + Cb + Ag + EW + Fq + C + B + E + A5, 1, H + FJ + FK + Dt + Ji + a + LV + C + B + E + A5, 1, H + CD + CE + Cc + CV + AI + Ju + C + B + E + A5, 1, H + AY + CF + Br + BI + O2 + AH + C + B + E + A5, 1, H + JF + CG + AQ + BI + O2 + Cl + C + B + E + A5, 1, H + JG + CH + f + BI + O2 + Fq + C + B + E + A5, 1, D + Fp + LW + JA + O2 + N + C + B + E + A5, 1, H + OF + FL + AA + GF + Bo + Cl + C + B + E + A5, 1, H + Az + Du + AB + GF + Bo + AH + C + B + E + A5, 1, H + BH + OG + Ib + Cy + O2 + N + C + B + E + A5, 1, H + FM + FN + Dv + AJ + O2 + N + C + B + E + A5, 1, H + Mb + RN + Mr + Ga + a + N + C + B + E + A5, 1, H + Fg + Fh + QX + CR + a + N + C + B + E + A5, 1, H + FO + FP + Dw + Bu + a + N + C + B + E + A5, 1, H + Jc + MZ + AL + Bu + a + N + C + B + E + A5, 1, H + FQ + FR + PR + Bu + a + N + C + B + E + A5, 1, D + CA + DJ + Ad + h + N + C + B + E + A5, 1, D + CA + DK + Ad + u + EK + C + B + E + A5, 1, D + CA + JB + Ad + a + N + C + B + E + A5, 1, D + CA + DL + Ad + CX + EK + C + B + E + A5, 1, H + GW + GX + GY + GA + h + IK + C + B + E + A5, 1, D + Bl + Cn + V2 + EX + N + C + B + t + A5, 1, D + Bl + Co + V2 + EX + N + C + B + t + A5, 1, D + Bl + Iv + BG + EX + N + C + B + t + A5, 1, H + DW + Jn + y + HA + Ac + AD + C + B + J + A5, 1, H + DX + DY + AA + HA + Ac + AD + C + B + J + A5, 1, H + Ap + DZ + Ml + AJ + Ac + AD + C + B + J + A5, 1, H + LO + QS + Da + Mm + Ac + AD + C + B + J + A5, 1, H + Db + Dc + Mn + Ir + Ac + AD + C + B + J + A5, 1, H + Dd + De + Df + Iw + Ac + AD + C + B + J + A5, 1, H + Eh + Ei + y + Ba + Bw + CL + C + B + J + A5, 1, H + LP + LQ + CY + Ba + Bw + CL + C + B + J + A5, 1, H + Ap + Dg + f + Ba + Bw + CL + C + B + J + A5, 1, H + Dh + Mo + Di + Jq + MC + MD + C + B + J + A5, 1, D + Ch + Cp + Mp + AE + N + C + B + J + A5, 1, D + Aq + CR + Am + AE + N + C + B + J + A5, 1, D + Aq + Ob + Am + AE + N + C + B + J + A5, 1, H + LR + Dj + QT + LS + a + N + C + B + J + A5, 1, D + Gm + Cq + V2 + AE + N + C + B + J + A5, 1, D + Gm + Cr + V2 + CM + N + C + B + J + A5, 1, D + p + Cs + BJ + AE + N + C + B + J + A5, 1, D + p + Jb + BJ + AF + N + C + B + J + A5, 1, D + p + Ix + BG + ME + N + C + B + J + A5, 3, H + Az + DV + DM + Jo + AF + N + C + B + J + A5, 1, H + Ej + Ek + AB + EY + AF + AD + C + B + J + A5, 1, H + MU + Nz + AA + Ld + MF + N + C + B + J + A5, 1, H + El + Dk + Ip + GE + AE + Mk + C + B + J + A5, 1, H + Em + En + Ip + IL + AF + N + C + B + J + A5, 1, H + Eo + Ep + Eq + Jh + MG + N + C + B + t + A5, 1, H + OA + Er + Es + BE + MH + N + C + B + t + A5, 1, H + Bq + OB + Fo + BE + OT + N + C + B + t + A5, 1, D + Hj + Ct + CP + BF + N + C + B + J + A5, 1, D + Hj + Bx + CP + CM + N + C + B + J + A5, 1, H + LM + RK + MV + IS + DR + N + C + B + t + A5, 1, D + Bl + Cu + Hm + OC + N + C + B + J + A5, 1, D + Bl + Iy + V2 + AF + N + C + B + J + A5, 1, D + Bl + Cv + Iz + MI + N + C + B + J + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + J + A5, 1, D + Fs + Cw + Ad + MJ + N + C + B + J + A5, 1, D + Fs + Cx + Ad + MK + N + C + B + J + A5, 1, H + Dl + Dm + BB + Oc + BF + N + C + B + J + A5, 1, H + BH + Ev + Ib + EZ + DR + N + C + B + t + A5, 1, H + Ew + Ex + Be + EZ + DR + N + C + B + t + A5, 1, H + Dn + Ey + QU + Fl + a + N + C + B + J + A5, 1, H + Ez + FA + Do + Fl + a + N + C + B + J + A5, 1, H + PP + CZ + AK + AJ + KL + N + C + B + t + A5, 1, H + PQ + Ca + p + AJ + KM + N + C + B + t + A5, 1, H + FD + MX + BC + MQ + a + N + C + B + J + A5, 1, H + FE + MY + QV + Jr + AE + CN + C + B + J + A5, 1, H + FF + FG + Ds + CV + a + Gr + C + B + J + A5, 1, H + FH + FI + Cb + Ag + CM + Fq + C + B + J + A5, 1, H + FJ + FK + Dt + Ji + a + Ne + C + B + J + A5, 1, H + CD + CE + Cc + CV + BF + Nf + C + B + J + A5, 1, H + AY + CF + Br + BI + Gd + Pw + C + B + t + A5, 1, H + JF + CG + AQ + BI + Gd + RY + C + B + t + A5, 1, H + JG + CH + f + BI + Gd + RZ + C + B + t + A5, 1, H + OF + FL + AA + GF + Gs + Gr + C + B + J + A5, 1, H + Az + Du + AB + GF + Gs + CN + C + B + J + A5, 1, H + BH + OG + Ib + Cy + AF + N + C + B + J + A5, 1, H + FM + FN + Dv + AJ + AF + N + C + B + J + A5, 1, H + FO + FP + Dw + Bu + a + N + C + B + J + A5, 1, H + Jc + MZ + AL + Bu + a + N + C + B + J + A5, 1, H + FQ + FR + PR + Bu + a + N + C + B + J + A5, 1, D + L2 + " +lon_0=13" + AP + O2 + N + AU + BN + Sy + E + A5, 1, D + " +lat_0=24.45" + Vv + Jl + h + Hk + R + Jy + E + A5, 1, I2 + NS + o + Y + Hf + E + A5, 2, D + KQ + " +lon_0=41.53333333333333 +k=1 +x_0=1300000" + N + M2 + F + E + A5, 1, D + KQ + " +lon_0=44.53333333333333 +k=1" + aB + N + M2 + F + E + A5, 1, D + KQ + " +lon_0=47.53333333333333 +k=1" + aC + N + M2 + F + E + A5, 1, D + KQ + " +lon_0=50.53333333333333 +k=1" + aD + N + M2 + F + E + A5, 1, D + Ol + " +lon_0=50.76666666666667 +k=1" + aB + N + M2 + F + E + A5, 1, D + Ol + " +lon_0=53.76666666666667 +k=1" + aC + N + M2 + F + E + A5, 1, D + Ol + " +lon_0=56.76666666666667 +k=1" + aD + N + M2 + F + E + A5, 1, I2 + Ja + R + SE + E + A5, 1, I2 + Ja + R + Sz + E + A5, 2, D + L2 + Tf + V2 + Ab + N + C + B + E + A5, 1, D + L2 + RQ + V2 + Ab + N + C + B + E + A5, 1, D + L2 + RR + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Tg + V2 + Ab + N + C + B + E + A5, 1, D + L2 + IL + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Th + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Ti + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Ga + V2 + Ab + N + C + B + E + A5, 1, GU + Iq + Zy + ST + Ci + aE + C + B + E + A5, 1, GU + " +lat_0=47.25" + Qk + ST + u + CO + C + B + E + A5, 1, I2 + Ns + C + B + E + A5, 1, I2 + Nt + C + B + E + A5, 1, I2 + Nu + C + B + E + A5, 1, I2 + Ik + C + B + E + A5, 1, I2 + IC + C + B + E + A5, 1, I2 + Hi + C + B + E + A5, 1, I2 + Gz + C + B + E + A5, 1, I2 + ID + C + B + E + A5, 2, DT + " +lat_1=55" + QY + Yu + Ms + s + N + X + J + A5, 1, D + DM + DB + AO + MM + GI + C + B + J + A5, 1, D + DM + DC + AO + HT + GI + C + B + J + A5, 1, D + DM + DB + AO + MM + GI + C + B + J + A5, 1, D + DM + DC + AO + HT + GI + C + B + J + A5, 1, I2 + Gz + R + TA + E + A5, 1, I2 + Gz + R + SF + E + A5, 1, I2 + Io + R + NH + E + A5, 1, I2 + Io + C + B + E + A5, 1, I2 + Gz + R + TO + E + A5, 2, I2 + Me + o + C + B + E + A5, 1, I2 + Ro + o + R + TP + E + A5, 1, I2 + RG + o + R + Lr + E + A5, 1, I2 + RH + o + R + UD + E + A5, 2, I2 + JZ + o + R + SG + E + A5, 1, I2 + MA + o + R + QM + E + A5, 6, I2 + ID + i + TZ + E + A5, 1, I2 + SK + o + R + SH + E + A5, 3, H + JT + Hl + GH + AJ + u + N + C + B + E + A5, 1, H + JT + Hl + GH + AJ + Lc + N + C + B + t + A5, 1, H + JT + Hl + GH + AJ + u + N + C + B + E + A5, 1, H + JT + Hl + GH + AJ + Lc + N + C + B + t + A5, 1, I2 + MA + o + R + Jf + E + A5, 1, I2 + MA + o + R + TB + E + A5, 1, I2 + MA + o + R + Ke + E + A5, 1, I2 + MA + o + R + HH + E + A5, 1, I2 + JZ + o + R + SI + E + A5, 1, JU + " +lon_0=110" + ZP + Pl + Qp + Y + Hf + E + A5, 1, JU + " +lon_0=110" + ZP + Pl + Qp + Y + Cj + E + A5, 1, JU + " +lon_0=110" + ZP + Pl + Qp + Y + HZ + E + A5, 1, D + L2 + KB + AP + AV + N + R + CK + E + A5, 1, D + L2 + Gj + AP + " +x_0=2520000" + N + R + CK + E + A5, 1, DT + Yv + " +lat_2=58.5" + IP + " +lon_0=-126" + BZ + N + C + B + E + A5, 1, I2 + KC + C + B + E + A5, 1, D + L2 + IH + " +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + " +lon_0=13.5 +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + Gj + " +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + YE + " +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + QR + " +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + " +lon_0=14.25 +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + " +lon_0=15.75 +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + " +lon_0=17.25 +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + " +lon_0=18.75 +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + " +lon_0=20.25 +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + " +lon_0=21.75 +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + " +lon_0=23.25 +k=1" + Bn + N + C + B + E + A5, 1, D + L2 + Vw + " +k=1" + AV + N + Y + BW + E + A5, 1, D + L2 + Vx + " +k=1" + AV + N + Y + BW + E + A5, 1, D + L2 + Vy + " +k=1" + AV + N + Y + BW + E + A5, 1, D + L2 + Vz + " +k=1" + AV + N + Y + BW + E + A5, 1, D + L2 + WA + " +k=1" + AV + N + Y + BW + E + A5, 1, D + L2 + WB + " +k=1" + AV + N + Y + BW + E + A5, 1, D + L2 + Vw + " +k=1" + AV + N + Y + E + A5, 1, D + L2 + Vx + " +k=1" + AV + N + Y + E + A5, 1, D + L2 + Vy + " +k=1" + AV + N + Y + E + A5, 1, D + L2 + Vz + " +k=1" + AV + N + Y + E + A5, 1, D + L2 + WA + " +k=1" + AV + N + Y + E + A5, 1, D + L2 + WB + " +k=1" + AV + N + Y + E + A5, 1, BP + m + " +lat_ts=-71" + HN + " +k=1" + s + N + S + E + A5, 1, BP + m + " +lat_ts=-71 +lon_0=70 +k=1" + Pk + Hh + S + E + A5, 1, H + " +lat_1=-68.5 +lat_2=-74.5 +lat_0=-50 +lon_0=70" + Pk + Hh + S + E + A5, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A5, 1, He + PU + Lu + RV + RW + C + B + E + A5, 1, I2 + Mf + o + j + KR + E + A5, 1, I2 + KD + o + j + KR + E + A5, 3, I2 + Ja + C + B + E + A5, 1, I2 + KA + C + B + E + A5, 1, I2 + Oq + C + B + E + A5, 1, I2 + QD + C + B + E + A5, 1, I2 + JN + C + B + E + A5, 1, I2 + KC + C + B + E + A5, 1, I2 + NR + C + B + E + A5, 1, I2 + Ki + C + B + E + A5, 1, I2 + Mf + C + B + E + A5, 1, I2 + KD + C + B + E + A5, 5, I2 + Os + R + Jd + E + A5, 1, I2 + SL + R + Jd + E + A5, 1, I2 + Ja + R + Jd + E + A5, 1, H + " +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19" + O2 + Ae + C + B + E + A5, 1, D + L2 + " +lon_0=-8.5 +k=1" + Jm + " +y_0=-7800000" + R + Jz + E + A5, 1, D + L2 + II + AP + O2 + " +y_0=-6000000" + C + B + E + A5, 1, I2 + MA + o + R + Qc + E + A5, 1, I2 + Ja + R + PI + E + A5, 1, I2 + Os + R + Pt + E + A5, 1, I2 + Os + R + Pa + E + A5, 1, I2 + JN + j + B + E + A5, 1, I2 + KC + j + B + E + A5, 1, D + L2 + " +lon_0=37" + UG + O2 + ZL + R + n + E + A5, 1, I2 + Ki + C + B + E + A5, 1, Ck + " +lat_0=52.41864827777778 +lon_0=13.62720366666667" + Of + " +y_0=10000" + Y + AC + E + A5, 1, D + L2 + Bu + AP + O2 + " +y_0=-4500000" + X + E + A5, 1, D + L2 + Bu + AP + YF + Sh + C + B + E + A5, 1, D + L2 + Bu + AP + YF + Sh + C + B + E + A5, 1, D + AL + Rf + JE + EW + N + C + B + E + A5, 2, D + BD + Rg + JE + AI + N + C + B + E + A5, 1, D + AL + Rf + JE + EW + N + C + B + E + A5, 2, D + BD + Rg + JE + AI + N + C + B + E + A5, 1, CU + Kr + " +lonc=-86" + QI + AP + QJ + PY + KE + QK + C + B + E + A5, 1, CU + Kr + " +lonc=-86" + QI + AP + QJ + PY + KE + QK + C + B + E + A5, 1, H + WC + WD + WE + CS + " +x_0=914400 +y_0=914400" + X + t + A5, 1, H + WC + WD + WE + CS + BZ + AH + C + B + E + A5, 1, H + OM + RO + OX + CS + AV + Ju + C + B + E + A5, 1, DT + OM + RO + OX + CS + AV + Hh + C + B + E + A5, 1, H + OM + RO + OX + CS + AV + Ju + C + B + E + A5, 1, DT + OM + RO + OX + CS + AV + Hh + C + B + E + A5, 1, DT + " +lat_1=24" + YG + " +lat_0=24" + NV + u + N + C + B + E + A5, 1, DT + " +lat_1=24" + YG + " +lat_0=24" + NV + u + N + C + B + E + A5, 1, H + Fi + Fj + AB + EY + AV + AH + C + B + E + A5, 1, H + Fi + Fj + AB + EY + AV + CN + C + B + J + A5, 1, H + Fi + Fj + AB + EY + AV + AH + C + B + E + A5, 1, H + Fi + Fj + AB + EY + AV + CN + C + B + J + A5, 1, I2 + Mg + Y + g + E + A5, 1, I2 + NT + Y + g + E + A5, 1, I2 + Ot + Y + g + E + A5, 1, I2 + Nv + Y + g + E + A5, 1, I2 + PM + Y + g + E + A5, 1, I2 + Mg + C + B + E + A5, 1, I2 + NT + C + B + E + A5, 1, I2 + Ot + C + B + E + A5, 1, I2 + Nv + C + B + E + A5, 1, I2 + PM + C + B + E + A5, 1, H + " +lat_1=-14.26666666666667 +lat_0=-14.26666666666667" + SW + " +k_0=1" + e + " +y_0=95169.31165862332" + i + TC + J + A5, 4, D + L2 + Hq + AP + O2 + N + By + Ay + RF + E + A5, 1, H + " +lat_1=-28" + ZT + " +lat_0=-32" + Fn + BZ + Cl + C + B + E + A5, 1, D + SS + " +lon_0=-2.416666666666667 +k=0.999997 +x_0=47000" + Rz + C + B + E + A5, 1, D + " +lat_0=49.225 +lon_0=-2.135 +k=0.9999999000000001" + Of + " +y_0=70000" + C + B + E + A5, 1, H + " +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145" + Ci + Gb + x + r + E + A5, 1, H + " +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145" + Ci + JH + C + B + E + A5, 1, H + " +lat_1=-18" + ZT + L2 + " +lon_0=134" + s + N + C + B + E + A5, 1, D + " +lat_0=-28" + NY + Jl + Jm + EK + C + B + E + A5, 1, D + Ie + " +lon_0=-80.07750791666666 +k=1" + BZ + AH + C + B + E + A5, 1, D + Ie + " +lon_0=-77.07750791666666 +k=1" + BZ + AH + C + B + E + A5, 1, D + Ie + " +lon_0=-74.07750791666666 +k=1" + BZ + AH + C + B + E + A5, 1, D + Ie + " +lon_0=-71.07750791666666 +k=1" + BZ + AH + C + B + E + A5, 1, D + Ie + " +lon_0=-68.07750791666666 +k=1" + BZ + AH + C + B + E + A5, 1, D + L2 + YH + " +k=0.999" + BZ + AH + R + Qe + E + A5, 1, GU + " +lat_0=50.625 +lon_0=21.08333333333333" + UG + " +x_0=4637000 +y_0=5467000" + M2 + b + E + A5, 1, D + L2 + Fm + CP + O2 + N + i + BX + E + A5, 1, D + L2 + ZU + CP + O2 + N + i + BX + E + A5, 1, D + L2 + ZV + CP + O2 + N + i + BX + E + A5, 1, D + L2 + Fr + CP + O2 + N + i + BX + E + A5, 1, D + L2 + Ru + CP + O2 + N + i + BX + E + A5, 1, D + L2 + RI + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + UI + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + Gl + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + Yx + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + SP + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + II + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + RJ + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + UJ + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + HO + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + RP + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + " +lon_0=29 +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + Ia + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + QQ + " +k=1" + O2 + N + C + B + E + A5, 2, Ck + " +lat_0=-18 +lon_0=178 +x_0=109435.392 +y_0=141622.272" + UW + Ym + Nl + " +to_meter=0.201168" + A5, 1, I2 + PL + o + R + JD + E + A5, 1, I2 + SK + o + R + JD + E + A5, 6, I2 + Mh + By + Ay + JP + E + A5, 1, I2 + Mi + By + Ay + JP + E + A5, 3, D + L2 + " +lon_0=18.05779 +k=0.99999425 +x_0=100178.1808 +y_0=-6500614.7836" + C + B + E + A5, 1, DT + Yv + " +lat_2=58.5" + IP + " +lon_0=-126" + BZ + N + C + B + E + A5, 1, I2 + RH + C + B + E + A5, 1, I2 + TW + C + B + E + A5, 1, I2 + TX + C + B + E + A5, 1, I2 + QE + C + B + E + A5, 1, I2 + Nw + C + B + E + A5, 1, I2 + NP + C + B + E + A5, 1, I2 + NQ + C + B + E + A5, 1, H + YI + " +lat_2=53.5" + L2 + SA + " +x_0=930000 +y_0=6430000" + C + B + E + A5, 1, H + YI + " +lat_2=53.5" + L2 + SA + " +x_0=930000 +y_0=6430000" + C + B + E + A5, 1, H + " +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5" + ZW + u + Hk + C + B + E + A5, 1, I2 + MA + o + j + QB + E + A5, 1, H + " +lat_1=-22.24469175 +lat_2=-22.29469175 +lat_0=-22.26969175 +lon_0=166.44242575 +x_0=0.66 +y_0=1.02" + R + HH + E + A5, 1, H + " +lat_1=-22.24472222222222 +lat_2=-22.29472222222222 +lat_0=-22.26972222222222 +lon_0=166.4425 +x_0=8.313000000000001 +y_0=-2.354" + R + HH + E + A5, 1, CU + Qi + aF + aT + Ph + Of + N + KE + GZ + Yn + Qz + " +to_meter=20.116756" + A5, 1, CU + Qi + aF + aT + Ph + " +x_0=804670.24" + N + KE + GZ + Yn + Qz + E + A5, 1, I2 + SM + o + C + B + E + A5, 1, I2 + MA + o + C + B + E + A5, 1, I2 + Nq + o + C + B + E + A5, 1, I2 + Nq + o + R + Jf + E + A5, 2, DT + " +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-84.455955" + BZ + AH + C + B + E + A5, 1, DT + " +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627" + BZ + AH + C + B + E + A5, 1, D + L2 + ZQ + AP + O2 + N + By + Ay + JP + E + A5, 1, D + L2 + UE + " +k=0.9965000000000001" + BZ + N + R + w + E + A5, 1, I2 + IC + C + B + E + A5, 1, I2 + Hi + C + B + E + A5, 1, I2 + Gz + C + B + E + A5, 1, I2 + ID + C + B + E + A5, 1, I2 + Io + C + B + E + A5, 1, I2 + MB + C + B + E + A5, 1, I2 + Nx + C + B + E + A5, 1, I2 + Nr + C + B + E + A5, 1, I2 + Os + C + B + E + A5, 1, I2 + SL + C + B + E + A5, 1, I2 + Ja + C + B + E + A5, 1, I2 + KA + C + B + E + A5, 1, D + L2 + KB + CP + h + N + R + w + E + A5, 1, D + L2 + " +lon_0=11" + CP + h + N + R + w + E + A5, 1, D + L2 + " +lon_0=13" + CP + h + N + R + w + E + A5, 1, D + L2 + Gj + CP + h + N + R + w + E + A5, 1, D + L2 + UE + CP + h + N + R + w + E + A5, 1, D + L2 + RI + CP + h + N + R + w + E + A5, 1, D + L2 + Gl + CP + h + N + R + w + E + A5, 1, D + L2 + SP + CP + h + N + R + w + E + A5, 1, D + L2 + RJ + CP + h + N + R + w + E + A5, 1, I2 + JN + R + w + E + A5, 1, H + Qq + Li + JS + PZ + AV + aG + c + QC + E + A5, 1, I2 + KC + R + w + E + A5, 1, I2 + NR + R + w + E + A5, 1, I2 + Ki + R + w + E + A5, 1, H + Om + On + m + Pe + s + N + S + E + A5, 1, H + Om + On + m + Nb + s + N + S + E + A5, 1, H + Om + On + m + " +lon_0=-42" + s + N + S + E + A5, 1, H + BQ + BR + m + SU + s + N + S + E + A5, 1, H + BQ + BR + m + Pe + s + N + S + E + A5, 1, H + BQ + BR + m + Nb + s + N + S + E + A5, 1, H + BQ + BR + m + PO + s + N + S + E + A5, 1, H + BQ + BR + m + SR + s + N + S + E + A5, 1, H + BQ + BR + m + UH + s + N + S + E + A5, 1, H + BQ + BR + m + Lt + s + N + S + E + A5, 1, H + BQ + BR + m + Hq + s + N + S + E + A5, 1, H + BQ + BR + m + Jj + s + N + S + E + A5, 1, H + BQ + BR + m + Im + s + N + S + E + A5, 1, H + BQ + BR + m + Jk + s + N + S + E + A5, 1, H + BQ + BR + m + Rx + s + N + S + E + A5, 1, H + BQ + BR + m + Oe + s + N + S + E + A5, 1, H + BQ + BR + m + Ql + s + N + S + E + A5, 1, H + AM + AN + m + " +lon_0=-102" + s + N + S + E + A5, 1, H + AM + AN + m + Bu + s + N + S + E + A5, 1, H + AM + AN + m + " +lon_0=-78" + s + N + S + E + A5, 1, H + AM + AN + m + Pe + s + N + S + E + A5, 1, H + AM + AN + m + " +lon_0=-18" + s + N + S + E + A5, 1, H + AM + AN + m + " +lon_0=-6" + s + N + S + E + A5, 1, H + AM + AN + m + ZO + s + N + S + E + A5, 1, H + AM + AN + m + QR + s + N + S + E + A5, 1, H + AM + AN + m + Ia + s + N + S + E + A5, 1, H + AM + AN + m + PO + s + N + S + E + A5, 1, H + AM + AN + m + SR + s + N + S + E + A5, 1, H + AM + AN + m + UH + s + N + S + E + A5, 1, H + AM + AN + m + Lt + s + N + S + E + A5, 1, H + AM + AN + m + Hq + s + N + S + E + A5, 1, H + AM + AN + m + Jj + s + N + S + E + A5, 1, H + AM + AN + m + Im + s + N + S + E + A5, 1, H + AM + AN + m + Jk + s + N + S + E + A5, 1, H + AM + AN + m + Rx + s + N + S + E + A5, 1, H + AM + AN + m + Oe + s + N + S + E + A5, 1, H + AM + AN + m + Ql + s + N + S + E + A5, 1, H + AM + AN + m + UP + s + N + S + E + A5, 1, H + Ah + AZ + m + YJ + s + N + S + E + A5, 1, H + Ah + AZ + m + YK + s + N + S + E + A5, 1, H + Ah + AZ + m + Lj + s + N + S + E + A5, 1, H + Ah + AZ + m + Ji + s + N + S + E + A5, 1, H + Ah + AZ + m + CR + s + N + S + E + A5, 1, H + Ah + AZ + m + Qk + s + N + S + E + A5, 1, H + Ah + AZ + m + " +lon_0=-27" + s + N + S + E + A5, 1, H + Ah + AZ + m + " +lon_0=-9" + s + N + S + E + A5, 1, H + Ah + AZ + m + KB + s + N + S + E + A5, 1, H + Ah + AZ + m + HO + s + N + S + E + A5, 1, H + Ah + AZ + m + JS + s + N + S + E + A5, 1, H + Ah + AZ + m + QW + s + N + S + E + A5, 1, H + Ah + AZ + m + HQ + s + N + S + E + A5, 1, H + Ah + AZ + m + HS + s + N + S + E + A5, 1, H + Ah + AZ + m + Fm + s + N + S + E + A5, 1, H + Ah + AZ + m + Fn + s + N + S + E + A5, 1, H + Ah + AZ + m + NY + s + N + S + E + A5, 1, H + Ah + AZ + m + Lf + s + N + S + E + A5, 1, H + Ai + Aj + m + SV + s + N + S + E + A5, 1, H + Ai + Aj + m + " +lon_0=-144" + s + N + S + E + A5, 1, H + Ai + Aj + m + Mt + s + N + S + E + A5, 1, H + Ai + Aj + m + OZ + s + N + S + E + A5, 1, H + Ai + Aj + m + UQ + s + N + S + E + A5, 1, H + Ai + Aj + m + " +lon_0=-48" + s + N + S + E + A5, 1, H + Ai + Aj + m + " +lon_0=-24" + s + N + S + E + A5, 1, H + Ai + Aj + m + HN + s + N + S + E + A5, 1, H + Ai + Aj + m + II + s + N + S + E + A5, 1, H + Ai + Aj + m + SQ + s + N + S + E + A5, 1, H + Ai + Aj + m + Yt + s + N + S + E + A5, 1, H + Ai + Aj + m + Mj + s + N + S + E + A5, 1, H + Ai + Aj + m + KF + s + N + S + E + A5, 1, H + Ai + Aj + m + UN + s + N + S + E + A5, 1, H + Ai + Aj + m + UO + s + N + S + E + A5, 1, BP + m + AW + SX + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + YK + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + " +lon_0=-105 +k=1" + s + N + S + E + A5, 1, BP + m + AW + UR + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + " +lon_0=-45 +k=1" + s + N + S + E + A5, 1, BP + m + AW + " +lon_0=-15 +k=1" + s + N + S + E + A5, 1, BP + m + AW + Gj + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + JS + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + HP + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + EN + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + Fn + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + NZ + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + ON + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + Bu + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + " +lon_0=-30 +k=1" + s + N + S + E + A5, 1, BP + m + AW + Ia + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + Hq + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + Oe + " +k=1" + s + N + S + E + A5, 1, BP + m + AW + HN + " +k=1" + s + N + S + E + A5, 1, H + Ai + Aj + " +lat_0=-78" + Ql + s + N + S + E + A5, 2, I2 + RG + o + C + Bm + E + A5, 1, I2 + Ro + o + C + Bm + E + A5, 1, I2 + RH + o + C + Bm + E + A5, 1, I2 + TW + o + C + Bm + E + A5, 1, H + WF + " +lat_2=58" + WG + II + O2 + " +y_0=6375000" + C + Lw + E + A5, 1, H + WF + " +lat_2=58" + WG + II + O2 + " +y_0=6375000" + C + B + E + A5, 1, I2 + RH + o + R + Lq + E + A5, 1, I2 + RH + o + R + Kc + E + A5, 1, I2 + Ro + o + R + Kg + E + A5, 1, I2 + Ro + o + R + Kh + E + A5, 1, I2 + RG + o + R + QN + E + A5, 1, I2 + JM + j + TD + E + A5, 1, H + " +lat_1=-30.75 +lat_2=-35.75 +lat_0=-33.25" + Od + " +x_0=9300000" + Gb + C + B + E + A5, 1, DT + Yy + SY + L2 + Mt + s + QZ + X + E + A5, 1, DT + Yy + SY + L2 + Mt + s + QZ + C + B + E + A5, 1, DT + Yy + SY + L2 + Mt + s + QZ + C + B + E + A5, 1, I2 + ID + R + NH + E + A5, 1, I2 + ID + C + B + E + A5, 3, D + L2 + Yx + V2 + O2 + Ak + c + E + A5, 1, D + L2 + II + V2 + O2 + Ak + c + E + A5, 1, D + L2 + IH + V2 + O2 + Ak + c + E + A5, 1, D + L2 + " +lon_0=14" + V2 + O2 + Ak + c + E + A5, 1, D + L2 + " +lon_0=16" + V2 + O2 + Ak + c + E + A5, 1, D + L2 + QR + V2 + O2 + Ak + c + E + A5, 1, D + L2 + UI + V2 + O2 + Ak + c + E + A5, 1, D + L2 + Yx + V2 + O2 + Ak + c + E + A5, 1, D + L2 + II + V2 + O2 + Ak + c + E + A5, 1, D + L2 + UJ + V2 + O2 + Ak + c + E + A5, 1, D + L2 + RP + V2 + O2 + Ak + c + E + A5, 1, D + L2 + Ia + V2 + O2 + Ak + c + E + A5, 1, GU + " +lat_0=52.16666666666666 +lon_0=19.16666666666667 +k=0.999714" + O2 + Ae + M2 + b + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + M2 + b + E + A5, 1, D + L2 + QR + " +k=1" + Jt + N + M2 + b + E + A5, 1, D + L2 + Gl + " +k=1" + IM + N + M2 + b + E + A5, 1, D + L2 + II + " +k=1" + MS + N + M2 + b + E + A5, 1, D + L2 + Gj + " +k=1" + Bo + N + M2 + b + E + A5, 1, D + L2 + Gl + " +k=1" + DP + N + M2 + b + E + A5, 1, D + L2 + HO + " +k=1" + Eg + N + M2 + b + E + A5, 1, I2 + Rc + o + R + TE + E + A5, 1, H + " +lat_1=-20.19506944444445 +lat_0=-20.19506944444445 +lon_0=57.52182777777778 +k_0=1" + BZ + AH + c + Qf + E + A5, 1, DT + " +lat_1=55" + QY + Yu + Ms + s + N + C + B + E + A5, 1, D + L2 + IH + V2 + O2 + Ak + c + GN + E + A5, 1, D + L2 + " +lon_0=14" + V2 + O2 + Ak + c + GN + E + A5, 1, D + L2 + " +lon_0=16" + V2 + O2 + Ak + c + GN + E + A5, 1, I2 + KC + o + c + GN + E + A5, 1, I2 + Ja + C + B + E + A5, 1, I2 + KA + C + B + E + A5, 1, I2 + Oq + C + B + E + A5, 1, D + L2 + II + UG + O2 + N + C + B + E + A5, 1, H + LM + IJ + " +lat_0=63.390675" + UY + " +x_0=6200000" + Fq + C + B + E + A5, 1, H + LM + IJ + " +lat_0=63.390675" + UY + " +x_0=6200000" + Fq + C + B + E + A5, 2, D + " +lat_0=0.1 +lon_0=21.95 +k=1" + Bv + N + M2 + F + E + A5, 1, D + " +lat_0=0.1 +lon_0=24.95 +k=1 +x_0=1250000" + N + M2 + F + E + A5, 1, D + " +lat_0=0.1 +lon_0=27.95 +k=1 +x_0=2250000" + N + M2 + F + E + A5, 1, I2 + JN + o + R + E + A5, 1, I2 + JN + o + R + E + A5, 1, D + Gm + QQ + " +k=1 +x_0=615000 +y_0=810000" + Gn + Qg + E + A5, 3, H + Et + Eu + LT + NW + Rh + N + C + B + E + A5, 2, H + FC + OD + Dr + CR + OE + N + C + B + E + A5, 1, H + FC + OD + Dr + CR + OE + N + C + B + t + A5, 1, H + MW + FB + BB + Ea + a + N + C + B + E + A5, 1, H + MW + FB + BB + Ea + a + N + C + B + J + A5, 1, H + Dp + Dq + y + Ea + a + N + C + B + E + A5, 1, H + Dp + Dq + y + Ea + a + N + C + B + J + A5, 2, I2 + Ja + c + E + A5, 1, I2 + KA + c + E + A5, 1, I2 + Oq + c + E + A5, 1, I2 + Nq + X + E + A5, 1, I2 + PL + X + E + A5, 1, I2 + Nq + C + B + E + A5, 1, I2 + PL + C + B + E + A5, 1, I2 + KA + R + E + A5, 1, CU + Qi + aF + " +alpha=323.0257964666666" + Ph + " +x_0=804671" + N + KE + GZ + C + E + A5, 1, CU + Qi + Yz + aU + Ph + s + N + KE + If + C + E + A5, 1, Ck + " +lat_0=2.121679744444445 +lon_0=103.4279362361111 +x_0=-14810.562 +y_0=8758.32" + C + E + A5, 1, Ck + " +lat_0=2.682347636111111 +lon_0=101.9749050416667 +x_0=3673.785 +y_0=-4240.573" + C + E + A5, 1, Ck + " +lat_0=3.769388088888889 +lon_0=102.3682989833333 +x_0=-7368.228 +y_0=6485.858" + C + E + A5, 1, Ck + " +lat_0=3.68464905 +lon_0=101.3891079138889 +x_0=-34836.161 +y_0=56464.049" + C + E + A5, 1, Ck + " +lat_0=4.9762852 +lon_0=103.070275625 +x_0=19594.245 +y_0=3371.895" + C + E + A5, 1, Ck + " +lat_0=5.421517541666667 +lon_0=100.3443769638889 +x_0=-23.414 +y_0=62.283" + C + E + A5, 1, Ck + " +lat_0=5.964672713888889 +lon_0=100.6363711111111" + s + N + C + E + A5, 1, Ck + " +lat_0=4.859063022222222 +lon_0=100.8154105861111 +x_0=-1.769 +y_0=133454.779" + C + E + A5, 1, Ck + " +lat_0=5.972543658333334 +lon_0=102.2952416694444 +x_0=13227.851 +y_0=8739.894" + C + E + A5, 1, D + L2 + QR + " +k=1" + O2 + N + R + At + E + A5, 1, D + L2 + IG + " +k=1" + Eg + N + R + At + E + A5, 1, JU + PS + " +lat_ts=42" + s + N + M2 + F + E + A5, 1, D + L2 + Ry + " +k=1 +x_0=60500000" + N + M2 + F + E + A5, 1, D + L2 + Ry + " +k=1 +x_0=60500000" + N + M2 + G + E + A5, 1, I2 + KD + c + EU + E + A5, 1, I2 + JZ + c + EU + E + A5, 1, I2 + JM + c + EU + E + A5, 1, H + Qq + Li + JS + PZ + AV + aG + c + E + A5, 1, JU + HN + " +k=1" + s + N + S + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + Y + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + Y + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + Y + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + Y + E + A5, 1, D + L2 + SZ + " +k=0.9992" + O2 + N + C + B + E + A5, 1, D + L2 + SZ + " +k=0.9992" + s + N + C + B + E + A5, 1, D + L2 + SZ + " +k=0.9992" + O2 + N + C + B + E + A5, 1, D + L2 + SZ + " +k=0.9992" + s + N + C + B + E + A5, 1, H + Et + Eu + LT + NW + Z2 + N + C + B + J + A5, 1, I2 + Mh + j + Fu + E + A5, 1, I2 + Mi + j + Fu + E + A5, 1, Ck + Vt + Vu + " +x_0=40243.57775604237 +y_0=19069.93351512578" + Ee + Ef + ML + A5, 1, He + Hr + HN + s + N + ZX + ZY + E + A5, 1, He + m + HN + s + N + ZX + ZY + E + A5, 1, "+proj=cea" + HN + " +lat_ts=30" + s + N + ZX + ZY + E + A5, 1, BP + Hr + " +lat_ts=70 +lon_0=-45 +k=1" + s + N + ZZ + Ri + E + A5, 1, BP + m + " +lat_ts=-70" + HN + " +k=1" + s + N + ZZ + Ri + E + A5, 1, BP + Hr + " +lat_ts=70 +lon_0=-45 +k=1" + s + N + S + E + A5, 1, D + " +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572" + j + E + A5, 1, H + " +lat_1=18 +lat_2=24 +lat_0=21" + Im + O2 + Ae + T + Q + E + A5, 1, H + LM + Nh + " +lat_0=47.5" + Ig + u + Is + C + B + E + A5, 1, H + EB + EC + Fo + GG + AV + GJ + C + B + J + A5, 1, H + AY + ED + Fs + GG + AG + N + C + B + J + A5, 1, H + EE + EF + AQ + Fl + Au + N + C + B + J + A5, 1, H + EG + EH + f + CV + Au + Gt + C + B + J + A5, 1, D + CQ + DF + V2 + Gu + MN + C + B + J + A5, 1, D + CQ + DG + V2 + AG + Hh + C + B + J + A5, 1, D + CQ + DH + V2 + An + NE + C + B + J + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + J + A5, 1, H + EB + EC + Fo + GG + AV + GJ + C + B + J + A5, 1, H + AY + ED + Fs + GG + AG + N + C + B + J + A5, 1, H + EE + EF + AQ + Fl + Au + N + C + B + J + A5, 1, H + EG + EH + f + CV + Au + Gt + C + B + J + A5, 1, D + CQ + DF + V2 + Gu + MN + C + B + J + A5, 1, D + CQ + DG + V2 + AG + Hh + C + B + J + A5, 1, D + CQ + DH + V2 + An + NE + C + B + J + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + J + A5, 1, H + Dx + Dy + BC + IF + Au + N + C + B + J + A5, 1, H + Dz + Mq + EA + IF + Au + Gt + C + B + J + A5, 1, D + f + Cz + EQ + BF + N + C + B + J + A5, 1, D + f + DA + Am + MO + N + C + B + J + A5, 1, D + Fp + DI + AO + BF + N + C + B + J + A5, 1, D + EI + GE + Lb + JV + N + C + B + J + A5, 1, I2 + JM + c + Gg + E + A5, 1, I2 + Me + c + Gg + E + A5, 1, H + Dx + Dy + BC + IF + Au + N + C + B + J + A5, 1, H + Dz + Mq + EA + IF + Au + Gt + C + B + J + A5, 1, D + f + Cz + EQ + BF + N + C + B + J + A5, 1, D + f + DA + Am + MO + N + C + B + J + A5, 1, D + Fp + DI + AO + BF + N + C + B + J + A5, 1, D + EI + GE + Lb + JV + N + C + B + J + A5, 1, H + Ks + Kt + " +lat_0=50.797815" + WH + " +x_0=150328 +y_0=166262" + C + B + E + A5, 1, H + " +lat_1=18" + OX + Ld + " +k_0=1" + YL + " +y_0=650000" + j + B + E + A5, 1, I2 + Ik + j + B + E + A5, 1, I2 + IC + j + B + E + A5, 1, H + FS + FT + IY + Hg + Eb + N + C + B + J + A5, 1, H + OH + OI + OJ + Bi + Eb + N + C + B + J + A5, 1, H + CD + CE + " +lat_0=25.5" + Bi + Eb + N + C + B + J + A5, 2, H + OL + Ff + EJ + Ag + a + N + C + B + J + A5, 1, H + FS + FT + IY + Hg + Eb + N + C + B + J + A5, 1, H + OH + OI + OJ + Bi + Eb + N + C + B + J + A5, 1, H + Fd + Fe + AL + CS + a + N + C + B + J + A5, 1, H + OL + Ff + EJ + Ag + a + N + C + B + J + A5, 1, D + " +lat_0=-17 +lon_0=178.75 +k=0.99985" + Bd + LV + T + P + E + A5, 1, I2 + Ja + AU + BN + Nm + E + A5, 1, I2 + KA + AU + BN + Nm + E + A5, 1, D + YM + Rj + JE + O2 + N + C + B + E + A5, 1, D + YM + Rj + JE + O2 + N + C + B + E + A5, 1, D + IY + IV + Pc + h + N + C + B + E + A5, 1, D + Gm + OS + BG + a + N + C + B + E + A5, 1, DT + " +lat_1=55" + QY + Yu + Ms + s + N + C + B + E + A5, 1, CU + " +lat_0=57" + Ku + Kv + V2 + LX + EO + KE + GZ + C + B + E + A5, 1, D + Ft + YN + V2 + O2 + N + C + B + E + A5, 1, D + Ft + YO + V2 + O2 + N + C + B + E + A5, 1, D + Ft + ON + V2 + O2 + N + C + B + E + A5, 1, D + Ft + Ms + V2 + O2 + N + C + B + E + A5, 1, D + Ft + KI + V2 + O2 + N + C + B + E + A5, 1, D + Ft + YP + V2 + O2 + N + C + B + E + A5, 1, D + Ft + YQ + V2 + O2 + N + C + B + E + A5, 1, D + Ft + SW + V2 + O2 + N + C + B + E + A5, 1, H + Kw + Kx + UK + YR + BZ + N + C + B + E + A5, 1, D + Bl + Co + V2 + EX + N + C + B + E + A5, 1, D + Bl + Co + V2 + EX + N + C + B + t + A5, 1, D + Bl + Cn + V2 + EX + N + C + B + E + A5, 1, D + Bl + Cn + V2 + EX + N + C + B + t + A5, 1, D + Bl + Iv + BG + EX + N + C + B + E + A5, 1, D + Bl + Iv + BG + EX + N + C + B + t + A5, 1, H + Dx + Dy + BC + IF + u + N + C + B + E + A5, 1, H + Dx + Dy + BC + IF + Au + N + C + B + J + A5, 1, H + Dz + Mq + EA + IF + u + Is + C + B + E + A5, 1, H + Dz + Mq + EA + IF + Au + Gt + C + B + J + A5, 1, DT + Yy + SY + L2 + Mt + s + QZ + C + B + E + A5, 1, H + DW + Jn + y + HA + Bd + Ae + C + B + E + A5, 1, H + DW + Jn + y + HA + Ac + AD + C + B + J + A5, 1, H + DX + DY + AA + HA + Bd + Ae + C + B + E + A5, 1, H + DX + DY + AA + HA + Ac + AD + C + B + J + A5, 1, H + Ap + DZ + Ml + AJ + Bd + Ae + C + B + E + A5, 1, H + Ap + DZ + Ml + AJ + Ac + AD + C + B + J + A5, 1, H + LO + QS + Da + Mm + Bd + Ae + C + B + E + A5, 1, H + LO + QS + Da + Mm + Ac + AD + C + B + J + A5, 1, H + Db + Dc + Mn + Ir + Bd + Ae + C + B + E + A5, 1, H + Db + Dc + Mn + Ir + Ac + AD + C + B + J + A5, 1, H + Dd + De + Df + Iw + Bd + Ae + C + B + E + A5, 1, H + Dd + De + Df + Iw + Ac + AD + C + B + J + A5, 1, H + LP + LQ + CY + Ba + Fw + Fx + C + B + E + A5, 1, H + LP + LQ + CY + Ba + Bw + CL + C + B + J + A5, 1, H + Eh + Ei + y + Ba + Fw + Fx + C + B + E + A5, 1, H + Eh + Ei + y + Ba + Bw + CL + C + B + J + A5, 1, H + Ap + Dg + f + Ba + Fw + Fx + C + B + E + A5, 1, H + Ap + Dg + f + Ba + Bw + CL + C + B + J + A5, 1, H + Dh + Mo + Di + Jq + QG + QH + C + B + E + A5, 1, H + Dh + Mo + Di + Jq + MC + MD + C + B + J + A5, 1, D + Ch + Cp + Mp + h + N + C + B + E + A5, 1, D + Ch + Cp + Mp + AE + N + C + B + J + A5, 1, D + Aq + CR + Am + h + N + C + B + E + A5, 1, D + Aq + CR + Am + AE + N + C + B + J + A5, 1, DT + " +lat_1=24" + YG + " +lat_0=24" + NV + u + N + C + B + E + A5, 1, H + LR + Dj + QT + LS + a + N + C + B + E + A5, 1, H + LR + Dj + QT + LS + a + N + C + B + J + A5, 1, D + Aq + Ob + Am + h + N + C + B + E + A5, 1, D + Aq + Ob + Am + AE + N + C + B + J + A5, 1, D + Gm + Cq + V2 + h + N + C + B + E + A5, 1, D + Gm + Cq + V2 + AE + N + C + B + J + A5, 1, D + Gm + Cr + V2 + EW + N + C + B + E + A5, 1, D + Gm + Cr + V2 + CM + N + C + B + J + A5, 1, D + p + Jb + BJ + O2 + N + C + B + E + A5, 1, D + p + Jb + BJ + AF + N + C + B + J + A5, 1, D + p + Cs + BJ + h + N + C + B + E + A5, 1, D + p + Cs + BJ + AE + N + C + B + J + A5, 1, D + p + Ix + BG + CX + N + C + B + E + A5, 1, D + p + Ix + BG + ME + N + C + B + J + A5, 1, D + f + Cz + EQ + AI + N + C + B + E + A5, 1, D + f + Cz + EQ + BF + N + C + B + J + A5, 1, D + f + DA + Am + EW + N + C + B + E + A5, 1, D + f + DA + Am + MO + N + C + B + J + A5, 1, D + DM + DB + AO + BU + KJ + C + B + E + A5, 1, D + DM + DB + AO + MM + GI + C + B + J + A5, 1, D + DM + DC + AO + HT + KJ + C + B + E + A5, 1, D + DM + DC + AO + HT + GI + C + B + J + A5, 1, H + EB + EC + Fo + GG + AV + AH + C + B + E + A5, 1, H + EB + EC + Fo + GG + AV + GJ + C + B + J + A5, 1, H + AY + ED + Fs + GG + O2 + N + C + B + E + A5, 1, H + AY + ED + Fs + GG + AG + N + C + B + J + A5, 1, H + EE + EF + AQ + Fl + u + N + C + B + E + A5, 1, H + EE + EF + AQ + Fl + Au + N + C + B + J + A5, 1, H + EG + EH + f + CV + u + Is + C + B + E + A5, 1, H + EG + EH + f + CV + Au + Gt + C + B + J + A5, 1, H + Az + DV + DM + Jo + O2 + N + C + B + E + A5, 1, H + Az + DV + DM + Jo + AF + N + C + B + J + A5, 1, H + Fi + Fj + AB + EY + AV + AH + C + B + E + A5, 1, H + Fi + Fj + AB + EY + AV + CN + C + B + J + A5, 1, H + Ej + Ek + AB + EY + O2 + Ae + C + B + E + A5, 1, H + Ej + Ek + AB + EY + AF + AD + C + B + J + A5, 1, H + FS + FT + IY + Hg + BZ + N + C + B + E + A5, 1, H + FS + FT + IY + Hg + Eb + N + C + B + J + A5, 1, H + OH + OI + OJ + Bi + BZ + N + C + B + E + A5, 1, H + OH + OI + OJ + Bi + Eb + N + C + B + J + A5, 1, D + YM + Rj + JE + O2 + N + C + B + E + A5, 1, D + AL + Rf + JE + EW + N + C + B + E + A5, 1, D + BD + Rg + JE + AI + N + C + B + E + A5, 1, D + AK + HJ + V2 + AI + N + C + B + E + A5, 1, D + BD + DD + AO + HT + N + C + B + E + A5, 1, H + MU + Nz + AA + Ld + u + N + C + B + E + A5, 1, H + AY + CF + Br + BI + AG + GJ + C + B + J + A5, 1, D + Kn + Sf + AO + e + N + i + GB + J + A5, 1, D + Ko + KO + AO + e + N + i + GB + J + A5, 1, D + GV + KI + Jl + e + N + i + GB + J + A5, 1, D + Kp + Sg + Jl + e + N + i + GB + J + A5, 1, D + Kq + KP + " +k=1" + e + N + i + GB + J + A5, 1, H + JF + CG + AQ + BI + AG + NF + C + B + J + A5, 1, H + JG + CH + f + BI + AG + Fq + C + B + J + A5, 1, H + AY + CF + Br + BI + AG + GJ + C + B + J + A5, 1, H + JF + CG + AQ + BI + AG + NF + C + B + J + A5, 1, H + JG + CH + f + BI + AG + Fq + C + B + J + A5, 1, He + Hr + Ry + s + N + S + E + A5, 1, He + Hr + ON + s + N + S + E + A5, 1, He + Hr + CS + s + N + S + E + A5, 1, He + Hr + " +lon_0=-40" + s + N + S + E + A5, 1, He + Hr + Lu + s + N + S + E + A5, 1, He + Hr + Hq + s + N + S + E + A5, 1, DT + " +lat_1=-18" + ZT + L2 + Il + s + N + C + B + E + A5, 1, DT + WI + " +lat_2=68 +lat_0=59 +lon_0=-132.5" + O2 + Ae + C + B + E + A5, 1, DT + WI + " +lat_2=68 +lat_0=59 +lon_0=-132.5" + O2 + Ae + C + B + E + A5, 1, H + " +lat_1=62 +lat_2=70" + L2 + " +lon_0=-112" + s + N + C + B + E + A5, 1, H + " +lat_1=62 +lat_2=70" + L2 + " +lon_0=-112" + s + N + C + B + E + A5, 1, H + MU + Nz + AA + Ld + MF + N + C + B + J + A5, 1, H + Em + En + Ip + IL + O2 + N + C + B + E + A5, 1, H + Em + En + Ip + IL + AF + N + C + B + J + A5, 1, H + El + Dk + Ip + GE + h + Mk + C + B + E + A5, 1, H + El + Dk + Ip + GE + AE + Mk + C + B + J + A5, 1, H + OA + Er + Es + BE + Pk + N + C + B + E + A5, 1, H + OA + Er + Es + BE + MH + N + C + B + t + A5, 1, H + Eo + Ep + Eq + Jh + Tl + N + C + B + E + A5, 1, H + Eo + Ep + Eq + Jh + MG + N + C + B + t + A5, 1, CU + Kr + " +lonc=-86" + QI + AP + QJ + PY + KE + QK + C + B + E + A5, 1, H + Bq + OB + Fo + BE + LU + N + C + B + E + A5, 1, H + Bq + OB + Fo + BE + OT + N + C + B + t + A5, 1, H + Ma + FW + IP + Js + CX + EK + C + B + E + A5, 1, H + FU + FV + Iq + DE + CX + EK + C + B + E + A5, 1, H + FX + FY + Nj + Na + CX + EK + C + B + E + A5, 1, D + Hj + Ct + CP + AI + N + C + B + E + A5, 1, D + Hj + Ct + CP + BF + N + C + B + J + A5, 1, D + Hj + Bx + CP + EW + N + C + B + E + A5, 1, D + Hj + Bx + CP + CM + N + C + B + J + A5, 1, D + Cd + Hg + BG + O2 + N + C + B + E + A5, 1, D + Cd + RS + BG + Bv + N + C + B + E + A5, 1, D + Id + RT + Am + YC + N + C + B + E + A5, 1, H + LM + RK + MV + IS + a + N + C + B + E + A5, 1, H + LM + RK + MV + IS + DR + N + C + B + t + A5, 1, H + JT + Jn + FZ + CS + O2 + N + C + B + E + A5, 1, D + CQ + DG + V2 + O2 + Hh + C + B + E + A5, 1, D + CQ + DG + V2 + AG + Hh + C + B + J + A5, 1, D + CQ + DF + V2 + h + Tm + C + B + E + A5, 1, D + CQ + DF + V2 + Gu + MN + C + B + J + A5, 1, D + CQ + DH + V2 + CX + LV + C + B + E + A5, 1, D + CQ + DH + V2 + An + NE + C + B + J + A5, 1, D + Fp + DI + AO + AI + N + C + B + E + A5, 1, D + Fp + DI + AO + BF + N + C + B + J + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + E + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + J + A5, 1, D + Bl + Iy + V2 + O2 + N + C + B + E + A5, 1, D + Bl + Iy + V2 + AF + N + C + B + J + A5, 1, D + Bl + Cu + Hm + OC + N + C + B + E + A5, 1, D + Bl + Cu + Hm + OC + N + C + B + J + A5, 1, D + Bl + Cv + Iz + YD + N + C + B + E + A5, 1, D + Bl + Cv + Iz + MI + N + C + B + J + A5, 1, D + Fs + Cw + Ad + Bv + N + C + B + E + A5, 1, D + Fs + Cw + Ad + MJ + N + C + B + J + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + E + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + J + A5, 1, H + Dl + Dm + BB + Oc + AI + N + C + B + E + A5, 1, H + Dl + Dm + BB + Oc + BF + N + C + B + J + A5, 1, D + Fs + Cx + Ad + Qo + N + C + B + E + A5, 1, D + Fs + Cx + Ad + MK + N + C + B + J + A5, 1, H + Et + Eu + LT + NW + Rh + N + C + B + E + A5, 1, H + Et + Eu + LT + NW + Z2 + N + C + B + J + A5, 1, H + BH + Ev + Ib + EZ + a + N + C + B + E + A5, 1, H + BH + Ev + Ib + EZ + DR + N + C + B + t + A5, 1, H + Ew + Ex + Be + EZ + a + N + C + B + E + A5, 1, H + Ew + Ex + Be + EZ + DR + N + C + B + t + A5, 1, H + OK + Fa + BY + ET + a + N + C + B + E + A5, 1, H + Fb + Fc + Ch + ET + a + N + C + B + E + A5, 1, H + Dn + Ey + QU + Fl + a + N + C + B + E + A5, 1, H + Dn + Ey + QU + Fl + a + N + C + B + J + A5, 1, H + Ez + FA + Do + Fl + a + N + C + B + E + A5, 1, H + Ez + FA + Do + Fl + a + N + C + B + J + A5, 1, H + JT + Hl + GH + AJ + u + N + C + B + E + A5, 1, H + JT + Hl + GH + AJ + Lc + N + C + B + t + A5, 1, H + PP + CZ + AK + AJ + Ci + N + C + B + E + A5, 1, H + PP + CZ + AK + AJ + KL + N + C + B + t + A5, 1, H + PQ + Ca + p + AJ + AV + N + C + B + E + A5, 1, H + PQ + Ca + p + AJ + KM + N + C + B + t + A5, 1, H + MW + FB + BB + Ea + a + N + C + B + E + A5, 1, H + MW + FB + BB + Ea + a + N + C + B + J + A5, 1, H + Dp + Dq + y + Ea + a + N + C + B + E + A5, 1, H + Dp + Dq + y + Ea + a + N + C + B + J + A5, 1, D + EI + GE + Lb + BU + N + C + B + E + A5, 1, D + EI + GE + Lb + JV + N + C + B + J + A5, 1, H + FC + OD + Dr + CR + OE + N + C + B + E + A5, 1, H + FC + OD + Dr + CR + OE + N + C + B + t + A5, 1, H + Fd + Fe + AL + CS + a + N + C + B + E + A5, 1, H + Fd + Fe + AL + CS + a + N + C + B + J + A5, 1, H + OL + Ff + EJ + Ag + a + N + C + B + E + A5, 1, H + OL + Ff + EJ + Ag + a + N + C + B + J + A5, 1, H + FD + MX + BC + MQ + a + N + C + B + E + A5, 1, H + FD + MX + BC + MQ + a + N + C + B + J + A5, 1, H + FH + FI + Cb + Ag + EW + Fq + C + B + E + A5, 1, H + FH + FI + Cb + Ag + CM + Fq + C + B + J + A5, 1, DT + OM + RO + OX + CS + AV + Hh + C + B + E + A5, 1, H + OM + RO + OX + CS + AV + Ju + C + B + E + A5, 1, H + FE + MY + QV + Jr + h + AH + C + B + E + A5, 1, H + FE + MY + QV + Jr + AE + CN + C + B + J + A5, 1, H + FF + FG + Ds + CV + a + Cl + C + B + E + A5, 1, H + FF + FG + Ds + CV + a + Gr + C + B + J + A5, 1, H + CD + CE + Cc + CV + AI + Ju + C + B + E + A5, 1, H + CD + CE + Cc + CV + BF + Nf + C + B + J + A5, 1, H + FJ + FK + Dt + Ji + a + LV + C + B + E + A5, 1, H + FJ + FK + Dt + Ji + a + Ne + C + B + J + A5, 1, H + JF + CG + AQ + BI + O2 + Cl + C + B + E + A5, 1, H + JF + CG + AQ + BI + Gd + RY + C + B + t + A5, 1, H + JF + CG + AQ + BI + AG + NF + C + B + J + A5, 1, H + AY + CF + Br + BI + O2 + AH + C + B + E + A5, 1, H + AY + CF + Br + BI + Gd + Pw + C + B + t + A5, 1, H + AY + CF + Br + BI + AG + GJ + C + B + J + A5, 1, H + JG + CH + f + BI + O2 + Fq + C + B + E + A5, 1, H + JG + CH + f + BI + Gd + RZ + C + B + t + A5, 1, H + JG + CH + f + BI + AG + Fq + C + B + J + A5, 1, D + Fp + LW + JA + O2 + N + C + B + E + A5, 1, H + OF + FL + AA + GF + Bo + Cl + C + B + E + A5, 1, H + OF + FL + AA + GF + Gs + Gr + C + B + J + A5, 1, H + Az + Du + AB + GF + Bo + AH + C + B + E + A5, 1, H + Az + Du + AB + GF + Gs + CN + C + B + J + A5, 1, H + BH + OG + Ib + Cy + O2 + N + C + B + E + A5, 1, H + BH + OG + Ib + Cy + AF + N + C + B + J + A5, 1, H + FM + FN + Dv + AJ + O2 + N + C + B + E + A5, 1, H + FM + FN + Dv + AJ + AF + N + C + B + J + A5, 1, H + Mb + RN + Mr + Ga + a + N + C + B + E + A5, 1, H + Fg + Fh + QX + CR + a + N + C + B + E + A5, 1, H + Jc + MZ + AL + Bu + a + N + C + B + E + A5, 1, H + Jc + MZ + AL + Bu + a + N + C + B + J + A5, 1, H + FO + FP + Dw + Bu + a + N + C + B + E + A5, 1, H + FO + FP + Dw + Bu + a + N + C + B + J + A5, 1, H + FQ + FR + PR + Bu + a + N + C + B + E + A5, 1, H + FQ + FR + PR + Bu + a + N + C + B + J + A5, 1, D + L2 + Bu + AP + YF + Sh + C + B + E + A5, 1, D + CA + DJ + Ad + h + N + C + B + E + A5, 1, D + CA + DK + Ad + u + EK + C + B + E + A5, 1, D + CA + JB + Ad + a + N + C + B + E + A5, 1, D + CA + DL + Ad + CX + EK + C + B + E + A5, 1, I2 + Nq + C + B + E + A5, 1, I2 + PL + C + B + E + A5, 1, I2 + SK + C + B + E + A5, 1, I2 + TV + C + B + E + A5, 1, I2 + Xz + C + B + E + A5, 1, I2 + TY + C + B + E + A5, 1, I2 + RG + C + B + E + A5, 1, I2 + Ro + C + B + E + A5, 1, I2 + RH + C + B + E + A5, 1, I2 + TW + C + B + E + A5, 1, I2 + TX + C + B + E + A5, 1, I2 + QE + C + B + E + A5, 1, I2 + Ns + C + B + E + A5, 1, I2 + Nt + C + B + E + A5, 1, I2 + Nu + C + B + E + A5, 1, I2 + Nw + C + B + E + A5, 1, I2 + NP + C + B + E + A5, 1, I2 + NQ + C + B + E + A5, 1, I2 + Ik + C + B + E + A5, 1, I2 + IC + C + B + E + A5, 1, I2 + Hi + C + B + E + A5, 1, D + " +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=160000" + Rz + R + SJ + E + A5, 1, H + OK + Fa + BY + ET + a + N + C + B + J + A5, 1, H + Fb + Fc + Ch + ET + a + N + C + B + J + A5, 1, D + CA + DJ + Ad + Gu + N + C + B + J + A5, 1, D + CA + DK + Ad + Au + Ao + C + B + J + A5, 1, D + CA + JB + Ad + a + N + C + B + J + A5, 1, D + CA + DL + Ad + An + Ao + C + B + J + A5, 1, H + OK + Fa + BY + ET + a + N + C + B + J + A5, 1, H + Fb + Fc + Ch + ET + a + N + C + B + J + A5, 1, D + CA + DJ + Ad + Gu + N + C + B + J + A5, 1, D + CA + DK + Ad + Au + Ao + C + B + J + A5, 1, D + CA + JB + Ad + a + N + C + B + J + A5, 1, D + CA + DL + Ad + An + Ao + C + B + J + A5, 1, I2 + QE + C + B + E + A5, 1, I2 + Ns + C + B + E + A5, 1, I2 + Nt + C + B + E + A5, 1, I2 + Nu + C + B + E + A5, 1, I2 + Nw + C + B + E + A5, 1, I2 + NP + C + B + E + A5, 1, I2 + NQ + C + B + E + A5, 1, I2 + Ik + C + B + E + A5, 1, I2 + IC + C + B + E + A5, 1, I2 + Hi + C + B + E + A5, 1, I2 + TY + C + B + E + A5, 1, I2 + RG + C + B + E + A5, 2, H + OK + Fa + BY + ET + a + N + C + B + J + A5, 1, H + Fb + Fc + Ch + ET + a + N + C + B + J + A5, 1, D + CA + DJ + Ad + Gu + N + C + B + J + A5, 1, D + CA + DK + Ad + Au + Ao + C + B + J + A5, 1, D + CA + JB + Ad + a + N + C + B + J + A5, 1, D + CA + DL + Ad + An + Ao + C + B + J + A5, 1, D + GV + KI + Jl + AG + N + C + B + J + A5, 1, D + GV + KI + Jl + AG + N + C + B + J + A5, 1, I2 + Io + C + B + E + A5, 1, H + " +lat_1=-54 +lat_2=-54.75 +lat_0=-55 +lon_0=-37" + s + N + S + E + A5, 1, D + " +lat_0=39.66825833333333 +lon_0=-8.133108333333334 +k=1" + s + N + C + B + E + A5, 1, D + Za + Si + " +k=1" + u + CO + C + B + E + A5, 1, D + L2 + YE + V2 + O2 + N + C + B + E + A5, 1, H + " +lat_1=45.91666666666666 +lat_2=43.08333333333334" + L2 + YE + s + N + C + B + E + A5, 1, I2 + KC + C + B + E + A5, 1, I2 + NR + C + B + E + A5, 1, I2 + Gz + i + TQ + E + A5, 1, D + " +lat_0=32 +lon_0=-64.75 +k=1 +x_0=550000" + EK + j + B + E + A5, 1, D + L2 + KK + V2 + s + N + X + E + A5, 1, D + L2 + Jb + V2 + s + N + X + E + A5, 1, D + L2 + Lj + V2 + s + N + X + E + A5, 2, D + L2 + KK + V2 + s + N + C + B + E + A5, 1, D + L2 + Jb + V2 + s + N + C + B + E + A5, 1, D + L2 + Lj + V2 + s + N + C + B + E + A5, 2, D + L2 + KK + V2 + s + N + C + B + E + A5, 1, D + L2 + Jb + V2 + s + N + C + B + E + A5, 1, D + L2 + Lj + V2 + s + N + C + B + E + A5, 2, D + " +lat_0=-25.06855261111111 +lon_0=-130.1129671111111 +k=1 +x_0=14200 +y_0=15500" + j + B + E + A5, 1, I2 + TX + o + R + Ta + E + A5, 4, D + L2 + ZW + " +k=1" + Bo + Ak + C + B + E + A5, 1, D + L2 + " +lon_0=169 +k=1" + Bo + Ak + C + B + E + A5, 1, D + L2 + " +lon_0=179 +k=1" + Bo + Ak + C + B + E + A5, 1, D + L2 + " +lon_0=-178 +k=1" + Bo + Ak + C + B + E + A5, 2, D + L2 + Si + " +k=1" + Bo + Ak + C + B + E + A5, 1, D + L2 + Gj + V2 + O2 + EO + C + B + E + A5, 1, H + " +lat_1=23 +lat_2=21.7 +lat_0=22.35" + CR + O2 + " +y_0=280296.016" + X + E + A5, 1, H + " +lat_1=21.3 +lat_2=20.13333333333333 +lat_0=20.71666666666667 +lon_0=-76.83333333333333" + O2 + " +y_0=229126.939" + X + E + A5, 1, H + Yv + Nh + IZ + " +lon_0=-70" + CX + N + X + E + A5, 1, H + Yv + Nh + IZ + " +lon_0=-70" + CX + N + C + B + E + A5, 1, H + Yv + Nh + IZ + " +lon_0=-70" + CX + N + C + B + E + A5, 1, D + L2 + Mt + V2 + s + N + X + E + A5, 1, D + L2 + Mt + V2 + s + N + C + B + E + A5, 1, D + L2 + Mt + V2 + s + N + C + B + E + A5, 10, H + Ks + Kt + " +lat_0=50.797815" + WH + " +x_0=649328 +y_0=665262" + C + B + E + A5, 2, D + Li + Sj + Tn + O2 + Pm + C + B + E + A5, 1, D + Li + Sj + Tn + O2 + Pm + C + B + E + A5, 1, D + Li + Sj + Tn + O2 + Pm + C + B + E + A5, 3, K + Y + " +towgs84=595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408" + A5, 2, K + x + A5, 3, K + C + B + A5, 1, D + L2 + ZU + V2 + Bv + N + C + B + E + A5, 1, D + L2 + ZV + V2 + Bv + N + C + B + E + A5, 1, D + L2 + ZU + V2 + Bv + N + x + E + A5, 1, D + L2 + ZV + V2 + Bv + N + x + E + A5, 1, I2 + Mg + R + Rq + E + A5, 3, JU + Oe + " +k=1" + s + N + S + E + A5, 1, D + L2 + KB + " +k=1" + Ci + N + M2 + b + E + A5, 1, D + L2 + KB + " +k=1" + Ci + N + M2 + Ar + E + A5, 1, D + L2 + Gj + " +k=1" + Bo + N + M2 + Ar + E + A5, 1, D + L2 + Gl + " +k=1" + DP + N + M2 + Ar + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + M2 + b + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + M2 + b + E + A5, 1, D + L2 + HO + " +k=1" + MT + N + M2 + b + E + A5, 1, D + L2 + Ia + " +k=1" + LY + N + M2 + b + E + A5, 1, D + L2 + QR + " +k=1" + Jt + N + M2 + Ar + E + A5, 3, GU + " +lat_0=46" + RJ + Rv + O2 + Ae + M2 + b + E + A5, 1, D + L2 + " +lon_0=11.30625 +k=1.000006 +x_0=1500025.141 +y_0=-667.282" + C + B + E + A5, 1, D + L2 + " +lon_0=13.55626666666667 +k=1.0000058 +x_0=1500044.695 +y_0=-667.13" + C + B + E + A5, 1, D + L2 + " +lon_0=15.80628452944445 +k=1.00000561024 +x_0=1500064.274 +y_0=-667.711" + C + B + E + A5, 1, D + L2 + " +lon_0=18.0563 +k=1.0000054 +x_0=1500083.521 +y_0=-668.8440000000001" + C + B + E + A5, 1, D + L2 + " +lon_0=20.30631666666667 +k=1.0000052 +x_0=1500102.765 +y_0=-670.706" + C + B + E + A5, 1, D + L2 + " +lon_0=22.55633333333333 +k=1.0000049 +x_0=1500121.846 +y_0=-672.557" + C + B + E + A5, 1, H + " +lat_1=-37.5 +lat_2=-44.5 +lat_0=-41 +lon_0=173" + aH + " +y_0=7000000" + C + B + E + A5, 1, H + Ai + Aj + m + " +lon_0=157" + O2 + N + C + B + E + A5, 2, D + L2 + " +lon_0=18.05787 +k=0.99999506 +x_0=100182.7406 +y_0=-6500620.1207" + C + B + E + A5, 3, JU + " +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0" + N + " +k=1.0" + E + " +nadgrids=@null +wktext " + A5, 16, D + L2 + RI + " +k=1" + Ht + N + C + B + E + A5, 1, D + L2 + UI + " +k=1" + HV + N + C + B + E + A5, 1, D + L2 + Gl + " +k=1" + Hw + N + C + B + E + A5, 1, D + L2 + Yx + " +k=1" + HW + N + C + B + E + A5, 1, D + L2 + SP + " +k=1" + Hx + N + C + B + E + A5, 1, D + L2 + II + " +k=1" + La + N + C + B + E + A5, 1, D + L2 + RJ + " +k=1" + Hy + N + C + B + E + A5, 1, D + L2 + UJ + " +k=1" + Hz + N + C + B + E + A5, 1, D + L2 + HO + " +k=1" + IA + N + C + B + E + A5, 1, D + L2 + RP + " +k=1" + IB + N + C + B + E + A5, 1, D + L2 + " +lon_0=29 +k=1" + Gx + N + C + B + E + A5, 1, D + L2 + Ia + " +k=1" + IT + N + C + B + E + A5, 1, D + L2 + QQ + " +k=1" + Gc + N + C + B + E + A5, 4, K + C + B + A5, 1, I2 + KD + C + B + E + A5, 1, I2 + JZ + C + B + E + A5, 1, I2 + JM + C + B + E + A5, 1, D + WJ + " +lon_0=46.5 +k=0.9994" + CX + N + R + n + E + A5, 13, K + Y + Aw + A5, 6, D + L2 + Gj + V2 + O2 + EO + Y + Aw + E + A5, 8, I2 + Gz + i + Je + E + A5, 22, H + " +lat_1=41.25 +lat_2=42.75" + PR + Or + Jv + Tj + C + B + E + A5, 1, H + " +lat_1=42.25 +lat_2=43.75" + Nj + Or + Jv + " +y_0=2200000" + C + B + E + A5, 1, H + " +lat_1=43.25 +lat_2=44.75" + IZ + Or + Jv + " +y_0=3200000" + C + B + E + A5, 1, H + " +lat_1=44.25 +lat_2=45.75" + IP + Or + Jv + " +y_0=4200000" + C + B + E + A5, 1, H + " +lat_1=45.25 +lat_2=46.75 +lat_0=46" + Or + Jv + " +y_0=5200000" + C + B + E + A5, 1, H + aI + " +lat_2=47.75" + Ib + Or + Jv + " +y_0=6200000" + C + B + E + A5, 1, H + " +lat_1=47.25 +lat_2=48.75 +lat_0=48" + Or + Jv + " +y_0=7200000" + C + B + E + A5, 1, H + " +lat_1=48.25 +lat_2=49.75 +lat_0=49" + Or + Jv + " +y_0=8200000" + C + B + E + A5, 1, H + " +lat_1=49.25 +lat_2=50.75" + Yu + Or + Jv + " +y_0=9200000" + C + B + E + A5, 18, H + " +lat_1=37" + YS + GM + Ga + s + N + C + B + E + A5, 1, H + " +lat_1=37" + YS + GM + Ga + s + N + C + B + E + A5, 1, H + " +lat_1=37" + YS + GM + Ga + s + N + C + B + E + A5, 6, BP + m + " +lat_ts=-70" + HN + " +k=1" + s + N + S + E + A5, 2, H + LM + IJ + " +lat_0=49 +lon_0=-95" + s + N + C + B + E + A5, 1, H + LM + IJ + " +lat_0=49 +lon_0=-95" + s + N + C + B + E + A5, 7, D + ZA + Ia + " +k=1" + h + Ae + i + CW + E + A5, 1, D + ZA + RP + " +k=1" + h + Ae + i + CW + E + A5, 1, D + ZA + UJ + " +k=1" + h + Ae + i + CW + E + A5, 1, D + ZA + II + " +k=1" + h + Ae + i + CW + E + A5, 2, H + GW + GX + GY + GA + e + N + i + Je + J + A5, 1, H + GW + GX + GY + GA + e + Pv + i + Je + J + A5, 2, JU + " +lon_0=100 +lat_ts=-41" + s + N + S + E + A5, 1, BP + Hr + " +lat_ts=71" + HN + " +k=1" + s + N + S + E + A5, 1, BP + Hr + " +lat_ts=75" + HN + " +k=1" + s + N + S + E + A5, 1, D + L2 + " +lon_0=55.33333333333334 +k=1" + O2 + N + S + E + A5, 4, K + PV + A5, 1, K + Ok + A5, 1, K + x + A5, 1, K + Y + A5, 1, K + Hn + EL + A5, 1, K + HB + A5, 1, K + Ee + Ef + A5, 1, K + i + A5, 2, K + Nc + Nd + A5, 1, K + AU + BN + A5, 1, K + c + A5, 1, K + Bc + BS + A5, 1, K + AU + " +b=6356514.996941779" + A5, 1, K + By + Ay + A5, 1, K + Lo + A5, 2, K + GL + Bz + A5, 1, K + C + A5, 1, K + Gn + A5, 1, K + IR + Bh + A5, 1, K + R + A5, 1, K + C + B + A5, 0, K + C + B + A5, 1, K + M2 + A5, 1, K + aJ + A5, 1, D + L2 + " +lon_0=28.4 +k=0.9999400000000001" + h + EO + C + B + E + A5, 1, K + " +a=6376523" + RA + A5, 1, K + Zx + Qy + A5, 1, K + Qj + Ho + A5, 1, K + j + A5, 1, K + j + A5, 1, K + " +a=6378136.2 +b=6356751.516927429" + A5, 1, K + " +a=6378136.3 +b=6356751.616592146" + A5, 1, K + RB + RC + A5, 2, K + aK + A5, 1, I2 + Ki + S + E + A5, 1, I2 + Mf + S + E + A5, 3, K + Pd + Gq + A5, 1, K + HK + Gv + A5, 1, K + T + A5, 1, K + Lp + Hp + A5, 1, K + Go + CT + A5, 1, K + C + B + A5, 1, K + " +a=6371007 +b=6371007" + A5, 1, D + L2 + IH + V2 + O2 + Ak + C + B + E + A5, 1, D + L2 + " +lon_0=14" + V2 + O2 + Ak + C + B + E + A5, 1, D + L2 + " +lon_0=16" + V2 + O2 + Ak + C + B + E + A5, 1, D + L2 + QR + V2 + O2 + Ak + C + B + E + A5, 1, K + " +a=6370997 +b=6370997" + A5, 1, K + ZX + ZY + A5, 1, K + ZZ + Ri + A5, 2, D + L2 + UI + V2 + O2 + Ak + C + B + E + A5, 1, D + L2 + Yx + V2 + O2 + Ak + C + B + E + A5, 1, D + L2 + II + V2 + O2 + Ak + C + B + E + A5, 1, D + L2 + UJ + V2 + O2 + Ak + C + B + E + A5, 1, D + L2 + RP + V2 + O2 + Ak + C + B + E + A5, 1, I2 + KC + o + C + B + E + A5, 1, I2 + NR + o + C + B + E + A5, 1, I2 + Ki + o + C + B + E + A5, 8, I2 + MB + o + R + TF + E + A5, 4, K + C + B + A5, 6, K + C + B + A5, 1, I2 + SL + C + B + E + A5, 1, I2 + Ja + C + B + E + A5, 4, "+proj=eqc +lat_ts=0" + L2 + HN + s + N + S + E + A5, 1, "+proj=eqc +lat_ts=0" + L2 + HN + s + N + " +a=6371007 +b=6371007" + E + A5, 5, D + L2 + KB + JE + h + EO + C + B + E + A5, 1, D + L2 + Lu + JE + u + EO + C + B + E + A5, 1, D + L2 + " +lon_0=11.75" + JE + a + EO + C + B + E + A5, 1, D + L2 + Gj + " +k=1" + CX + EO + C + B + E + A5, 24, K + Y + A5, 1, K + C + Qb + A5, 1, K + Pd + Gq + A5, 1, K + R + At + A5, 1, K + Y + BW + A5, 3, K + i + HF + A5, 1, K + i + A5, 1, K + i + A5, 1, K + j + KR + A5, 1, K + By + Ay + JP + A5, 1, K + c + QC + A5, 1, K + C + Lw + A5, 1, K + c + Gg + A5, 1, K + i + GB + A5, 1, K + i + A5, 1, K + i + A5, 1, K + i + A5, 1, K + i + Je + A5, 2, K + C + UC + A5, 1, K + c + JO + A5, 1, K + c + IE + A5, 1, K + By + Ay + JQ + A5, 1, K + Lp + Hp + GQ + A5, 1, K + Go + CT + BT + A5, 1, K + M2 + HG + A5, 1, K + j + B + A5, 1, K + Y + Gf + A5, 1, K + Y + Py + A5, 1, K + C + B + A5, 1, K + C + B + A5, 1, K + R + Pz + A5, 1, K + R + Gy + A5, 1, K + AU + BN + Nm + A5, 1, K + Y + Gh + A5, 1, K + Ee + Ef + A5, 1, K + R + QA + A5, 1, K + R + v + A5, 1, K + R + A5, 1, K + R + SD + A5, 1, K + Y + A5, 1, K + j + B + A5, 1, K + M2 + NK + A5, 1, K + R + TM + A5, 1, K + j + B + A5, 1, K + C + B + A5, 1, K + Qj + Ho + NI + A5, 1, K + i + TC + A5, 1, K + C + B + A5, 1, K + C + B + A5, 2, K + C + B + A5, 1, K + Qj + Ho + A5, 1, K + c + OW + A5, 1, K + C + B + A5, 2, K + M2 + Ar + A5, 1, K + M2 + b + A5, 1, K + C + B + A5, 1, K + R + Jx + A5, 1, K + R + Sw + A5, 1, K + R + Sx + A5, 1, K + R + TN + A5, 4, K + PV + Bb + A5, 1, K + C + B + A5, 1, K + C + B + A5, 1, K + M2 + A5, 1, K + R + Qe + A5, 1, K + AU + BN + RD + A5, 1, K + R + NG + A5, 1, K + R + " +towgs84=105,326,-102.5,0,0,0.814,-0.6" + A5, 1, K + R + " +towgs84=-45,417,-3.5,0,0,0.814,-0.6" + A5, 1, K + c + A5, 1, K + c + A5, 1, K + R + A5, 1, K + M2 + G + A5, 1, K + c + HX + A5, 1, K + x + r + A5, 1, K + x + CB + A5, 1, K + R + Cm + A5, 1, K + M2 + NL + A5, 1, K + AU + BN + A5, 1, K + R + EV + A5, 1, K + R + Ec + A5, 1, K + Bc + BS + In + A5, 1, K + c + ER + A5, 1, K + Y + Cj + A5, 1, K + c + Jw + A5, 1, K + AU + BN + Sy + A5, 1, K + M2 + U + A5, 1, K + R + A5, 1, K + i + TQ + A5, 1, D + L2 + Lf + AP + k + N + C + B + J + A5, 0, D + L2 + Lf + AP + k + N + C + B + J + A5, 1, K + R + ES + A5, 1, K + Y + " +towgs84=-384,664,-48,0,0,0,0" + A5, 1, K + c + GO + A5, 1, K + R + Bs + A5, 1, K + Bc + BS + Ax + A5, 1, K + AU + BN + Gi + A5, 1, K + R + TF + A5, 1, K + R + GR + A5, 2, K + AU + BN + HI + A5, 2, K + Gn + HY + A5, 1, K + R + n + A5, 1, K + R + " +towgs84=-83.11,-97.38,-117.22,0.00569291,-0.0446976,0.0442851,0.1218" + A5, 1, K + c + NM + A5, 4, K + R + Rq + A5, 1, K + aK + RE + A5, 1, K + IR + Bh + Av + A5, 1, K + By + Ay + JR + A5, 1, K + By + Ay + NN + A5, 1, K + RB + RC + A5, 1, K + i + TG + A5, 1, K + HK + Gv + A5, 1, K + By + Ay + Tb + A5, 1, K + GL + Bz + BV + A5, 1, K + c + Qh + A5, 1, K + R + Hc + A5, 1, K + R + AX + A5, 1, K + R + A5, 1, K + c + TR + A5, 1, K + c + " +towgs84=-90,40,88,0,0,0,0" + A5, 1, K + AU + BN + A5, 1, K + i + GC + A5, 1, K + R + OV + A5, 1, K + R + " +towgs84=-333,-222,114,0,0,0,0" + A5, 1, K + c + " +towgs84=41,-220,-134,0,0,0,0" + A5, 1, K + Y + HZ + A5, 1, K + C + B + A5, 1, K + R + Qd + A5, 2, K + AU + BN + IO + A5, 1, K + Y + Tc + A5, 1, K + c + GS + A5, 2, K + R + CK + A5, 1, K + AU + BN + NO + A5, 1, K + X + A5, 2, K + C + B + A5, 1, K + c + DO + A5, 1, K + R + TS + A5, 1, K + R + W + A5, 1, K + Hn + EL + Aa + A5, 1, K + R + JL + A5, 1, K + AU + BN + Bk + A5, 1, K + aJ + A5, 1, K + PV + Lx + A5, 1, K + PV + A5, 1, K + PV + A5, 1, K + Y + A5, 1, K + Nc + Nd + DS + A5, 1, K + AU + BN + TH + A5, 1, K + C + B + A5, 1, K + M2 + F + A5, 1, K + R + QO + A5, 1, K + Gn + A5, 2, K + R + A5, 1, K + Y + Fv + A5, 3, K + R + Nn + A5, 1, K + HB + Bt + A5, 2, K + Y + A5, 2, K + R + HD + A5, 1, K + Lo + GD + A5, 1, K + Ok + Bb + A5, 1, K + Ok + Bb + A5, 1, K + Y + g + A5, 1, K + Ee + Ef + JK + A5, 1, K + Gn + A5, 1, K + AU + BN + JC + A5, 2, K + Y + A5, 1, K + c + Af + A5, 1, K + Y + A5, 1, K + R + " +towgs84=-155,171,37,0,0,0,0" + A5, 1, K + AU + BN + A5, 1, K + R + HE + A5, 1, K + Y + z + A5, 1, K + R + GP + A5, 1, K + Y + AC + A5, 1, K + AU + BN + No + A5, 1, K + R + QP + A5, 2, K + j + MR + A5, 1, K + C + Rr + A5, 3, K + T + P + A5, 2, K + T + Q + A5, 2, K + S + A5, 64, Ck + " +lat_0=2.042583333333333 +lon_0=103.5627583333333" + s + N + GL + Bz + BV + E + A5, 1, Ck + " +lat_0=2.712283333333334 +lon_0=101.9411666666667 +x_0=-242.005 +y_0=-948.547" + GL + Bz + BV + E + A5, 1, Ck + " +lat_0=3.710972222222222 +lon_0=102.4361777777778" + s + N + GL + Bz + BV + E + A5, 1, Ck + " +lat_0=3.680344444444444 +lon_0=101.5082444444444 +x_0=-21759.438 +y_0=55960.906" + GL + Bz + BV + E + A5, 1, Ck + " +lat_0=4.946141666666667 +lon_0=102.8952083333333" + s + N + GL + Bz + BV + E + A5, 1, Ck + " +lat_0=5.421325 +lon_0=100.3458694444444" + s + N + GL + Bz + BV + E + A5, 1, Ck + " +lat_0=5.965147222222223 +lon_0=100.6375944444444" + s + N + GL + Bz + BV + E + A5, 1, Ck + " +lat_0=4.859380555555555 +lon_0=100.8167666666667" + s + " +y_0=133453.669" + GL + Bz + BV + E + A5, 1, Ck + " +lat_0=5.893922222222222 +lon_0=102.1772916666667" + s + N + GL + Bz + BV + E + A5, 1, D + L2 + Lf + AP + k + N + X + J + A5, 1, D + L2 + KG + AP + k + N + X + J + A5, 1, D + L2 + KH + AP + k + N + X + J + A5, 1, D + L2 + Lh + AP + k + N + X + J + A5, 1, D + L2 + SX + AP + k + N + X + J + A5, 1, D + L2 + " +lon_0=-159" + AP + k + N + X + J + A5, 0, D + L2 + " +lon_0=-159" + AP + k + N + X + J + A5, 1, D + L2 + YJ + AP + k + N + X + J + A5, 1, D + L2 + Qr + AP + k + N + X + J + A5, 1, D + L2 + " +lon_0=-141" + AP + k + N + X + J + A5, 1, D + L2 + YK + AP + k + N + X + J + A5, 1, D + L2 + YT + AP + k + N + X + J + A5, 1, D + L2 + " +lon_0=-123" + AP + k + N + X + J + A5, 1, D + L2 + Lj + AP + k + N + X + J + A5, 1, D + L2 + KK + AP + k + N + X + J + A5, 1, D + L2 + " +lon_0=-105" + AP + k + N + X + J + A5, 1, D + " +lat_0=13.5 +lon_0=144.75 +k=1" + BU + IK + C + B + E + A5, 1, H + " +lat_1=-6.5 +lat_2=-11.5" + ZA + UJ + O2 + Ae + i + CW + E + A5, 2, D + L2 + Gl + " +k=1" + IM + N + M2 + Ar + E + A5, 1, D + L2 + UR + AP + k + N + X + J + A5, 1, D + L2 + MP + AP + k + N + X + J + A5, 1, D + L2 + KG + AP + k + N + C + B + J + A5, 1, D + L2 + KH + AP + k + N + C + B + J + A5, 1, D + L2 + Lh + AP + k + N + C + B + J + A5, 1, D + L2 + SX + AP + k + N + C + B + J + A5, 1, D + L2 + " +lon_0=-159" + AP + k + N + C + B + J + A5, 1, D + L2 + YJ + AP + k + N + C + B + J + A5, 1, D + L2 + Qr + AP + k + N + C + B + J + A5, 1, D + L2 + " +lon_0=-141" + AP + k + N + C + B + J + A5, 1, D + L2 + YK + AP + k + N + C + B + J + A5, 1, D + L2 + YT + AP + k + N + C + B + J + A5, 1, D + L2 + " +lon_0=-123" + AP + k + N + C + B + J + A5, 1, D + L2 + Lj + AP + k + N + C + B + J + A5, 1, D + L2 + KK + AP + k + N + C + B + J + A5, 1, D + L2 + " +lon_0=-105" + AP + k + N + C + B + J + A5, 1, D + L2 + II + " +k=1" + MS + N + M2 + Ar + E + A5, 3, H + GW + GX + GY + GA + h + IK + C + B + E + A5, 1, D + L2 + UR + AP + k + N + C + B + J + A5, 1, D + L2 + MP + AP + k + N + C + B + J + A5, 16, H + Dp + Dq + y + Ea + Z2 + N + X + J + A5, 1, H + Dl + Dm + CA + Oc + Z2 + Pv + X + J + A5, 1, H + Fd + Fe + AL + CS + a + N + C + B + J + A5, 5, H + " +lat_1=-18" + ZT + " +lat_0=-27" + Il + s + N + S + E + A5, 1, K + C + B + A5, 4, I2 + ID + C + B + E + A5, 3, K + C + B + A5, 1, I2 + JZ + o + C + B + E + A5, 4, K + R + PJ + A5, 8, K + C + B + A5, 1, I2 + Ns + C + B + E + A5, 1, I2 + Nt + C + B + E + A5, 1, I2 + Nu + C + B + E + A5, 1, I2 + Nw + C + B + E + A5, 1, I2 + NP + C + B + E + A5, 1, I2 + NQ + C + B + E + A5, 1, K + C + A5, 1, D + L2 + HP + " +k=1" + HU + N + C + E + A5, 1, D + L2 + HQ + " +k=1" + Gw + N + C + E + A5, 1, D + L2 + Hd + " +k=1" + Hu + N + C + E + A5, 1, D + L2 + HR + " +k=1" + Hv + N + C + E + A5, 1, D + L2 + HS + " +k=1" + It + N + C + E + A5, 1, D + L2 + EN + " +k=1" + Hs + N + C + E + A5, 1, D + L2 + Fy + " +k=1" + Ht + N + C + E + A5, 1, D + L2 + Fm + " +k=1" + HV + N + C + E + A5, 1, D + L2 + Fr + " +k=1" + Hw + N + C + E + A5, 1, D + L2 + Ed + " +k=1" + HW + N + C + E + A5, 1, D + L2 + Fn + " +k=1" + Hx + N + C + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + HP + " +k=1" + Hy + N + C + E + A5, 1, D + L2 + Lt + " +k=1" + Hz + N + C + E + A5, 1, D + L2 + HQ + " +k=1" + IA + N + C + E + A5, 1, D + L2 + Ni + " +k=1" + IB + N + C + E + A5, 1, D + L2 + Hd + " +k=1" + Gx + N + C + E + A5, 1, D + L2 + Hq + " +k=1" + IT + N + C + E + A5, 1, D + L2 + HR + " +k=1" + Gc + N + C + E + A5, 1, D + L2 + Mj + " +k=1" + IU + N + C + E + A5, 1, D + L2 + HS + " +k=1" + Iu + N + C + E + A5, 1, D + L2 + Jj + " +k=1" + Mu + N + C + E + A5, 1, D + L2 + EN + " +k=1" + Mv + N + C + E + A5, 1, D + L2 + Le + " +k=1" + Mw + N + C + E + A5, 1, D + L2 + Fy + " +k=1" + Mx + N + C + E + A5, 1, D + L2 + Im + " +k=1" + My + N + C + E + A5, 1, D + L2 + Fm + " +k=1" + Mz + N + C + E + A5, 1, D + L2 + KF + " +k=1" + NA + N + C + E + A5, 1, D + L2 + Fr + " +k=1" + NB + N + C + E + A5, 1, D + L2 + Jk + " +k=1" + Oh + N + C + E + A5, 1, D + L2 + Ed + " +k=1" + NC + N + C + E + A5, 1, D + L2 + Il + " +k=1" + Oi + N + C + E + A5, 1, D + L2 + Fn + " +k=1" + ND + N + C + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Lt + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Ni + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Hq + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Mj + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Jj + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Le + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Im + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + KF + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Jk + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Il + " +k=1" + O2 + N + C + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + C + E + A5, 1, K + M2 + A5, 3, K + C + B + A5, 1, I2 + Gz + C + B + E + A5, 9, D + L2 + HP + " +k=1" + HU + N + M2 + E + A5, 1, D + L2 + HQ + " +k=1" + Gw + N + M2 + E + A5, 1, D + L2 + Hd + " +k=1" + Hu + N + M2 + E + A5, 1, D + L2 + HR + " +k=1" + Hv + N + M2 + E + A5, 1, D + L2 + HS + " +k=1" + It + N + M2 + E + A5, 1, D + L2 + EN + " +k=1" + Hs + N + M2 + E + A5, 1, D + L2 + Fy + " +k=1" + Ht + N + M2 + E + A5, 1, D + L2 + Fm + " +k=1" + HV + N + M2 + E + A5, 1, D + L2 + Fr + " +k=1" + Hw + N + M2 + E + A5, 1, D + L2 + Ed + " +k=1" + HW + N + M2 + E + A5, 1, D + L2 + Fn + " +k=1" + Hx + N + M2 + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + M2 + E + A5, 11, K + c + A5, 1, K + c + TI + A5, 1, K + c + TJ + A5, 1, K + c + TK + A5, 1, K + c + TL + A5, 1, K + c + UB + A5, 1, K + c + Sv + A5, 1, K + c + Ps + A5, 1, K + i + A5, 1, K + i + A5, 1, K + As + d + A5, 1, K + R + Jg + A5, 1, K + C + B + A5, 1, K + Y + Hf + A5, 1, K + R + Jy + A5, 1, K + R + SE + A5, 1, K + R + Sz + A5, 1, K + C + B + A5, 1, K + x + Al + A5, 1, K + C + B + A5, 1, K + c + " +towgs84=-106,-129,165,0,0,0,0" + A5, 1, K + R + TA + A5, 1, K + R + SF + A5, 1, K + R + NH + A5, 1, K + C + B + A5, 1, K + R + TO + A5, 1, K + R + SJ + A5, 1, K + C + B + A5, 1, K + R + TP + A5, 1, K + R + Lr + A5, 1, K + R + UD + A5, 2, K + R + SG + A5, 1, K + R + QM + A5, 3, K + R + " +towgs84=365,194,166,0,0,0,0" + A5, 1, K + R + " +towgs84=325,154,172,0,0,0,0" + A5, 1, K + i + TZ + A5, 1, K + R + SH + A5, 2, K + R + Jf + A5, 1, K + R + TB + A5, 1, K + R + Ke + A5, 1, K + R + HH + A5, 2, K + R + SI + A5, 1, D + L2 + KB + AP + IU + N + C + B + E + A5, 5, D + L2 + HP + " +k=1" + Hy + N + M2 + E + A5, 1, D + L2 + Lt + " +k=1" + Hz + N + M2 + E + A5, 1, D + L2 + HQ + " +k=1" + IA + N + M2 + E + A5, 1, D + L2 + Ni + " +k=1" + IB + N + M2 + E + A5, 1, D + L2 + Hd + " +k=1" + Gx + N + M2 + E + A5, 1, K + " +a=6377019.27 +b=6355762.5391 +towgs84=-28,199,5,0,0,0,0" + A5, 1, K + R + Jd + A5, 1, K + C + B + A5, 1, K + R + Jz + A5, 1, K + C + B + A5, 1, K + R + Qc + A5, 1, K + R + PI + A5, 1, K + R + Pt + A5, 1, K + R + Pa + A5, 1, K + Y + Pb + A5, 1, K + j + B + A5, 1, K + R + " +towgs84=-86,-98,-119,0,0,0,0" + A5, 1, K + C + B + A5, 1, K + j + B + A5, 1, K + AU + BN + A5, 1, K + R + TT + A5, 1, K + R + Np + A5, 1, K + C + B + A5, 1, K + i + " +towgs84=-100,-248,259,0,0,0,0" + A5, 1, K + M2 + A5, 1, K + M2 + A5, 1, K + M2 + " +towgs84=44.585,-131.212,-39.544,0,0,0,0" + A5, 1, K + c + " +towgs84=-80.01,253.26,291.19,0,0,0,0" + A5, 1, K + c + " +towgs84=124.5,-63.5,-281,0,0,0,0" + A5, 2, K + By + Ay + RF + A5, 1, K + i + BX + A5, 1, K + R + " +towgs84=-133,-321,50,0,0,0,0" + A5, 2, K + C + B + A5, 1, K + C + Bm + A5, 1, K + R + Kc + A5, 1, K + R + Lq + A5, 1, K + R + Kg + A5, 1, K + R + Kh + A5, 1, K + R + QN + A5, 1, K + j + TD + A5, 1, K + j + B + A5, 1, K + i + CW + A5, 1, K + c + A5, 1, K + c + A5, 1, K + R + TE + A5, 1, K + c + Qf + A5, 1, K + c + A5, 1, K + c + GN + A5, 1, K + C + B + A5, 1, K + c + A5, 1, K + R + A5, 1, K + R + A5, 1, K + Gn + Qg + A5, 1, K + R + " +towgs84=114,-116,-333,0,0,0,0" + A5, 1, K + x + " +towgs84=-491,-22,435,0,0,0,0" + A5, 1, K + R + " +towgs84=145,75,-272,0,0,0,0" + A5, 1, K + R + " +towgs84=-320,550,-494,0,0,0,0" + A5, 1, K + R + " +towgs84=124,-234,-25,0,0,0,0" + A5, 1, K + R + " +towgs84=-205,107,53,0,0,0,0" + A5, 1, K + c + " +towgs84=-79,-129,145,0,0,0,0" + A5, 1, K + R + " +towgs84=-127,-769,472,0,0,0,0" + A5, 1, K + R + " +towgs84=-104,-129,239,0,0,0,0" + A5, 1, K + R + " +towgs84=298,-304,-375,0,0,0,0" + A5, 1, K + i + " +towgs84=-2,151,181,0,0,0,0" + A5, 1, K + R + " +towgs84=230,-199,-752,0,0,0,0" + A5, 1, K + R + " +towgs84=211,147,111,0,0,0,0" + A5, 1, K + T + P + A5, 1, K + R + JD + A5, 1, K + R + " +towgs84=-794,119,-298,0,0,0,0" + A5, 1, K + i + Lg + A5, 1, K + R + " +towgs84=208,-435,-229,0,0,0,0" + A5, 1, K + R + " +towgs84=189,-79,-202,0,0,0,0" + A5, 1, K + i + Ly + A5, 1, K + R + " +towgs84=403,-81,277,0,0,0,0" + A5, 1, K + R + " +towgs84=-307,-92,127,0,0,0,0" + A5, 1, K + R + Ta + A5, 1, K + R + " +towgs84=170,42,84,0,0,0,0" + A5, 2, K + " +a=6378270 +b=6356794.343434343 +towgs84=102,52,-38,0,0,0,0" + A5, 1, K + R + " +towgs84=276,-57,149,0,0,0,0" + A5, 1, K + R + " +towgs84=-632,438,-609,0,0,0,0" + A5, 1, K + R + " +towgs84=647,1777,-1124,0,0,0,0" + A5, 1, K + c + " +towgs84=260,12,-147,0,0,0,0" + A5, 1, K + C + B + A5, 1, K + Ee + Ef + A5, 1, K + R + " +towgs84=-156,-271,-189,0,0,0,0" + A5, 1, K + " +a=6378136 +b=6356751.361745712 +towgs84=0,0,1.5,-0,-0,0.076,0" + A5, 1, K + R + A5, 1, K + C + A5, 1, K + c + EU + A5, 1, K + c + A5, 1, K + Y + A5, 1, K + Y + A5, 1, K + C + B + A5, 1, K + UW + Ym + Nl + A5, 1, K + C + B + A5, 1, K + j + QB + A5, 1, K + Yn + Qz + A5, 1, K + UW + Ym + Nl + A5, 1, K + R + A5, 1, K + R + w + A5, 1, K + j + B + A5, 1, K + j + Fu + A5, 1, K + j + A5, 1, K + j + B + A5, 1, K + C + B + A5, 1, K + aJ + A5, 1, K + C + B + A5, 1, K + j + B + A5, 1, K + j + B + A5, 1, K + C + B + A5, 1, K + C + B + A5, 1, D + L2 + Hq + " +k=1" + IT + N + M2 + E + A5, 1, D + L2 + HR + " +k=1" + Gc + N + M2 + E + A5, 1, D + L2 + Mj + " +k=1" + IU + N + M2 + E + A5, 1, D + L2 + HS + " +k=1" + Iu + N + M2 + E + A5, 1, D + L2 + Jj + " +k=1" + Mu + N + M2 + E + A5, 1, D + L2 + EN + " +k=1" + Mv + N + M2 + E + A5, 1, D + L2 + Le + " +k=1" + Mw + N + M2 + E + A5, 1, D + L2 + Fy + " +k=1" + Mx + N + M2 + E + A5, 1, D + L2 + Im + " +k=1" + My + N + M2 + E + A5, 1, D + L2 + Fm + " +k=1" + Mz + N + M2 + E + A5, 1, D + L2 + KF + " +k=1" + NA + N + M2 + E + A5, 1, D + L2 + Fr + " +k=1" + NB + N + M2 + E + A5, 1, D + L2 + Jk + " +k=1" + Oh + N + M2 + E + A5, 1, D + L2 + Ed + " +k=1" + NC + N + M2 + E + A5, 1, D + L2 + Il + " +k=1" + Oi + N + M2 + E + A5, 1, D + L2 + Fn + " +k=1" + ND + N + M2 + E + A5, 1, D + L2 + HP + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Lt + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Ni + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Hq + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Mj + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Jj + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Le + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Im + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + KF + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Jk + " +k=1" + O2 + N + M2 + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + M2 + E + A5, 1, K + Y + Gf + " +pm=bern" + A5, 1, K + R + ES + " +pm=bogota" + A5, 1, K + R + EV + Zb + A5, 1, K + Y + HZ + PW + A5, 1, K + Y + Aw + Ls + A5, 1, K + R + CK + " +pm=rome" + A5, 1, K + AU + BN + Bk + Lv + A5, 1, K + Y + PW + A5, 1, K + R + " +pm=brussels" + A5, 1, K + R + HD + Lv + A5, 1, K + AU + BN + JC + Lv + A5, 1, D + L2 + Il + " +k=1" + O2 + N + M2 + E + A5, 0, D + L2 + Il + " +k=1" + O2 + N + M2 + E + A5, 1, K + Y + Cj + PW + A5, 1, K + Y + " +pm=stockholm" + A5, 1, K + Y + " +pm=athens" + A5, 1, K + AU + BN + Gi + Lv + A5, 1, K + Hn + EL + Aa + SN + A5, 1, K + Y + Gh + Ls + A5, 2, K + Y + Hf + PW + A5, 1, K + AU + BN + Lv + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + M2 + E + A5, 1, K + R + A5, 1, K + R + A5, 2, H + " +lat_1=15 +lat_2=16.66666666666667 +lat_0=15.83333333333333 +lon_0=-24 +x_0=161587.83 +y_0=128511.202" + S + E + A5, 13, H + WK + WL + UK + YH + s + N + C + B + E + A5, 62, K + " +a=6376523" + RA + ZM + A5, 2, K + Zx + Qy + " +pm=madrid" + A5, 1, K + Y + Pb + Zb + A5, 109, K + C + B + A5, 1, I2 + Nr + C + B + E + A5, 1, I2 + Os + C + B + E + A5, 1, I2 + Ja + C + B + E + A5, 2, D + BY + UZ + " +k=1" + s + N + R + EV + E + A5, 23, BP + Hr + Qm + HN + Rd + Bd + Cl + S + E + A5, 1, BP + m + " +lat_ts=-90" + HN + Rd + Bd + Cl + S + E + A5, 6, I2 + Ki + C + B + E + A5, 21, DT + Sa + Hl + ZB + OZ + s + N + X + E + A5, 1, DT + Sa + Hl + ZB + OZ + s + N + C + B + E + A5, 1, DT + Sa + Hl + ZB + OZ + s + N + C + B + E + A5, 1, DT + Sa + Hl + ZB + OZ + s + N + C + B + E + A5, 33, D + Fk + " +lon_0=5.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=6.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=7.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=8.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=9.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + YH + " +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=11.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=12.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=13.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=14.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=15.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + YE + " +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=17.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=18.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=19.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=20.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=21.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=22.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=23.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=24.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=25.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=26.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=27.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=28.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=29.5 +k=1" + BU + AH + C + B + E + A5, 1, D + Fk + " +lon_0=30.5 +k=1" + BU + AH + C + B + E + A5, 2, K + Y + A5, 35, D + Ch + NX + " +k=1" + h + Ae + Y + E + A5, 1, D + Ch + Rt + " +k=1" + h + " +y_0=550000" + Y + E + A5, 1, D + Ch + Ru + " +k=1" + h + Ae + Y + E + A5, 1, D + Ch + Rt + " +k=1" + h + Ae + Y + E + A5, 1, D + Ch + Ed + " +k=1" + h + Ae + Y + E + A5, 1, D + Ch + NX + " +k=1" + h + Ae + Y + E + A5, 1, D + Ch + " +lon_0=125.0028902777778 +k=1" + h + Ae + Y + E + A5, 1, D + Ch + WM + " +k=1" + h + Ae + Y + E + A5, 1, D + Ch + WM + " +k=1" + h + " +y_0=550000" + Y + E + A5, 1, D + Ch + " +lon_0=129.0028902777778 +k=1" + h + Ae + Y + E + A5, 1, D + Ch + " +lon_0=131.0028902777778 +k=1" + h + Ae + Y + E + A5, 1, D + Ch + Pj + AP + BZ + Cl + Y + E + A5, 1, D + Ch + Pj + AP + BZ + Cl + C + B + E + A5, 1, D + Ch + Ru + " +k=1" + h + Ae + C + B + E + A5, 1, D + Ch + Rt + " +k=1" + h + Ae + C + B + E + A5, 1, D + Ch + Rt + " +k=1" + h + " +y_0=550000" + C + B + E + A5, 1, D + Ch + Ed + " +k=1" + h + Ae + C + B + E + A5, 1, D + Ch + NX + " +k=1" + h + Ae + C + B + E + A5, 1, D + Ch + Ru + " +k=1" + h + Qn + C + B + E + A5, 1, D + Ch + Rt + " +k=1" + h + Qn + C + B + E + A5, 1, D + Ch + Ed + " +k=1" + h + Qn + C + B + E + A5, 1, D + Ch + NX + " +k=1" + h + Qn + C + B + E + A5, 33, Rp + SS + " +lon_0=42.5" + Kk + V2 + s + N + Y + Gh + Ls + E + A5, 2, D + L2 + IH + AP + O2 + Ae + S + E + A5, 5, K + Y + Lz + A5, 1, K + Y + Lz + Ls + A5, 4, K + By + Ay + Kf + A5, 1, D + " +lat_0=7.000480277777778 +lon_0=80.77171111111112 +k=0.9999238418" + h + IK + By + Ay + Tb + E + A5, 1, D + " +lat_0=7.000471527777778 +lon_0=80.77171308333334 +k=0.9999238418" + O2 + Ae + By + Ay + Kf + E + A5, 8, H + WK + WL + UK + YH + s + N + C + B + E + A5, 3, K + C + A5, 1, CU + Qi + Yz + aU + Ph + s + N + KE + If + C + E + A5, 5, K + C + B + A5, 1, D + L2 + HO + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + Ia + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + IG + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + PN + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + LN + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + PO + " +k=1" + O2 + N + C + B + E + A5, 1, D + L2 + JS + " +k=1" + O2 + N + C + B + E + A5, 5, K + C + B + A5, 2, D + L2 + Hq + " +k=1" + Bv + N + C + B + E + A5, 3, D + L2 + HO + " +k=1" + MT + N + C + B + E + A5, 1, D + L2 + Ia + " +k=1" + LY + N + C + B + E + A5, 1, D + L2 + IG + " +k=1" + Jp + N + C + B + E + A5, 1, D + L2 + PN + " +k=1" + LZ + N + C + B + E + A5, 1, D + L2 + LN + " +k=1" + HU + N + C + B + E + A5, 1, D + L2 + PO + " +k=1" + Gw + N + C + B + E + A5, 1, D + L2 + JS + " +k=1" + Hu + N + C + B + E + A5, 17, D + L2 + " +lon_0=90.73333333333333 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=89.55 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + WN + " +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=90.03333333333333 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=90.15000000000001 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=91.13333333333334 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=91.23333333333333 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=89.34999999999999 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=91.34999999999999 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + WN + " +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + WO + " +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=89.06666666666666 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=90.26666666666667 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=89.55 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=91.75 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=90.5 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=90.16666666666667 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=90.11666666666666 +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + WO + " +k=1" + Bv + DU + C + B + E + A5, 1, D + L2 + " +lon_0=90.86666666666666 +k=1" + Bv + DU + C + B + E + A5, 5, D + L2 + " +lon_0=-7 +k=0.999997" + h + " +y_0=-6000000" + C + B + E + A5, 4, H + YI + " +lat_2=54.5" + L2 + NV + BZ + N + C + B + E + A5, 1, H + YI + " +lat_2=54.5" + L2 + NV + BZ + N + C + B + E + A5, 3, K + C + B + A5, 1, H + " +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19" + Jv + Hk + C + B + E + A5, 4, JU + PC + ZP + Pl + Qp + Y + Hf + PW + E + A5, 1, JU + PC + ZP + Pl + Qp + Y + Cj + PW + E + A5, 1, JU + PC + ZP + Pl + Qp + Y + HZ + PW + E + A5, 6, I2 + Nr + o + R + Ec + E + A5, 3, K + C + B + A5, 3, D + m + UQ + " +k=1" + AV + N + C + B + E + A5, 1, D + m + MP + " +k=1" + Ci + N + C + B + E + A5, 1, D + m + Pe + " +k=1" + Bo + N + C + B + E + A5, 1, D + m + Qk + " +k=1" + DP + N + C + B + E + A5, 1, D + m + US + " +k=1" + Eg + N + C + B + E + A5, 1, D + m + Zc + " +k=1" + Jt + N + C + B + E + A5, 1, D + m + Nb + " +k=1" + IM + N + C + B + E + A5, 5, K + C + B + A5, 1, I2 + Gz + o + C + B + E + A5, 1, I2 + Hi + o + C + B + E + A5, 1, I2 + ID + o + C + B + E + A5, 3, K + C + B + A5, 1, I2 + Hi + o + C + B + E + A5, 1, I2 + IC + o + C + B + E + A5, 3, K + j + B + A5, 2, D + L2 + NV + V2 + O2 + N + j + B + E + A5, 4, K + C + B + A5, 2, K + C + B + A5, 8, K + j + B + A5, 1, I2 + ID + o + j + B + E + A5, 1, I2 + Io + o + j + B + E + A5, 4, I2 + IC + o + C + B + E + A5, 2, I2 + Hi + o + C + B + E + A5, 4, K + C + B + A5, 3, I2 + Os + o + C + B + E + A5, 55, K + i + Bp + A5, 5, H + " +lat_1=10.46666666666667 +lat_0=10.46666666666667 +lon_0=-84.33333333333333 +k_0=0.99995696" + O2 + " +y_0=271820.522" + i + Bp + E + A5, 1, H + " +lat_1=9 +lat_0=9" + Ua + " +k_0=0.99995696" + O2 + " +y_0=327987.436" + i + Bp + E + A5, 2, H + " +lat_1=14.9 +lat_0=14.9" + Bx + " +k_0=0.99989906" + O2 + " +y_0=325992.681" + i + Bp + E + A5, 1, H + " +lat_1=13.78333333333333 +lat_0=13.78333333333333 +lon_0=-89 +k_0=0.99996704" + O2 + " +y_0=295809.184" + i + Bp + E + A5, 1, H + " +lat_1=13.86666666666667 +lat_0=13.86666666666667" + To + " +k_0=0.99990314" + O2 + " +y_0=359891.816" + i + Bp + E + A5, 1, H + " +lat_1=11.73333333333333 +lat_0=11.73333333333333" + To + " +k_0=0.9999222800000001" + O2 + " +y_0=288876.327" + i + Bp + E + A5, 1, I2 + Ik + x + Al + E + A5, 1, K + Ee + Ef + A5, 3, K + i + A5, 2, H + " +lat_1=8.416666666666666 +lat_0=8.416666666666666 +lon_0=-80 +k_0=0.99989909" + O2 + " +y_0=294865.303" + i + E + A5, 3, UU + " +lat_0=8.25" + CR + " +x_0=914391.7962 +y_0=999404.7217154861" + i + " +to_meter=0.9143917962" + A5, 7, H + Ai + Aj + " +lat_0=-78 +lon_0=163" + Tp + Ju + C + B + E + A5, 1, H + " +lat_1=-73.66666666666667" + AZ + " +lat_0=-74.5" + NZ + LX + Fq + C + B + E + A5, 1, H + " +lat_1=-70.66666666666667 +lat_2=-72.33333333333333 +lat_0=-71.5" + ZW + aH + AH + C + B + E + A5, 1, BP + m + " +lat_ts=-90" + Ry + Rd + LX + AH + C + B + E + A5, 7, K + C + B + A5, 1, I2 + Gz + C + B + E + A5, 23, Rp + SS + WP + Kk + V2 + s + N + Y + Gh + E + A5, 1, Rp + SS + WP + Kk + V2 + s + N + Y + Gh + E + A5, 4, D + Za + Si + " +k=1" + Qo + " +y_0=650000" + R + TT + E + A5, 1, D + Za + Si + " +k=1" + Qo + " +y_0=650000" + R + Np + E + A5, 1, D + L2 + Or + " +k=1" + AV + N + Y + AC + E + A5, 3, D + L2 + " +lon_0=11.5" + AP + AV + EM + S + E + A5, 1, K + R + A5, 3, K + x + BK + A5, 3, UU + L2 + Nb + LX + Ak + x + BK + E + A5, 1, I2 + ID + o + x + BK + E + A5, 2, I2 + MB + o + x + BK + E + A5, 1, I2 + Nx + o + x + BK + E + A5, 1, I2 + Nr + o + x + BK + E + A5, 1, I2 + ID + o + R + E + A5, 1, I2 + Io + o + R + E + A5, 1, I2 + MB + o + R + E + A5, 1, I2 + Nx + o + R + E + A5, 7, K + C + B + A5, 4, I2 + Nv + o + C + B + E + A5, 1, I2 + PM + o + C + B + E + A5, 1, I2 + Re + o + C + B + E + A5, 7, H + " +lat_1=16.81666666666667 +lat_0=16.81666666666667" + Bx + " +k_0=0.99992226" + O2 + " +y_0=292209.579" + i + Bp + E + A5, 2, K + M2 + BO + A5, 1, D + L2 + Gl + " +k=1" + DP + N + M2 + BO + E + A5, 1, D + L2 + HO + " +k=1" + Eg + N + M2 + BO + E + A5, 1, D + L2 + IG + " +k=1" + Jt + N + M2 + BO + E + A5, 1, D + L2 + LN + " +k=1" + IM + N + M2 + BO + E + A5, 1, D + L2 + Gl + " +k=1" + O2 + N + M2 + BO + E + A5, 1, D + L2 + HO + " +k=1" + O2 + N + M2 + BO + E + A5, 1, D + L2 + IG + " +k=1" + O2 + N + M2 + BO + E + A5, 1, D + L2 + LN + " +k=1" + O2 + N + M2 + BO + E + A5, 19, GU + Iq + Zy + ST + Ab + " +y_0=304800" + X + t + A5, 1, D + " +lat_0=17.06124194444444 +lon_0=-88.6318575 +k=1 +x_0=66220.02833082761 +y_0=135779.5099885299" + Ee + Ef + ML + A5, 4, K + C + B + A5, 3, D + L2 + " +lon_0=11.33333333333333 +k=1" + BZ + N + C + B + E + A5, 27, D + Fo + Ua + " +k=0.999942857" + e + N + X + J + A5, 1, D + Fo + EY + Hm + e + N + X + J + A5, 1, D + Fo + " +lon_0=-88.75" + Hm + e + N + X + J + A5, 2, D + L2 + ZO + AP + O2 + N + R + n + E + A5, 2, I2 + JZ + o + j + KR + E + A5, 2, D + L2 + KB + " +k=1" + Ci + N + M2 + b + E + A5, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A5, 1, He + PU + Lu + RV + RW + C + B + E + A5, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A5, 1, He + PU + Lu + RV + RW + C + B + E + A5, 1, He + PU + Lu + RV + RW + C + B + E + A5, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A5, 1, He + PU + Lu + RV + RW + C + B + E + A5, 1, H + Yw + QY + PU + Lu + LU + RU + C + B + E + A5, 2, JU + " +lon_0=-43 +lat_ts=-2" + LX + Ak + C + B + E + A5, 2, H + " +lat_1=52.66666666666666 +lat_2=54.33333333333334 +lat_0=48" + Lu + " +x_0=815000" + N + R + n + E + A5, 1, I2 + JM + o + C + B + E + A5, 2, D + Fp + LW + JA + AG + N + C + B + J + A5, 3, D + L2 + Or + AP + Gc + N + C + B + E + A5, 1, D + L2 + Gj + AP + Iu + N + C + B + E + A5, 1, D + L2 + Or + AP + Gc + N + C + B + E + A5, 1, D + L2 + KB + AP + IU + N + C + B + E + A5, 1, D + L2 + Gj + AP + Iu + N + C + B + E + A5, 1, D + Fp + LW + JA + AG + N + C + B + J + A5, 1, D + Fp + LW + JA + AG + N + C + B + J + A5, 4, D + L2 + KB + AP + " +x_0=500053 +y_0=-3999820" + R + CK + E + A5, 4, D + L2 + Gj + " +k=1" + Bo + N + M2 + b + E + A5, 1, D + L2 + KB + " +k=1" + Ci + N + M2 + Ar + E + A5, 1, D + L2 + Gj + " +k=1" + Bo + N + M2 + Ar + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + Y + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + Y + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + Y + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + Y + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + M2 + b + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + M2 + b + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + M2 + b + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + M2 + Ar + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + M2 + Ar + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + M2 + Ar + E + A5, 1, D + L2 + ZO + " +k=1" + Ci + N + Y + AC + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + Y + AC + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + Y + AC + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + Y + AC + E + A5, 1, D + L2 + Or + " +k=1" + AV + N + Y + AC + E + A5, 1, K + Y + A5, 1, D + L2 + ZO + " +k=1" + Ci + N + Y + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + Y + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + Y + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + Y + E + A5, 15, I2 + SK + o + C + B + E + A5, 125, D + " +lat_0=-35.31773627777778 +lon_0=149.0092948305555 +k=1.000086" + h + Qn + x + r + E + A5, 11, I2 + KD + j + B + E + A5, 1, I2 + Me + j + B + E + A5, 2, I2 + Ik + o + C + B + E + A5, 3, D + L2 + IH + AP + O2 + Ak + S + E + A5, 2, D + L2 + Ia + V2 + O2 + Ak + C + B + E + A5, 14, I2 + Io + o + x + BK + E + A5, 17, I2 + IC + o + x + BK + E + A5, 1, I2 + Hi + o + x + BK + E + A5, 1, I2 + Gz + o + x + BK + E + A5, 2, I2 + JZ + o + R + PJ + E + A5, 1, UU + L2 + Nb + LX + Ak + C + B + E + A5, 6, K + C + A5, 1, D + L2 + KH + AP + AV + Ju + C + E + A5, 3, BP + Hr + " +lat_ts=70" + Hq + " +k=1" + s + N + ZZ + Ri + E + A5, 31, H + ZC + IJ + Ih + KK + s + N + S + E + A5, 1, H + ZC + IJ + Ih + UT + s + N + S + E + A5, 1, H + ZC + IJ + Ih + IG + s + N + S + E + A5, 1, H + ZC + IJ + Ih + EN + s + N + S + E + A5, 1, H + ZC + IJ + Ih + KG + s + N + S + E + A5, 1, H + Ic + ZD + Ii + KK + s + N + S + E + A5, 1, H + Ic + ZD + Ii + UT + s + N + S + E + A5, 1, H + Ic + ZD + Ii + IG + s + N + S + E + A5, 1, H + Ic + ZD + Ii + EN + s + N + S + E + A5, 1, H + Ic + ZD + Ii + KG + s + N + S + E + A5, 1, H + ZE + ZF + Ij + KK + s + N + S + E + A5, 1, H + ZE + ZF + Ij + UT + s + N + S + E + A5, 1, H + ZE + ZF + Ij + IG + s + N + S + E + A5, 1, H + ZE + ZF + Ij + EN + s + N + S + E + A5, 1, H + ZE + ZF + Ij + KG + s + N + S + E + A5, 1, BP + Hr + Qm + ON + Rd + Bd + Cl + S + E + A5, 1, BP + Hr + Qm + CS + Rd + Bd + Cl + S + E + A5, 1, BP + Hr + Qm + " +lon_0=-33" + Rd + Bd + Cl + S + E + A5, 1, BP + Hr + Qm + QR + Rd + Bd + Cl + S + E + A5, 1, BP + Hr + Qm + EN + Rd + Bd + Cl + S + E + A5, 110, H + UL + Ha + Hb + " +lon_0=-30" + Hy + DQ + C + B + E + A5, 1, H + Ce + Cf + Cg + " +lon_0=-52" + Hs + JH + C + B + E + A5, 1, H + Ce + Cf + Cg + " +lon_0=-12" + HV + JH + C + B + E + A5, 1, H + Bf + IJ + Bg + MP + Gx + IN + C + B + E + A5, 1, H + Bf + IJ + Bg + UT + Gc + IN + C + B + E + A5, 1, H + Bf + IJ + Bg + " +lon_0=-10" + Iu + IN + C + B + E + A5, 1, H + Ic + BL + BM + " +lon_0=-64" + HV + Gb + C + B + E + A5, 1, H + Ic + BL + BM + UT + HW + Gb + C + B + E + A5, 1, H + Ic + BL + BM + " +lon_0=-14" + La + Gb + C + B + E + A5, 1, H + AR + AS + AT + NU + NB + EM + C + B + E + A5, 1, H + AR + AS + AT + " +lon_0=-42" + NC + EM + C + B + E + A5, 1, H + AR + AS + AT + " +lon_0=-22" + ND + EM + C + B + E + A5, 1, H + CI + OY + CJ + Zd + Hz + JI + C + B + E + A5, 1, H + CI + OY + CJ + " +lon_0=-38" + IB + JI + C + B + E + A5, 1, H + CI + OY + CJ + " +lon_0=-20" + IT + JI + C + B + E + A5, 1, H + " +lat_1=67" + WQ + WR + " +lon_0=-51" + Jp + aE + C + B + E + A5, 1, H + " +lat_1=67" + WQ + WR + " +lon_0=-34" + HU + aE + C + B + E + A5, 1, H + WS + WT + WU + " +lon_0=-52" + HV + " +y_0=8500000" + C + B + E + A5, 1, H + WS + WT + WU + " +lon_0=-37" + HW + " +y_0=8500000" + C + B + E + A5, 1, H + Ce + Cf + Cg + " +lon_0=16" + HW + JH + C + B + E + A5, 1, H + Bf + IJ + Bg + Gl + Jp + IN + C + B + E + A5, 1, H + Ic + BL + BM + Lu + Hz + Gb + C + B + E + A5, 1, H + Ic + BL + BM + ZG + IB + Gb + C + B + E + A5, 1, H + AR + AS + AT + " +lon_0=14" + Jp + EM + C + B + E + A5, 1, H + AR + AS + AT + ZG + HU + EM + C + B + E + A5, 1, H + Ce + Cf + Cg + " +lon_0=53" + La + JH + S + E + A5, 1, H + Ce + Cf + Cg + HR + Hz + JH + S + E + A5, 1, H + Bf + IJ + Bg + " +lon_0=52" + HU + IN + S + E + A5, 1, H + Bf + IJ + Bg + " +lon_0=83" + Hu + IN + S + E + A5, 1, H + Bf + IJ + Bg + Im + It + IN + S + E + A5, 1, H + Bf + IJ + Bg + " +lon_0=145" + Ht + IN + S + E + A5, 1, H + Ic + BL + BM + " +lon_0=58" + IT + Gb + S + E + A5, 1, H + Ic + BL + BM + " +lon_0=82" + IU + Gb + S + E + A5, 1, H + Ic + BL + BM + ZQ + Mu + Gb + S + E + A5, 1, H + Ic + BL + BM + " +lon_0=130" + Mw + Gb + S + E + A5, 1, H + Ic + BL + BM + ZR + My + Gb + S + E + A5, 1, H + Ic + BL + BM + " +lon_0=179" + NA + Gb + S + E + A5, 1, H + AR + AS + AT + SR + Hu + EM + S + E + A5, 1, H + AR + AS + AT + " +lon_0=74" + It + EM + S + E + A5, 1, H + AR + AS + AT + " +lon_0=95" + Ht + EM + S + E + A5, 1, H + AR + AS + AT + " +lon_0=116" + Hw + EM + S + E + A5, 1, H + AR + AS + AT + " +lon_0=137" + Hx + EM + S + E + A5, 1, H + AR + AS + AT + " +lon_0=158" + Hy + EM + S + E + A5, 1, H + AR + AS + AT + " +lon_0=179" + IA + EM + S + E + A5, 1, H + AR + AS + AT + " +lon_0=-163" + Gx + EM + C + B + E + A5, 1, H + AR + AS + AT + Qr + Gc + EM + C + B + E + A5, 1, H + CI + OY + CJ + SX + Gw + JI + C + B + E + A5, 1, H + CI + OY + CJ + Qr + Hv + JI + C + B + E + A5, 1, H + UL + Ha + Hb + Bu + Hx + DQ + C + B + E + A5, 1, H + Ce + Cf + Cg + SZ + Gw + JH + C + B + E + A5, 1, H + Ce + Cf + Cg + UR + Hv + JH + C + B + E + A5, 1, H + Bf + IJ + Bg + YT + Hy + IN + C + B + E + A5, 1, H + Bf + IJ + Bg + Ji + IA + IN + C + B + E + A5, 1, H + Bf + IJ + Bg + MP + Gx + IN + C + B + E + A5, 1, H + Ic + BL + BM + YT + Gw + Gb + C + B + E + A5, 1, H + Ic + BL + BM + " +lon_0=-104" + Hv + Gb + C + B + E + A5, 1, H + Ic + BL + BM + NW + Hs + Gb + C + B + E + A5, 1, H + AR + AS + AT + " +lon_0=-131" + Iu + EM + C + B + E + A5, 1, H + AR + AS + AT + KK + Mv + EM + C + B + E + A5, 1, H + AR + AS + AT + " +lon_0=-91" + Mx + EM + C + B + E + A5, 1, H + AR + AS + AT + " +lon_0=-71" + Mz + EM + C + B + E + A5, 1, H + CI + OY + CJ + " +lon_0=-132" + Hs + JI + C + B + E + A5, 1, H + CI + OY + CJ + " +lon_0=-113" + HV + JI + C + B + E + A5, 1, H + CI + OY + CJ + Na + HW + JI + C + B + E + A5, 1, H + CI + OY + CJ + UR + La + JI + C + B + E + A5, 1, H + UL + Ha + Hb + Ia + IA + DQ + S + E + A5, 1, H + UL + Ha + Hb + Hq + Gx + DQ + S + E + A5, 1, H + UL + Ha + Hb + Oe + Gc + DQ + S + E + A5, 1, H + UL + Ha + Hb + ON + Hw + DQ + S + E + A5, 1, H + Ce + Cf + Cg + " +lon_0=133" + IB + JH + S + E + A5, 1, H + Ce + Cf + Cg + ZW + LY + JH + S + E + A5, 1, H + Ce + Cf + Cg + Ms + LZ + JH + S + E + A5, 1, H + Bf + IJ + Bg + " +lon_0=176" + Hw + IN + S + E + A5, 1, H + Bf + IJ + Bg + YJ + Hx + IN + S + E + A5, 1, H + Ic + BL + BM + " +lon_0=-155" + LZ + Gb + S + E + A5, 1, H + AR + AS + AT + " +lon_0=-5" + ZK + EM + C + B + E + A5, 3, I2 + Ik + i + Lg + t + A5, 1, I2 + Ik + i + Ly + t + A5, 6, K + C + B + A5, 69, D + L2 + Gl + V2 + O2 + N + Y + Aw + E + A5, 3, K + By + Ay + " +towgs84=293.17,726.18,245.36,0,0,0,0" + A5, 3, I2 + MB + C + B + E + A5, 1, I2 + Nx + C + B + E + A5, 96, H + GW + GX + GY + GA + h + IK + C + E + A5, 4, K + j + Kd + A5, 1, D + L2 + IG + CP + h + " +y_0=-3500000" + j + Kd + E + A5, 4, D + L2 + Gl + V2 + IM + N + Y + Aw + E + A5, 2, K + C + A5, 4, K + C + A5, 3, K + C + A5, 3, I2 + Nq + C + E + A5, 1, I2 + PL + C + E + A5, 1, I2 + SK + C + E + A5, 1, I2 + TV + C + E + A5, 1, I2 + Xz + C + E + A5, 1, I2 + TY + C + E + A5, 1, I2 + RG + C + E + A5, 1, I2 + Ro + C + E + A5, 1, I2 + RH + C + E + A5, 1, I2 + TW + C + E + A5, 1, I2 + TX + C + E + A5, 1, I2 + QE + C + E + A5, 1, I2 + Ns + C + E + A5, 1, I2 + Nt + C + E + A5, 1, I2 + Nu + C + E + A5, 1, I2 + Nw + C + E + A5, 1, I2 + NP + C + E + A5, 1, I2 + NQ + C + E + A5, 1, I2 + Ik + C + E + A5, 1, I2 + IC + C + E + A5, 1, I2 + Hi + C + E + A5, 2, DT + Sa + Hl + ZB + OZ + s + N + C + E + A5, 1, H + AR + AS + AT + " +lon_0=-163" + Gx + EM + C + E + A5, 1, H + AR + AS + AT + Qr + Gc + EM + C + E + A5, 1, H + CI + OY + CJ + SX + Gw + JI + C + E + A5, 1, H + CI + OY + CJ + Qr + Hv + JI + C + E + A5, 1, D + IY + IV + Pc + h + N + C + E + A5, 1, D + Gm + OS + BG + a + N + C + E + A5, 6, H + " +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102" + Ci + N + C + B + E + A5, 3, K + C + B + A5, 1, I2 + Ns + C + B + E + A5, 1, I2 + Nt + C + B + E + A5, 1, I2 + Nu + C + B + E + A5, 1, I2 + Nw + C + B + E + A5, 1, I2 + NP + C + B + E + A5, 1, I2 + NQ + C + B + E + A5, 1, H + " +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102" + Ci + N + C + B + E + A5, 9, D + L2 + Gl + " +k=1" + AI + N + M2 + CC + E + A5, 1, D + L2 + II + " +k=1" + AI + N + M2 + CC + E + A5, 1, D + L2 + HO + " +k=1" + AI + N + M2 + CC + E + A5, 1, D + L2 + Ia + " +k=1" + AI + N + M2 + CC + E + A5, 1, D + L2 + IG + " +k=1" + AI + N + M2 + CC + E + A5, 1, D + L2 + PN + " +k=1" + AI + N + M2 + CC + E + A5, 1, D + L2 + LN + " +k=1" + AI + N + M2 + CC + E + A5, 4, H + " +lat_1=19.33333333333333 +lat_2=19.7 +lat_0=19.33333333333333 +lon_0=-80.56666666666666 +x_0=899160 +y_0=579120" + C + B + t + A5, 2, DT + " +lat_1=55" + QY + Yu + Ms + s + N + C + E + A5, 1, CU + " +lat_0=57" + Ku + Kv + V2 + LX + EO + KE + GZ + C + E + A5, 1, D + Ft + YN + V2 + O2 + N + C + E + A5, 1, D + Ft + YO + V2 + O2 + N + C + E + A5, 1, D + Ft + ON + V2 + O2 + N + C + E + A5, 1, D + Ft + Ms + V2 + O2 + N + C + E + A5, 1, D + Ft + KI + V2 + O2 + N + C + E + A5, 1, D + Ft + YP + V2 + O2 + N + C + E + A5, 1, D + Ft + YQ + V2 + O2 + N + C + E + A5, 1, D + Ft + SW + V2 + O2 + N + C + E + A5, 1, H + Kw + Kx + UK + YR + BZ + N + C + E + A5, 1, D + Bl + Co + V2 + EX + N + C + E + A5, 1, D + Bl + Co + V2 + EX + N + C + t + A5, 1, D + Bl + Cn + V2 + EX + N + C + E + A5, 1, D + Bl + Cn + V2 + EX + N + C + t + A5, 1, D + Bl + Iv + BG + EX + N + C + E + A5, 1, D + Bl + Iv + BG + EX + N + C + t + A5, 1, H + Dx + Dy + BC + IF + u + N + C + E + A5, 1, H + Dx + Dy + BC + IF + Au + N + C + J + A5, 1, H + Dz + Mq + EA + IF + u + Is + C + E + A5, 1, H + Dz + Mq + EA + IF + Au + Gt + C + J + A5, 1, DT + Yy + SY + L2 + Mt + s + QZ + C + E + A5, 1, H + DW + Jn + y + HA + Bd + Ae + C + E + A5, 1, H + DW + Jn + y + HA + Ac + AD + C + J + A5, 1, H + DX + DY + AA + HA + Bd + Ae + C + E + A5, 1, H + DX + DY + AA + HA + Ac + AD + C + J + A5, 1, H + Ap + DZ + Ml + AJ + Bd + Ae + C + E + A5, 1, H + Ap + DZ + Ml + AJ + Ac + AD + C + J + A5, 1, H + LO + QS + Da + Mm + Bd + Ae + C + E + A5, 1, H + LO + QS + Da + Mm + Ac + AD + C + J + A5, 1, H + Db + Dc + Mn + Ir + Bd + Ae + C + E + A5, 1, H + Db + Dc + Mn + Ir + Ac + AD + C + J + A5, 1, H + Dd + De + Df + Iw + Bd + Ae + C + E + A5, 1, H + Dd + De + Df + Iw + Ac + AD + C + J + A5, 1, H + LP + LQ + CY + Ba + Fw + Fx + C + E + A5, 1, H + LP + LQ + CY + Ba + Bw + CL + C + J + A5, 1, H + Eh + Ei + y + Ba + Fw + Fx + C + E + A5, 1, H + Eh + Ei + y + Ba + Bw + CL + C + J + A5, 1, H + Ap + Dg + f + Ba + Fw + Fx + C + E + A5, 1, H + Ap + Dg + f + Ba + Bw + CL + C + J + A5, 1, H + Dh + Mo + Di + Jq + QG + QH + C + E + A5, 1, H + Dh + Mo + Di + Jq + MC + MD + C + J + A5, 1, D + Ch + Cp + Mp + h + N + C + E + A5, 1, D + Ch + Cp + Mp + AE + N + C + J + A5, 1, D + Aq + CR + Am + h + N + C + E + A5, 1, D + Aq + CR + Am + AE + N + C + J + A5, 1, DT + " +lat_1=24" + YG + " +lat_0=24" + NV + u + N + C + E + A5, 1, H + LR + Dj + QT + LS + a + N + C + E + A5, 1, H + LR + Dj + QT + LS + a + N + C + J + A5, 1, D + Aq + Ob + Am + h + N + C + E + A5, 1, D + Aq + Ob + Am + AE + N + C + J + A5, 1, D + Gm + Cq + V2 + h + N + C + E + A5, 1, D + Gm + Cq + V2 + AE + N + C + J + A5, 1, D + Gm + Cr + V2 + EW + N + C + E + A5, 1, D + Gm + Cr + V2 + CM + N + C + J + A5, 1, D + p + Jb + BJ + O2 + N + C + E + A5, 1, D + p + Jb + BJ + AF + N + C + J + A5, 1, D + p + Cs + BJ + h + N + C + E + A5, 1, D + p + Cs + BJ + AE + N + C + J + A5, 1, D + p + Ix + BG + CX + N + C + E + A5, 1, D + p + Ix + BG + ME + N + C + J + A5, 1, D + f + Cz + EQ + AI + N + C + E + A5, 1, D + f + Cz + EQ + AI + N + C + J + A5, 1, D + f + DA + Am + EW + N + C + E + A5, 1, D + f + DA + Am + MO + N + C + J + A5, 1, D + DM + DB + AO + BU + KJ + C + E + A5, 1, D + DM + DB + AO + MM + GI + C + J + A5, 1, D + DM + DC + AO + HT + KJ + C + E + A5, 1, D + DM + DC + AO + HT + GI + C + J + A5, 1, H + EB + EC + Fo + GG + AV + AH + C + E + A5, 1, H + EB + EC + Fo + GG + AV + GJ + C + J + A5, 1, H + AY + ED + Fs + GG + O2 + N + C + E + A5, 1, H + AY + ED + Fs + GG + AG + N + C + J + A5, 1, H + EE + EF + AQ + Fl + u + N + C + E + A5, 1, H + EE + EF + AQ + Fl + Au + N + C + J + A5, 1, H + EG + EH + f + CV + u + Is + C + E + A5, 1, H + EG + EH + f + CV + Au + Gt + C + J + A5, 1, H + Az + DV + DM + Jo + O2 + N + C + E + A5, 1, H + Az + DV + DM + Jo + AF + N + C + J + A5, 1, H + Fi + Fj + AB + EY + AV + AH + C + E + A5, 1, H + Fi + Fj + AB + EY + AV + CN + C + J + A5, 1, H + Ej + Ek + AB + EY + O2 + Ae + C + E + A5, 1, H + Ej + Ek + AB + EY + AF + AD + C + J + A5, 1, H + FS + FT + IY + Hg + BZ + N + C + E + A5, 1, H + FS + FT + IY + Hg + Eb + N + C + J + A5, 1, H + OH + OI + OJ + Bi + BZ + N + C + E + A5, 1, H + OH + OI + OJ + Bi + Eb + N + C + J + A5, 1, D + YM + Rj + JE + O2 + N + C + E + A5, 1, D + AL + Rf + JE + EW + N + C + E + A5, 1, D + BD + Rg + JE + AI + N + C + E + A5, 1, D + AK + HJ + V2 + AI + N + C + E + A5, 1, D + AK + HJ + V2 + AI + N + C + J + A5, 1, D + BD + DD + AO + HT + N + C + E + A5, 1, D + BD + DD + AO + HT + N + C + J + A5, 1, H + MU + Nz + AA + Ld + u + N + C + E + A5, 1, H + MU + Nz + AA + Ld + MF + N + C + J + A5, 1, H + Em + En + Ip + IL + O2 + N + C + E + A5, 1, H + Em + En + Ip + IL + AF + N + C + J + A5, 1, H + El + Dk + Ip + GE + h + Mk + C + E + A5, 1, H + El + Dk + Ip + GE + AE + Mk + C + J + A5, 1, H + OA + Er + Es + BE + Pk + N + C + E + A5, 1, H + OA + Er + Es + BE + MH + N + C + t + A5, 1, H + Eo + Ep + Eq + Jh + Tl + N + C + E + A5, 1, H + Eo + Ep + Eq + Jh + MG + N + C + t + A5, 1, CU + Kr + " +lonc=-86" + QI + AP + QJ + PY + KE + QK + C + E + A5, 1, H + Bq + OB + Fo + BE + LU + N + C + E + A5, 1, H + Bq + OB + Fo + BE + OT + N + C + t + A5, 1, H + Ma + FW + IP + Js + CX + EK + C + E + A5, 1, H + Ma + FW + IP + Js + An + Ao + C + J + A5, 1, H + FU + FV + Iq + DE + CX + EK + C + E + A5, 1, H + FU + FV + Iq + DE + An + Ao + C + J + A5, 1, H + FX + FY + Nj + Na + CX + EK + C + E + A5, 1, H + FX + FY + Nj + Na + An + Ao + C + J + A5, 1, D + Hj + Ct + CP + AI + N + C + E + A5, 1, D + Hj + Ct + CP + AI + N + C + J + A5, 1, D + Li + Sj + Tn + O2 + Pm + C + E + A5, 1, D + Hj + Bx + CP + EW + N + C + E + A5, 1, D + Hj + Bx + CP + CM + N + C + J + A5, 1, D + Cd + Hg + BG + O2 + N + C + E + A5, 1, D + Cd + RS + BG + Bv + N + C + E + A5, 1, D + Id + RT + Am + YC + N + C + E + A5, 1, H + LM + RK + MV + IS + a + N + C + E + A5, 1, H + LM + RK + MV + IS + DR + N + C + t + A5, 1, H + JT + Jn + FZ + CS + O2 + N + C + E + A5, 2, D + CQ + DG + V2 + O2 + Hh + C + E + A5, 1, D + CQ + DG + V2 + AG + Hh + C + J + A5, 1, D + CQ + DF + V2 + h + Tm + C + E + A5, 1, D + CQ + DF + V2 + Gu + MN + C + J + A5, 1, D + CQ + DH + V2 + CX + LV + C + E + A5, 1, D + CQ + DH + V2 + An + NE + C + J + A5, 1, D + Fp + DI + AO + AI + N + C + E + A5, 1, D + Fp + DI + AO + AI + N + C + J + A5, 1, D + BA + Gp + V2 + Bn + N + C + E + A5, 1, D + BA + Gp + V2 + Bn + N + C + J + A5, 1, D + Bl + Iy + V2 + O2 + N + C + E + A5, 1, D + Bl + Iy + V2 + AF + N + C + J + A5, 1, D + Bl + Cu + Hm + OC + N + C + E + A5, 1, D + Bl + Cu + Hm + OC + N + C + J + A5, 1, D + Bl + Cv + Iz + YD + N + C + E + A5, 1, D + Bl + Cv + Iz + MI + N + C + J + A5, 1, D + Fs + Cw + Ad + Bv + N + C + E + A5, 1, D + Fs + Cw + Ad + MJ + N + C + J + A5, 1, D + BA + Gp + V2 + Bn + N + C + E + A5, 1, D + BA + Gp + V2 + Bn + N + C + J + A5, 1, H + Dl + Dm + BB + Oc + AI + N + C + E + A5, 1, H + Dl + Dm + BB + Oc + AI + N + C + J + A5, 1, D + Fs + Cx + Ad + Qo + N + C + E + A5, 1, D + Fs + Cx + Ad + MK + N + C + J + A5, 1, H + Et + Eu + LT + NW + Rh + N + C + E + A5, 1, H + Et + Eu + LT + NW + Z2 + N + C + J + A5, 1, H + BH + Ev + Ib + EZ + a + N + C + E + A5, 1, H + BH + Ev + Ib + EZ + DR + N + C + t + A5, 1, H + Ew + Ex + Be + EZ + a + N + C + E + A5, 1, H + Ew + Ex + Be + EZ + DR + N + C + t + A5, 1, H + OK + Fa + BY + ET + a + N + C + E + A5, 1, H + OK + Fa + BY + ET + a + N + C + J + A5, 1, H + Fb + Fc + Ch + ET + a + N + C + E + A5, 1, H + Fb + Fc + Ch + ET + a + N + C + J + A5, 1, H + Dn + Ey + QU + Fl + a + N + C + E + A5, 1, H + Dn + Ey + QU + Fl + a + N + C + J + A5, 1, H + Ez + FA + Do + Fl + a + N + C + E + A5, 1, H + Ez + FA + Do + Fl + a + N + C + J + A5, 1, H + JT + Hl + GH + AJ + u + N + C + E + A5, 1, H + JT + Hl + GH + AJ + Lc + N + C + t + A5, 1, H + PP + CZ + AK + AJ + Ci + N + C + E + A5, 1, H + PP + CZ + AK + AJ + KL + N + C + t + A5, 1, H + PQ + Ca + p + AJ + AV + N + C + E + A5, 1, H + PQ + Ca + p + AJ + KM + N + C + t + A5, 1, H + MW + FB + BB + Ea + a + N + C + E + A5, 1, H + MW + FB + BB + Ea + a + N + C + J + A5, 1, H + Dp + Dq + y + Ea + a + N + C + E + A5, 1, H + Dp + Dq + y + Ea + a + N + C + J + A5, 1, H + GW + GX + GY + GA + h + IK + C + E + A5, 1, D + EI + GE + Lb + BU + N + C + E + A5, 1, D + EI + GE + Lb + JV + N + C + J + A5, 1, H + FC + OD + Dr + CR + OE + N + C + E + A5, 1, H + FC + OD + Dr + CR + OE + N + C + t + A5, 1, H + Fd + Fe + AL + CS + a + N + C + E + A5, 1, H + Fd + Fe + AL + CS + a + N + C + J + A5, 1, H + OL + Ff + EJ + Ag + a + N + C + E + A5, 1, H + OL + Ff + EJ + Ag + a + N + C + J + A5, 1, H + FD + MX + BC + MQ + a + N + C + E + A5, 1, H + FD + MX + BC + MQ + a + N + C + J + A5, 1, H + FH + FI + Cb + Ag + EW + Fq + C + E + A5, 1, H + FH + FI + Cb + Ag + CM + Fq + C + J + A5, 1, DT + OM + RO + OX + CS + AV + Hh + C + E + A5, 1, H + OM + RO + OX + CS + AV + Ju + C + E + A5, 1, H + FE + MY + QV + Jr + h + AH + C + E + A5, 1, H + FE + MY + QV + Jr + AE + CN + C + J + A5, 1, H + FF + FG + Ds + CV + a + Cl + C + E + A5, 1, H + FF + FG + Ds + CV + a + Gr + C + J + A5, 1, H + CD + CE + Cc + CV + AI + Ju + C + E + A5, 1, H + CD + CE + Cc + CV + AI + Nf + C + J + A5, 1, H + FJ + FK + Dt + Ji + a + LV + C + E + A5, 1, H + FJ + FK + Dt + Ji + a + Ne + C + J + A5, 1, D + Fp + LW + JA + O2 + N + C + E + A5, 1, D + Fp + LW + JA + AG + N + C + J + A5, 1, H + " +lat_1=37" + YS + GM + Ga + s + N + C + E + A5, 1, H + OF + FL + AA + GF + Bo + Cl + C + E + A5, 1, H + OF + FL + AA + GF + Gs + Gr + C + J + A5, 1, H + Az + Du + AB + GF + Bo + AH + C + E + A5, 1, H + Az + Du + AB + GF + Gs + CN + C + J + A5, 1, H + BH + OG + Ib + Cy + O2 + N + C + E + A5, 1, H + BH + OG + Ib + Cy + AF + N + C + J + A5, 1, H + FM + FN + Dv + AJ + O2 + N + C + E + A5, 1, H + FM + FN + Dv + AJ + AF + N + C + J + A5, 1, H + Mb + RN + Mr + Ga + a + N + C + E + A5, 1, H + Mb + RN + Mr + Ga + a + N + C + J + A5, 1, H + Fg + Fh + QX + CR + a + N + C + E + A5, 1, H + Fg + Fh + QX + CR + a + N + C + J + A5, 2, H + Jc + MZ + AL + Bu + a + N + C + J + A5, 1, H + FO + FP + Dw + Bu + a + N + C + E + A5, 1, H + FO + FP + Dw + Bu + a + N + C + J + A5, 1, H + FQ + FR + PR + Bu + a + N + C + E + A5, 1, H + FQ + FR + PR + Bu + a + N + C + J + A5, 1, D + L2 + Bu + AP + YF + Sh + C + E + A5, 1, D + CA + DJ + Ad + h + N + C + E + A5, 1, D + CA + DJ + Ad + Gu + N + C + J + A5, 1, D + CA + DK + Ad + u + EK + C + E + A5, 1, D + CA + DK + Ad + Au + Ao + C + J + A5, 1, D + CA + DL + Ad + CX + EK + C + E + A5, 1, D + CA + DL + Ad + An + Ao + C + J + A5, 1, D + CA + JB + Ad + a + N + C + E + A5, 1, D + CA + JB + Ad + a + N + C + J + A5, 1, H + JF + CG + AQ + BI + O2 + Cl + C + E + A5, 1, H + AY + CF + Br + BI + O2 + AH + C + E + A5, 1, H + JG + CH + f + BI + O2 + Fq + C + E + A5, 1, H + UF + Nh + IZ + HJ + s + N + C + B + E + A5, 1, DT + UF + Nh + IZ + HJ + s + N + C + B + E + A5, 1, DT + UF + Nh + IZ + HJ + s + N + C + B + E + A5, 1, H + JF + CG + AQ + BI + AG + NF + C + J + A5, 1, H + AY + CF + Br + BI + AG + GJ + C + J + A5, 1, H + JG + CH + f + BI + AG + Fq + C + J + A5, 1, D + Kn + Sf + AO + O2 + N + C + E + A5, 1, D + Ko + KO + AO + O2 + N + C + E + A5, 1, D + GV + KI + Jl + O2 + N + C + E + A5, 1, D + Kp + Sg + Jl + O2 + N + C + E + A5, 1, D + Kq + KP + " +k=1" + O2 + N + C + E + A5, 1, D + GV + KI + Jl + AG + N + C + J + A5, 1, I2 + TY + C + E + A5, 1, I2 + RG + C + E + A5, 1, I2 + TV + o + C + E + A5, 1, D + " +lat_0=13.5 +lon_0=144.75 +k=1" + BU + IK + C + E + A5, 9, D + WJ + " +lon_0=46.5 +k=0.9994" + CX + N + Bc + Ge + EU + E + A5, 22, K + C + A5, 1, D + PT + Zz + V2 + s + N + C + E + A5, 1, D + PT + NX + V2 + s + N + C + E + A5, 1, D + GM + Ox + V2 + s + N + C + E + A5, 1, D + PT + Tk + V2 + s + N + C + E + A5, 1, D + GM + Oy + V2 + s + N + C + E + A5, 1, D + GM + Rw + V2 + s + N + C + E + A5, 1, D + GM + Oz + V2 + s + N + C + E + A5, 1, D + GM + aA + V2 + s + N + C + E + A5, 1, D + GM + PA + V2 + s + N + C + E + A5, 1, D + Fs + PB + V2 + s + N + C + E + A5, 1, D + IZ + ZH + V2 + s + N + C + E + A5, 1, D + IZ + ZI + V2 + s + N + C + E + A5, 1, D + IZ + ZJ + V2 + s + N + C + E + A5, 1, D + IQ + " +lon_0=142" + V2 + s + N + C + E + A5, 1, D + IQ + Pj + V2 + s + N + C + E + A5, 1, D + IQ + " +lon_0=124" + V2 + s + N + C + E + A5, 1, D + IQ + NX + V2 + s + N + C + E + A5, 1, D + " +lat_0=20" + Rw + V2 + s + N + C + E + A5, 1, D + IQ + ZR + V2 + s + N + C + E + A5, 1, I2 + Mg + C + E + A5, 1, I2 + NT + C + E + A5, 1, I2 + Ot + C + E + A5, 1, I2 + Nv + C + E + A5, 1, I2 + PM + C + E + A5, 11, D + L2 + US + AP + O2 + Ak + j + B + E + A5, 3, K + C + B + A5, 1, I2 + JN + C + B + E + A5, 1, I2 + KC + C + B + E + A5, 1, I2 + NR + C + B + E + A5, 11, D + L2 + " +lon_0=105.625 +k=1.000024" + Jm + Pm + j + B + E + A5, 1, D + L2 + " +lon_0=105.625 +k=1.00002514" + Jm + Pm + C + B + E + A5, 1, D + L2 + " +lon_0=96.875 +k=1" + Jm + " +y_0=1400000" + j + B + E + A5, 1, D + L2 + " +lon_0=96.875 +k=0.99999387" + Jm + DQ + C + B + E + A5, 13, I2 + QF + o + C + B + E + A5, 1, I2 + Ny + o + C + B + E + A5, 1, I2 + Nq + o + C + B + E + A5, 45, K + C + A5, 1, D + OO + KS + SB + Of + N + C + E + A5, 1, D + OO + KS + SB + JJ + N + C + t + A5, 1, D + OO + KS + SB + Of + N + C + E + A5, 1, D + OO + KS + SB + JJ + N + C + t + A5, 1, D + GH + Rk + " +k=1.0002" + Oa + N + C + E + A5, 1, D + GH + Rk + " +k=1.0002" + HL + N + C + t + A5, 1, D + GH + Rk + " +k=1.0002" + Oa + N + C + E + A5, 1, D + GH + Rk + " +k=1.0002" + HL + N + C + t + A5, 1, H + Ky + Kz + Rl + Mc + Oa + " +y_0=130000" + C + E + A5, 1, H + Ky + Kz + Rl + Mc + HL + Zo + C + t + A5, 1, H + Ky + Kz + Rl + Mc + Oa + " +y_0=130000" + C + E + A5, 1, H + Ky + Kz + Rl + Mc + HL + Zo + C + t + A5, 1, H + Bq + AK + Rm + YU + " +x_0=120000 +y_0=60000" + C + E + A5, 1, H + Bq + AK + Rm + YU + Zp + aM + C + t + A5, 1, H + Bq + AK + Rm + YU + " +x_0=120000 +y_0=60000" + C + E + A5, 1, H + Bq + AK + Rm + YU + Zp + aM + C + t + A5, 1, D + Fp + Bj + Ze + Of + N + C + E + A5, 1, D + Fp + Bj + Ze + JJ + N + C + t + A5, 1, D + Fp + Bj + Ze + Of + N + C + E + A5, 1, D + Fp + Bj + Ze + JJ + N + C + t + A5, 1, H + LA + Be + AJ + Sk + Bn + " +y_0=30000" + C + E + A5, 1, H + LA + Be + AJ + Sk + Ng + aN + C + t + A5, 1, H + LA + Be + AJ + Sk + Bn + " +y_0=30000" + C + E + A5, 1, H + LA + Be + AJ + Sk + Ng + aN + C + t + A5, 1, CU + LB + Zf + Zg + " +k=1" + Tp + ZL + KE + Zh + C + E + A5, 1, CU + LB + Zf + Zg + " +k=1" + ZN + Zq + KE + Zh + C + t + A5, 1, CU + LB + Zf + Zg + " +k=1" + Tp + ZL + KE + Zh + C + E + A5, 1, CU + LB + Zf + Zg + " +k=1" + ZN + Zq + KE + Zh + C + t + A5, 1, D + BD + Bj + YV + Jm + N + C + E + A5, 1, D + BD + Bj + YV + HM + N + C + t + A5, 1, D + BD + Bj + YV + Jm + N + C + E + A5, 1, D + BD + Bj + YV + HM + N + C + t + A5, 1, D + OO + YW + Zi + Oa + N + C + E + A5, 1, D + OO + YW + Zi + HL + N + C + t + A5, 1, D + OO + YW + Zi + Oa + N + C + E + A5, 1, D + OO + YW + Zi + HL + N + C + t + A5, 1, D + Tq + KT + Lk + Jm + N + C + E + A5, 1, D + Tq + KT + Lk + HM + N + C + t + A5, 1, D + Tq + KT + Lk + Jm + N + C + E + A5, 1, D + Tq + KT + Lk + HM + N + C + t + A5, 1, D + GH + Bj + Qs + Jm + N + C + E + A5, 1, D + GH + Bj + Qs + HM + N + C + t + A5, 1, D + GH + Bj + Qs + Jm + N + C + E + A5, 1, D + GH + Bj + Qs + HM + N + C + t + A5, 1, D + IP + KU + Zj + " +x_0=10000" + N + C + E + A5, 1, D + IP + KU + Zj + aV + N + C + t + A5, 1, D + IP + KU + Zj + " +x_0=10000" + N + C + E + A5, 1, D + IP + KU + Zj + aV + N + C + t + A5, 1, D + IP + Ir + Zk + Of + N + C + E + A5, 1, D + IP + Ir + Zk + JJ + N + C + t + A5, 1, D + IP + Ir + Zk + Of + N + C + E + A5, 1, D + IP + Ir + Zk + JJ + N + C + t + A5, 1, D + Tr + Lj + " +k=1.0001" + Oa + N + C + E + A5, 1, D + Tr + Lj + " +k=1.0001" + HL + N + C + t + A5, 1, D + Tr + Lj + " +k=1.0001" + Oa + N + C + E + A5, 1, D + Tr + Lj + " +k=1.0001" + HL + N + C + t + A5, 1, CU + Pn + Sl + " +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000" + KE + " +gamma=5" + C + E + A5, 1, CU + Pn + Sl + " +alpha=5 +k=1" + Zr + Yp + KE + " +gamma=5" + C + t + A5, 1, CU + Pn + Sl + " +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000" + KE + " +gamma=5" + C + E + A5, 1, CU + Pn + Sl + " +alpha=5 +k=1" + Zr + Yp + KE + " +gamma=5" + C + t + A5, 1, D + Ts + KV + Sb + " +x_0=60000" + N + C + E + A5, 1, D + Ts + KV + Sb + aO + N + C + t + A5, 1, D + Ts + KV + Sb + " +x_0=60000" + N + C + E + A5, 1, D + Ts + KV + Sb + aO + N + C + t + A5, 1, D + LC + IW + YX + Zl + N + C + E + A5, 1, D + LC + IW + YX + aP + N + C + t + A5, 1, D + LC + IW + YX + Zl + N + C + E + A5, 1, D + LC + IW + YX + aP + N + C + t + A5, 1, H + Jc + YY + Rn + Sm + BU + Rz + C + E + A5, 1, H + Jc + YY + Rn + Sm + JW + Ra + C + t + A5, 1, H + Jc + YY + Rn + Sm + BU + Rz + C + E + A5, 1, H + Jc + YY + Rn + Sm + JW + Ra + C + t + A5, 1, D + LD + KW + Zm + Jm + N + C + E + A5, 1, D + LD + KW + Zm + HM + N + C + t + A5, 1, D + LD + KW + Zm + Jm + N + C + E + A5, 1, D + LD + KW + Zm + HM + N + C + t + A5, 1, D + LE + Sn + YZ + s + N + C + E + A5, 1, D + LE + Sn + YZ + s + N + C + t + A5, 1, D + LE + Sn + YZ + s + N + C + E + A5, 1, D + LE + Sn + YZ + s + N + C + t + A5, 4, H + JT + Hl + GH + AJ + u + N + C + E + A5, 1, H + JT + Hl + GH + AJ + Lc + N + C + t + A5, 2, D + L2 + UI + " +k=1" + O2 + N + C + B + E + A5, 5, D + L2 + IH + " +k=0.9985000000000001" + Tp + N + C + B + E + A5, 1, D + L2 + IH + " +k=1" + aH + N + C + B + E + A5, 3, H + Jc + MZ + AL + Bu + a + N + C + E + A5, 1, H + JT + Jn + FZ + CS + AG + N + C + J + A5, 1, K + Bc + Ge + " +towgs84=-24,-203,268,0,0,0,0" + A5, 1, K + Bc + Ge + " +towgs84=-183,-15,273,0,0,0,0" + A5, 1, K + R + " +towgs84=-235,-110,393,0,0,0,0" + A5, 1, H + PP + CZ + AK + AJ + Ci + N + C + E + A5, 1, H + PP + CZ + AK + AJ + KL + N + C + t + A5, 1, H + PQ + Ca + p + AJ + AV + N + C + E + A5, 1, H + PQ + Ca + p + AJ + KM + N + C + t + A5, 5, K + Bc + Ge + PK + A5, 2, K + Bc + Ge + " +towgs84=-63,176,185,0,0,0,0" + A5, 21, I2 + Me + Bc + Ge + PK + E + A5, 7, H + Sc + Ya + GM + So + u + N + C + B + E + A5, 1, H + Sc + Ya + GM + So + Au + N + C + B + J + A5, 1, H + Sc + Ya + GM + So + u + N + C + E + A5, 1, H + Sc + Ya + GM + So + Au + N + C + J + A5, 6, He + Hr + HN + s + N + j + B + E + A5, 1, He + m + HN + s + N + j + B + E + A5, 1, "+proj=cea" + HN + " +lat_ts=30" + s + N + j + B + E + A5, 29, H + " +lat_1=39 +lat_2=43" + Ip + UI + s + N + C + B + E + A5, 21, K + C + A5, 1, D + Ou + Ov + Zw + UV + Yl + C + E + A5, 6, K + C + A5, 1, D + Ou + Ov + Zw + UV + Yl + C + E + A5, 14, I2 + KD + Bc + Ge + DO + E + A5, 1, I2 + JZ + Bc + Ge + DO + E + A5, 1, I2 + JM + Bc + Ge + DO + E + A5, 28, K + C + A5, 2, K + C + A5, 2, K + C + A5, 2, K + C + A5, 16, H + " +lat_1=43.2 +lat_0=43.2 +lon_0=-95.25 +k_0=1.000052 +x_0=3505207.010414021 +y_0=2926085.852171705" + C + J + A5, 1, H + " +lat_1=43.16666666666666 +lat_0=43.16666666666666 +lon_0=-92.75 +k_0=1.000043 +x_0=3810007.62001524 +y_0=2987045.974091948" + C + J + A5, 1, D + Md + " +lon_0=-91.2 +k=1.000035 +x_0=4114808.229616459 +y_0=2529845.05969012" + C + J + A5, 1, H + " +lat_1=42.53333333333333 +lat_0=42.53333333333333 +lon_0=-94.83333333333333 +k_0=1.000045 +x_0=4419608.839217679 +y_0=2621285.242570485" + C + J + A5, 1, H + " +lat_1=42.65 +lat_0=42.65 +lon_0=-92.25 +k_0=1.000032 +x_0=4724409.448818898 +y_0=2712725.425450851" + C + J + A5, 1, D + Md + " +lon_0=-95.73333333333333 +k=1.000039 +x_0=5029210.058420117 +y_0=2011684.023368047" + C + J + A5, 1, D + Md + " +lon_0=-94.63333333333334" + Sb + " +x_0=5334010.668021336 +y_0=2072644.145288291" + C + J + A5, 1, D + Md + " +lon_0=-93.71666666666667 +k=1.000033 +x_0=5638811.277622555 +y_0=2133604.267208535" + C + J + A5, 1, D + Md + " +lon_0=-92.81666666666666" + OP + " +x_0=5943611.887223775 +y_0=2194564.389128779" + C + J + A5, 1, H + " +lat_1=41.83333333333334 +lat_0=41.83333333333334 +lon_0=-91.66666666666667 +k_0=1.00002 +x_0=6248412.496824994 +y_0=2438404.876809754" + C + J + A5, 1, D + Md + " +lon_0=-90.53333333333333" + OP + " +x_0=6553213.106426213 +y_0=2316484.632969266" + C + J + A5, 1, H + " +lat_1=40.91666666666666 +lat_0=40.91666666666666 +lon_0=-93.75 +k_0=1.000037 +x_0=6858013.716027432" + Yq + C + J + A5, 1, D + Md + Oo + Og + " +x_0=7162814.325628651 +y_0=1950723.901447803" + C + J + A5, 1, D + Md + " +lon_0=-91.25 +k=1.000018 +x_0=7467614.93522987" + Yq + C + J + A5, 3, K + C + A5, 1, I2 + KD + o + C + E + A5, 1, I2 + JZ + o + C + E + A5, 1, I2 + JM + o + C + E + A5, 1, I2 + Me + o + C + E + A5, 1, I2 + Rb + o + C + E + A5, 1, I2 + Rc + o + C + E + A5, 1, I2 + SO + o + C + E + A5, 1, I2 + Td + o + C + E + A5, 3, K + C + A5, 2, K + C + A5, 23, D + Qt + Sp + SB + Bn + N + C + E + A5, 1, D + " +lat_0=48" + Sp + " +k=1.00019" + BU + N + C + E + A5, 1, H + Yb + Qt + KK + " +k_0=1.000145" + Bn + IK + C + E + A5, 1, H + Yb + Qt + " +lon_0=-108.5" + Mc + h + " +y_0=150000" + C + E + A5, 1, H + LF + LG + Ba + Mc + h + EK + C + E + A5, 1, H + LF + LG + Ba + " +k_0=1.00009" + BU + Rz + C + E + A5, 1, D + Pn + " +lon_0=-107.75 +k=1.000148" + h + N + C + E + A5, 1, H + aI + " +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185" + BU + EK + C + E + A5, 1, H + WV + WW + Ub + " +k_0=1.0001515" + h + Rz + C + E + A5, 1, D + WX + Uc + " +k=1.00024" + BU + N + C + E + A5, 1, D + Qt + Sp + SB + Ng + N + C + t + A5, 1, D + " +lat_0=48" + Sp + " +k=1.00019" + JW + N + C + t + A5, 1, H + Yb + Qt + KK + " +k_0=1.000145" + Ng + " +y_0=199999.9999992" + C + t + A5, 1, H + Yb + Qt + " +lon_0=-108.5" + Mc + OU + " +y_0=150000.00001464" + C + t + A5, 1, H + LF + LG + Ba + Mc + OU + Yr + C + t + A5, 1, H + LF + LG + Ba + " +k_0=1.00009" + JW + " +y_0=49999.99971024" + C + t + A5, 1, D + Pn + " +lon_0=-107.75 +k=1.000148" + OU + N + C + t + A5, 1, H + aI + " +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185" + JW + Yr + C + t + A5, 1, H + WV + WW + Ub + " +k_0=1.0001515" + OU + Ra + C + t + A5, 1, D + WX + Uc + " +k=1.00024" + JV + N + C + J + A5, 3, D + Po + " +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000" + C + E + A5, 1, D + Po + " +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000" + C + J + A5, 1, K + C + A5, 3, K + j + A5, 3, K + j + A5, 3, D + LH + LI + " +k=1" + Qx + " +y_0=126867.909" + Nc + Nd + " +towgs84=-275.7224,94.7824,340.8944,-8.001,-4.42,-11.821,1" + E + A5, 115, D + Pp + Sq + Ll + l + q + C + E + A5, 1, D + Pp + Sq + Ll + l + q + C + J + A5, 1, D + Qu + Oj + Lm + l + q + C + E + A5, 1, D + Qu + Oj + Lm + l + q + C + J + A5, 1, D + " +lat_0=39" + KX + Ln + l + q + C + E + A5, 1, D + " +lat_0=39" + KX + Ln + l + q + C + J + A5, 1, D + " +lat_0=40.45" + Pq + Yc + l + q + C + E + A5, 1, D + " +lat_0=40.45" + Pq + Yc + l + q + C + J + A5, 1, D + " +lat_0=40.05" + Ud + OQ + l + q + C + E + A5, 1, D + " +lat_0=40.05" + Ud + OQ + l + q + C + J + A5, 1, D + Yd + Pr + OR + l + q + C + E + A5, 1, D + Yd + Pr + OR + l + q + C + J + A5, 1, D + " +lat_0=39" + Tt + Zn + l + q + C + E + A5, 1, D + " +lat_0=39" + Tt + Zn + l + q + C + J + A5, 1, D + " +lat_0=40.4" + Ue + Ln + l + q + C + E + A5, 1, D + " +lat_0=40.4" + Ue + Ln + l + q + C + J + A5, 1, D + Pp + Uf + Qv + l + q + C + E + A5, 1, D + Pp + Uf + Qv + l + q + C + J + A5, 1, D + Tu + Ug + " +k=1.000021" + l + q + C + E + A5, 1, D + Tu + Ug + " +k=1.000021" + l + q + C + J + A5, 1, D + Tv + Uh + " +k=1.000024" + l + q + C + E + A5, 1, D + Tv + Uh + " +k=1.000024" + l + q + C + J + A5, 1, D + " +lat_0=40.15" + Ui + " +k=1.000032" + l + q + C + E + A5, 1, D + " +lat_0=40.15" + Ui + " +k=1.000032" + l + q + C + J + A5, 1, D + " +lat_0=38.1" + Pr + Qw + l + q + C + E + A5, 1, D + " +lat_0=38.1" + Pr + Qw + l + q + C + J + A5, 1, D + " +lat_0=38.45" + KY + " +k=1.000018" + l + q + C + E + A5, 1, D + " +lat_0=38.45" + KY + " +k=1.000018" + l + q + C + J + A5, 1, D + " +lat_0=38.65" + Uj + Yc + l + q + C + E + A5, 1, D + " +lat_0=38.65" + Uj + Yc + l + q + C + J + A5, 1, D + " +lat_0=39.1" + Uk + OR + l + q + C + E + A5, 1, D + " +lat_0=39.1" + Uk + OR + l + q + C + J + A5, 1, D + Tw + Sq + OR + l + q + C + E + A5, 1, D + Tw + Sq + OR + l + q + C + J + A5, 1, D + " +lat_0=38.2" + Sr + Og + l + q + C + E + A5, 1, D + " +lat_0=38.2" + Sr + Og + l + q + C + J + A5, 1, D + Tx + KX + " +k=1.000033" + l + q + C + E + A5, 1, D + Tx + KX + " +k=1.000033" + l + q + C + J + A5, 1, D + Ty + Oj + OQ + l + q + C + E + A5, 1, D + Ty + Oj + OQ + l + q + C + J + A5, 1, D + " +lat_0=39.95" + Pq + Qw + l + q + C + E + A5, 1, D + " +lat_0=39.95" + Pq + Qw + l + q + C + J + A5, 1, D + Qu + Tt + Lm + l + q + C + E + A5, 1, D + Qu + Tt + Lm + l + q + C + J + A5, 1, D + Tu + Ul + Ye + l + q + C + E + A5, 1, D + Tu + Ul + Ye + l + q + C + J + A5, 1, D + Tz + " +lon_0=-85.7" + Ll + l + q + C + E + A5, 1, D + Tz + " +lon_0=-85.7" + Ll + l + q + C + J + A5, 1, D + " +lat_0=39.9" + MQ + Ll + l + q + C + E + A5, 1, D + " +lat_0=39.9" + MQ + Ll + l + q + C + J + A5, 1, D + " +lat_0=39.65" + UA + OR + l + q + C + E + A5, 1, D + " +lat_0=39.65" + UA + OR + l + q + C + J + A5, 1, D + " +lat_0=37.95" + HC + OP + l + q + C + E + A5, 1, D + " +lat_0=37.95" + HC + OP + l + q + C + J + A5, 1, D + " +lat_0=39.75" + Ss + Qs + l + q + C + E + A5, 1, D + " +lat_0=39.75" + Ss + Qs + l + q + C + J + A5, 1, D + Tz + HC + Lm + l + q + C + E + A5, 1, D + Tz + HC + Lm + l + q + C + J + A5, 1, D + Tx + To + Ll + l + q + C + E + A5, 1, D + Tx + To + Ll + l + q + C + J + A5, 1, D + " +lat_0=38.7 +lon_0=-85.95" + Yf + l + q + C + E + A5, 1, D + " +lat_0=38.7 +lon_0=-85.95" + Yf + l + q + C + J + A5, 1, D + Yg + KY + OP + l + q + C + E + A5, 1, D + Yg + KY + OP + l + q + C + J + A5, 1, D + " +lat_0=40.3" + SA + OQ + l + q + C + E + A5, 1, D + " +lat_0=40.3" + SA + OQ + l + q + C + J + A5, 1, D + " +lat_0=38.55" + Um + Qv + l + q + C + E + A5, 1, D + " +lat_0=38.55" + Um + Qv + l + q + C + J + A5, 1, D + " +lat_0=38.8" + UA + Qw + l + q + C + E + A5, 1, D + " +lat_0=38.8" + UA + Qw + l + q + C + J + A5, 1, D + Yh + HC + Lm + l + q + C + E + A5, 1, D + Yh + HC + Lm + l + q + C + J + A5, 1, D + " +lat_0=38.4" + St + Lk + l + q + C + E + A5, 1, D + " +lat_0=38.4" + St + Lk + l + q + C + J + A5, 1, D + Tw + Ss + " +k=1.000037" + l + q + C + E + A5, 1, D + Tw + Ss + " +k=1.000037" + l + q + C + J + A5, 1, D + Yg + Un + Ln + l + q + C + E + A5, 1, D + Yg + Un + Ln + l + q + C + J + A5, 1, D + Qu + " +lon_0=-86.75" + OP + l + q + C + E + A5, 1, D + Qu + " +lon_0=-86.75" + OP + l + q + C + J + A5, 1, D + " +lat_0=38.95" + Pr + Qv + l + q + C + E + A5, 1, D + " +lat_0=38.95" + Pr + Qv + l + q + C + J + A5, 1, D + " +lat_0=39.45" + Sr + Lm + l + q + C + E + A5, 1, D + " +lat_0=39.45" + Sr + Lm + l + q + C + J + A5, 1, D + Tv + KZ + Ln + l + q + C + E + A5, 1, D + Tv + KZ + Ln + l + q + C + J + A5, 1, D + Yd + Uo + Yf + l + q + C + E + A5, 1, D + Yd + Uo + Yf + l + q + C + J + A5, 1, D + Yi + " +lon_0=-86.7" + Og + l + q + C + E + A5, 1, D + Yi + " +lon_0=-86.7" + Og + l + q + C + J + A5, 1, D + " +lat_0=37.85" + Pq + Lk + l + q + C + E + A5, 1, D + " +lat_0=37.85" + Pq + Lk + l + q + C + J + A5, 1, D + Po + " +lon_0=-87.95" + Ye + l + q + C + E + A5, 1, D + Po + " +lon_0=-87.95" + Ye + l + q + C + J + A5, 1, D + " +lat_0=39.7" + Oj + " +k=1.000044" + l + q + C + E + A5, 1, D + " +lat_0=39.7" + Oj + " +k=1.000044" + l + q + C + J + A5, 1, D + Yj + " +lon_0=-85.3" + OQ + l + q + C + E + A5, 1, D + Yj + " +lon_0=-85.3" + OQ + l + q + C + J + A5, 1, D + Yh + Up + Zn + l + q + C + E + A5, 1, D + Yh + Up + Zn + l + q + C + J + A5, 1, D + Po + " +lon_0=-87.05 +k=1.000014" + l + q + C + E + A5, 1, D + Po + " +lon_0=-87.05 +k=1.000014" + l + q + C + J + A5, 1, D + Fo + SA + " +k=1.000041" + l + q + C + E + A5, 1, D + Fo + SA + " +k=1.000041" + l + q + C + J + A5, 1, D + Yj + OS + " +k=1.000017" + l + q + C + E + A5, 1, D + Yj + OS + " +k=1.000017" + l + q + C + J + A5, 1, D + " +lat_0=40.2" + KZ + Ln + l + q + C + E + A5, 1, D + " +lat_0=40.2" + KZ + Ln + l + q + C + J + A5, 1, D + Yi + Su + Lk + l + q + C + E + A5, 1, D + Yi + Su + Lk + l + q + C + J + A5, 1, D + Ty + St + Og + l + q + C + E + A5, 1, D + Ty + St + Og + l + q + C + J + A5, 1, D + Pp + " +lon_0=-85.25" + Ll + l + q + C + E + A5, 1, D + Pp + " +lon_0=-85.25" + Ll + l + q + C + J + A5, 3, K + C + B + A5, 1, I2 + JM + C + B + E + A5, 1, I2 + Me + C + B + E + A5, 1, I2 + Rb + C + B + E + A5, 152, D + WY + Bu + " +k=1.0000365285 +x_0=147218.6942 +y_0=0.0037" + C + E + A5, 1, D + WZ + Uq + " +k=1.0000495683 +x_0=172821.9461 +y_0=0.0017" + C + E + A5, 1, D + Wa + Ur + " +k=1.0000486665 +x_0=93150 +y_0=0.0029" + C + E + A5, 1, H + Wb + Wc + Us + " +k_0=1.0000331195 +x_0=228600.4575 +y_0=148551.4837" + C + E + A5, 1, D + Nj + " +lon_0=-88" + Og + " +x_0=31600 +y_0=4600" + C + E + A5, 1, D + Wd + Ut + " +k=1.0000382778 +x_0=175260.3502 +y_0=0.0048" + C + E + A5, 1, H + We + Wf + Uu + " +k_0=1.0000383841 +x_0=64008.1276 +y_0=59445.9043" + C + E + A5, 1, D + Wg + " +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8893 +y_0=0.0049" + C + E + A5, 1, H + Wh + Wi + Uv + " +k_0=1.0000391127 +x_0=60045.72 +y_0=44091.4346" + C + E + A5, 1, D + " +lat_0=43.6" + Uw + " +k=1.0000463003 +x_0=199949.1989 +y_0=0.0086" + C + E + A5, 1, H + Wj + Wk + Ux + " +k_0=1.00003498 +x_0=169164.3381 +y_0=111569.6134" + C + E + A5, 1, H + aQ + aR + Wl + " +k_0=1.0000349151 +x_0=113690.6274 +y_0=53703.1201" + C + E + A5, 1, H + Zs + Zt + Uy + " +k_0=1.0000384786 +x_0=247193.2944 +y_0=146591.9896" + C + E + A5, 1, D + Wm + Uz + " +k=1.0000346418 +x_0=263347.7263 +y_0=0.0076" + C + E + A5, 1, D + " +lat_0=44.4" + VA + " +k=1.0000187521 +x_0=158801.1176 +y_0=0.0023" + C + E + A5, 1, D + Wn + Oo + " +k=1.0000385418 +x_0=59131.3183 +y_0=0.0041" + C + E + A5, 1, D + Wo + VB + " +k=1.0000410324 +x_0=51816.104 +y_0=0.003" + C + E + A5, 1, H + Wp + Wq + VC + " +k_0=1.000035079 +x_0=120091.4402 +y_0=91687.92389999999" + C + E + A5, 1, D + Wr + VD + " +k=1.0000552095 +x_0=133502.6683 +y_0=0.0063" + C + E + A5, 1, D + Ws + VE + " +k=1.0000673004 +x_0=275844.5533 +y_0=0.0157" + C + E + A5, 1, D + Wt + " +lon_0=-90.8 +k=1.0000349452 +x_0=242316.4841 +y_0=0.01" + C + E + A5, 1, H + Wu + Wv + VF + " +k_0=1.0000390487 +x_0=170078.7403 +y_0=45830.2947" + C + E + A5, 1, H + Ww + Wx + Ka + " +k_0=1.0000344057 +x_0=150876.3018 +y_0=79170.7795" + C + E + A5, 1, D + Wy + VG + " +k=1.0000394961 +x_0=113081.0261 +y_0=0.0045" + C + E + A5, 1, D + Wz + VH + " +k=1.0000677153 +x_0=220980.4419 +y_0=0.008500000000000001" + C + E + A5, 1, D + XA + VI + " +k=1.0000353 +x_0=27000 +y_0=25000" + C + E + A5, 1, D + XB + VJ + " +k=1.0000260649 +x_0=185928.3728 +y_0=0.0009" + C + E + A5, 1, D + XC + Su + " +k=1.0000233704 +x_0=79857.7614 +y_0=0.0012" + C + E + A5, 1, D + XD + VK + " +k=1.0000319985 +x_0=130454.6598 +y_0=0.0033" + C + E + A5, 1, H + XE + XF + VL + " +k_0=1.0000627024 +x_0=198425.197 +y_0=105279.7829" + C + E + A5, 1, D + XG + VM + " +k=1.0000599003 +x_0=116129.0323 +y_0=0.0058" + C + E + A5, 1, H + XH + XI + " +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493 +y_0=55049.2669" + C + E + A5, 1, D + XJ + VN + " +k=1.0000234982 +x_0=238658.8794 +y_0=0.0032" + C + E + A5, 1, D + XK + VO + " +k=1.0000362499 +x_0=105461.0121 +y_0=0.0029" + C + E + A5, 1, H + XL + XM + VP + " +k_0=1.0000434122 +x_0=204521.209 +y_0=121923.9861" + C + E + A5, 1, D + XN + VQ + " +k=1.0000236869 +x_0=182880.3676 +y_0=0.0033" + C + E + A5, 1, H + XO + XP + VR + " +k_0=1.0000686968 +x_0=70104.1401 +y_0=57588.0346" + C + E + A5, 1, H + XQ + XR + VS + " +k_0=1.0000362977 +x_0=167640.3354 +y_0=86033.0876" + C + E + A5, 1, D + XS + Kb + " +k=1.0000433849 +x_0=141732.2823 +y_0=0.0059" + C + E + A5, 1, H + XT + XU + " +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.1128 +y_0=50022.1874" + C + E + A5, 1, D + XV + VT + " +k=1.0000649554 +x_0=227990.8546 +y_0=0.0109" + C + E + A5, 1, H + Zu + Zv + VU + " +k_0=1.0000375653 +x_0=202387.6048 +y_0=134255.4253" + C + E + A5, 1, D + XW + VV + " +k=1.0000337311 +x_0=146304.2926 +y_0=0.0068" + C + E + A5, 1, D + XX + VW + " +k=1.0000495976 +x_0=250546.1013 +y_0=0.0234" + C + E + A5, 1, D + XY + VX + " +k=1.0000373868 +x_0=185623.5716 +y_0=0.0051" + C + E + A5, 1, H + XZ + Xa + VY + " +k_0=1.0000573461 +x_0=216713.2336 +y_0=120734.1631" + C + E + A5, 1, D + LJ + VZ + " +k=1.000032144 +x_0=262433.3253 +y_0=0.009599999999999999" + C + E + A5, 1, D + LJ + Kb + " +k=1.0000381803 +x_0=165506.7302 +y_0=0.0103" + C + E + A5, 1, H + Xb + Xc + Va + " +k_0=1.0000597566 +x_0=187147.5744 +y_0=107746.7522" + C + E + A5, 1, D + Xd + Vb + " +k=1.0000361538 +x_0=256946.9138 +y_0=0.0041" + C + E + A5, 1, H + Xe + Xf + Vc + " +k_0=1.0000408158 +x_0=222504.4451 +y_0=47532.0602" + C + E + A5, 1, H + Xg + Xh + Vd + " +k_0=1.0000730142 +x_0=134417.0689 +y_0=50337.1092" + C + E + A5, 1, H + Xi + Xj + Ve + " +k_0=1.0000367192 +x_0=232562.8651 +y_0=111088.2224" + C + E + A5, 1, H + Xk + Xl + Vf + " +k_0=1.0000475376 +x_0=234086.8682 +y_0=188358.6058" + C + E + A5, 1, D + Xm + Vg + " +k=1.00003738 +x_0=120091.4415 +y_0=0.003" + C + E + A5, 1, D + Xn + Vh + " +k=1.0000346179 +x_0=208788.418 +y_0=0.0034" + C + E + A5, 1, D + Xo + Vi + " +k=1.0000333645 +x_0=185013.9709 +y_0=0.007" + C + E + A5, 1, H + Xp + Xq + Ka + " +k_0=1.0000392096 +x_0=120091.4402 +y_0=45069.7587" + C + E + A5, 1, H + Xr + Xs + Bu + " +k_0=1.0000421209 +x_0=208483.6173 +y_0=134589.754" + C + E + A5, 1, D + WY + Bu + " +k=1.0000365285 +x_0=147218.6941325883 +y_0=0.00365760731521463" + C + J + A5, 1, D + WZ + Uq + " +k=1.0000495683 +x_0=172821.945948692 +y_0=0.001828803657607315" + C + J + A5, 1, D + Wa + Ur + " +k=1.0000486665 +x_0=93150" + IX + C + J + A5, 1, H + Wb + Wc + Us + " +k_0=1.0000331195 +x_0=228600.4575057151 +y_0=148551.4835661671" + C + J + A5, 1, D + Nj + " +lon_0=-88" + Og + " +x_0=31599.99989839979 +y_0=4599.999898399797" + C + J + A5, 1, D + Wd + Ut + " +k=1.0000382778 +x_0=175260.3502159004" + Vj + C + J + A5, 1, H + We + Wf + Uu + " +k_0=1.0000383841 +x_0=64008.12771145543 +y_0=59445.90419100838" + C + J + A5, 1, D + Wg + " +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8892049784" + Vj + C + J + A5, 1, H + Wh + Wi + Uv + " +k_0=1.0000391127 +x_0=60045.72009144018 +y_0=44091.43449326898" + C + J + A5, 1, D + " +lat_0=43.6" + Uw + " +k=1.0000463003 +x_0=199949.198983998" + Vk + C + J + A5, 1, H + Wj + Wk + Ux + " +k_0=1.00003498 +x_0=169164.338023876 +y_0=111569.613512827" + C + J + A5, 1, H + aQ + aR + Wl + " +k_0=1.0000349151 +x_0=113690.6273812548 +y_0=53703.12024384048" + C + J + A5, 1, H + Zs + Zt + Uy + " +k_0=1.0000384786 +x_0=247193.2943865888 +y_0=146591.9896367793" + C + J + A5, 1, D + Wm + Uz + " +k=1.0000346418 +x_0=263347.7263906528 +y_0=0.00762001524003048" + C + J + A5, 1, D + " +lat_0=44.4" + VA + " +k=1.0000187521 +x_0=158801.1176022352 +y_0=0.002438404876809754" + C + J + A5, 1, D + Wn + Oo + " +k=1.0000385418 +x_0=59131.31826263652" + Vl + C + J + A5, 1, D + Wo + VB + " +k=1.0000410324 +x_0=51816.10393700787" + IX + C + J + A5, 1, H + Wp + Wq + VC + " +k_0=1.000035079" + Ys + " +y_0=91687.92390144781" + C + J + A5, 1, D + Wr + VD + " +k=1.0000552095 +x_0=133502.6682245364 +y_0=0.006400812801625603" + C + J + A5, 1, D + Ws + VE + " +k=1.0000673004 +x_0=275844.5532131065 +y_0=0.0158496316992634" + C + J + A5, 1, D + Wt + " +lon_0=-90.8 +k=1.0000349452 +x_0=242316.484023368 +y_0=0.01005842011684023" + C + J + A5, 1, H + Wu + Wv + VF + " +k_0=1.0000390487 +x_0=170078.7401574803 +y_0=45830.29484378968" + C + J + A5, 1, H + Ww + Wx + Ka + " +k_0=1.0000344057 +x_0=150876.3017526035 +y_0=79170.77937515875" + C + J + A5, 1, D + Wy + VG + " +k=1.0000394961 +x_0=113081.0261620523 +y_0=0.004572009144018288" + C + J + A5, 1, D + Wz + VH + " +k=1.0000677153 +x_0=220980.4419608839" + Vk + C + J + A5, 1, D + XA + VI + " +k=1.0000353 +x_0=27000 +y_0=24999.99989839979" + C + J + A5, 1, D + XB + VJ + " +k=1.0000260649 +x_0=185928.3727711455 +y_0=0.0009144018288036576" + C + J + A5, 1, D + XC + Su + " +k=1.0000233704 +x_0=79857.76154432308 +y_0=0.001219202438404877" + C + J + A5, 1, D + XD + VK + " +k=1.0000319985 +x_0=130454.6596901194" + Op + C + J + A5, 1, H + XE + XF + VL + " +k_0=1.0000627024 +x_0=198425.1968503937 +y_0=105279.7828803657" + C + J + A5, 1, D + XG + VM + " +k=1.0000599003 +x_0=116129.0322580645" + Vm + C + J + A5, 1, H + XH + XI + " +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493522987 +y_0=55049.26695453391" + C + J + A5, 1, D + XJ + VN + " +k=1.0000234982 +x_0=238658.8794513589" + IX + C + J + A5, 1, D + XK + VO + " +k=1.0000362499 +x_0=105461.0121412243" + IX + C + J + A5, 1, H + XL + XM + VP + " +k_0=1.0000434122 +x_0=204521.2090424181 +y_0=121923.9861823724" + C + J + A5, 1, D + XN + VQ + " +k=1.0000236869 +x_0=182880.3675895352" + Op + C + J + A5, 1, H + XO + XP + VR + " +k_0=1.0000686968 +x_0=70104.14020828041 +y_0=57588.03474726949" + C + J + A5, 1, H + XQ + XR + VS + " +k_0=1.0000362977 +x_0=167640.3352806706 +y_0=86033.08773177546" + C + J + A5, 1, D + XS + Kb + " +k=1.0000433849 +x_0=141732.2822453645" + Vm + C + J + A5, 1, H + XT + XU + " +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.11277622555 +y_0=50022.1874523749" + C + J + A5, 1, D + XV + VT + " +k=1.0000649554 +x_0=227990.8544577089 +y_0=0.01097282194564389" + C + J + A5, 1, H + Zu + Zv + VU + " +k_0=1.0000375653 +x_0=202387.6047752095 +y_0=134255.4254508509" + C + J + A5, 1, D + XW + VV + " +k=1.0000337311 +x_0=146304.2926085852 +y_0=0.006705613411226822" + C + J + A5, 1, D + XX + VW + " +k=1.0000495976 +x_0=250546.1013970028 +y_0=0.02346964693929388" + C + J + A5, 1, D + XY + VX + " +k=1.0000373868 +x_0=185623.5715519431 +y_0=0.005181610363220727" + C + J + A5, 1, H + XZ + Xa + VY + " +k_0=1.0000573461 +x_0=216713.2337312675 +y_0=120734.1631699263" + C + J + A5, 1, D + LJ + VZ + " +k=1.000032144 +x_0=262433.3251714504 +y_0=0.009448818897637795" + C + J + A5, 1, D + LJ + Kb + " +k=1.0000381803 +x_0=165506.7300990602 +y_0=0.01036322072644145" + C + J + A5, 1, H + Xb + Xc + Va + " +k_0=1.0000597566 +x_0=187147.5742951486 +y_0=107746.7521463043" + C + J + A5, 1, D + Xd + Vb + " +k=1.0000361538 +x_0=256946.9138938278" + Vl + C + J + A5, 1, H + Xe + Xf + Vc + " +k_0=1.0000408158 +x_0=222504.44500889 +y_0=47532.0603505207" + C + J + A5, 1, H + Xg + Xh + Vd + " +k_0=1.0000730142 +x_0=134417.0688341377 +y_0=50337.10927101854" + C + J + A5, 1, H + Xi + Xj + Ve + " +k_0=1.0000367192 +x_0=232562.8651257302 +y_0=111088.2224028448" + C + J + A5, 1, H + Xk + Xl + Vf + " +k_0=1.0000475376 +x_0=234086.8681737363 +y_0=188358.6059436119" + C + J + A5, 1, D + Xm + Vg + " +k=1.00003738 +x_0=120091.4414020828" + IX + C + J + A5, 1, D + Xn + Vh + " +k=1.0000346179 +x_0=208788.4178816358" + Op + C + J + A5, 1, D + Xo + Vi + " +k=1.0000333645 +x_0=185013.9709423419 +y_0=0.007010414020828041" + C + J + A5, 1, H + Xp + Xq + Ka + " +k_0=1.0000392096" + Ys + " +y_0=45069.7588011176" + C + J + A5, 1, H + Xr + Xs + Bu + " +k_0=1.0000421209 +x_0=208483.6172720346 +y_0=134589.7539243078" + C + J + A5, 41, K + C + A5, 6, D + L2 + " +lon_0=68.51666666666667 +k=1 +x_0=1300000" + RX + C + E + A5, 1, D + L2 + " +lon_0=71.51666666666667 +k=1" + aB + RX + C + E + A5, 1, D + L2 + " +lon_0=74.51666666666667 +k=1" + aC + RX + C + E + A5, 1, D + L2 + " +lon_0=77.51666666666667 +k=1" + aD + RX + C + E + A5, 1, D + L2 + " +lon_0=80.51666666666667 +k=1 +x_0=5300000" + RX + C + E + A5, 12308, D + L2 + Gl + " +k=1" + DP + N + M2 + G + E + A5, 1, D + L2 + HO + " +k=1" + Eg + N + M2 + G + E + A5, 1, D + L2 + IG + " +k=1" + Jt + N + M2 + G + E + A5, 1, D + L2 + LN + " +k=1" + IM + N + M2 + G + E + A5, 1, D + L2 + JS + " +k=1" + MS + N + M2 + G + E + A5, 1, D + L2 + PS + " +k=1" + MT + N + M2 + G + E + A5, 1, D + L2 + RL + " +k=1" + LY + N + M2 + G + E + A5, 1, D + L2 + QW + " +k=1" + Jp + N + M2 + G + E + A5, 1, D + L2 + RM + " +k=1" + LZ + N + M2 + G + E + A5, 1, D + L2 + HP + " +k=1" + HU + N + M2 + G + E + A5, 1, D + L2 + HQ + " +k=1" + Gw + N + M2 + G + E + A5, 1, D + L2 + Hd + " +k=1" + Hu + N + M2 + G + E + A5, 1, D + L2 + HR + " +k=1" + Hv + N + M2 + G + E + A5, 1, D + L2 + HS + " +k=1" + It + N + M2 + G + E + A5, 1, D + L2 + EN + " +k=1" + Hs + N + M2 + G + E + A5, 1, D + L2 + Fy + " +k=1" + Ht + N + M2 + G + E + A5, 1, D + L2 + Fm + " +k=1" + HV + N + M2 + G + E + A5, 1, D + L2 + Fr + " +k=1" + Hw + N + M2 + G + E + A5, 1, D + L2 + Ed + " +k=1" + HW + N + M2 + G + E + A5, 1, D + L2 + Fn + " +k=1" + Hx + N + M2 + G + E + A5, 1, D + L2 + Pf + " +k=1" + La + N + M2 + G + E + A5, 1, D + L2 + Od + " +k=1" + Hy + N + M2 + G + E + A5, 1, D + L2 + NY + " +k=1" + Hz + N + M2 + G + E + A5, 1, D + L2 + Pg + " +k=1" + IA + N + M2 + G + E + A5, 1, D + L2 + NZ + " +k=1" + IB + N + M2 + G + E + A5, 1, D + L2 + Lf + " +k=1" + Gx + N + M2 + G + E + A5, 1, D + L2 + KG + " +k=1" + IT + N + M2 + G + E + A5, 1, D + L2 + KH + " +k=1" + Gc + N + M2 + G + E + A5, 1, D + L2 + Lh + " +k=1" + IU + N + M2 + G + E + A5, 103, I2 + Ki + c + HX + E + A5, 1, I2 + Mf + c + HX + E + A5, 1, I2 + KD + c + HX + E + A5, 1, I2 + JZ + c + HX + E + A5, 111, I2 + Mi + o + x + r + E + A5, 1, I2 + NS + o + x + r + E + A5, 1, I2 + Mg + o + x + r + E + A5, 1, I2 + NT + o + x + r + E + A5, 1, I2 + Ot + o + x + r + E + A5, 1, I2 + Nv + o + x + r + E + A5, 1, I2 + PM + o + x + r + E + A5, 1, I2 + Re + o + x + r + E + A5, 1, I2 + SM + o + x + r + E + A5, 1, I2 + MA + o + x + r + E + A5, 91, I2 + Mi + o + x + CB + E + A5, 1, I2 + NS + o + x + CB + E + A5, 1, I2 + Mg + o + x + CB + E + A5, 1, I2 + NT + o + x + CB + E + A5, 1, I2 + Ot + o + x + CB + E + A5, 1, I2 + Nv + o + x + CB + E + A5, 1, I2 + PM + o + x + CB + E + A5, 1, I2 + Re + o + x + CB + E + A5, 80, I2 + Mf + R + Cm + E + A5, 1, I2 + KD + R + Cm + E + A5, 1, I2 + JZ + R + Cm + E + A5, 1, I2 + JM + R + Cm + E + A5, 1, I2 + Me + R + Cm + E + A5, 59, I2 + JM + R + Cm + E + A5, 39, I2 + JZ + M2 + NL + E + A5, 1, I2 + JM + M2 + NL + E + A5, 251, D + BY + " +lon_0=1 +k=1" + h + Hk + R + EV + Zb + E + A5, 1, D + BY + " +lon_0=1 +k=1" + s + N + R + EV + Zb + E + A5, 31, I2 + Io + o + R + Ec + E + A5, 1, I2 + MB + o + R + Ec + E + A5, 1, I2 + Nx + o + R + Ec + E + A5, 110, I2 + NR + o + Bc + BS + In + E + A5, 1, I2 + Ki + o + Bc + BS + In + E + A5, 1, I2 + Mf + o + Bc + BS + In + E + A5, 99, I2 + Ki + o + c + ER + E + A5, 1, I2 + Mf + o + c + ER + E + A5, 1, I2 + KD + o + c + ER + E + A5, 58, I2 + Ki + c + ER + E + A5, 1, I2 + Mf + c + ER + E + A5, 1, I2 + KD + c + ER + E + A5, 51, I2 + Mh + o + Y + Cj + E + A5, 1, I2 + Mi + o + Y + Cj + E + A5, 1, I2 + NS + o + Y + Cj + E + A5, 141, D + L2 + NU + EP + u + N + c + Jw + E + A5, 1, D + " +lat_0=13.17638888888889 +lon_0=-59.55972222222222 +k=0.9999986" + Zl + " +y_0=75000" + c + Jw + E + A5, 121, D + L2 + HP + " +k=1" + HU + N + M2 + U + E + A5, 1, D + L2 + HQ + " +k=1" + Gw + N + M2 + U + E + A5, 1, D + L2 + Hd + " +k=1" + Hu + N + M2 + U + E + A5, 1, D + L2 + HR + " +k=1" + Hv + N + M2 + U + E + A5, 1, D + L2 + HS + " +k=1" + It + N + M2 + U + E + A5, 1, D + L2 + EN + " +k=1" + Hs + N + M2 + U + E + A5, 1, D + L2 + Fy + " +k=1" + Ht + N + M2 + U + E + A5, 1, D + L2 + Fm + " +k=1" + HV + N + M2 + U + E + A5, 1, D + L2 + Fr + " +k=1" + Hw + N + M2 + U + E + A5, 1, D + L2 + Ed + " +k=1" + HW + N + M2 + U + E + A5, 1, D + L2 + Fn + " +k=1" + Hx + N + M2 + U + E + A5, 30, D + L2 + HP + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + HQ + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Hd + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + HR + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + HS + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + EN + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Fy + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Fm + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Fr + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Ed + " +k=1" + O2 + N + M2 + U + E + A5, 1, D + L2 + Fn + " +k=1" + O2 + N + M2 + U + E + A5, 37, H + Ks + Kt + Hr + HN + Bn + " +y_0=5400000" + R + " +pm=brussels" + E + A5, 280, Pu + Kj + HN + " +k_0=1" + s + N + Y + Gf + " +pm=bern" + E + A5, 1, Pu + Kj + Ow + " +k_0=1" + a + IK + Y + Gf + E + A5, 1, Pu + Kj + Ow + " +k_0=1" + s + N + Y + Gf + E + A5, 36, I2 + IC + R + ES + E + A5, 78, D + LK + " +lon_0=-77.08091666666667 +k=1" + BZ + AH + R + ES + E + A5, 1, D + LK + " +lon_0=-74.08091666666667 +k=1" + BZ + AH + R + ES + E + A5, 1, D + LK + " +lon_0=-71.08091666666667 +k=1" + BZ + AH + R + ES + E + A5, 1, D + LK + " +lon_0=-68.08091666666667 +k=1" + BZ + AH + R + ES + E + A5, 133, I2 + JN + o + c + GO + E + A5, 1, I2 + KC + o + c + GO + E + A5, 58, D + L2 + " +lon_0=11.5" + AP + O2 + Ak + c + GO + E + A5, 1, D + L2 + IH + AP + O2 + Ak + c + GO + E + A5, 79, D + m + UQ + " +k=1" + AV + N + C + B + E + A5, 1, D + m + MP + " +k=1" + Ci + N + C + B + E + A5, 1, D + m + Pe + " +k=1" + Bo + N + C + B + E + A5, 1, D + m + Qk + " +k=1" + DP + N + C + B + E + A5, 1, D + m + US + " +k=1" + Eg + N + C + B + E + A5, 1, D + m + Zc + " +k=1" + Jt + N + C + B + E + A5, 1, D + m + Nb + " +k=1" + IM + N + C + B + E + A5, 4, D + m + UQ + " +k=1" + AV + N + j + B + E + A5, 1, D + m + MP + " +k=1" + Ci + N + j + B + E + A5, 1, D + m + Pe + " +k=1" + Bo + N + j + B + E + A5, 1, D + m + Qk + " +k=1" + DP + N + j + B + E + A5, 1, D + m + US + " +k=1" + Eg + N + j + B + E + A5, 1, D + m + Zc + " +k=1" + Jt + N + j + B + E + A5, 1, D + m + Nb + " +k=1" + IM + N + j + B + E + A5, 4, D + m + UQ + " +k=1" + AV + N + R + Bs + E + A5, 1, D + m + MP + " +k=1" + Ci + N + R + Bs + E + A5, 1, D + m + Pe + " +k=1" + Bo + N + R + Bs + E + A5, 1, D + m + Qk + " +k=1" + DP + N + R + Bs + E + A5, 1, D + m + US + " +k=1" + Eg + N + R + Bs + E + A5, 1, D + m + Zc + " +k=1" + Jt + N + R + Bs + E + A5, 1, D + m + Nb + " +k=1" + IM + N + R + Bs + E + A5, 37, I2 + NR + o + Bc + BS + Ax + E + A5, 1, I2 + Ki + o + Bc + BS + Ax + E + A5, 40, D + L2 + Gj + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + UE + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + RI + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + Gl + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + SP + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + RJ + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + HO + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + " +lon_0=29 +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + QQ + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 2, D + L2 + IG + " +k=1" + s + N + Gk + Bc + BS + Ax + E + A5, 39, I2 + JN + AU + BN + Gi + E + A5, 59, H + " +lat_1=36" + GM + " +lon_0=9.9" + QL + O2 + Hk + AU + BN + Gi + E + A5, 1, H + Sd + Se + " +lon_0=9.9" + Nk + O2 + Hk + AU + BN + Gi + E + A5, 129, I2 + ID + o + R + GR + E + A5, 1, I2 + Io + o + R + GR + E + A5, 1, I2 + MB + o + R + GR + E + A5, 1, I2 + Nx + o + R + GR + E + A5, 1, I2 + Nr + o + R + GR + E + A5, 175, H + aL + " +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256" + AI + Hk + AU + BN + HI + E + A5, 70, H + aL + " +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256" + AI + Hk + AU + BN + HI + E + A5, 10, GU + " +lat_0=34.2 +lon_0=39.15 +k=0.9995341" + s + N + AU + BN + HI + E + A5, 211, D + Gm + " +lon_0=35 +k=1" + AI + " +y_0=1100000" + Gn + HY + E + A5, 1, D + Gm + QQ + " +k=1 +x_0=615000 +y_0=810000" + Gn + HY + E + A5, 1, D + Gm + HO + " +k=1" + EW + IK + Gn + HY + E + A5, 1, D + Gm + HO + " +k=1" + EW + Tj + Gn + HY + E + A5, 34, I2 + Ja + R + n + E + A5, 1, I2 + KA + R + n + E + A5, 1, I2 + Oq + R + n + E + A5, 1, I2 + QD + R + n + E + A5, 1, I2 + JN + R + n + E + A5, 1, I2 + KC + R + n + E + A5, 1, I2 + NR + R + n + E + A5, 1, I2 + Ki + R + n + E + A5, 1, I2 + Mf + R + n + E + A5, 1, I2 + KD + R + n + E + A5, 1, I2 + JZ + R + n + E + A5, 52, D + L2 + HN + AP + O2 + N + R + n + E + A5, 5, D + L2 + " +lon_0=5" + AP + O2 + N + R + n + E + A5, 144, I2 + JM + c + NM + E + A5, 1, I2 + Me + c + NM + E + A5, 460, Pu + " +lat_0=47.14439372222222 +lon_0=19.04857177777778 +k_0=0.99993 +x_0=650000" + IK + aK + RE + E + A5, 130, D + L2 + " +lon_0=94.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=97.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=100.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=103.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=106.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=109.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=112.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=115.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=118.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=121.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=124.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + Pj + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=130.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + Tk + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=136.5" + V2 + h + DQ + j + B + E + A5, 1, D + L2 + " +lon_0=139.5" + V2 + h + DQ + j + B + E + A5, 1, I2 + QF + IR + Bh + Av + E + A5, 1, I2 + Ny + IR + Bh + Av + E + A5, 1, I2 + Mh + IR + Bh + Av + E + A5, 1, I2 + Mi + IR + Bh + Av + E + A5, 1, I2 + NS + IR + Bh + Av + E + A5, 1, I2 + Mg + IR + Bh + Av + E + A5, 1, I2 + NT + IR + Bh + Av + E + A5, 14, I2 + QF + j + B + E + A5, 1, I2 + Ny + j + B + E + A5, 1, I2 + Mh + j + B + E + A5, 1, I2 + Mi + j + B + E + A5, 1, I2 + NS + j + B + E + A5, 1, I2 + Mg + j + B + E + A5, 1, I2 + NT + j + B + E + A5, 5, I2 + Ny + o + j + B + E + A5, 1, I2 + Mh + o + j + B + E + A5, 1, I2 + Mi + o + j + B + E + A5, 1, I2 + NS + o + j + B + E + A5, 1, I2 + Mg + o + j + B + E + A5, 1, I2 + NT + o + j + B + E + A5, 1, I2 + Ot + o + j + B + E + A5, 1, I2 + Nv + o + j + B + E + A5, 3, I2 + Ny + o + IR + Bh + Av + E + A5, 1, I2 + Mh + o + IR + Bh + Av + E + A5, 1, I2 + Mi + o + IR + Bh + Av + E + A5, 1, I2 + NS + o + IR + Bh + Av + E + A5, 1, I2 + Mg + o + IR + Bh + Av + E + A5, 1, I2 + NT + o + IR + Bh + Av + E + A5, 1, I2 + Ot + o + IR + Bh + Av + E + A5, 1, I2 + Nv + o + IR + Bh + Av + E + A5, 52, I2 + QF + By + Ay + JR + E + A5, 1, I2 + Ny + By + Ay + JR + E + A5, 1, I2 + Mh + By + Ay + JR + E + A5, 99, I2 + Ny + By + Ay + NN + E + A5, 1, I2 + Mh + By + Ay + NN + E + A5, 52, H + " +lat_1=18" + OX + Ld + " +k_0=1 +x_0=167638.49597 +y_0=121918.90616" + RB + RC + ML + A5, 100, H + " +lat_1=18" + OX + Ld + " +k_0=1" + Bv + " +y_0=150000" + i + TG + E + A5, 105, I2 + Te + By + Ay + JQ + E + A5, 1, I2 + QF + By + Ay + JQ + E + A5, 5, I2 + Rb + Lp + Hp + GQ + E + A5, 1, I2 + Rc + Lp + Hp + GQ + E + A5, 1, I2 + SO + Lp + Hp + GQ + E + A5, 29, I2 + Rc + Go + CT + BT + E + A5, 1, I2 + SO + Go + CT + BT + E + A5, 1, I2 + Td + Go + CT + BT + E + A5, 1, I2 + Te + Go + CT + BT + E + A5, 1, I2 + QF + Go + CT + BT + E + A5, 1, I2 + Ny + Go + CT + BT + E + A5, 23, H + Sc + " +lat_0=39.5 +lon_0=68 +k_0=0.99846154 +x_0=2153865.73916853 +y_0=2368292.194628102" + HK + Gv + GT + A5, 1, H + Qq + Li + " +lon_0=68" + Fz + JX + JY + HK + Gv + GT + A5, 1, H + UM + IQ + " +lon_0=74" + Fz + JX + JY + HK + Gv + GT + A5, 1, H + " +lat_1=19 +lat_0=19 +lon_0=80" + Fz + JX + JY + HK + Gv + GT + A5, 1, H + " +lat_1=12 +lat_0=12 +lon_0=80" + Fz + JX + JY + HK + Gv + GT + A5, 1, H + UM + IQ + Hq + Fz + " +x_0=2743185.69 +y_0=914395.23" + By + Ay + JQ + E + A5, 1, H + Qq + Li + " +lon_0=68" + Fz + " +x_0=2743196.4 +y_0=914398.8" + Lp + Hp + GQ + E + A5, 1, H + UM + IQ + " +lon_0=74" + Fz + " +x_0=2743196.4 +y_0=914398.8" + Lp + Hp + GQ + E + A5, 1, H + Qq + Li + " +lon_0=68" + Fz + PX + Qa + Go + CT + BT + E + A5, 1, H + UM + IQ + " +lon_0=74" + Fz + PX + Qa + Go + CT + BT + E + A5, 1, H + UM + IQ + Hq + Fz + PX + Qa + Go + CT + BT + E + A5, 1, H + " +lat_1=19 +lat_0=19 +lon_0=80" + Fz + PX + Qa + Go + CT + BT + E + A5, 1, H + UM + IQ + Hq + Fz + JX + JY + HK + Gv + GT + A5, 1, H + " +lat_1=12 +lat_0=12 +lon_0=80" + Fz + PX + Qa + Go + CT + BT + E + A5, 117, Ck + " +lat_0=1.287646666666667 +lon_0=103.8530022222222" + Zl + " +y_0=30000" + GL + Bz + BV + E + A5, 47, I2 + Ny + GL + Bz + BV + E + A5, 1, I2 + Mh + GL + Bz + BV + E + A5, 52, H + Qq + Li + JS + PZ + AV + aG + c + Qh + E + A5, 118, I2 + IC + R + Hc + E + A5, 1, I2 + Hi + R + Hc + E + A5, 1, I2 + Gz + R + Hc + E + A5, 97, I2 + Ik + R + AX + E + A5, 1, I2 + IC + R + AX + E + A5, 1, I2 + Hi + R + AX + E + A5, 1, I2 + Gz + R + AX + E + A5, 1, I2 + ID + R + AX + E + A5, 56, I2 + Ik + o + R + AX + E + A5, 1, I2 + IC + o + R + AX + E + A5, 1, I2 + Hi + o + R + AX + E + A5, 1, I2 + Gz + o + R + AX + E + A5, 1, I2 + ID + o + R + AX + E + A5, 1, I2 + Io + o + R + AX + E + A5, 9, D + " +lat_0=-6 +lon_0=-80.5 +k=0.99983008 +x_0=222000 +y_0=1426834.743" + R + AX + E + A5, 1, D + " +lat_0=-9.5 +lon_0=-76 +k=0.99932994 +x_0=720000 +y_0=1039979.159" + R + AX + E + A5, 1, D + " +lat_0=-9.5" + IL + " +k=0.99952992 +x_0=1324000 +y_0=1040084.558" + R + AX + E + A5, 107, D + Vp + " +lon_0=-1" + Rv + " +x_0=274319.51" + N + c + TR + E + A5, 231, I2 + QD + AU + BN + E + A5, 160, D + L2 + Fm + CP + O2 + N + i + GC + E + A5, 1, D + L2 + ZU + CP + O2 + N + i + GC + E + A5, 1, D + L2 + ZV + CP + O2 + N + i + GC + E + A5, 1, D + L2 + Fr + CP + O2 + N + i + GC + E + A5, 1, D + L2 + Ru + CP + O2 + N + i + GC + E + A5, 433, I2 + Ja + C + B + E + A5, 1, I2 + KA + C + B + E + A5, 1, I2 + Oq + C + B + E + A5, 1, I2 + QD + C + B + E + A5, 1, I2 + JN + C + B + E + A5, 1, I2 + KC + C + B + E + A5, 1, I2 + NR + C + B + E + A5, 1, I2 + Ki + C + B + E + A5, 1, I2 + Mf + C + B + E + A5, 1, I2 + KD + C + B + E + A5, 47, D + L2 + II + AP + O2 + N + C + B + E + A5, 48, I2 + JN + o + R + Qd + E + A5, 259, H + Sd + Se + Yk + Nk + O2 + Hk + AU + BN + IO + E + A5, 1, H + " +lat_1=29.7 +lat_0=29.7" + Yk + " +k_0=0.9996155960000001" + O2 + Hk + AU + BN + IO + E + A5, 2, H + " +lat_1=26.1 +lat_0=26.1" + Yk + " +k_0=0.999616304 +x_0=1200000" + Is + AU + BN + IO + E + A5, 1, H + " +lat_1=22.5 +lat_0=22.5" + Yk + " +k_0=0.999616437" + AV + Is + AU + BN + IO + E + A5, 42, I2 + KD + Y + Tc + E + A5, 94, I2 + QD + c + GS + E + A5, 1, I2 + JN + c + GS + E + A5, 59, D + Qi + " +lon_0=4.5" + Rv + " +x_0=230738.26" + N + c + GS + E + A5, 1, D + Qi + " +lon_0=8.5" + Rv + " +x_0=670553.98" + N + c + GS + E + A5, 1, D + Qi + " +lon_0=12.5" + Rv + " +x_0=1110369.7" + N + c + GS + E + A5, 239, I2 + JN + AU + BN + NO + E + A5, 60, I2 + JN + o + AU + BN + NO + E + A5, 9, I2 + SK + X + E + A5, 1, I2 + TV + X + E + A5, 1, I2 + Xz + X + E + A5, 1, I2 + TY + X + E + A5, 1, I2 + RG + X + E + A5, 1, I2 + Ro + X + E + A5, 1, I2 + RH + X + E + A5, 1, I2 + TW + X + E + A5, 1, I2 + TX + X + E + A5, 1, I2 + QE + X + E + A5, 1, I2 + Ns + X + E + A5, 1, I2 + Nt + X + E + A5, 1, I2 + Nu + X + E + A5, 1, I2 + Nw + X + E + A5, 1, I2 + NP + X + E + A5, 1, I2 + NQ + X + E + A5, 1, I2 + Ik + X + E + A5, 1, I2 + IC + X + E + A5, 1, I2 + Hi + X + E + A5, 1, I2 + Gz + X + E + A5, 1, I2 + ID + X + E + A5, 1, I2 + Io + X + E + A5, 7, D + IY + IV + Pc + e + N + X + J + A5, 1, D + Gm + OS + BG + e + N + X + J + A5, 1, CU + " +lat_0=57" + Ku + Kv + V2 + " +x_0=5000000.001016002 +y_0=-5000000.001016002" + KE + GZ + X + J + A5, 1, D + Ft + YN + V2 + e + N + X + J + A5, 1, D + Ft + YO + V2 + e + N + X + J + A5, 1, D + Ft + ON + V2 + e + N + X + J + A5, 1, D + Ft + Ms + V2 + e + N + X + J + A5, 1, D + Ft + KI + V2 + e + N + X + J + A5, 1, D + Ft + YP + V2 + " +x_0=213360.4267208534" + N + X + J + A5, 1, D + Ft + YQ + V2 + e + N + X + J + A5, 1, D + Ft + SW + V2 + Px + N + X + J + A5, 1, H + Kw + Kx + UK + YR + Bw + N + X + J + A5, 1, H + DW + Jn + y + HA + Z2 + N + X + J + A5, 1, H + DX + DY + AA + HA + Z2 + N + X + J + A5, 1, H + Ap + DZ + Ml + AJ + Z2 + N + X + J + A5, 1, H + LO + QS + Da + Mm + Z2 + N + X + J + A5, 1, H + Db + Dc + Mn + Ir + Z2 + N + X + J + A5, 1, H + Dd + De + Df + Iw + Z2 + N + X + J + A5, 2, D + Bl + Cn + V2 + e + N + X + J + A5, 1, D + Bl + Co + V2 + e + N + X + J + A5, 1, D + Bl + Iv + BG + e + N + X + J + A5, 1, H + Dx + Dy + BC + IF + Z2 + N + X + J + A5, 1, H + Dz + Mq + EA + IF + Z2 + N + X + J + A5, 1, H + " +lat_1=39.71666666666667 +lat_2=40.78333333333333" + y + Ba + Z2 + N + X + J + A5, 1, H + LP + LQ + CY + Ba + Z2 + N + X + J + A5, 1, H + Ap + Dg + f + Ba + Z2 + N + X + J + A5, 1, H + Dh + Mo + Di + Jq + Px + N + X + J + A5, 1, D + Ch + Cp + Mp + e + N + X + J + A5, 1, D + Aq + CR + Am + e + N + X + J + A5, 1, D + Aq + Ob + Am + e + N + X + J + A5, 1, H + LR + Dj + QT + LS + Z2 + N + X + J + A5, 6, D + Gm + Cq + V2 + e + N + X + J + A5, 1, D + Gm + Cr + V2 + e + N + X + J + A5, 1, D + p + Cs + BJ + e + N + X + J + A5, 1, D + p + Jb + BJ + e + N + X + J + A5, 1, D + p + Ix + BG + e + N + X + J + A5, 1, D + f + Cz + EQ + e + N + X + J + A5, 1, D + f + DA + Am + e + N + X + J + A5, 1, D + DM + DB + AO + e + N + X + J + A5, 1, D + DM + DC + AO + e + N + X + J + A5, 1, H + EB + EC + Fo + GG + Z2 + N + X + J + A5, 1, H + AY + ED + Fs + GG + Z2 + N + X + J + A5, 1, H + EE + EF + AQ + Fl + Z2 + N + X + J + A5, 1, H + EG + EH + f + CV + Z2 + N + X + J + A5, 1, H + Az + DV + DM + Jo + Z2 + N + X + J + A5, 1, H + " +lat_1=36.73333333333333 +lat_2=37.93333333333333" + AB + EY + Z2 + N + X + J + A5, 1, H + " +lat_1=31.16666666666667 +lat_2=32.66666666666666 +lat_0=30.66666666666667" + Hg + Z2 + N + X + J + A5, 1, H + " +lat_1=29.3 +lat_2=30.7 +lat_0=28.66666666666667" + Bi + Z2 + N + X + J + A5, 1, D + AL + HJ + V2 + e + N + X + J + A5, 1, D + BD + DD + AO + e + N + X + J + A5, 1, H + " +lat_1=38.3 +lat_2=39.45" + CY + Ld + " +x_0=243840.4876809754" + N + X + J + A5, 1, H + " +lat_1=41.71666666666667 +lat_2=42.68333333333333" + Ip + GE + Px + N + X + J + A5, 1, H + " +lat_1=41.28333333333333 +lat_2=41.48333333333333" + Ip + IL + " +x_0=60960.12192024384" + N + X + J + A5, 4, H + " +lat_1=47.03333333333333 +lat_2=48.63333333333333" + Iq + DE + Z2 + N + X + J + A5, 1, H + " +lat_1=45.61666666666667 +lat_2=47.05" + IP + Js + Z2 + N + X + J + A5, 1, H + " +lat_1=43.78333333333333 +lat_2=45.21666666666667" + Nj + Na + Z2 + N + X + J + A5, 1, D + Cb + Ct + Pc + e + N + X + J + A5, 1, D + IY + Bx + Am + e + N + X + J + A5, 1, D + Cd + RS + BG + e + N + X + J + A5, 1, D + Cd + Hg + BG + e + N + X + J + A5, 1, D + Id + RT + Am + e + N + X + J + A5, 1, H + " +lat_1=34.41666666666666 +lat_2=33.86666666666667 +lat_0=34.13333333333333" + IW + " +x_0=1276106.450596901 +y_0=1268253.006858014" + X + J + A5, 48, D + AK + HJ + V2 + BF + N + C + B + J + A5, 1, D + BD + DD + AO + HT + N + C + B + J + A5, 1, H + FU + FV + Iq + DE + An + Ao + C + B + J + A5, 1, H + Ma + FW + IP + Js + An + Ao + C + B + J + A5, 1, H + FX + FY + Nj + Na + An + Ao + C + B + J + A5, 1, H + JT + Jn + FZ + CS + AG + N + C + B + J + A5, 1, H + Mb + RN + Mr + Ga + a + N + C + B + J + A5, 1, H + Fg + Fh + QX + CR + a + N + C + B + J + A5, 1, D + AK + HJ + V2 + BF + N + C + B + J + A5, 1, D + BD + DD + AO + HT + N + C + B + J + A5, 1, H + FU + FV + Iq + DE + An + Ao + C + B + J + A5, 1, H + Ma + FW + IP + Js + An + Ao + C + B + J + A5, 1, H + FX + FY + Nj + Na + An + Ao + C + B + J + A5, 1, H + JT + Jn + FZ + CS + AG + N + C + B + J + A5, 1, H + Mb + RN + Mr + Ga + a + N + C + B + J + A5, 1, H + Fg + Fh + QX + CR + a + N + C + B + J + A5, 1, D + AK + HJ + V2 + BF + N + C + B + J + A5, 1, D + BD + DD + AO + HT + N + C + B + J + A5, 1, H + FU + FV + Iq + DE + An + Ao + C + B + J + A5, 1, H + Ma + FW + IP + Js + An + Ao + C + B + J + A5, 1, H + FX + FY + Nj + Na + An + Ao + C + B + J + A5, 1, H + JT + Jn + FZ + CS + AG + N + C + B + J + A5, 1, H + Mb + RN + Mr + Ga + a + N + C + B + J + A5, 1, H + Fg + Fh + QX + CR + a + N + C + B + J + A5, 21, D + L2 + ET + V2 + Ab + N + C + B + E + A5, 1, D + L2 + CR + V2 + Ab + N + C + B + E + A5, 1, D + L2 + NV + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Jh + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Bu + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Rs + V2 + Ab + N + C + B + E + A5, 1, D + L2 + OZ + V2 + Ab + N + C + B + E + A5, 1, D + L2 + " +lon_0=-53" + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Zd + V2 + Ab + N + C + B + E + A5, 2, I2 + SK + C + B + E + A5, 1, I2 + TV + C + B + E + A5, 1, I2 + Xz + C + B + E + A5, 1, I2 + TY + C + B + E + A5, 1, I2 + RG + C + B + E + A5, 1, I2 + Ro + C + B + E + A5, 1, I2 + RH + C + B + E + A5, 1, I2 + TW + C + B + E + A5, 1, I2 + TX + C + B + E + A5, 1, I2 + QE + C + B + E + A5, 1, I2 + Ns + C + B + E + A5, 1, I2 + Nt + C + B + E + A5, 1, I2 + Nu + C + B + E + A5, 1, I2 + Nw + C + B + E + A5, 1, I2 + NP + C + B + E + A5, 1, I2 + NQ + C + B + E + A5, 1, I2 + Ik + C + B + E + A5, 1, I2 + IC + C + B + E + A5, 1, I2 + Hi + C + B + E + A5, 1, I2 + Gz + C + B + E + A5, 1, I2 + ID + C + B + E + A5, 1, I2 + Io + C + B + E + A5, 1, I2 + MB + C + B + E + A5, 6, D + IY + IV + Pc + h + N + C + B + E + A5, 1, D + Gm + OS + BG + a + N + C + B + E + A5, 1, CU + " +lat_0=57" + Ku + Kv + V2 + LX + EO + KE + GZ + C + B + E + A5, 1, D + Ft + YN + V2 + O2 + N + C + B + E + A5, 1, D + Ft + YO + V2 + O2 + N + C + B + E + A5, 1, D + Ft + ON + V2 + O2 + N + C + B + E + A5, 1, D + Ft + Ms + V2 + O2 + N + C + B + E + A5, 1, D + Ft + KI + V2 + O2 + N + C + B + E + A5, 1, D + Ft + YP + V2 + O2 + N + C + B + E + A5, 1, D + Ft + YQ + V2 + O2 + N + C + B + E + A5, 1, D + Ft + SW + V2 + O2 + N + C + B + E + A5, 1, H + Kw + Kx + UK + YR + BZ + N + C + B + E + A5, 1, H + DW + Jn + y + HA + Bd + Ae + C + B + E + A5, 1, H + DX + DY + AA + HA + Bd + Ae + C + B + E + A5, 1, H + Ap + DZ + Ml + AJ + Bd + Ae + C + B + E + A5, 1, H + LO + QS + Da + Mm + Bd + Ae + C + B + E + A5, 1, H + Db + Dc + Mn + Ir + Bd + Ae + C + B + E + A5, 1, H + Dd + De + Df + Iw + Bd + Ae + C + B + E + A5, 2, D + Bl + Cn + V2 + EX + N + C + B + E + A5, 1, D + Bl + Co + V2 + EX + N + C + B + E + A5, 1, D + Bl + Iv + BG + EX + N + C + B + E + A5, 1, H + Dx + Dy + BC + IF + u + N + C + B + E + A5, 1, H + Dz + Mq + EA + IF + u + Is + C + B + E + A5, 1, H + Eh + Ei + y + Ba + Fw + Fx + C + B + E + A5, 1, H + LP + LQ + CY + Ba + Fw + Fx + C + B + E + A5, 1, H + Ap + Dg + f + Ba + Fw + Fx + C + B + E + A5, 1, H + Dh + Mo + Di + Jq + QG + QH + C + B + E + A5, 1, D + Ch + Cp + Mp + h + N + C + B + E + A5, 1, D + Aq + CR + Am + h + N + C + B + E + A5, 1, D + Aq + Ob + Am + h + N + C + B + E + A5, 1, H + LR + Dj + QT + LS + a + N + C + B + E + A5, 1, D + Kn + Sf + AO + O2 + N + C + B + E + A5, 1, D + Ko + KO + AO + O2 + N + C + B + E + A5, 1, D + GV + KI + Jl + O2 + N + C + B + E + A5, 1, D + Kp + Sg + Jl + O2 + N + C + B + E + A5, 1, D + Kq + KP + " +k=1" + O2 + N + C + B + E + A5, 1, D + Gm + Cq + V2 + h + N + C + B + E + A5, 1, D + Gm + Cr + V2 + EW + N + C + B + E + A5, 1, D + p + Cs + BJ + h + N + C + B + E + A5, 1, D + p + Jb + BJ + O2 + N + C + B + E + A5, 1, D + p + Ix + BG + CX + N + C + B + E + A5, 1, D + f + Cz + EQ + AI + N + C + B + E + A5, 1, D + f + DA + Am + EW + N + C + B + E + A5, 1, D + DM + DB + AO + BU + KJ + C + B + E + A5, 1, D + DM + DC + AO + HT + KJ + C + B + E + A5, 1, H + EB + EC + Fo + GG + AV + AH + C + B + E + A5, 1, H + AY + ED + Fs + GG + O2 + N + C + B + E + A5, 1, H + EE + EF + AQ + Fl + u + N + C + B + E + A5, 1, H + EG + EH + f + CV + u + Is + C + B + E + A5, 2, H + Ej + Ek + AB + EY + O2 + Ae + C + B + E + A5, 1, H + FS + FT + IY + Hg + BZ + N + C + B + E + A5, 1, H + OH + OI + OJ + Bi + BZ + N + C + B + E + A5, 1, D + AK + HJ + V2 + AI + N + C + B + E + A5, 1, D + BD + DD + AO + HT + N + C + B + E + A5, 1, H + MU + Nz + AA + Ld + u + N + C + B + E + A5, 1, H + El + Dk + Ip + GE + h + Mk + C + B + E + A5, 1, H + Em + En + Ip + IL + O2 + N + C + B + E + A5, 1, H + Eo + Ep + Eq + Jh + Tl + N + C + B + E + A5, 1, H + OA + Er + Es + BE + Pk + N + C + B + E + A5, 1, H + Bq + OB + Fo + BE + LU + N + C + B + E + A5, 1, H + FU + FV + Iq + DE + CX + EK + C + B + E + A5, 1, H + Ma + FW + IP + Js + CX + EK + C + B + E + A5, 1, H + FX + FY + Nj + Na + CX + EK + C + B + E + A5, 1, D + Hj + Ct + CP + AI + N + C + B + E + A5, 1, D + Hj + Bx + CP + EW + N + C + B + E + A5, 1, D + Cd + RS + BG + Bv + N + C + B + E + A5, 1, D + Cd + Hg + BG + O2 + N + C + B + E + A5, 1, D + Id + RT + Am + YC + N + C + B + E + A5, 41, I2 + JM + c + DO + E + A5, 1, I2 + Me + c + DO + E + A5, 80, I2 + Gz + R + TS + E + A5, 80, "+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150" + R + W + E + A5, 5, D + " +lat_0=-36.87986527777778 +lon_0=174.7643393611111" + V2 + AI + DN + R + W + E + A5, 1, D + " +lat_0=-37.76124980555556 +lon_0=176.46619725 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-38.62470277777778 +lon_0=177.8856362777778 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-39.65092930555556 +lon_0=176.6736805277778 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-39.13575830555556 +lon_0=174.22801175 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-39.51247038888889 +lon_0=175.6400368055556 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-40.24194713888889 +lon_0=175.4880996111111 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-40.92553263888889 +lon_0=175.6473496666667 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-41.30131963888888 +lon_0=174.7766231111111 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-40.71475905555556 +lon_0=172.6720465 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-41.27454472222222 +lon_0=173.2993168055555 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-41.28991152777778 +lon_0=172.1090281944444 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-41.81080286111111 +lon_0=171.5812600555556 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-42.33369427777778 +lon_0=171.5497713055556 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-42.68911658333333 +lon_0=173.0101333888889 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-41.54448666666666 +lon_0=173.8020741111111 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-42.88632236111111 +lon_0=170.9799935 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-43.11012813888889 +lon_0=170.2609258333333 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-43.97780288888889 +lon_0=168.606267 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-43.59063758333333 +lon_0=172.7271935833333 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-43.74871155555556 +lon_0=171.3607484722222 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-44.40222036111111 +lon_0=171.0572508333333 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-44.73526797222222 +lon_0=169.4677550833333 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-45.13290258333333 +lon_0=168.3986411944444 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-45.56372616666666 +lon_0=167.7388617777778 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-45.81619661111111 +lon_0=170.6285951666667 +k=1" + AI + DN + R + W + E + A5, 1, D + " +lat_0=-45.86151336111111 +lon_0=170.2825891111111" + Pc + AI + DN + R + W + E + A5, 1, D + " +lat_0=-46.60000961111111 +lon_0=168.342872 +k=1 +x_0=300002.66 +y_0=699999.58" + R + W + E + A5, 26, I2 + MA + o + R + W + E + A5, 1, I2 + Nq + o + R + W + E + A5, 1, I2 + PL + o + R + W + E + A5, 31, D + " +lat_0=-39 +lon_0=175.5 +k=1 +x_0=274319.5243848086 +y_0=365759.3658464114" + R + W + TU + A5, 1, D + Za + " +lon_0=171.5 +k=1 +x_0=457199.2073080143 +y_0=457199.2073080143" + R + W + TU + A5, 99, D + Fk + " +lon_0=-4.666666666666667 +k=1" + s + N + Hn + EL + Aa + SN + E + A5, 1, D + Fk + " +lon_0=-2.333333333333333 +k=1" + s + N + Hn + EL + Aa + SN + E + A5, 1, D + Fk + HN + " +k=1" + s + N + Hn + EL + Aa + SN + E + A5, 1, D + Fk + " +lon_0=2.5 +k=1" + s + N + Hn + EL + Aa + SN + E + A5, 1, D + Fk + Vr + " +k=1" + s + N + Hn + EL + Aa + SN + E + A5, 1, D + Fk + " +lon_0=10.16666666666667 +k=1" + s + N + Hn + EL + Aa + SN + E + A5, 1, D + Fk + " +lon_0=14.16666666666667 +k=1" + s + N + Hn + EL + Aa + SN + E + A5, 1, D + Fk + " +lon_0=18.33333333333333 +k=1" + s + N + Hn + EL + Aa + SN + E + A5, 31, I2 + KA + R + JL + E + A5, 64, D + BY + UZ + " +k=1 +x_0=180.598 +y_0=-86.98999999999999" + R + JL + E + A5, 7, H + PD + PE + " +lon_0=5.399999999999999 +k_0=0.99950908" + O2 + Hk + " +a=6376523" + RA + ZM + E + A5, 61, H + PD + PE + HN + " +k_0=0.999877341" + a + IK + AU + BN + Bk + Lv + E + A5, 1, H + " +lat_1=46.8 +lat_0=46.8" + HN + " +k_0=0.99987742" + a + IK + AU + BN + Bk + Lv + E + A5, 1, H + Xt + Xu + HN + " +k_0=0.999877499" + a + IK + AU + BN + Bk + Lv + E + A5, 1, H + Xv + Xw + HN + " +k_0=0.99994471 +x_0=234.358 +y_0=185861.369" + AU + BN + Bk + Lv + E + A5, 7, H + PD + PE + HN + " +k_0=0.999877341" + a + Tj + AU + BN + Bk + Lv + E + A5, 1, H + " +lat_1=46.8 +lat_0=46.8" + HN + " +k_0=0.99987742" + a + " +y_0=2200000" + AU + BN + Bk + Lv + E + A5, 1, H + Xt + Xu + HN + " +k_0=0.999877499" + a + " +y_0=3200000" + AU + BN + Bk + Lv + E + A5, 1, H + Xv + Xw + HN + " +k_0=0.99994471 +x_0=234.358 +y_0=4185861.369" + AU + BN + Bk + Lv + E + A5, 126, D + " +lat_0=49 +lon_0=-2 +k=0.9996012717" + u + " +y_0=-100000" + PV + Lx + E + A5, 491, Ck + LH + LI + Qx + " +y_0=126867.909" + Nc + Nd + DS + E + A5, 1, D + LH + LI + " +k=1" + Qx + " +y_0=1126867.909" + Nc + Nd + DS + E + A5, 1, Ck + LH + LI + Qx + " +y_0=1126867.909" + Nc + Nd + DS + E + A5, 39, I2 + JN + o + AU + BN + TH + E + A5, 116, I2 + Mh + o + C + B + E + A5, 1, I2 + Mi + o + C + B + E + A5, 1, I2 + NS + o + C + B + E + A5, 1, I2 + Mg + o + C + B + E + A5, 1, I2 + NT + o + C + B + E + A5, 1, I2 + Ot + o + C + B + E + A5, 1, I2 + Nv + o + C + B + E + A5, 1, I2 + PM + o + C + B + E + A5, 1, I2 + Re + o + C + B + E + A5, 1, I2 + SM + o + C + B + E + A5, 1, I2 + MA + o + C + B + E + A5, 46, D + L2 + Gl + " +k=1" + DP + N + M2 + F + E + A5, 1, D + L2 + HO + " +k=1" + Eg + N + M2 + F + E + A5, 1, D + L2 + IG + " +k=1" + Jt + N + M2 + F + E + A5, 1, D + L2 + LN + " +k=1" + IM + N + M2 + F + E + A5, 1, D + L2 + JS + " +k=1" + MS + N + M2 + F + E + A5, 1, D + L2 + PS + " +k=1" + MT + N + M2 + F + E + A5, 1, D + L2 + RL + " +k=1" + LY + N + M2 + F + E + A5, 1, D + L2 + QW + " +k=1" + Jp + N + M2 + F + E + A5, 1, D + L2 + RM + " +k=1" + LZ + N + M2 + F + E + A5, 1, D + L2 + HP + " +k=1" + HU + N + M2 + F + E + A5, 1, D + L2 + HQ + " +k=1" + Gw + N + M2 + F + E + A5, 1, D + L2 + Hd + " +k=1" + Hu + N + M2 + F + E + A5, 1, D + L2 + HR + " +k=1" + Hv + N + M2 + F + E + A5, 1, D + L2 + HS + " +k=1" + It + N + M2 + F + E + A5, 1, D + L2 + EN + " +k=1" + Hs + N + M2 + F + E + A5, 1, D + L2 + Fy + " +k=1" + Ht + N + M2 + F + E + A5, 1, D + L2 + Fm + " +k=1" + HV + N + M2 + F + E + A5, 1, D + L2 + Fr + " +k=1" + Hw + N + M2 + F + E + A5, 1, D + L2 + Ed + " +k=1" + HW + N + M2 + F + E + A5, 1, D + L2 + Fn + " +k=1" + Hx + N + M2 + F + E + A5, 1, D + L2 + Pf + " +k=1" + La + N + M2 + F + E + A5, 1, D + L2 + Od + " +k=1" + Hy + N + M2 + F + E + A5, 1, D + L2 + NY + " +k=1" + Hz + N + M2 + F + E + A5, 1, D + L2 + Pg + " +k=1" + IA + N + M2 + F + E + A5, 1, D + L2 + NZ + " +k=1" + IB + N + M2 + F + E + A5, 1, D + L2 + Lf + " +k=1" + Gx + N + M2 + F + E + A5, 1, D + L2 + KG + " +k=1" + IT + N + M2 + F + E + A5, 1, D + L2 + KH + " +k=1" + Gc + N + M2 + F + E + A5, 1, D + L2 + Lh + " +k=1" + IU + N + M2 + F + E + A5, 168, D + " +lat_0=24.45" + Vv + Jl + h + Hk + R + QO + E + A5, 391, GU + Xx + Yo + " +k=0.9999079" + s + N + Y + Fv + E + A5, 1, GU + Xx + Yo + " +k=0.9999079 +x_0=155000 +y_0=463000" + Y + Fv + E + A5, 109, UU + L2 + Nb + LX + Ak + x + Al + E + A5, 67, I2 + IC + x + Al + E + A5, 1, I2 + Hi + x + Al + E + A5, 1, I2 + Gz + x + Al + E + A5, 1, I2 + ID + x + Al + E + A5, 1, I2 + Io + x + Al + E + A5, 15, I2 + Ik + o + x + Al + E + A5, 1, I2 + IC + o + x + Al + E + A5, 1, I2 + Hi + o + x + Al + E + A5, 1, I2 + Gz + o + x + Al + E + A5, 1, I2 + ID + o + x + Al + E + A5, 1, I2 + Io + o + x + Al + E + A5, 1, I2 + MB + o + x + Al + E + A5, 1, I2 + Nx + o + x + Al + E + A5, 1, I2 + Nr + o + x + Al + E + A5, 25, I2 + Gz + o + R + Nn + E + A5, 1, I2 + ID + o + R + Nn + E + A5, 112, I2 + KC + o + HB + Bt + E + A5, 38, D + Pi + " +lon_0=11 +k=1" + s + N + Gk + HB + Bt + GK + A5, 2, D + Pi + " +lon_0=13 +k=1" + s + N + Gk + HB + Bt + GK + A5, 2, D + Pi + Gj + " +k=1" + s + N + Gk + HB + Bt + GK + A5, 2, D + Pi + UE + " +k=1" + s + N + Gk + HB + Bt + GK + A5, 2, D + Pi + RI + " +k=1" + s + N + Gk + HB + Bt + GK + A5, 2, D + Pi + Gl + " +k=1" + s + N + Gk + HB + Bt + GK + A5, 2, D + Pi + SP + " +k=1" + s + N + Gk + HB + Bt + GK + A5, 2, D + Pi + RJ + " +k=1" + s + N + Gk + HB + Bt + GK + A5, 317, CU + " +lat_0=-18.9 +lonc=44.10000000000001 +alpha=18.9" + EP + u + CO + " +gamma=18.9" + R + HD + Lv + E + A5, 36, I2 + JZ + o + R + HD + E + A5, 1, I2 + JM + o + R + HD + E + A5, 110, I2 + Mi + Lo + GD + E + A5, 1, I2 + NS + Lo + GD + E + A5, 21, CU + Qi + Yz + PF + Ph + " +x_0=590476.8714630401 +y_0=442857.653094361" + If + Lo + GD + " +to_meter=20.11676512155263" + A5, 1, CU + Qi + Yz + PF + Ph + " +x_0=590476.8727431979 +y_0=442857.6545573985" + If + Lo + GD + " +to_meter=0.3047994715386762" + A5, 1, CU + Qi + Yz + PF + Ph + " +x_0=590476.87 +y_0=442857.65" + If + Lo + GD + E + A5, 28, D + YA + " +lon_0=-8 +k=1" + h + KJ + PV + Bb + E + A5, 1, D + YA + " +lon_0=-8 +k=1.000035" + h + KJ + Ok + Bb + E + A5, 1, D + YA + " +lon_0=-8 +k=1.000035" + h + KJ + Ok + Bb + E + A5, 258, D + PT + Zz + V2 + s + N + Y + g + E + A5, 1, D + PT + NX + V2 + s + N + Y + g + E + A5, 1, D + GM + Ox + V2 + s + N + Y + g + E + A5, 1, D + PT + Tk + V2 + s + N + Y + g + E + A5, 1, D + GM + Oy + V2 + s + N + Y + g + E + A5, 1, D + GM + Rw + V2 + s + N + Y + g + E + A5, 1, D + GM + Oz + V2 + s + N + Y + g + E + A5, 1, D + GM + aA + V2 + s + N + Y + g + E + A5, 1, D + GM + PA + V2 + s + N + Y + g + E + A5, 1, D + Fs + PB + V2 + s + N + Y + g + E + A5, 1, D + IZ + ZH + V2 + s + N + Y + g + E + A5, 1, D + IZ + ZI + V2 + s + N + Y + g + E + A5, 1, D + IZ + ZJ + V2 + s + N + Y + g + E + A5, 1, D + IQ + " +lon_0=142" + V2 + s + N + Y + g + E + A5, 1, D + IQ + Pj + V2 + s + N + Y + g + E + A5, 1, D + IQ + " +lon_0=124" + V2 + s + N + Y + g + E + A5, 1, D + IQ + NX + V2 + s + N + Y + g + E + A5, 1, D + " +lat_0=20" + Rw + V2 + s + N + Y + g + E + A5, 1, D + IQ + ZR + V2 + s + N + Y + g + E + A5, 21, Ck + Vs + UX + " +x_0=86501.46392051999" + aS + Ee + Ef + JK + Vo + A5, 139, I2 + JM + Gn + E + A5, 1, I2 + Me + Gn + E + A5, 151, H + " +lat_1=36" + GM + SC + QL + O2 + Hk + AU + BN + JC + E + A5, 1, H + Sd + Se + SC + Nk + O2 + Hk + AU + BN + JC + E + A5, 1, H + " +lat_1=36" + GM + SC + QL + O2 + Hk + AU + BN + E + A5, 1, H + Sd + Se + SC + Nk + O2 + Hk + AU + BN + E + A5, 235, I2 + KA + c + Af + E + A5, 1, I2 + Oq + c + Af + E + A5, 1, I2 + QD + c + Af + E + A5, 1, I2 + JN + c + Af + E + A5, 59, H + " +lat_1=36" + GM + SC + QL + " +x_0=500135 +y_0=300090" + c + Af + E + A5, 1, H + Sd + Se + SC + Nk + " +x_0=500135 +y_0=300090" + c + Af + E + A5, 236, I2 + Ja + AU + BN + E + A5, 93, I2 + ID + R + HE + E + A5, 33, D + L2 + Nb + AP + O2 + N + R + HE + E + A5, 16, D + L2 + Vn + AP + O2 + N + R + HE + E + A5, 1, D + L2 + Vn + V2 + O2 + N + R + HE + E + A5, 80, D + L2 + RP + " +k=1" + s + EO + Y + Aw + Ls + E + A5, 1, D + L2 + QQ + " +k=1" + s + EO + Y + Aw + Ls + E + A5, 1, D + L2 + ZG + " +k=1" + s + EO + Y + Aw + Ls + E + A5, 1, D + L2 + PG + " +k=1" + s + EO + Y + z + E + A5, 1, D + L2 + Ig + " +k=1" + s + EO + Y + z + E + A5, 1, D + L2 + PH + " +k=1" + s + EO + Y + z + E + A5, 1, D + L2 + PG + " +k=1" + Bn + EO + Y + z + E + A5, 1, D + L2 + Ig + " +k=1 +x_0=450000" + EO + Y + z + E + A5, 1, D + L2 + PH + " +k=1" + YL + EO + Y + z + E + A5, 22, D + L2 + RP + " +k=1" + s + N + Y + Aw + Ls + E + A5, 1, D + L2 + QQ + " +k=1" + s + N + Y + Aw + Ls + E + A5, 1, D + L2 + ZG + " +k=1" + s + N + Y + Aw + Ls + E + A5, 1, D + L2 + PG + " +k=1" + Bn + N + Y + z + E + A5, 1, D + L2 + Ig + " +k=1 +x_0=450000" + N + Y + z + E + A5, 1, D + L2 + PH + " +k=1" + YL + N + Y + z + E + A5, 1, H + LM + Nh + " +lat_0=47.5" + Ig + u + Is + Y + z + E + A5, 1, D + L2 + RP + " +k=1" + Bn + N + Y + Aw + Ls + E + A5, 1, D + L2 + QQ + " +k=1 +x_0=450000" + N + Y + Aw + Ls + E + A5, 1, D + L2 + ZG + " +k=1" + YL + N + Y + Aw + Ls + E + A5, 10, H + Ks + Kt + Hr + " +lon_0=4.356939722222222 +x_0=150000.01256 +y_0=5400088.4378" + R + GP + E + A5, 70, H + " +lat_1=51.16666723333333 +lat_2=49.8333339" + Hr + " +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438" + R + GP + E + A5, 96, D + L2 + ZO + " +k=1" + Ci + N + Y + AC + E + A5, 1, D + L2 + KB + " +k=1" + Bo + N + Y + AC + E + A5, 1, D + L2 + IH + " +k=1" + DP + N + Y + AC + E + A5, 1, D + L2 + Gj + " +k=1" + Eg + N + Y + AC + E + A5, 59, I2 + Ja + AU + BN + No + E + A5, 1, I2 + KA + AU + BN + No + E + A5, 71, GU + " +lat_0=45.9 +lon_0=25.39246588888889 +k=0.9996667" + O2 + Ae + R + QP + E + A5, 238, I2 + JZ + j + MR + E + A5, 1, I2 + JM + j + MR + E + A5, 62, D + L2 + SQ + " +k=1" + O2 + N + C + Rr + E + A5, 64, I2 + Ns + C + B + E + A5, 1, I2 + Nt + C + B + E + A5, 1, I2 + Nu + C + B + E + A5, 1, I2 + Nw + C + B + E + A5, 1, I2 + NP + C + B + E + A5, 1, I2 + NQ + C + B + E + A5, 1, I2 + Ik + C + B + E + A5, 1, I2 + IC + C + B + E + A5, 1, I2 + Hi + C + B + E + A5, 1, I2 + Gz + C + B + E + A5, 1, I2 + ID + C + B + E + A5, 1, I2 + Io + C + B + E + A5, 1, I2 + Ik + o + C + B + E + A5, 1, I2 + IC + o + C + B + E + A5, 1, I2 + Hi + o + C + B + E + A5, 1, I2 + Gz + o + C + B + E + A5, 1, I2 + ID + o + C + B + E + A5, 1, I2 + Io + o + C + B + E + A5, 1, I2 + MB + o + C + B + E + A5, 1, I2 + Nx + o + C + B + E + A5, 1, I2 + Nr + o + C + B + E + A5, 1, I2 + Ik + C + B + E + A5, 1, I2 + IC + C + B + E + A5, 1, I2 + Hi + C + B + E + A5, 1, I2 + Gz + C + B + E + A5, 1, I2 + ID + C + B + E + A5, 1, I2 + Io + C + B + E + A5, 1, I2 + Ik + o + C + B + E + A5, 1, I2 + IC + o + C + B + E + A5, 1, I2 + Hi + o + C + B + E + A5, 1, I2 + Gz + o + C + B + E + A5, 1, I2 + ID + o + C + B + E + A5, 1, I2 + Io + o + C + B + E + A5, 1, I2 + MB + o + C + B + E + A5, 1, I2 + Nx + o + C + B + E + A5, 1, I2 + Nr + o + C + B + E + A5, 1, H + " +lat_1=48.71666666666667 +lat_2=47.85" + Ib + IS + Z2 + N + X + J + A5, 1, H + " +lat_1=47.88333333333333 +lat_2=46.45 +lat_0=45.83333333333334" + IS + Z2 + N + X + J + A5, 1, H + " +lat_1=46.4 +lat_2=44.86666666666667" + IZ + IS + Z2 + N + X + J + A5, 2, H + " +lat_1=41.85 +lat_2=42.81666666666667 +lat_0=41.33333333333334" + CS + Z2 + N + X + J + A5, 1, H + " +lat_1=40.28333333333333" + Dk + BY + " +lon_0=-99.5" + Z2 + N + X + J + A5, 1, D + CQ + DF + V2 + e + N + X + J + A5, 1, D + CQ + DG + V2 + e + N + X + J + A5, 1, D + CQ + DH + V2 + e + N + X + J + A5, 1, D + Fp + DI + AO + e + N + X + J + A5, 1, D + BA + " +lon_0=-74.66666666666667" + EQ + Z2 + N + X + J + A5, 1, D + Bl + Cu + Hm + e + N + X + J + A5, 1, D + Bl + Iy + V2 + e + N + X + J + A5, 1, D + Bl + Cv + Iz + e + N + X + J + A5, 1, D + Fs + " +lon_0=-74.33333333333333" + AO + e + N + X + J + A5, 1, D + Fs + Cw + Ad + e + N + X + J + A5, 1, D + Fs + Cx + Ad + e + N + X + J + A5, 2, H + " +lat_1=34.33333333333334 +lat_2=36.16666666666666" + LT + NW + Z2 + N + X + J + A5, 1, H + " +lat_1=47.43333333333333" + Xy + Ib + EZ + Z2 + N + X + J + A5, 1, H + " +lat_1=46.18333333333333 +lat_2=47.48333333333333" + Be + EZ + Z2 + N + X + J + A5, 1, H + " +lat_1=40.43333333333333 +lat_2=41.7" + BY + ET + Z2 + N + X + J + A5, 1, H + " +lat_1=38.73333333333333 +lat_2=40.03333333333333" + Ch + ET + Z2 + N + X + J + A5, 1, H + " +lat_1=35.56666666666667" + Du + QU + Fl + Z2 + N + X + J + A5, 1, H + " +lat_1=33.93333333333333 +lat_2=35.23333333333333" + Do + Fl + Z2 + N + X + J + A5, 1, H + " +lat_1=44.33333333333334" + Nh + AK + AJ + Z2 + N + X + J + A5, 1, H + " +lat_1=42.33333333333334 +lat_2=44" + p + AJ + Z2 + N + X + J + A5, 1, H + " +lat_1=40.88333333333333 +lat_2=41.95" + BB + Ea + Z2 + N + X + J + A5, 2, D + EI + GE + " +k=0.9999938" + e + N + X + J + A5, 1, H + " +lat_1=33.76666666666667 +lat_2=34.96666666666667" + PT + CR + Z2 + N + X + J + A5, 2, H + " +lat_1=32.33333333333334 +lat_2=33.66666666666666" + Dr + CR + Z2 + N + X + J + A5, 1, H + " +lat_1=44.41666666666666 +lat_2=45.68333333333333" + AL + CS + Z2 + N + X + J + A5, 1, H + " +lat_1=42.83333333333334 +lat_2=44.4" + EJ + Ag + Z2 + N + X + J + A5, 2, H + aL + " +lat_2=36.18333333333333" + QV + Jr + Z2 + N + X + J + A5, 1, H + " +lat_1=32.13333333333333 +lat_2=33.96666666666667" + Ds + " +lon_0=-97.5" + Z2 + N + X + J + A5, 1, H + " +lat_1=30.11666666666667 +lat_2=31.88333333333333" + Cb + Ag + Z2 + N + X + J + A5, 1, H + " +lat_1=28.38333333333333 +lat_2=30.28333333333333" + Dt + Ji + Z2 + N + X + J + A5, 1, H + " +lat_1=26.16666666666667 +lat_2=27.83333333333333" + Cc + CV + Z2 + N + X + J + A5, 1, H + " +lat_1=40.71666666666667 +lat_2=41.78333333333333" + Br + BI + Z2 + N + X + J + A5, 1, H + " +lat_1=39.01666666666667 +lat_2=40.65" + AQ + BI + Z2 + N + X + J + A5, 1, H + " +lat_1=37.21666666666667 +lat_2=38.35" + f + BI + Z2 + N + X + J + A5, 1, D + Fp + LW + JA + e + N + X + J + A5, 1, H + " +lat_1=38.03333333333333 +lat_2=39.2" + AA + GF + Z2 + N + X + J + A5, 1, H + Dn + " +lat_2=37.96666666666667" + AB + GF + Z2 + N + X + J + A5, 1, H + " +lat_1=47.5" + Xy + Ib + Cy + Z2 + N + X + J + A5, 1, H + " +lat_1=45.83333333333334 +lat_2=47.33333333333334" + Dv + AJ + Z2 + N + X + J + A5, 1, H + " +lat_1=39 +lat_2=40.25" + Mr + Ga + Z2 + N + X + J + A5, 1, H + " +lat_1=37.48333333333333 +lat_2=38.88333333333333" + QX + CR + Z2 + N + X + J + A5, 1, H + " +lat_1=45.56666666666667 +lat_2=46.76666666666667" + Dw + Bu + Z2 + N + X + J + A5, 1, H + " +lat_1=44.25" + Hl + AL + Bu + Z2 + N + X + J + A5, 1, H + " +lat_1=42.73333333333333 +lat_2=44.06666666666667" + PR + Bu + Z2 + N + X + J + A5, 1, D + LL + DJ + Am + e + N + X + J + A5, 1, D + LL + DK + Am + e + N + X + J + A5, 1, D + LL + JB + Am + e + N + X + J + A5, 1, D + LL + DL + Am + e + N + X + J + A5, 6, D + L2 + Ji + AP + k + N + X + J + A5, 1, D + L2 + Rs + AP + k + N + X + J + A5, 1, D + L2 + Jh + AP + k + N + X + J + A5, 1, D + L2 + CR + AP + k + N + X + J + A5, 14, D + L2 + " +lon_0=-53" + V2 + Ab + N + X + E + A5, 1, D + L2 + Zd + V2 + Ab + N + X + E + A5, 1, D + L2 + Tf + V2 + Ab + N + X + E + A5, 1, D + L2 + RQ + V2 + Ab + N + X + E + A5, 1, D + L2 + RR + V2 + Ab + N + X + E + A5, 1, D + L2 + Tg + V2 + Ab + N + X + E + A5, 12, H + UF + Nh + IZ + HJ + s + N + X + E + A5, 1, H + CD + CE + Cc + Bi + Z2 + N + X + J + A5, 1, H + LM + RK + MV + IS + a + N + C + B + E + A5, 4, H + JT + Jn + FZ + CS + O2 + N + C + B + E + A5, 3, D + CQ + DF + V2 + h + Tm + C + B + E + A5, 1, D + CQ + DG + V2 + O2 + Hh + C + B + E + A5, 1, D + CQ + DH + V2 + CX + LV + C + B + E + A5, 1, D + Fp + DI + AO + AI + N + C + B + E + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + E + A5, 1, D + Bl + Cu + Hm + OC + N + C + B + E + A5, 1, D + Bl + Iy + V2 + O2 + N + C + B + E + A5, 1, D + Bl + Cv + Iz + YD + N + C + B + E + A5, 1, D + BA + Gp + V2 + Bn + N + C + B + E + A5, 1, D + Fs + Cw + Ad + Bv + N + C + B + E + A5, 1, D + Fs + Cx + Ad + Qo + N + C + B + E + A5, 1, H + Dl + Dm + BB + Oc + AI + N + C + B + E + A5, 1, H + Et + Eu + LT + NW + Rh + N + C + B + E + A5, 1, H + BH + Ev + Ib + EZ + a + N + C + B + E + A5, 1, H + Ew + Ex + Be + EZ + a + N + C + B + E + A5, 1, H + OK + Fa + BY + ET + a + N + C + B + E + A5, 1, H + Fb + Fc + Ch + ET + a + N + C + B + E + A5, 1, H + Dn + Ey + QU + Fl + a + N + C + B + E + A5, 1, H + Ez + FA + Do + Fl + a + N + C + B + E + A5, 1, H + PP + CZ + AK + AJ + Ci + N + C + B + E + A5, 1, H + PQ + Ca + p + AJ + AV + N + C + B + E + A5, 1, H + MW + FB + BB + Ea + a + N + C + B + E + A5, 1, H + Dp + Dq + y + Ea + a + N + C + B + E + A5, 1, D + EI + GE + Lb + BU + N + C + B + E + A5, 3, H + FC + OD + Dr + CR + OE + N + C + B + E + A5, 1, H + Fd + Fe + AL + CS + a + N + C + B + E + A5, 1, H + OL + Ff + EJ + Ag + a + N + C + B + E + A5, 1, H + FD + MX + BC + MQ + a + N + C + B + E + A5, 1, H + FE + MY + QV + Jr + h + AH + C + B + E + A5, 1, H + FF + FG + Ds + CV + a + Cl + C + B + E + A5, 1, H + FH + FI + Cb + Ag + EW + Fq + C + B + E + A5, 1, H + FJ + FK + Dt + Ji + a + LV + C + B + E + A5, 1, H + CD + CE + Cc + CV + AI + Ju + C + B + E + A5, 1, H + AY + CF + Br + BI + O2 + AH + C + B + E + A5, 1, H + JF + CG + AQ + BI + O2 + Cl + C + B + E + A5, 1, H + JG + CH + f + BI + O2 + Fq + C + B + E + A5, 1, D + Fp + LW + JA + O2 + N + C + B + E + A5, 1, H + OF + FL + AA + GF + Bo + Cl + C + B + E + A5, 1, H + Az + Du + AB + GF + Bo + AH + C + B + E + A5, 1, H + BH + OG + Ib + Cy + O2 + N + C + B + E + A5, 1, H + FM + FN + Dv + AJ + O2 + N + C + B + E + A5, 1, H + Mb + RN + Mr + Ga + a + N + C + B + E + A5, 1, H + Fg + Fh + QX + CR + a + N + C + B + E + A5, 1, H + FO + FP + Dw + Bu + a + N + C + B + E + A5, 1, H + Jc + MZ + AL + Bu + a + N + C + B + E + A5, 1, H + FQ + FR + PR + Bu + a + N + C + B + E + A5, 1, D + CA + DJ + Ad + h + N + C + B + E + A5, 1, D + CA + DK + Ad + u + EK + C + B + E + A5, 1, D + CA + JB + Ad + a + N + C + B + E + A5, 1, D + CA + DL + Ad + CX + EK + C + B + E + A5, 3, H + GW + GX + GY + GA + h + IK + C + B + E + A5, 3, D + L2 + Ji + AP + k + N + C + B + J + A5, 1, D + L2 + Rs + AP + k + N + C + B + J + A5, 1, D + L2 + Jh + AP + k + N + C + B + J + A5, 1, D + L2 + CR + AP + k + N + C + B + J + A5, 14, D + L2 + " +lon_0=-53" + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Zd + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Tf + V2 + Ab + N + C + B + E + A5, 1, D + L2 + RQ + V2 + Ab + N + C + B + E + A5, 1, D + L2 + RR + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Tg + V2 + Ab + N + C + B + E + A5, 1, D + L2 + IL + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Th + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Ti + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Ga + V2 + Ab + N + C + B + E + A5, 1, D + L2 + ET + V2 + Ab + N + C + B + E + A5, 1, D + L2 + CR + V2 + Ab + N + C + B + E + A5, 1, D + L2 + NV + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Jh + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Bu + V2 + Ab + N + C + B + E + A5, 1, D + L2 + Rs + V2 + Ab + N + C + B + E + A5, 1, D + L2 + OZ + V2 + Ab + N + C + B + E + A5, 1, H + UF + Nh + IZ + HJ + s + N + C + B + E + A5, 1, H + CD + CE + " +lat_0=25.5" + Bi + BZ + N + C + B + E + A5, 2, I2 + SK + T + P + E + A5, 1, I2 + TV + T + P + E + A5, 1, I2 + Xz + T + P + E + A5, 1, I2 + TY + T + P + E + A5, 1, I2 + RG + T + P + E + A5, 1, I2 + Ro + T + P + E + A5, 1, I2 + RH + T + P + E + A5, 1, I2 + TW + T + P + E + A5, 1, I2 + TX + T + P + E + A5, 1, I2 + QE + T + P + E + A5, 1, I2 + Ns + T + P + E + A5, 1, I2 + Nt + T + P + E + A5, 1, I2 + Nu + T + P + E + A5, 1, I2 + Nw + T + P + E + A5, 1, I2 + NP + T + P + E + A5, 1, I2 + NQ + T + P + E + A5, 1, I2 + Ik + T + P + E + A5, 1, I2 + IC + T + P + E + A5, 1, I2 + Hi + T + P + E + A5, 1, I2 + Gz + T + P + E + A5, 1, I2 + ID + T + P + E + A5, 1, I2 + Io + T + P + E + A5, 1, I2 + MB + T + P + E + A5, 1, I2 + Nx + T + P + E + A5, 1, I2 + Nr + T + P + E + A5, 1, I2 + Os + T + P + E + A5, 1, I2 + SL + T + P + E + A5, 1, I2 + Ja + T + P + E + A5, 1, I2 + KA + T + P + E + A5, 1, I2 + Oq + T + P + E + A5, 1, I2 + QD + T + P + E + A5, 1, I2 + JN + T + P + E + A5, 1, I2 + KC + T + P + E + A5, 1, I2 + NR + T + P + E + A5, 1, I2 + Ki + T + P + E + A5, 1, I2 + Mf + T + P + E + A5, 1, I2 + KD + T + P + E + A5, 1, I2 + JZ + T + P + E + A5, 1, I2 + JM + T + P + E + A5, 1, I2 + Me + T + P + E + A5, 1, I2 + Rb + T + P + E + A5, 1, I2 + Rc + T + P + E + A5, 1, I2 + SO + T + P + E + A5, 1, I2 + Td + T + P + E + A5, 1, I2 + Te + T + P + E + A5, 1, I2 + QF + T + P + E + A5, 1, I2 + Ny + T + P + E + A5, 1, I2 + Mh + T + P + E + A5, 1, I2 + Mi + T + P + E + A5, 1, I2 + NS + T + P + E + A5, 1, I2 + Mg + T + P + E + A5, 1, I2 + NT + T + P + E + A5, 1, I2 + Ot + T + P + E + A5, 1, I2 + Nv + T + P + E + A5, 1, I2 + PM + T + P + E + A5, 1, I2 + Re + T + P + E + A5, 1, I2 + SM + T + P + E + A5, 1, I2 + MA + T + P + E + A5, 1, I2 + Nq + T + P + E + A5, 1, I2 + PL + T + P + E + A5, 41, I2 + SK + o + T + P + E + A5, 1, I2 + TV + o + T + P + E + A5, 1, I2 + Xz + o + T + P + E + A5, 1, I2 + TY + o + T + P + E + A5, 1, I2 + RG + o + T + P + E + A5, 1, I2 + Ro + o + T + P + E + A5, 1, I2 + RH + o + T + P + E + A5, 1, I2 + TW + o + T + P + E + A5, 1, I2 + TX + o + T + P + E + A5, 1, I2 + QE + o + T + P + E + A5, 1, I2 + Ns + o + T + P + E + A5, 1, I2 + Nt + o + T + P + E + A5, 1, I2 + Nu + o + T + P + E + A5, 1, I2 + Nw + o + T + P + E + A5, 1, I2 + NP + o + T + P + E + A5, 1, I2 + NQ + o + T + P + E + A5, 1, I2 + Ik + o + T + P + E + A5, 1, I2 + IC + o + T + P + E + A5, 1, I2 + Hi + o + T + P + E + A5, 1, I2 + Gz + o + T + P + E + A5, 1, I2 + ID + o + T + P + E + A5, 1, I2 + Io + o + T + P + E + A5, 1, I2 + MB + o + T + P + E + A5, 1, I2 + Nx + o + T + P + E + A5, 1, I2 + Nr + o + T + P + E + A5, 1, I2 + Os + o + T + P + E + A5, 1, I2 + SL + o + T + P + E + A5, 1, I2 + Ja + o + T + P + E + A5, 1, I2 + KA + o + T + P + E + A5, 1, I2 + Oq + o + T + P + E + A5, 1, I2 + QD + o + T + P + E + A5, 1, I2 + JN + o + T + P + E + A5, 1, I2 + KC + o + T + P + E + A5, 1, I2 + NR + o + T + P + E + A5, 1, I2 + Ki + o + T + P + E + A5, 1, I2 + Mf + o + T + P + E + A5, 1, I2 + KD + o + T + P + E + A5, 1, I2 + JZ + o + T + P + E + A5, 1, I2 + JM + o + T + P + E + A5, 1, I2 + Me + o + T + P + E + A5, 1, I2 + Rb + o + T + P + E + A5, 1, I2 + Rc + o + T + P + E + A5, 1, I2 + SO + o + T + P + E + A5, 1, I2 + Td + o + T + P + E + A5, 1, I2 + Te + o + T + P + E + A5, 1, I2 + QF + o + T + P + E + A5, 1, I2 + Ny + o + T + P + E + A5, 1, I2 + Mh + o + T + P + E + A5, 1, I2 + Mi + o + T + P + E + A5, 1, I2 + NS + o + T + P + E + A5, 1, I2 + Mg + o + T + P + E + A5, 1, I2 + NT + o + T + P + E + A5, 1, I2 + Ot + o + T + P + E + A5, 1, I2 + Nv + o + T + P + E + A5, 1, I2 + PM + o + T + P + E + A5, 1, I2 + Re + o + T + P + E + A5, 1, I2 + SM + o + T + P + E + A5, 1, I2 + MA + o + T + P + E + A5, 1, I2 + Nq + o + T + P + E + A5, 1, I2 + PL + o + T + P + E + A5, 41, I2 + SK + T + Q + E + A5, 1, I2 + TV + T + Q + E + A5, 1, I2 + Xz + T + Q + E + A5, 1, I2 + TY + T + Q + E + A5, 1, I2 + RG + T + Q + E + A5, 1, I2 + Ro + T + Q + E + A5, 1, I2 + RH + T + Q + E + A5, 1, I2 + TW + T + Q + E + A5, 1, I2 + TX + T + Q + E + A5, 1, I2 + QE + T + Q + E + A5, 1, I2 + Ns + T + Q + E + A5, 1, I2 + Nt + T + Q + E + A5, 1, I2 + Nu + T + Q + E + A5, 1, I2 + Nw + T + Q + E + A5, 1, I2 + NP + T + Q + E + A5, 1, I2 + NQ + T + Q + E + A5, 1, I2 + Ik + T + Q + E + A5, 1, I2 + IC + T + Q + E + A5, 1, I2 + Hi + T + Q + E + A5, 1, I2 + Gz + T + Q + E + A5, 1, I2 + ID + T + Q + E + A5, 1, I2 + Io + T + Q + E + A5, 1, I2 + MB + T + Q + E + A5, 1, I2 + Nx + T + Q + E + A5, 1, I2 + Nr + T + Q + E + A5, 1, I2 + Os + T + Q + E + A5, 1, I2 + SL + T + Q + E + A5, 1, I2 + Ja + T + Q + E + A5, 1, I2 + KA + T + Q + E + A5, 1, I2 + Oq + T + Q + E + A5, 1, I2 + QD + T + Q + E + A5, 1, I2 + JN + T + Q + E + A5, 1, I2 + KC + T + Q + E + A5, 1, I2 + NR + T + Q + E + A5, 1, I2 + Ki + T + Q + E + A5, 1, I2 + Mf + T + Q + E + A5, 1, I2 + KD + T + Q + E + A5, 1, I2 + JZ + T + Q + E + A5, 1, I2 + JM + T + Q + E + A5, 1, I2 + Me + T + Q + E + A5, 1, I2 + Rb + T + Q + E + A5, 1, I2 + Rc + T + Q + E + A5, 1, I2 + SO + T + Q + E + A5, 1, I2 + Td + T + Q + E + A5, 1, I2 + Te + T + Q + E + A5, 1, I2 + QF + T + Q + E + A5, 1, I2 + Ny + T + Q + E + A5, 1, I2 + Mh + T + Q + E + A5, 1, I2 + Mi + T + Q + E + A5, 1, I2 + NS + T + Q + E + A5, 1, I2 + Mg + T + Q + E + A5, 1, I2 + NT + T + Q + E + A5, 1, I2 + Ot + T + Q + E + A5, 1, I2 + Nv + T + Q + E + A5, 1, I2 + PM + T + Q + E + A5, 1, I2 + Re + T + Q + E + A5, 1, I2 + SM + T + Q + E + A5, 1, I2 + MA + T + Q + E + A5, 1, I2 + Nq + T + Q + E + A5, 1, I2 + PL + T + Q + E + A5, 41, I2 + SK + o + T + Q + E + A5, 1, I2 + TV + o + T + Q + E + A5, 1, I2 + Xz + o + T + Q + E + A5, 1, I2 + TY + o + T + Q + E + A5, 1, I2 + RG + o + T + Q + E + A5, 1, I2 + Ro + o + T + Q + E + A5, 1, I2 + RH + o + T + Q + E + A5, 1, I2 + TW + o + T + Q + E + A5, 1, I2 + TX + o + T + Q + E + A5, 1, I2 + QE + o + T + Q + E + A5, 1, I2 + Ns + o + T + Q + E + A5, 1, I2 + Nt + o + T + Q + E + A5, 1, I2 + Nu + o + T + Q + E + A5, 1, I2 + Nw + o + T + Q + E + A5, 1, I2 + NP + o + T + Q + E + A5, 1, I2 + NQ + o + T + Q + E + A5, 1, I2 + Ik + o + T + Q + E + A5, 1, I2 + IC + o + T + Q + E + A5, 1, I2 + Hi + o + T + Q + E + A5, 1, I2 + Gz + o + T + Q + E + A5, 1, I2 + ID + o + T + Q + E + A5, 1, I2 + Io + o + T + Q + E + A5, 1, I2 + MB + o + T + Q + E + A5, 1, I2 + Nx + o + T + Q + E + A5, 1, I2 + Nr + o + T + Q + E + A5, 1, I2 + Os + o + T + Q + E + A5, 1, I2 + SL + o + T + Q + E + A5, 1, I2 + Ja + o + T + Q + E + A5, 1, I2 + KA + o + T + Q + E + A5, 1, I2 + Oq + o + T + Q + E + A5, 1, I2 + QD + o + T + Q + E + A5, 1, I2 + JN + o + T + Q + E + A5, 1, I2 + KC + o + T + Q + E + A5, 1, I2 + NR + o + T + Q + E + A5, 1, I2 + Ki + o + T + Q + E + A5, 1, I2 + Mf + o + T + Q + E + A5, 1, I2 + KD + o + T + Q + E + A5, 1, I2 + JZ + o + T + Q + E + A5, 1, I2 + JM + o + T + Q + E + A5, 1, I2 + Me + o + T + Q + E + A5, 1, I2 + Rb + o + T + Q + E + A5, 1, I2 + Rc + o + T + Q + E + A5, 1, I2 + SO + o + T + Q + E + A5, 1, I2 + Td + o + T + Q + E + A5, 1, I2 + Te + o + T + Q + E + A5, 1, I2 + QF + o + T + Q + E + A5, 1, I2 + Ny + o + T + Q + E + A5, 1, I2 + Mh + o + T + Q + E + A5, 1, I2 + Mi + o + T + Q + E + A5, 1, I2 + NS + o + T + Q + E + A5, 1, I2 + Mg + o + T + Q + E + A5, 1, I2 + NT + o + T + Q + E + A5, 1, I2 + Ot + o + T + Q + E + A5, 1, I2 + Nv + o + T + Q + E + A5, 1, I2 + PM + o + T + Q + E + A5, 1, I2 + Re + o + T + Q + E + A5, 1, I2 + SM + o + T + Q + E + A5, 1, I2 + MA + o + T + Q + E + A5, 1, I2 + Nq + o + T + Q + E + A5, 1, I2 + PL + o + T + Q + E + A5, 41, I2 + SK + S + E + A5, 1, I2 + TV + S + E + A5, 1, I2 + Xz + S + E + A5, 1, I2 + TY + S + E + A5, 1, I2 + RG + S + E + A5, 1, I2 + Ro + S + E + A5, 1, I2 + RH + S + E + A5, 1, I2 + TW + S + E + A5, 1, I2 + TX + S + E + A5, 1, I2 + QE + S + E + A5, 1, I2 + Ns + S + E + A5, 1, I2 + Nt + S + E + A5, 1, I2 + Nu + S + E + A5, 1, I2 + Nw + S + E + A5, 1, I2 + NP + S + E + A5, 1, I2 + NQ + S + E + A5, 1, I2 + Ik + S + E + A5, 1, I2 + IC + S + E + A5, 1, I2 + Hi + S + E + A5, 1, I2 + Gz + S + E + A5, 1, I2 + ID + S + E + A5, 1, I2 + Io + S + E + A5, 1, I2 + MB + S + E + A5, 1, I2 + Nx + S + E + A5, 1, I2 + Nr + S + E + A5, 1, I2 + Os + S + E + A5, 1, I2 + SL + S + E + A5, 1, I2 + Ja + S + E + A5, 1, I2 + KA + S + E + A5, 1, I2 + Oq + S + E + A5, 1, I2 + QD + S + E + A5, 1, I2 + JN + S + E + A5, 1, I2 + KC + S + E + A5, 1, I2 + NR + S + E + A5, 1, I2 + Ki + S + E + A5, 1, I2 + Mf + S + E + A5, 1, I2 + KD + S + E + A5, 1, I2 + JZ + S + E + A5, 1, I2 + JM + S + E + A5, 1, I2 + Me + S + E + A5, 1, I2 + Rb + S + E + A5, 1, I2 + Rc + S + E + A5, 1, I2 + SO + S + E + A5, 1, I2 + Td + S + E + A5, 1, I2 + Te + S + E + A5, 1, I2 + QF + S + E + A5, 1, I2 + Ny + S + E + A5, 1, I2 + Mh + S + E + A5, 1, I2 + Mi + S + E + A5, 1, I2 + NS + S + E + A5, 1, I2 + Mg + S + E + A5, 1, I2 + NT + S + E + A5, 1, I2 + Ot + S + E + A5, 1, I2 + Nv + S + E + A5, 1, I2 + PM + S + E + A5, 1, I2 + Re + S + E + A5, 1, I2 + SM + S + E + A5, 1, I2 + MA + S + E + A5, 1, I2 + Nq + S + E + A5, 1, I2 + PL + S + E + A5, 1, BP + Hr + Qm + HN + Rd + Bd + Cl + S + E + A5, 3, D + L2 + Ji + AP + k + N + S + J + A5, 1, D + L2 + Rs + AP + k + N + S + J + A5, 1, D + L2 + Jh + AP + k + N + S + J + A5, 1, D + L2 + CR + AP + k + N + S + J + A5, 34, I2 + SK + o + S + E + A5, 1, I2 + TV + o + S + E + A5, 1, I2 + Xz + o + S + E + A5, 1, I2 + TY + o + S + E + A5, 1, I2 + RG + o + S + E + A5, 1, I2 + Ro + o + S + E + A5, 1, I2 + RH + o + S + E + A5, 1, I2 + TW + o + S + E + A5, 1, I2 + TX + o + S + E + A5, 1, I2 + QE + o + S + E + A5, 1, I2 + Ns + o + S + E + A5, 1, I2 + Nt + o + S + E + A5, 1, I2 + Nu + o + S + E + A5, 1, I2 + Nw + o + S + E + A5, 1, I2 + NP + o + S + E + A5, 1, I2 + NQ + o + S + E + A5, 1, I2 + Ik + o + S + E + A5, 1, I2 + IC + o + S + E + A5, 1, I2 + Hi + o + S + E + A5, 1, I2 + Gz + o + S + E + A5, 1, I2 + ID + o + S + E + A5, 1, I2 + Io + o + S + E + A5, 1, I2 + MB + o + S + E + A5, 1, I2 + Nx + o + S + E + A5, 1, I2 + Nr + o + S + E + A5, 1, I2 + Os + o + S + E + A5, 1, I2 + SL + o + S + E + A5, 1, I2 + Ja + o + S + E + A5, 1, I2 + KA + o + S + E + A5, 1, I2 + Oq + o + S + E + A5, 1, I2 + QD + o + S + E + A5, 1, I2 + JN + o + S + E + A5, 1, I2 + KC + o + S + E + A5, 1, I2 + NR + o + S + E + A5, 1, I2 + Ki + o + S + E + A5, 1, I2 + Mf + o + S + E + A5, 1, I2 + KD + o + S + E + A5, 1, I2 + JZ + o + S + E + A5, 1, I2 + JM + o + S + E + A5, 1, I2 + Me + o + S + E + A5, 1, I2 + Rb + o + S + E + A5, 1, I2 + Rc + o + S + E + A5, 1, I2 + SO + o + S + E + A5, 1, I2 + Td + o + S + E + A5, 1, I2 + Te + o + S + E + A5, 1, I2 + QF + o + S + E + A5, 1, I2 + Ny + o + S + E + A5, 1, I2 + Mh + o + S + E + A5, 1, I2 + Mi + o + S + E + A5, 1, I2 + NS + o + S + E + A5, 1, I2 + Mg + o + S + E + A5, 1, I2 + NT + o + S + E + A5, 1, I2 + Ot + o + S + E + A5, 1, I2 + Nv + o + S + E + A5, 1, I2 + PM + o + S + E + A5, 1, I2 + Re + o + S + E + A5, 1, I2 + SM + o + S + E + A5, 1, I2 + MA + o + S + E + A5, 1, I2 + Nq + o + S + E + A5, 1, I2 + PL + o + S + E + A5, 1, BP + m + " +lat_ts=-90" + HN + Rd + Bd + Cl + S + E + A5, 5, D + L2 + PN + AP + O2 + Ak + S + E + A5].reduce((acc, it, i2) => {
      if (i2 % 2 === 0) {
        const cur = acc.prev + it;
        const code = "EPSG:" + cur;
        acc.defs.push([code]);
        acc.prev = cur;
      } else {
        acc.defs[acc.defs.length - 1].push(it);
      }
      return acc;
    }, { defs: [], prev: 0 }).defs;
  }
});

// node_modules/proj4-fully-loaded/proj4-fully-loaded.js
var require_proj4_fully_loaded = __commonJS({
  "node_modules/proj4-fully-loaded/proj4-fully-loaded.js"(exports, module) {
    var proj43 = (init_lib(), __toCommonJS(lib_exports));
    var defs2 = require_proj4js_definitions();
    if ((typeof proj43 === "object" || typeof proj43 === "function") && typeof proj43.defs !== "function" && typeof proj43.default === "function" && typeof proj43.default.defs === "function") {
      proj43 = proj43.default;
    }
    proj43.defs(defs2);
    if (typeof define === "function" && define.amd) {
      define(function() {
        return proj43;
      });
    }
    if (typeof module === "object") {
      module.exports = proj43;
      module.exports.default = proj43;
    }
  }
});

// node_modules/proj4-collect/index.js
var require_proj4_collect = __commonJS({
  "node_modules/proj4-collect/index.js"(exports, module) {
    var merge = require_proj4_merge();
    var _proj4 = (init_lib(), __toCommonJS(lib_exports));
    var proj4_fully_loaded = require_proj4_fully_loaded();
    function proj4collect2(instances) {
      if (!instances) instances = [];
      if (_proj4) instances.push(_proj4);
      if (proj4_fully_loaded) instances.push(proj4_fully_loaded);
      if (typeof global === "object" && global.proj4) instances.push(global.proj4);
      if (typeof globalThis === "object" && globalThis.proj4) instances.push(globalThis.proj4);
      if (typeof self === "object" && self.proj4) instances.push(self.proj4);
      if (typeof window === "object" && window.proj4) instances.push(window.proj4);
      instances = instances.filter((it) => ![void 0, null].includes(it) && (typeof it !== "object" || Object.keys(it).length > 0));
      const merged = merge(instances);
      return merged;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return proj4collect2;
      });
    }
    if (typeof module === "object") {
      module.exports = proj4collect2;
      module.exports.default = proj4collect2;
    }
    if (typeof window === "object") {
      window.proj4collect = proj4collect2;
    }
    if (typeof self === "object") {
      self.proj4collect = proj4collect2;
    }
  }
});

// node_modules/get-depth/index.js
var require_get_depth = __commonJS({
  "node_modules/get-depth/index.js"(exports, module) {
    module.exports = function getDepth(arr) {
      const isArray = (arr2) => Array.isArray(arr2) || arr2 instanceof Int8Array || arr2 instanceof Uint8Array || arr2 instanceof Uint8ClampedArray || arr2 instanceof Int16Array || arr2 instanceof Uint16Array || arr2 instanceof Int32Array || arr2 instanceof Uint32Array || arr2 instanceof Float32Array || arr2 instanceof Float64Array || arr2 instanceof BigInt64Array || arr2 instanceof BigUint64Array;
      let depth = 0;
      let part = arr;
      while (isArray(part)) {
        depth++;
        part = part[0];
      }
      return depth;
    };
  }
});

// node_modules/reproject-line/reproject-line.js
var require_reproject_line = __commonJS({
  "node_modules/reproject-line/reproject-line.js"(exports, module) {
    function reproject_line(coords, reproject, options) {
      const debug_level = typeof options === "object" && typeof options.debug_level === "number" ? options.debug_level : 0;
      let densify = typeof options === "object" && typeof options.densify === "number" ? options.densify : 0;
      const strategy = typeof options === "object" && typeof options.strategy === "string" ? options.strategy : "auto";
      densify = Math.round(densify);
      if (debug_level >= 1) {
        console.log("[reproject-line] debug_level:", debug_level);
        console.log("[reproject-line] densify:", densify);
        console.log("[reproject-line] strategy:", strategy);
      }
      const out = [];
      let [xprev, yprev] = reproject(coords[0]);
      let mprev = null;
      let m = null;
      for (let i = 1; i < coords.length; i++) {
        const [x1, y1] = coords[i - 1];
        const [x2, y2] = coords[i];
        const xdist = x2 - x1;
        const ydist = y2 - y1;
        const xstep = xdist / (densify + 1);
        const ystep = ydist / (densify + 1);
        for (let ii = 1; ii <= densify; ii++) {
          const [rx, ry] = reproject([x1 + ii * xstep, y1 + ii * ystep]);
          m = (ry - yprev) / (rx - xprev);
          if (strategy === "always" || m !== mprev) {
            out.push([xprev, yprev]);
            mprev = m;
          }
          xprev = rx;
          yprev = ry;
        }
        const [rx2, ry2] = reproject([x2, y2]);
        m = (ry2 - yprev) / (rx2 - xprev);
        if (strategy === "always" || m !== mprev) {
          out.push([xprev, yprev]);
          mprev = m;
        }
        xprev = rx2;
        yprev = ry2;
      }
      out.push([xprev, yprev]);
      if (debug_level >= 3) {
        console.log("[reproject-line] returning", out);
      }
      return out;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return reproject_line;
      });
    }
    if (typeof module === "object") {
      module.exports = reproject_line;
      module.exports.default = reproject_line;
    }
  }
});

// node_modules/reproject-geojson/pluggable.js
var require_pluggable = __commonJS({
  "node_modules/reproject-geojson/pluggable.js"(exports, module) {
    var getDepth = require_get_depth();
    var reprojectLine = require_reproject_line();
    function reprojectGeoJSONPluggable(data, { densify, reproject }) {
      if (typeof reproject !== "function") {
        throw new Error(`[reproject-geojson] you must specify a reproject function`);
      }
      if (data.type === "FeatureCollection") {
        return {
          ...data,
          features: data.features.map((feature) => reprojectGeoJSONPluggable(feature, { densify, reproject }))
        };
      } else if (data.type === "Feature") {
        return {
          ...data,
          geometry: reprojectGeoJSONPluggable(data.geometry, { densify, reproject })
        };
      } else if (data.type === "LineString") {
        return {
          ...data,
          coordinates: reprojectLine(data.coordinates, reproject, { densify })
        };
      } else if (data.type === "MultiLineString") {
        return {
          ...data,
          coordinates: data.coordinates.map((line) => reprojectLine(line, reproject, { densify }))
        };
      } else if (data.type === "MultiPoint") {
        return {
          ...data,
          coordinates: data.coordinates.map((point3) => reproject(point3))
        };
      } else if (data.type === "MultiPolygon") {
        return {
          ...data,
          coordinates: data.coordinates.map((polygon) => {
            return polygon.map((ring) => reprojectLine(ring, reproject, { densify }));
          })
        };
      } else if (data.type === "Point") {
        return {
          ...data,
          coordinates: reproject(data.coordinates)
        };
      } else if (data.type === "Polygon") {
        return {
          ...data,
          coordinates: data.coordinates.map((ring) => reprojectLine(ring, reproject, { densify }))
        };
      } else if (Array.isArray(data)) {
        const depth = getDepth(data);
        if (depth === 1) {
          return reproject(data);
        } else if (depth === 2) {
          return data.map((coord) => reproject(coord));
        } else if (depth === 3) {
          return data.map((ring) => reprojectLine(ring, reproject, { densify }));
        } else if (depth === 4) {
          return data.map((polygon) => {
            return polygon.map((ring) => reprojectLine(ring, reproject, { densify }));
          });
        }
      }
      return data;
    }
    if (typeof define === "function" && define.amd)
      define(function() {
        return reprojectGeoJSONPluggable;
      });
    if (typeof module === "object") module.exports = reprojectGeoJSONPluggable;
    if (typeof window === "object") window.reprojectGeoJSONPluggable = reprojectGeoJSONPluggable;
    if (typeof self === "object") self.reprojectGeoJSONPluggable = reprojectGeoJSONPluggable;
  }
});

// node_modules/reproject-geojson/reproject-geojson.js
var require_reproject_geojson = __commonJS({
  "node_modules/reproject-geojson/reproject-geojson.js"(exports, module) {
    var proj43 = require_proj4_fully_loaded();
    var reprojectGeoJSONPluggable = require_pluggable();
    function reprojectGeoJSON3(data, { densify, from: _from = "EPSG:4326", to: _to = "EPSG:4326" }) {
      if (typeof _from === "number" || _from.match(/^\d+$/)) _from = "EPSG:" + _from;
      if (typeof _to === "number" || _to.match(/^\d+$/)) _to = "EPSG:" + _to;
      return reprojectGeoJSONPluggable(data, {
        densify,
        reproject: proj43(_from, _to).forward
      });
    }
    if (typeof define === "function" && define.amd)
      define(function() {
        return reprojectGeoJSON3;
      });
    if (typeof module === "object") module.exports = reprojectGeoJSON3;
    if (typeof window === "object") window.reprojectGeoJSON = reprojectGeoJSON3;
    if (typeof self === "object") self.reprojectGeoJSON = reprojectGeoJSON3;
  }
});

// node_modules/bbox-fns/merge.js
var require_merge = __commonJS({
  "node_modules/bbox-fns/merge.js"(exports, module) {
    "use strict";
    function merge(bboxes) {
      if (bboxes.length === 0) return;
      if (bboxes.length === 1) return bboxes[0];
      let [xmin, ymin, xmax, ymax] = bboxes[0];
      for (let i = 1; i < bboxes.length; i++) {
        const bbox = bboxes[i];
        if (bbox[0] < xmin) xmin = bbox[0];
        if (bbox[1] < ymin) ymin = bbox[1];
        if (bbox[2] > xmax) xmax = bbox[2];
        if (bbox[3] > ymax) ymax = bbox[3];
      }
      return [xmin, ymin, xmax, ymax];
    }
    module.exports = merge;
    module.exports.default = merge;
  }
});

// node_modules/bbox-fns/polygon.js
var require_polygon = __commonJS({
  "node_modules/bbox-fns/polygon.js"(exports, module) {
    function polygon([x0, y0, x1, y1]) {
      return [
        [
          [x0, y1],
          // top-left
          [x0, y0],
          // bottom-left
          [x1, y0],
          // bottom-right
          [x1, y1],
          // top-right
          [x0, y1]
          // top-left
        ]
      ];
    }
    module.exports = polygon;
    module.exports.default = polygon;
  }
});

// node_modules/typed-array-ranges/get-min.js
var require_get_min = __commonJS({
  "node_modules/typed-array-ranges/get-min.js"(exports, module) {
    var THEORETICAL_MINIMUMS = {
      Int8Array: -128,
      // Math.pow(-2, 8 - 1)
      Uint8Array: 0,
      Uint8ClampedArray: 0,
      Int16Array: -32768,
      // Math.pow(-2, 16 - 1)
      Uint16Array: 0,
      Int32Array: -2147483648,
      // Math.pow(-2, 32 - 1)
      Uint32Array: 0,
      // skipping Float32Array and Float64Array because it appears to be platform dependent
      BigInt64Array: -9223372036854776e3,
      // Math.pow(-2, 63)
      BigUint64Array: 0
    };
    var getMin = (array) => {
      if (typeof array !== "string" && array.constructor) array = array.constructor.name;
      return THEORETICAL_MINIMUMS[array];
    };
    module.exports = getMin;
  }
});

// node_modules/fast-min/index.js
var require_fast_min = __commonJS({
  "node_modules/fast-min/index.js"(exports, module) {
    var getTheoreticalMin = require_get_min();
    function fastMin2(numbers, { debug = false, no_data = void 0, theoretical_min = void 0 } = {
      debug: false,
      no_data: void 0,
      theoretical_min: void 0
    }) {
      if (debug) console.log("[fast-min] starting with numbers:", numbers.slice(0, 10));
      if (!numbers.length) {
        if (debug) console.error("[fast-min] Instead of an array of numbers, you passed in", numbers);
        throw new Error("[fast-min] You didn't pass in an array of numbers");
      }
      if (numbers.length === 0) throw new Error("[fast-min] You passed in an empty array");
      if (Array.isArray(no_data) === false) {
        if (typeof no_data === "number") {
          no_data = [no_data];
        } else {
          no_data = [];
        }
      }
      let min;
      const length = numbers.length;
      if (debug) console.log("[fast-min] constructor:", numbers.constructor.name);
      if (theoretical_min === void 0 || theoretical_min === null)
        theoretical_min = getTheoreticalMin(numbers.constructor.name);
      if (debug) console.log("[fast-min] theoretical minimunm is", theoretical_min);
      for (let i = 0; i < length; i++) {
        const value = numbers[i];
        if (typeof value === "number" && value === value && no_data.indexOf(value) === -1) {
          if (typeof min === "undefined") {
            min = value;
          } else if (value < min) {
            min = value;
          }
          if (typeof theoretical_min === "number" && value <= theoretical_min) {
            if (debug) console.log("[fast-min] found minimum value of " + value + " at index " + i + " of " + length);
            min = value;
            break;
          }
        }
      }
      if (debug) console.log("[fast-min] returning", min);
      return min;
    }
    if (typeof module === "object") {
      module.exports = fastMin2;
      module.exports.default = fastMin2;
    }
    if (typeof self === "object") {
      self.fastMin = fastMin2;
    }
    if (typeof window === "object") {
      window.fastMin = fastMin2;
    }
  }
});

// node_modules/typed-array-ranges/get-max.js
var require_get_max = __commonJS({
  "node_modules/typed-array-ranges/get-max.js"(exports, module) {
    var THEORETICAL_MAXIMUMS = {
      Int8Array: 127,
      // Math.pow(2, 8 - 1) - 1
      Uint8Array: 255,
      // Math.pow(2, 8) - 1
      Uint8ClampedArray: 255,
      // Math.pow(2, 8) - 1
      Int16Array: 32767,
      // Math.pow(2, 16 - 1) - 1
      Uint16Array: 65535,
      // Math.pow(2, 16) - 1
      Int32Array: 2147483647,
      // Math.pow(2, 32 - 1) - 1
      Uint32Array: 4294967295,
      // Math.pow(2, 32) - 1
      Float32Array: 34e37,
      // 3.4 * Math.pow(10, 38)
      Float64Array: 1.8 * Math.pow(10, 308) === Infinity ? void 0 : 1.8 * Math.pow(10, 308),
      BigInt64Array: 9223372036854776e3,
      // Math.pow(2, 64 - 1) - 1
      BigUint64Array: 18446744073709552e3
      // Math.pow(2, 64) - 1
    };
    var getMax = (array) => {
      if (typeof array !== "string" && array.constructor) array = array.constructor.name;
      return THEORETICAL_MAXIMUMS[array];
    };
    module.exports = getMax;
  }
});

// node_modules/fast-max/index.js
var require_fast_max = __commonJS({
  "node_modules/fast-max/index.js"(exports, module) {
    var getTheoreticalMax = require_get_max();
    function fastMax2(numbers, { debug = false, no_data = void 0, theoretical_max = void 0 } = {
      debug: false,
      no_data: void 0,
      theoretical_max: void 0
    }) {
      if (debug) console.log("[fast-max] starting with numbers:", numbers.slice(0, 10));
      if (!numbers.length) {
        if (debug) console.error("[fast-max] Instead of an array of numbers, you passed in", numbers);
        throw new Error("[fast-max] You didn't pass in an array of numbers");
      }
      if (numbers.length === 0) throw new Error("[fast-max] You passed in an empty array");
      if (Array.isArray(no_data) === false) {
        if (typeof no_data === "number") {
          no_data = [no_data];
        } else {
          no_data = [];
        }
      }
      let max;
      const length = numbers.length;
      if (debug) console.log("[fast-max] constructor:", numbers.constructor.name);
      if (theoretical_max === void 0 || theoretical_max === null)
        theoretical_max = getTheoreticalMax(numbers.constructor.name);
      if (debug) console.log("[fast-max] theoretical maximunm is", theoretical_max);
      for (let i = 0; i < length; i++) {
        const value = numbers[i];
        if (typeof value === "number" && value === value && no_data.indexOf(value) === -1) {
          if (typeof max === "undefined") {
            max = value;
          } else if (value > max) {
            max = value;
          }
          if (typeof theoretical_max === "number" && value >= theoretical_max) {
            if (debug) console.log("[fast-max] found maximum value of " + value + " at index " + i + " of " + length);
            max = value;
            break;
          }
        }
      }
      if (debug) console.log("[fast-max] returning", max);
      return max;
    }
    if (typeof module === "object") {
      module.exports = fastMax2;
      module.exports.default = fastMax2;
    }
    if (typeof self === "object") {
      self.fastMax = fastMax2;
    }
    if (typeof window === "object") {
      window.fastMax = fastMax2;
    }
  }
});

// node_modules/preciso/compare_positive.js
var require_compare_positive = __commonJS({
  "node_modules/preciso/compare_positive.js"(exports, module) {
    "use strict";
    function compare_positive(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index, blen - b_adjusted_dot_index);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let i = 0;
      while (i < imax) {
        const ai = i - aoffset;
        const achar = ai === a_adjusted_dot_index ? "." : a[ai] || "0";
        const bi = i - boffset;
        const bchar = bi === b_adjusted_dot_index ? "." : b[bi] || "0";
        if (achar !== bchar) {
          if (achar > bchar) return ">";
          else if (achar < bchar) return "<";
        }
        i++;
      }
      return "=";
    }
    module.exports = compare_positive;
    module.exports.default = compare_positive;
  }
});

// node_modules/preciso/expand.js
var require_expand = __commonJS({
  "node_modules/preciso/expand.js"(exports, module) {
    "use strict";
    function expand(n) {
      if (n[0] === "+") n = n.substring(1);
      const sign = n[0] === "-" ? "-" : "";
      if (sign === "-") n = n.substring(1);
      const index_of_e = n.indexOf("e");
      if (index_of_e === -1) return sign + n;
      let index_of_dot = n.indexOf(".");
      if (index_of_dot === -1) index_of_dot = index_of_e;
      const shift = Number(n.substring(index_of_e + 1));
      const base = n.substring(0, index_of_e).replace(".", "");
      const normshift = index_of_dot + shift;
      const baselen = base.length;
      if (normshift >= baselen) {
        const zct = normshift - baselen;
        let result2 = base;
        for (let i = 0; i < zct; i++) result2 += "0";
        return sign + result2;
      } else if (normshift < 0) {
        let result2 = "0.";
        for (let i = 0; i > normshift; i--) result2 += "0";
        result2 += base;
        return sign + result2;
      } else {
        return sign + base.substring(0, normshift) + "." + base.substring(normshift);
      }
    }
    module.exports = expand;
    module.exports.default = expand;
  }
});

// node_modules/preciso/clean.js
var require_clean = __commonJS({
  "node_modules/preciso/clean.js"(exports, module) {
    "use strict";
    var expand = require_expand();
    module.exports = function clean(n) {
      if (n[0] === "+") n = n.substring(1);
      n = expand(n);
      n = n.replace(/^0+(?=\d)/, "");
      if (n.includes(".")) n = n.replace(/\.?0+$/, "");
      if (n === "") n = "0";
      if (n === "-0") n = "0";
      return n;
    };
  }
});

// node_modules/preciso/constants/max_safe_integer.js
var require_max_safe_integer = __commonJS({
  "node_modules/preciso/constants/max_safe_integer.js"(exports, module) {
    "use strict";
    var MAX_SAFE_INTEGER = 9007199254740991;
    module.exports = { MAX_SAFE_INTEGER };
  }
});

// node_modules/preciso/constants/max_safe_integer_length.js
var require_max_safe_integer_length = __commonJS({
  "node_modules/preciso/constants/max_safe_integer_length.js"(exports, module) {
    "use strict";
    var { MAX_SAFE_INTEGER } = require_max_safe_integer();
    var MAX_SAFE_INTEGER_LENGTH = MAX_SAFE_INTEGER.toString().length - 1;
    module.exports = { MAX_SAFE_INTEGER_LENGTH };
  }
});

// node_modules/preciso/long_addition.js
var require_long_addition = __commonJS({
  "node_modules/preciso/long_addition.js"(exports, module) {
    "use strict";
    var { MAX_SAFE_INTEGER_LENGTH } = require_max_safe_integer_length();
    function long_addition(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      if (aidx === -1 && bidx === -1 && alen < MAX_SAFE_INTEGER_LENGTH && blen < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) + Number(b)).toFixed();
      }
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index - 1, blen - b_adjusted_dot_index - 1);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let result2 = "";
      let carried = 0;
      let i = imax;
      if (right > 0) {
        while (i > imax - right) {
          const achar = a[i - aoffset] || "0";
          const bchar = b[i - boffset] || "0";
          let n = Number(achar) + Number(bchar) + carried;
          if (n >= 10) {
            n -= 10;
            carried = 1;
          } else {
            carried = 0;
          }
          if (result2 !== "" || n !== 0) {
            result2 = n + result2;
          }
          i--;
        }
        if (result2) result2 = "." + result2;
        i--;
      }
      if (left > 0) {
        while (i >= 0) {
          const achar = a[i - aoffset] || "0";
          const bchar = b[i - boffset] || "0";
          let n = Number(achar) + Number(bchar) + carried;
          if (n >= 10) {
            n -= 10;
            carried = 1;
          } else {
            carried = 0;
          }
          result2 = n + result2;
          i--;
        }
      }
      if (carried === 1) {
        result2 = carried + result2;
      }
      if (result2[0] === ".") result2 = "0" + result2;
      return result2;
    }
    module.exports = long_addition;
    module.exports.default = long_addition;
  }
});

// node_modules/preciso/long_subtraction.js
var require_long_subtraction = __commonJS({
  "node_modules/preciso/long_subtraction.js"(exports, module) {
    "use strict";
    var { MAX_SAFE_INTEGER_LENGTH } = require_max_safe_integer_length();
    function long_subtraction(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      if (aidx === -1 && bidx === -1 && alen < MAX_SAFE_INTEGER_LENGTH && blen < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) - Number(b)).toFixed();
      }
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index - 1, blen - b_adjusted_dot_index - 1);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let result2 = "";
      let borrowed = 0;
      let i = imax;
      if (right > 0) {
        while (i > imax - right) {
          let top = a[i - aoffset] || "0";
          let bottom = b[i - boffset] || "0";
          top -= borrowed;
          borrowed = 0;
          let n = top - bottom;
          if (n < 0) {
            while (n < 0) {
              borrowed++;
              n += 10;
            }
          } else if (borrowed) {
            borrowed--;
          }
          if (result2 !== "" || n !== 0) {
            result2 = n + result2;
          }
          i--;
        }
        if (result2 !== "") {
          result2 = "." + result2;
        }
        i--;
      }
      if (left > 0) {
        while (i > 0) {
          let top = a[i - aoffset] || "0";
          let bottom = b[i - boffset] || "0";
          top -= borrowed;
          borrowed = 0;
          let n2 = top - bottom;
          if (n2 < 0) {
            while (n2 < 0) {
              borrowed++;
              n2 += 10;
            }
          } else if (borrowed) {
            borrowed--;
          }
          result2 = n2 + result2;
          i--;
        }
        const achar = a[0 - aoffset] || "0";
        const bchar = b[0 - boffset] || "0";
        let n = Number(achar) - (borrowed > 0 ? 1 : 0) - Number(bchar);
        if (n !== 0) {
          result2 = n + result2;
        }
        result2 = result2.replace(/^0+/, "");
      }
      if (result2[0] === ".") result2 = "0" + result2;
      return result2;
    }
    module.exports = long_subtraction;
    module.exports.default = long_subtraction;
  }
});

// node_modules/preciso/is_infinity.js
var require_is_infinity = __commonJS({
  "node_modules/preciso/is_infinity.js"(exports, module) {
    "use strict";
    function is_infinity(n) {
      return !!n.match(/^(|-|\+)inf(inity)?$/i);
    }
    module.exports = is_infinity;
    module.exports.default = is_infinity;
  }
});

// node_modules/preciso/add.js
var require_add = __commonJS({
  "node_modules/preciso/add.js"(exports, module) {
    "use strict";
    var compare_positive = require_compare_positive();
    var clean = require_clean();
    var long_addition = require_long_addition();
    var long_subtraction = require_long_subtraction();
    var is_infinity = require_is_infinity();
    function add3(a, b, { infinity_minus_infinity = "NaN" } = {}) {
      a = clean(a);
      b = clean(b);
      const apos = a[0] !== "-";
      const bpos = b[0] !== "-";
      const aneg = !apos;
      const bneg = !bpos;
      const ainf = is_infinity(a);
      const binf = is_infinity(b);
      if (ainf && binf) {
        if (apos && bpos) return "Infinity";
        else if (aneg & bneg) return "-Infinity";
        else return infinity_minus_infinity;
      } else if (ainf) {
        if (apos) return "Infinity";
        else return "-Infinity";
      } else if (binf) {
        if (bpos) return "Infinity";
        else return "-Infinity";
      } else if (apos && bpos) {
        return long_addition(a, b);
      } else if (aneg && bneg) {
        return "-" + long_addition(a.substring(1), b.substring(1));
      } else if (aneg && bpos) {
        a = a.substring(1);
        switch (compare_positive(a, b)) {
          case "=":
            return "0";
          case "<":
            return long_subtraction(b, a);
          case ">":
            return "-" + long_subtraction(a, b);
        }
      } else if (apos && !bpos) {
        b = b.substring(1);
        switch (compare_positive(a, b)) {
          case "=":
            return "0";
          case "<":
            return "-" + long_subtraction(b, a);
          case ">":
            return long_subtraction(a, b);
        }
      }
    }
    module.exports = add3;
    module.exports.default = add3;
  }
});

// node_modules/preciso/absolute.js
var require_absolute = __commonJS({
  "node_modules/preciso/absolute.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    function absolute(n) {
      n = clean(n);
      if (n[0] === "-") return n.substring(1);
      else return n;
    }
    module.exports = absolute;
    module.exports.default = absolute;
  }
});

// node_modules/preciso/subtract.js
var require_subtract = __commonJS({
  "node_modules/preciso/subtract.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var compare_positive = require_compare_positive();
    var is_infinity = require_is_infinity();
    var long_addition = require_long_addition();
    var long_subtraction = require_long_subtraction();
    function subtract2(a, b, { infinity_minus_infinity = "NaN" } = {}) {
      a = clean(a);
      b = clean(b);
      const a_is_negative = a[0] === "-";
      const b_is_negative = b[0] === "-";
      const a_is_positive = !a_is_negative;
      const b_is_positive = !b_is_negative;
      const ainf = is_infinity(a);
      const binf = is_infinity(b);
      if (ainf && binf) {
        if (a_is_positive === b_is_positive) {
          return infinity_minus_infinity;
        } else if (a_is_positive) {
          return "Infinity";
        } else if (b_is_positive) {
          return "-Infinity";
        }
      } else if (ainf) {
        return a;
      } else if (binf) {
        return b_is_positive ? "-Infinity" : "Infinity";
      }
      if (a_is_positive) {
        if (b_is_positive) {
          const comparison = compare_positive(a, b);
          if (comparison === ">") {
            return long_subtraction(a, b);
          } else if (comparison === "<") {
            return "-" + long_subtraction(b, a);
          } else {
            return "0";
          }
        } else {
          return long_addition(a, b.substring(1));
        }
      } else if (b_is_positive) {
        return "-" + long_addition(a.substring(1), b);
      } else {
        a = a.substring(1);
        b = b.substring(1);
        const comparison = compare_positive(a, b);
        if (comparison === ">") {
          return "-" + long_subtraction(a, b);
        } else if (comparison === "<") {
          return long_subtraction(b, a);
        } else {
          return "0";
        }
      }
    }
    module.exports = subtract2;
    module.exports.default = subtract2;
  }
});

// node_modules/preciso/truncate_decimal.js
var require_truncate_decimal = __commonJS({
  "node_modules/preciso/truncate_decimal.js"(exports, module) {
    "use strict";
    function truncate_decimal(n) {
      return n.substring(0, n.indexOf("."));
    }
    module.exports = truncate_decimal;
    module.exports.default = truncate_decimal;
  }
});

// node_modules/preciso/round_last_decimal.js
var require_round_last_decimal = __commonJS({
  "node_modules/preciso/round_last_decimal.js"(exports, module) {
    "use strict";
    var add3 = require_add();
    var truncate_decimal = require_truncate_decimal();
    var up = ["5", "6", "7", "8", "9"];
    function round_last_decimal(n) {
      if (n.match(/\.9+$/)) {
        return add3(truncate_decimal(n), "1");
      }
      if (n[0] === "+") n = n.substring(1);
      const len = n.length;
      let result2 = "";
      const last_char = n[n.length - 1];
      if (up.includes(last_char)) {
        let i;
        for (i = len - 2; i >= 0; i--) {
          const char = n[i];
          if (char === "." || char === "-") continue;
          const nchar = Number(char) + 1;
          if (nchar === 10) {
            result2 = "0" + result2;
          } else {
            result2 = nchar + result2;
            break;
          }
        }
        if (i > 0) result2 = n.substring(0, i) + result2;
      } else {
        result2 = n.substring(0, len - 1);
      }
      if (result2[result2.length - 1] === ".") result2 = result2.substring(0, result2.length - 1);
      if (result2.indexOf(".") > -1) result2 = result2.replace(/0+$/, "");
      return result2;
    }
    module.exports = round_last_decimal;
    module.exports.default = round_last_decimal;
  }
});

// node_modules/preciso/long_division.js
var require_long_division = __commonJS({
  "node_modules/preciso/long_division.js"(exports, module) {
    "use strict";
    var compare_positive = require_compare_positive();
    var add3 = require_add();
    var subtract2 = require_subtract();
    var round_last_decimal = require_round_last_decimal();
    function long_division(dividend, divisor, { format = "string", max_decimal_digits = 100, ellipsis = false } = {}) {
      if (dividend[0] === "0") dividend = dividend.substring(1);
      if (divisor[0] === "0") divisor = divisor.substring(1);
      const dividend_index_of_dot = dividend.indexOf(".");
      const divisor_index_of_dot = divisor.indexOf(".");
      const adjusted_dividend_index_of_dot = dividend_index_of_dot === -1 ? dividend.length : dividend_index_of_dot;
      const divisor_num_decimal_places = divisor_index_of_dot === -1 ? 0 : divisor.length - 1 - divisor_index_of_dot;
      let repeating = false;
      dividend = dividend.replace(/\./, "");
      divisor = divisor.replace(/\./, "");
      const dividend_length = dividend.length;
      let current = "";
      let quotient = "";
      let comparison;
      let offset = -1 * divisor_num_decimal_places;
      let skip = 0;
      for (let i = 0; i < dividend_length; i++) {
        const char = dividend[i];
        current += char;
        comparison = compare_positive(current, divisor);
        if (comparison === ">") {
          let times = 1;
          let product = add3(divisor, divisor);
          let passed_product = divisor;
          while (compare_positive(product, current) !== ">") {
            times++;
            passed_product = product;
            product = add3(product, divisor);
          }
          times = times.toString();
          if (quotient !== "") {
            for (let i2 = times.length; i2 <= skip; i2++) quotient += "0";
          }
          quotient += times;
          current = subtract2(current, passed_product);
          skip = 0;
        } else if (comparison === "<") {
          if (quotient === "") {
            offset++;
          }
          skip++;
          continue;
        } else if (comparison === "=") {
          if (quotient !== "") {
            for (let i2 = 0; i2 < skip; i2++) quotient += "0";
          }
          quotient += "1";
          current = "0";
          skip = 0;
        }
      }
      if (current.match(/^0+$/g)) {
        if (comparison === "<") {
          quotient += current.substring(0, current.length - 1);
        }
      } else {
        const previous = {};
        const idot2 = adjusted_dividend_index_of_dot - offset;
        const qlen2 = quotient.length;
        const imax = idot2 - qlen2 + max_decimal_digits + 1;
        if (quotient === "") {
          skip = 0;
        }
        for (let i = 0; i < imax; i++) {
          current += "0";
          if (ellipsis) {
            if (current in previous) {
              previous[current]++;
              if (previous[current] > 3) {
                quotient += "...";
                repeating = true;
                break;
              }
            } else {
              previous[current] = 1;
            }
          }
          const comparison2 = compare_positive(current, divisor);
          if (comparison2 === ">") {
            let times = 1;
            let product = add3(divisor, divisor);
            let passed_product = divisor;
            while (compare_positive(product, current) !== ">") {
              times++;
              passed_product = product;
              product = add3(product, divisor);
            }
            times = times.toString();
            for (let i2 = times.length; i2 <= skip; i2++) quotient += "0";
            quotient += times;
            current = subtract2(current, passed_product);
            if (current === "0") {
              break;
            }
            skip = 0;
          } else if (comparison2 === "<") {
            skip++;
            continue;
          } else if (comparison2 === "=") {
            for (let i2 = 0; i2 < skip; i2++) quotient += "0";
            quotient += "1";
            skip = 0;
            break;
          }
        }
      }
      const idot = adjusted_dividend_index_of_dot - offset;
      const qlen = quotient.length;
      let num_decimals;
      if (idot === qlen) {
        num_decimals = 0;
      } else if (idot < 0) {
        quotient = "0." + "0".repeat(Math.abs(idot)) + quotient;
        num_decimals = qlen - idot;
      } else if (idot > qlen) {
        for (let i = qlen; i < idot; i++) quotient += "0";
        num_decimals = 0;
      } else if (idot < qlen) {
        quotient = quotient.substring(0, idot) + "." + quotient.substring(idot);
        num_decimals = qlen - idot;
      } else if (idot === 0) {
        quotient = "0." + quotient;
        num_decimals = qlen;
      }
      quotient = quotient.replace(/^0+/, "");
      quotient = quotient.replace(/\.\d+0+$/, "");
      const extra_decimals = num_decimals - max_decimal_digits;
      if (!repeating) {
        if (extra_decimals > 0) {
          quotient = round_last_decimal(quotient.substring(0, quotient.length - extra_decimals + 1));
        }
      }
      if (quotient[0] === ".") quotient = "0" + quotient;
      if (format === "object") {
        return { quotient, extra_decimals };
      } else {
        return quotient;
      }
    }
    module.exports = long_division;
    module.exports.default = long_division;
  }
});

// node_modules/preciso/divide.js
var require_divide = __commonJS({
  "node_modules/preciso/divide.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var is_infinity = require_is_infinity();
    var long_division = require_long_division();
    function divide2(dividend, divisor, options) {
      dividend = clean(dividend);
      divisor = clean(divisor);
      const dividend_is_positive = dividend[0] !== "-";
      const divisor_is_positive = divisor[0] !== "-";
      const dividend_is_infinity = is_infinity(dividend);
      const divisor_is_infinity = is_infinity(divisor);
      if (dividend_is_infinity || divisor_is_infinity) {
        if (dividend_is_positive == divisor_is_positive) {
          return "Infinity";
        } else {
          return "-Infinity";
        }
      }
      if (divisor === "0") throw new Error("[preciso] division by zero");
      if (dividend === "" || dividend === "0") return "0";
      const out_sign = dividend_is_positive !== divisor_is_positive ? "-" : "";
      if (!dividend_is_positive) dividend = absolute(dividend);
      if (!divisor_is_positive) divisor = absolute(divisor);
      return out_sign + long_division(dividend, divisor, options);
    }
    module.exports = divide2;
    module.exports.default = divide2;
  }
});

// node_modules/preciso/is_imaginary.js
var require_is_imaginary = __commonJS({
  "node_modules/preciso/is_imaginary.js"(exports, module) {
    "use strict";
    function is_imaginary(n) {
      return n.includes("i");
    }
    module.exports = is_imaginary;
    module.exports.default = is_imaginary;
  }
});

// node_modules/preciso/is_integer.js
var require_is_integer = __commonJS({
  "node_modules/preciso/is_integer.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var is_infinity = require_is_infinity();
    function is_integer(n) {
      if (is_infinity(n)) return false;
      n = clean(n);
      return !n.includes(".") && !n.includes("/");
    }
    module.exports = is_integer;
    module.exports.default = is_integer;
  }
});

// node_modules/preciso/is_odd.js
var require_is_odd = __commonJS({
  "node_modules/preciso/is_odd.js"(exports, module) {
    var clean = require_clean();
    var is_integer = require_is_integer();
    function is_odd(n) {
      n = clean(n);
      if (!is_integer(n)) throw new Error("can't call is_odd on decimal");
      return ["1", "3", "5", "7", "9"].includes(n.charAt(n.length - 1));
    }
    module.exports = is_odd;
    module.exports.default = is_odd;
  }
});

// node_modules/preciso/is_zero.js
var require_is_zero = __commonJS({
  "node_modules/preciso/is_zero.js"(exports, module) {
    "use strict";
    function is_zero(n) {
      return /^[-+]?0(\.0+)?(e[\.\d]+)?$/.test(n);
    }
    module.exports = is_zero;
    module.exports.default = is_zero;
  }
});

// node_modules/preciso/long_multiplication.js
var require_long_multiplication = __commonJS({
  "node_modules/preciso/long_multiplication.js"(exports, module) {
    "use strict";
    var { MAX_SAFE_INTEGER_LENGTH } = require_max_safe_integer_length();
    var CHUNK_SIZE = 15;
    function long_multiplication(a, b) {
      if (a === "0" || b === "0") return "0";
      const top_index_of_dot = a.indexOf(".");
      const bottom_index_of_dot = b.indexOf(".");
      const a_num_integer_places = top_index_of_dot === -1 ? a.length : top_index_of_dot;
      const b_num_integer_places = bottom_index_of_dot === -1 ? b.length : bottom_index_of_dot;
      const max_total_num_integer_places = a_num_integer_places + b_num_integer_places;
      const a_num_decimal_places = top_index_of_dot === -1 ? 0 : a.length - 1 - top_index_of_dot;
      const b_num_decimal_places = bottom_index_of_dot === -1 ? 0 : b.length - 1 - bottom_index_of_dot;
      const out_num_decimal_places = a_num_decimal_places + b_num_decimal_places;
      if (out_num_decimal_places === 0 && max_total_num_integer_places < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) * Number(b)).toFixed(0);
      }
      const aint = a.replace(".", "");
      const bint = b.replace(".", "");
      const alen = aint.length;
      const blen = bint.length;
      const chunks = [];
      let i = alen;
      while (i >= 0) {
        const end = i;
        const start2 = i -= CHUNK_SIZE;
        const str = aint.substring(start2, end);
        chunks.push([Number(str), str.length]);
      }
      const partial_products = [];
      const partials = [];
      for (let i2 = 0, ireverse = blen - 1; ireverse >= 0; ireverse--, i2++) {
        const bstr = bint[ireverse];
        const bnum = Number(bstr);
        let carried2 = 0;
        let partial = "";
        const ichunklast = chunks.length - 1;
        chunks.forEach(([chunk, chunklen], c) => {
          const subpartial = carried2 + bnum * chunk;
          let subpartstr = subpartial.toString();
          const subpartcharlen = subpartstr.length;
          if (subpartcharlen > chunklen && c !== ichunklast) {
            const islice = -1 * chunklen;
            partial = subpartstr.slice(islice) + partial;
            carried2 = Number(subpartstr.slice(0, islice));
          } else {
            const imax = chunklen - subpartcharlen;
            for (let i3 = 0; i3 < imax; i3++) {
              subpartstr = "0" + subpartstr;
            }
            carried2 = 0;
            partial = subpartstr + partial;
          }
        });
        partial += "0".repeat(i2);
        partial_products.push(partial);
        partials.push([Array.from(partial).map((char) => Number(char)), partial.length]);
      }
      const num_partials = partial_products.length;
      const number_of_columns = partials[partials.length - 1][1] + num_partials;
      let result2 = "";
      let carried = 0;
      for (let icol = 0; icol < number_of_columns; icol++) {
        let sum = carried;
        const pmax = Math.min(icol, num_partials - 1);
        for (let p = 0; p <= pmax; p++) {
          const [pnums, plen] = partials[p];
          const i2 = plen - 1 - icol;
          if (i2 >= 0) {
            sum += pnums[i2];
          }
        }
        if (sum >= 10) {
          sum = sum.toString();
          result2 = sum[sum.length - 1] + result2;
          carried = Number(sum.slice(0, -1));
        } else {
          result2 = sum + result2;
          carried = 0;
        }
      }
      if (out_num_decimal_places === 0) {
        result2 = result2.replace(/^0+/, "");
      } else {
        const idot = result2.length - out_num_decimal_places;
        result2 = result2.substring(0, idot) + "." + result2.substring(idot);
        result2 = result2.replace(/^0+/, "");
        result2 = result2.replace(/\.?0+$/, "");
        if (result2[0] === ".") result2 = "0" + result2;
      }
      return result2;
    }
    module.exports = long_multiplication;
    module.exports.default = long_multiplication;
  }
});

// node_modules/preciso/count_decimal_digits.js
var require_count_decimal_digits = __commonJS({
  "node_modules/preciso/count_decimal_digits.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    function count_decimal_digits(n) {
      n = clean(n);
      const i = n.indexOf(".");
      if (i === -1) return "0";
      return (n.length - i - 1).toString();
    }
    module.exports = count_decimal_digits;
    module.exports.default = count_decimal_digits;
  }
});

// node_modules/preciso/is_negative.js
var require_is_negative = __commonJS({
  "node_modules/preciso/is_negative.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    function is_negative(n) {
      n = clean(n);
      return n[0] === "-";
    }
    module.exports = is_negative;
    module.exports.default = is_negative;
  }
});

// node_modules/preciso/round_rational.js
var require_round_rational = __commonJS({
  "node_modules/preciso/round_rational.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var count_decimal_digits = require_count_decimal_digits();
    var absolute = require_absolute();
    var is_negative = require_is_negative();
    var round_last_decimal = require_round_last_decimal();
    var UP = ["5", "6", "7", "8", "9"];
    function round_rational(n, { digits = 0 } = { digits: 0 }) {
      n = clean(n);
      const orig = n;
      const sign = is_negative(n) ? "-" : "";
      n = absolute(n);
      const idec = n.indexOf(".");
      if (idec === -1) return orig;
      if (count_decimal_digits(n) <= digits) return orig;
      const v = n[idec + digits + 1];
      if (UP.includes(v)) {
        const clip = n.substring(0, idec + digits + 2);
        return sign + round_last_decimal(clip);
      } else if (digits === 0) {
        return sign + n.substring(0, idec);
      } else {
        const clip = n.substring(0, idec + digits + 1);
        return sign + clip;
      }
    }
    module.exports = round_rational;
    module.exports.default = round_rational;
  }
});

// node_modules/preciso/round.js
var require_round = __commonJS({
  "node_modules/preciso/round.js"(exports, module) {
    "use strict";
    var is_imaginary = require_is_imaginary();
    var round_rational = require_round_rational();
    function round(n, { digits = 0 } = {}) {
      digits = Number(digits);
      if (is_imaginary(n)) {
        return round_rational(n.substring(0, n.length - 1), { digits }) + "i";
      } else {
        return round_rational(n, { digits });
      }
    }
    module.exports = round;
    module.exports.default = round;
  }
});

// node_modules/preciso/multiply_rational.js
var require_multiply_rational = __commonJS({
  "node_modules/preciso/multiply_rational.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var compare_positive = require_compare_positive();
    var long_multiplication = require_long_multiplication();
    var round = require_round();
    function multiply_rational(nums, { max_decimal_digits } = {}) {
      let product = clean(nums[0]);
      let product_absolute = absolute(product);
      let product_sign = product[0] === "-" ? "-" : "";
      const imax = nums.length;
      for (let i = 1; i < imax; i++) {
        const current = clean(nums[i]);
        const current_sign = current[0] === "-" ? "-" : "";
        const current_absolute = absolute(current);
        product_sign = product_sign !== current_sign ? "-" : "";
        const comparison = compare_positive(product_absolute, current_absolute);
        product_absolute = comparison === "<" ? long_multiplication(current_absolute, product_absolute) : long_multiplication(product_absolute, current_absolute);
        product = product_sign + product_absolute;
      }
      if (typeof max_decimal_digits === "number") product = round(product, { digits: max_decimal_digits });
      return product;
    }
    module.exports = multiply_rational;
    module.exports.default = multiply_rational;
  }
});

// node_modules/preciso/sign_nonzero.js
var require_sign_nonzero = __commonJS({
  "node_modules/preciso/sign_nonzero.js"(exports, module) {
    "use strict";
    function sign_nonzero(n) {
      return n[0] === "-" ? "-" : "+";
    }
    module.exports = sign_nonzero;
    module.exports.default = sign_nonzero;
  }
});

// node_modules/preciso/multiply_array.js
var require_multiply_array = __commonJS({
  "node_modules/preciso/multiply_array.js"(exports, module) {
    "use strict";
    var is_imaginary = require_is_imaginary();
    var is_infinity = require_is_infinity();
    var is_odd = require_is_odd();
    var is_zero = require_is_zero();
    var multiply_rational = require_multiply_rational();
    var sign_nonzero = require_sign_nonzero();
    function multiply_array(nums, { max_decimal_digits, infinity_times_zero = "NaN" } = {}) {
      const has_inf = nums.some((n) => is_infinity(n));
      const has_zero = nums.some((n) => is_zero(n));
      if (has_inf && has_zero) {
        return infinity_times_zero;
      } else if (has_inf) {
        const ct = nums.filter((n) => sign_nonzero(n) === "-").length;
        return ct % 2 === 0 ? "Infinity" : "-Infinity";
      } else if (has_zero) {
        return "0";
      }
      const imaginary = is_odd(nums.filter((n) => is_imaginary(n)).length.toString());
      let product = multiply_rational(
        nums.map((n) => n.replace(/i$/, "")),
        { max_decimal_digits }
      );
      if (imaginary) product += "i";
      return product;
    }
    module.exports = multiply_array;
    module.exports.default = multiply_array;
  }
});

// node_modules/preciso/multiply.js
var require_multiply = __commonJS({
  "node_modules/preciso/multiply.js"(exports, module) {
    "use strict";
    var multiply_array = require_multiply_array();
    function multiply2() {
      const args = Array.from(arguments);
      const options = typeof args[args.length - 1] === "object" ? args[args.length - 1] : void 0;
      const nums = Array.isArray(args[0]) ? args[0] : options ? args.slice(0, args.length - 1) : args;
      return multiply_array(nums, options);
    }
    module.exports = multiply2;
    module.exports.default = multiply2;
  }
});

// node_modules/bbox-fns/bbox-array.js
var require_bbox_array = __commonJS({
  "node_modules/bbox-fns/bbox-array.js"(exports, module) {
    "use strict";
    function bboxArray2(points, { nan_strategy = "throw" } = { nan_strategy: "throw" }) {
      const count = points.length;
      let xmin = null;
      let xmax = null;
      let ymin = null;
      let ymax = null;
      for (let i = 0; i < count; i++) {
        const [x, y] = points[i];
        if (isNaN(x)) {
          if (nan_strategy === "throw") {
            throw new Error("[bbox-fns/bbox-array] encountered point with a NaN value: [" + x + ", " + y + "]");
          }
        } else if (xmin === null) {
          xmin = x;
          xmax = x;
        } else {
          if (x < xmin) xmin = x;
          else if (x > xmax) xmax = x;
        }
        if (isNaN(y)) {
          if (nan_strategy === "throw") {
            throw new Error("[bbox-fns/bbox-array] encountered point with a NaN value: [" + x + ", " + y + "]");
          }
        } else if (ymin === null) {
          ymin = y;
          ymax = y;
        } else {
          if (y < ymin) ymin = y;
          else if (y > ymax) ymax = y;
        }
      }
      return [xmin, ymin, xmax, ymax];
    }
    module.exports = bboxArray2;
    module.exports.default = bboxArray2;
  }
});

// node_modules/bbox-fns/boolean-contains.js
var require_boolean_contains = __commonJS({
  "node_modules/bbox-fns/boolean-contains.js"(exports, module) {
    "use_strict";
    function booleanContains2([axmin, aymin, axmax, aymax], [bxmin, bymin, bxmax, bymax], { exclusive = false } = { exclusive: false }) {
      if (exclusive) {
        const xContained = bxmin > axmin && bxmax < axmax;
        const yContained = bymin > aymin && bymax < aymax;
        return xContained && yContained;
      } else {
        const xContained = bxmin >= axmin && bxmax <= axmax;
        const yContained = bymin >= aymin && bymax <= aymax;
        return xContained && yContained;
      }
    }
    module.exports = booleanContains2;
    module.exports.default = booleanContains2;
  }
});

// node_modules/bbox-fns/boolean-intersects.js
var require_boolean_intersects = __commonJS({
  "node_modules/bbox-fns/boolean-intersects.js"(exports, module) {
    "use_strict";
    function booleanIntersects2([axmin, aymin, axmax, aymax], [bxmin, bymin, bxmax, bymax]) {
      const yOverlaps = bymin <= aymax && bymax >= aymin;
      const xOverlaps = bxmin <= axmax && bxmax >= axmin;
      return xOverlaps && yOverlaps;
    }
    module.exports = booleanIntersects2;
    module.exports.default = booleanIntersects2;
  }
});

// node_modules/bbox-fns/shift.js
var require_shift = __commonJS({
  "node_modules/bbox-fns/shift.js"(exports, module) {
    function shift([xmin, ymin, xmax, ymax], dist) {
      const x = Array.isArray(dist) && dist.length >= 1 ? dist[0] : typeof dist.x === "number" ? dist.x : 0;
      const y = Array.isArray(dist) && dist.length >= 2 ? dist[1] : typeof dist.y === "number" ? dist.y : 0;
      return [xmin + x, ymin + y, xmax + x, ymax + y];
    }
    module.exports = shift;
    module.exports.default = shift;
  }
});

// node_modules/bbox-fns/sort.js
var require_sort = __commonJS({
  "node_modules/bbox-fns/sort.js"(exports, module) {
    function sort(bboxes) {
      return bboxes.sort((a, b) => {
        const [axmin, aymin, axmax, aymax] = a;
        const [bxmin, bymin, bxmax, bymax] = b;
        if (axmin < bxmin) return -1;
        if (axmin > bxmin) return 1;
        if (aymin < bymin) return 1;
        if (aymin > bymin) return -1;
        return 0;
      });
    }
    module.exports = sort;
    module.exports.default = sort;
  }
});

// node_modules/bbox-fns/split.js
var require_split = __commonJS({
  "node_modules/bbox-fns/split.js"(exports, module) {
    "use strict";
    function split(bbox, breakpoints) {
      const [xmin, ymin, xmax, ymax] = bbox;
      if (!breakpoints) throw new Error("[bbox-fns/split.js] missing breakpoints");
      const xbrks = breakpoints.x || [];
      const ybrks = breakpoints.y || [];
      const xedges = [xmin].concat(xbrks.filter((x) => x > xmin && x < xmax)).concat([xmax]);
      const yedges = [ymin].concat(ybrks.filter((y) => y > ymin && y < ymax)).concat([ymax]);
      const bboxes = [];
      for (let i = 1; i < xedges.length; i++) {
        const xmin2 = xedges[i - 1];
        const xmax2 = xedges[i];
        for (let ii = 1; ii < yedges.length; ii++) {
          const ymin2 = yedges[ii - 1];
          const ymax2 = yedges[ii];
          bboxes.push([xmin2, ymin2, xmax2, ymax2]);
        }
      }
      return bboxes;
    }
    module.exports = split;
    module.exports.default = split;
  }
});

// node_modules/bbox-fns/union.js
var require_union = __commonJS({
  "node_modules/bbox-fns/union.js"(exports, module) {
    "use strict";
    var booleanIntersects2 = require_boolean_intersects();
    var merge = require_merge();
    function union(bboxes) {
      if (bboxes.length === 0) return [];
      if (bboxes.length === 1) return [bboxes[0]];
      let results = [bboxes[0]];
      for (let i = 1; i < bboxes.length; i++) {
        const bbox = bboxes[i];
        const matches = results.filter((it) => booleanIntersects2(bbox, it));
        const merged = merge(matches.concat([bbox]));
        const unmatched = results.filter((it) => !matches.includes(it));
        results = [merged].concat(unmatched);
      }
      return results;
    }
    module.exports = union;
    module.exports.default = union;
  }
});

// node_modules/bbox-fns/unwrap.js
var require_unwrap = __commonJS({
  "node_modules/bbox-fns/unwrap.js"(exports, module) {
    "use_strict";
    var shift = require_shift();
    var sort = require_sort();
    var split = require_split();
    var union = require_union();
    function unwrap2(bbox, container) {
      const [global_xmin, global_ymin, global_xmax, global_ymax] = container;
      const global_width = global_xmax - global_xmin;
      const global_height = global_ymax - global_ymin;
      const breakpoints = {
        x: [global_xmin - global_width, global_xmin, global_xmax, global_xmax + global_width],
        y: [global_ymin - global_height, global_ymin, global_ymax, global_ymax + global_height]
      };
      let bboxes = split(bbox, breakpoints);
      bboxes = bboxes.map((b) => {
        const [xmin, ymin, xmax, ymax] = b;
        return shift(b, {
          x: Math.ceil((global_xmin - xmin) / global_width) * global_width,
          y: Math.ceil((global_ymin - ymin) / global_height) * global_height
        });
      });
      bboxes = union(bboxes);
      bboxes = sort(bboxes);
      return bboxes;
    }
    module.exports = unwrap2;
    module.exports.default = unwrap2;
  }
});

// node_modules/get-epsg-code/dist/get-epsg-code.node.min.js
var require_get_epsg_code_node_min = __commonJS({
  "node_modules/get-epsg-code/dist/get-epsg-code.node.min.js"(exports, module) {
    var oe = Object.defineProperty;
    var s = (A5, e) => oe(A5, "name", { value: e, configurable: true });
    var D = (A5, e) => () => (e || A5((e = { exports: {} }).exports, e), e.exports);
    var sA = D((rt, P) => {
      var B = {};
      B.char2bits = { 0: "110100", 1: "110101", 2: "110110", 3: "110111", 4: "111000", 5: "111001", 6: "111010", 7: "111011", 8: "111100", 9: "111101", A: "000000", Q: "010000", g: "100000", w: "110000", B: "000001", R: "010001", h: "100001", x: "110001", C: "000010", S: "010010", i: "100010", y: "110010", D: "000011", T: "010011", j: "100011", z: "110011", E: "000100", U: "010100", k: "100100", F: "000101", V: "010101", l: "100101", G: "000110", W: "010110", m: "100110", H: "000111", X: "010111", n: "100111", I: "001000", Y: "011000", o: "101000", J: "001001", Z: "011001", p: "101001", K: "001010", a: "011010", q: "101010", L: "001011", b: "011011", r: "101011", M: "001100", c: "011100", s: "101100", N: "001101", d: "011101", t: "101101", O: "001110", e: "011110", u: "101110", "+": "111110", P: "001111", f: "011111", v: "101111", "/": "111111" };
      B.toArrayBuffer = s(function(e) {
        var t = B.char2bits, r = 0;
        for (let f = e.length; f >= 0; f--) e[f] === "=" && r++;
        for (var o = e.length - r, g = Math.floor(0.75 * o), n = new Uint8Array(g), C = "", Q = 0; Q < o; Q++) {
          var i = e[Q];
          if (i === "=") break;
          C += t[i], C.length >= 8 && (n[Math.floor(0.75 * Q)] = parseInt(C.substring(0, 8), 2), C = C.substring(8));
        }
        return n.buffer;
      }, "toArrayBuffer");
      B.toBase64String = s(function(e) {
        if (!B.bits2char) {
          B.bits2char = {};
          for (let Q in B.char2bits) B.bits2char[B.char2bits[Q]] = Q;
        }
        for (var t = B.bits2char, r = new Uint8Array(e), o = "", g = "", n = 0; n < r.length; n++) {
          for (var C = r[n].toString(2); C.length < 8; ) C = "0" + C;
          for (g += C; g.length >= 6; ) o += t[g.substring(0, 6)], g = g.substring(6);
        }
        if (g.length > 0) {
          for (; g.length < 6; ) g += "0";
          o += t[g];
        }
        for (; o.length % 4 !== 0; ) o += "=";
        return o;
      }, "toBase64String");
      typeof define == "function" && define.amd && define(function() {
        return B;
      });
      typeof P == "object" && (P.exports = B);
      typeof window == "object" && (window.b64ab = B);
      typeof self == "object" && (self.b64ab = B);
    });
    var nA = D((gt, L2) => {
      function QA(A5, e, t) {
        let o = new RegExp(e).exec(A5.slice(t));
        return o ? t + o.index : -1;
      }
      s(QA, "indexOfMatch");
      L2.exports = QA;
      L2.exports.default = QA;
    });
    var DA = D((st, T) => {
      function iA(A5, e, t) {
        let o = new RegExp(e).exec(A5.slice(t));
        return o ? t + o.index + o[0].length - 1 : -1;
      }
      s(iA, "indexOfMatchEnd");
      T.exports = iA;
      T.exports.default = iA;
    });
    var aA = D((nt, K) => {
      function fA(A5, e) {
        let t = new RegExp(e, "g"), r = A5.match(t);
        return r ? r.length : 0;
      }
      s(fA, "countSubstring");
      K.exports = fA;
      K.exports.default = fA;
    });
    var U = D((Dt, y) => {
      var ge = nA(), m = DA(), BA = aA();
      function EA(A5, e, t) {
        let r = t && t.debug || false, o = !(t && typeof t.nested === false), g = t && t.startIndex || 0;
        r && console.log("[xml-utils] starting findTagByName with", e, " and ", t);
        let n = ge(A5, `<${e}[ 
>/]`, g);
        if (r && console.log("[xml-utils] start:", n), n === -1) return;
        let C = A5.slice(n + e.length), Q = m(C, "^[^<]*[ /]>", 0), i = Q !== -1 && C[Q - 1] === "/";
        if (r && console.log("[xml-utils] selfClosing:", i), i === false) if (o) {
          let J = 0, oA = 1, gA = 0;
          for (; (Q = m(C, "[ /]" + e + ">", J)) !== -1; ) {
            let CA = C.substring(J, Q + 1);
            if (oA += BA(CA, "<" + e + `[ 
	>]`), gA += BA(CA, "</" + e + ">"), gA >= oA) break;
            J = Q;
          }
        } else Q = m(C, "[ /]" + e + ">", 0);
        let f = n + e.length + Q + 1;
        if (r && console.log("[xml-utils] end:", f), f === -1) return;
        let a = A5.slice(n, f), l;
        return i ? l = null : l = a.slice(a.indexOf(">") + 1, a.lastIndexOf("<")), { inner: l, outer: a, start: n, end: f };
      }
      s(EA, "findTagByName");
      y.exports = EA;
      y.exports.default = EA;
    });
    var lA = D((at, S) => {
      var Ce = U();
      function cA(A5, e, t) {
        let r = [], o = t && t.debug || false, g = t && typeof t.nested == "boolean" ? t.nested : true, n = t && t.startIndex || 0, C;
        for (; C = Ce(A5, e, { debug: o, startIndex: n }); ) g ? n = C.start + 1 + e.length : n = C.end, r.push(C);
        return o && console.log("findTagsByName found", r.length, "tags"), r;
      }
      s(cA, "findTagsByName");
      S.exports = cA;
      S.exports.default = cA;
    });
    var uA = D((Et, V2) => {
      var wA = lA();
      function dA(A5, e, t) {
        let r = t && t.debug || false, o = t && t.returnOnFirst || false, g = wA(A5, e.shift(), { debug: r, nested: false });
        r && console.log("first tags are:", g);
        for (let n = 0; n < e.length; n++) {
          let C = e[n];
          r && console.log("tagName:", C);
          let Q = [];
          for (let i = 0; i < g.length; i++) {
            let f = g[i], a = wA(f.outer, C, { debug: r, startIndex: 1 });
            if (r && console.log("subTags.length:", a.length), a.length > 0) {
              if (a.forEach((l) => {
                l.start += f.start, l.end += f.start;
              }), o && n === e.length - 1) return [a[0]];
              Q = Q.concat(a);
            }
          }
          g = Q;
        }
        return g;
      }
      s(dA, "findTagsByPath");
      V2.exports = dA;
      V2.exports.default = dA;
    });
    var GA = D((lt, k) => {
      var se = uA();
      function IA(A5, e, t) {
        let r = t && t.debug || false, o = se(A5, e, { debug: r, returnOnFirst: true });
        if (Array.isArray(o) && o.length === 1) return o[0];
      }
      s(IA, "findTagByPath");
      k.exports = IA;
      k.exports.default = IA;
    });
    var MA = D((dt, W) => {
      function hA(A5, e, t) {
        let r = t && t.debug || false;
        r && console.log("[xml-utils] getting " + e + " in " + A5);
        let o = typeof A5 == "object" ? A5.outer : A5, g = o.slice(0, o.indexOf(">") + 1), n = ['"', "'"];
        for (let C = 0; C < n.length; C++) {
          let Q = n[C], i = e + "\\=" + Q + "([^" + Q + "]*)" + Q;
          r && console.log("[xml-utils] pattern:", i);
          let a = new RegExp(i).exec(g);
          if (r && console.log("[xml-utils] match:", a), a) return a[1];
        }
      }
      s(hA, "getAttribute");
      W.exports = hA;
      W.exports.default = hA;
    });
    var FA = D((It, pA) => {
      "use strict";
      var d = 1, NA = 2, RA = 3, h = 4, OA = 5, Y = -1, Qe = /\s/, ne = /[A-Za-z]/, ie = /[A-Za-z84_]/, M2 = /[,\]]/, HA = /[\d\.E\-\+]/;
      function c(A5) {
        if (typeof A5 != "string") throw new Error("not a string");
        this.text = A5.trim(), this.level = 0, this.place = 0, this.root = null, this.stack = [], this.currentObject = null, this.state = d;
      }
      s(c, "Parser");
      c.prototype.readCharicter = function() {
        var A5 = this.text[this.place++];
        if (this.state !== h) for (; Qe.test(A5); ) {
          if (this.place >= this.text.length) return;
          A5 = this.text[this.place++];
        }
        switch (this.state) {
          case d:
            return this.neutral(A5);
          case NA:
            return this.keyword(A5);
          case h:
            return this.quoted(A5);
          case OA:
            return this.afterquote(A5);
          case RA:
            return this.number(A5);
          case Y:
            return;
        }
      };
      c.prototype.afterquote = function(A5) {
        if (A5 === '"') {
          this.word += '"', this.state = h;
          return;
        }
        if (M2.test(A5)) {
          this.word = this.word.trim(), this.afterItem(A5);
          return;
        }
        throw new Error(`havn't handled "` + A5 + '" in afterquote yet, index ' + this.place);
      };
      c.prototype.afterItem = function(A5) {
        if (A5 === ",") {
          this.word !== null && this.currentObject.push(this.word), this.word = null, this.state = d;
          return;
        }
        if (A5 === "]") {
          this.level--, this.word !== null && (this.currentObject.push(this.word), this.word = null), this.state = d, this.currentObject = this.stack.pop(), this.currentObject || (this.state = Y);
          return;
        }
      };
      c.prototype.number = function(A5) {
        if (HA.test(A5)) {
          this.word += A5;
          return;
        }
        if (M2.test(A5)) {
          this.word = parseFloat(this.word), this.afterItem(A5);
          return;
        }
        throw new Error(`havn't handled "` + A5 + '" in number yet, index ' + this.place);
      };
      c.prototype.quoted = function(A5) {
        if (A5 === '"') {
          this.state = OA;
          return;
        }
        this.word += A5;
      };
      c.prototype.keyword = function(A5) {
        if (ie.test(A5)) {
          this.word += A5;
          return;
        }
        if (A5 === "[") {
          var e = [];
          e.push(this.word), this.level++, this.root === null ? this.root = e : this.currentObject.push(e), this.stack.push(this.currentObject), this.currentObject = e, this.state = d;
          return;
        }
        if (M2.test(A5)) {
          this.afterItem(A5);
          return;
        }
        throw new Error(`havn't handled "` + A5 + '" in keyword yet, index ' + this.place);
      };
      c.prototype.neutral = function(A5) {
        if (ne.test(A5)) {
          this.word = A5, this.state = NA;
          return;
        }
        if (A5 === '"') {
          this.word = "", this.state = h;
          return;
        }
        if (HA.test(A5)) {
          this.word = A5, this.state = RA;
          return;
        }
        if (M2.test(A5)) {
          this.afterItem(A5);
          return;
        }
        throw new Error(`havn't handled "` + A5 + '" in neutral yet, index ' + this.place);
      };
      c.prototype.output = function() {
        for (; this.place < this.text.length; ) this.readCharicter();
        if (this.state === Y) return this.root;
        throw new Error('unable to parse string "' + this.text + '". State is ' + this.state);
      };
      function De(A5) {
        var e = new c(A5);
        return e.output();
      }
      s(De, "parseString");
      function xA(A5, e, t) {
        Array.isArray(e) && (t.unshift(e), e = null);
        var r = e ? {} : A5, o = t.reduce(function(g, n) {
          return w(n, g), g;
        }, r);
        e && (A5[e] = o);
      }
      s(xA, "mapit");
      function w(A5, e) {
        if (!Array.isArray(A5)) {
          e[A5] = true;
          return;
        }
        var t = A5.shift();
        if (t === "PARAMETER" && (t = A5.shift()), A5.length === 1) {
          if (Array.isArray(A5[0])) {
            e[t] = {}, w(A5[0], e[t]);
            return;
          }
          e[t] = A5[0];
          return;
        }
        if (!A5.length) {
          e[t] = true;
          return;
        }
        if (t === "TOWGS84") {
          e[t] = A5;
          return;
        }
        if (t === "AXIS") {
          t in e || (e[t] = []), e[t].push(A5);
          return;
        }
        Array.isArray(t) || (e[t] = {});
        var r;
        switch (t) {
          case "UNIT":
          case "PRIMEM":
          case "VERT_DATUM":
            e[t] = { name: A5[0].toLowerCase(), convert: A5[1] }, A5.length === 3 && w(A5[2], e[t]);
            return;
          case "SPHEROID":
          case "ELLIPSOID":
            e[t] = { name: A5[0], a: A5[1], rf: A5[2] }, A5.length === 4 && w(A5[3], e[t]);
            return;
          case "PROJECTEDCRS":
          case "PROJCRS":
          case "GEOGCS":
          case "GEOCCS":
          case "PROJCS":
          case "LOCAL_CS":
          case "GEODCRS":
          case "GEODETICCRS":
          case "GEODETICDATUM":
          case "EDATUM":
          case "ENGINEERINGDATUM":
          case "VERT_CS":
          case "VERTCRS":
          case "VERTICALCRS":
          case "COMPD_CS":
          case "COMPOUNDCRS":
          case "ENGINEERINGCRS":
          case "ENGCRS":
          case "FITTED_CS":
          case "LOCAL_DATUM":
          case "DATUM":
            A5[0] = ["name", A5[0]], xA(e, t, A5);
            return;
          default:
            for (r = -1; ++r < A5.length; ) if (!Array.isArray(A5[r])) return w(A5, e[t]);
            return xA(e, t, A5);
        }
      }
      s(w, "sExpr");
      var fe = 0.017453292519943295;
      function ae(A5, e) {
        var t = e[0], r = e[1];
        !(t in A5) && r in A5 && (A5[t] = A5[r], e.length === 3 && (A5[t] = e[2](A5[t])));
      }
      s(ae, "rename");
      function E(A5) {
        return A5 * fe;
      }
      s(E, "d2r");
      function Be(A5) {
        if (A5.type === "GEOGCS" ? A5.projName = "longlat" : A5.type === "LOCAL_CS" ? (A5.projName = "identity", A5.local = true) : typeof A5.PROJECTION == "object" ? A5.projName = Object.keys(A5.PROJECTION)[0] : A5.projName = A5.PROJECTION, A5.AXIS) {
          for (var e = "", t = 0, r = A5.AXIS.length; t < r; ++t) {
            var o = [A5.AXIS[t][0].toLowerCase(), A5.AXIS[t][1].toLowerCase()];
            o[0].indexOf("north") !== -1 || (o[0] === "y" || o[0] === "lat") && o[1] === "north" ? e += "n" : o[0].indexOf("south") !== -1 || (o[0] === "y" || o[0] === "lat") && o[1] === "south" ? e += "s" : o[0].indexOf("east") !== -1 || (o[0] === "x" || o[0] === "lon") && o[1] === "east" ? e += "e" : (o[0].indexOf("west") !== -1 || (o[0] === "x" || o[0] === "lon") && o[1] === "west") && (e += "w");
          }
          e.length === 2 && (e += "u"), e.length === 3 && (A5.axis = e);
        }
        A5.UNIT && (A5.units = A5.UNIT.name.toLowerCase(), A5.units === "metre" && (A5.units = "meter"), A5.UNIT.convert && (A5.type === "GEOGCS" ? A5.DATUM && A5.DATUM.SPHEROID && (A5.to_meter = A5.UNIT.convert * A5.DATUM.SPHEROID.a) : A5.to_meter = A5.UNIT.convert));
        var g = A5.GEOGCS;
        A5.type === "GEOGCS" && (g = A5), g && (g.DATUM ? A5.datumCode = g.DATUM.name.toLowerCase() : A5.datumCode = g.name.toLowerCase(), A5.datumCode.slice(0, 2) === "d_" && (A5.datumCode = A5.datumCode.slice(2)), (A5.datumCode === "new_zealand_geodetic_datum_1949" || A5.datumCode === "new_zealand_1949") && (A5.datumCode = "nzgd49"), (A5.datumCode === "wgs_1984" || A5.datumCode === "world_geodetic_system_1984") && (A5.PROJECTION === "Mercator_Auxiliary_Sphere" && (A5.sphere = true), A5.datumCode = "wgs84"), A5.datumCode.slice(-6) === "_ferro" && (A5.datumCode = A5.datumCode.slice(0, -6)), A5.datumCode.slice(-8) === "_jakarta" && (A5.datumCode = A5.datumCode.slice(0, -8)), ~A5.datumCode.indexOf("belge") && (A5.datumCode = "rnb72"), g.DATUM && g.DATUM.SPHEROID && (A5.ellps = g.DATUM.SPHEROID.name.replace("_19", "").replace(/[Cc]larke\_18/, "clrk"), A5.ellps.toLowerCase().slice(0, 13) === "international" && (A5.ellps = "intl"), A5.a = g.DATUM.SPHEROID.a, A5.rf = parseFloat(g.DATUM.SPHEROID.rf, 10)), g.DATUM && g.DATUM.TOWGS84 && (A5.datum_params = g.DATUM.TOWGS84), ~A5.datumCode.indexOf("osgb_1936") && (A5.datumCode = "osgb36"), ~A5.datumCode.indexOf("osni_1952") && (A5.datumCode = "osni52"), (~A5.datumCode.indexOf("tm65") || ~A5.datumCode.indexOf("geodetic_datum_of_1965")) && (A5.datumCode = "ire65"), A5.datumCode === "ch1903+" && (A5.datumCode = "ch1903"), ~A5.datumCode.indexOf("israel") && (A5.datumCode = "isr93")), A5.b && !isFinite(A5.b) && (A5.b = A5.a);
        function n(i) {
          var f = A5.to_meter || 1;
          return i * f;
        }
        s(n, "toMeter");
        var C = s(function(i) {
          return ae(A5, i);
        }, "renamer"), Q = [["standard_parallel_1", "Standard_Parallel_1"], ["standard_parallel_1", "Latitude of 1st standard parallel"], ["standard_parallel_2", "Standard_Parallel_2"], ["standard_parallel_2", "Latitude of 2nd standard parallel"], ["false_easting", "False_Easting"], ["false_easting", "False easting"], ["false-easting", "Easting at false origin"], ["false_northing", "False_Northing"], ["false_northing", "False northing"], ["false_northing", "Northing at false origin"], ["central_meridian", "Central_Meridian"], ["central_meridian", "Longitude of natural origin"], ["central_meridian", "Longitude of false origin"], ["latitude_of_origin", "Latitude_Of_Origin"], ["latitude_of_origin", "Central_Parallel"], ["latitude_of_origin", "Latitude of natural origin"], ["latitude_of_origin", "Latitude of false origin"], ["scale_factor", "Scale_Factor"], ["k0", "scale_factor"], ["latitude_of_center", "Latitude_Of_Center"], ["latitude_of_center", "Latitude_of_center"], ["lat0", "latitude_of_center", E], ["longitude_of_center", "Longitude_Of_Center"], ["longitude_of_center", "Longitude_of_center"], ["longc", "longitude_of_center", E], ["x0", "false_easting", n], ["y0", "false_northing", n], ["long0", "central_meridian", E], ["lat0", "latitude_of_origin", E], ["lat0", "standard_parallel_1", E], ["lat1", "standard_parallel_1", E], ["lat2", "standard_parallel_2", E], ["azimuth", "Azimuth"], ["alpha", "azimuth", E], ["srsCode", "name"]];
        Q.forEach(C), !A5.long0 && A5.longc && (A5.projName === "Albers_Conic_Equal_Area" || A5.projName === "Lambert_Azimuthal_Equal_Area") && (A5.long0 = A5.longc), !A5.lat_ts && A5.lat1 && (A5.projName === "Stereographic_South_Pole" || A5.projName === "Polar Stereographic (variant B)") ? (A5.lat0 = E(A5.lat1 > 0 ? 90 : -90), A5.lat_ts = A5.lat1) : !A5.lat_ts && A5.lat0 && A5.projName === "Polar_Stereographic" && (A5.lat_ts = A5.lat0, A5.lat0 = E(A5.lat0 > 0 ? 90 : -90));
      }
      s(Be, "cleanWKT");
      var Ee = s(function(A5) {
        var e = De(A5), t = e.shift(), r = e.shift();
        e.unshift(["name", r]), e.unshift(["type", t]);
        var o = {};
        return w(e, o), Be(o), o;
      }, "index");
      pA.exports = Ee;
    });
    var JA = D((ht, x) => {
      function q(A5) {
        if (!A5) return;
        let e = /PROJCS\[\"([^"]+)\"/.exec(A5);
        if (!e) return;
        let t = e[1];
        if (t.match(/^WGS_1984_UTM_Zone_\d{1,2}(N|S)$/)) {
          let r = t.split("_").pop(), o = r.substring(0, r.length - 1), g = r.substring(r.length - 1) == "N" ? 6 : 7;
          return Number.parseInt("32" + g + o);
        } else if (t.match(/^NAD_1983_UTM_Zone_\d{1,2}N$/)) {
          let r = t.split("_").pop(), o = r.substring(0, r.length - 1);
          return Number.parseInt("269" + o);
        }
      }
      s(q, "getCodeFromEsriWKT");
      typeof define == "function" && define.amd && define(function() {
        return q;
      });
      typeof x == "object" && (x.exports = q, x.exports.default = q);
    });
    var PA = D((xt, N) => {
      function X(A5) {
        if (A5.includes("+proj=utm") && A5.includes("+zone=")) {
          let e = A5.split(" "), t = e.find((g) => g.startsWith("+zone=")).split("=")[1], r = A5.includes("+south"), o = e.find((g) => g.startsWith("+ellps="));
          if (o && (o = o.split("=")[1]), o === "GRS80" && r === false) return Number.parseInt("269" + t);
          {
            let g = r ? "7" : "6";
            return Number.parseInt("32" + g + t);
          }
        }
      }
      s(X, "getCodeFromProjString");
      typeof define == "function" && define.amd && define(function() {
        return X;
      });
      typeof N == "object" && (N.exports = X, N.exports.default = X);
    });
    var TA = D((Rt, Z2) => {
      function LA(A5) {
        A5 = A5.trim(), A5 = A5.replace(/\n/g, " "), A5 = A5.replace(/\t/g, " "), A5 = A5.replace(/ +/g, " ");
        let e = 0, t, r;
        if (A5.length === 0) return e;
        let o = A5.length;
        for (t = 0; t < o; t++) r = A5.charCodeAt(t), e = (e << 5) - e + r, e |= 0;
        return e;
      }
      s(LA, "hash32");
      Z2.exports = LA;
      Z2.exports.default = LA;
    });
    var v = D((Ht, b) => {
      function KA(A5, { keywords: e } = {}) {
        let t = Object.keys(A5).filter((r) => !/\d+/.test(r));
        if (!e) {
          e = [];
          let r = {};
          if (Array.isArray(A5)) {
            A5.forEach((o) => {
              if (Array.isArray(o) && o.length >= 2 && typeof o[1] == "string") {
                let g = o[0];
                r[g] || (r[g] = 0), r[g]++;
              }
            });
            for (let o in r) r[o] > 0 && e.push(o);
          }
        }
        return t.forEach((r) => {
          A5[r] = KA(A5[r]);
        }), e.forEach((r) => {
          let o = [], g = [];
          A5.forEach((n, C) => {
            Array.isArray(n) && n[0] === r && (o.push(C), g.push(n));
          }), g.sort((n, C) => (n = n[1].toString(), C = C[1].toString(), n < C ? -1 : n > C ? 1 : 0)), g.forEach((n, C) => {
            A5[o[C]] = n;
          });
        }), A5;
      }
      s(KA, "sort");
      function ce(A5, e) {
        let t = typeof e == "object" && e.raw === true, r = typeof e == "object" && e.debug === true;
        r && console.log(`[wktcrs] parse starting with
`, A5), A5 = A5.replace(/[A-Z][A-Z\d_]+\[/gi, function(C) {
          return '["' + C.substr(0, C.length - 1) + '",';
        }), A5 = A5.replace(/, ?([A-Z][A-Z\d_]+[,\]])/gi, function(C, Q) {
          let i = Q.substr(0, Q.length - 1);
          return ',"' + (t ? "raw:" : "") + i + '"' + Q[Q.length - 1];
        }), typeof e == "object" && e.raw === true && (A5 = A5.replace(/, {0,2}(-?[\.\d]+)(?=,|\])/g, function(C, Q) {
          return ',"' + (t ? "raw:" : "") + Q + '"';
        })), r && console.log("[wktcrs] json'd wkt: '" + A5 + "'");
        let o;
        try {
          o = JSON.parse(A5);
        } catch (C) {
          throw console.error(`[wktcrs] failed to parse '${A5}'`), C;
        }
        r && console.log("[wktcrs] json parsed: '" + A5 + "'");
        function g(C, Q) {
          let i = C[0];
          C.forEach(function(a) {
            Array.isArray(a) && g(a, C);
          });
          let f = "MULTIPLE_" + i;
          return f in Q ? Q[f].push(C) : i in Q ? (Q[f] = [Q[i], C], delete Q[i]) : Q[i] = C, Q;
        }
        s(g, "process");
        let n = g(o, [o]);
        return r && console.log("[wktcrs] parse returning", n), { data: n };
      }
      s(ce, "parse");
      function mA(A5, e) {
        Array.isArray(A5) && A5.length == 1 && Array.isArray(A5[0]) && (A5 = A5[0]);
        let [t, ...r] = A5;
        return { data: t + "[" + r.map((g) => {
          if (Array.isArray(g)) return mA(g, e).data;
          if (typeof g == "number") return g.toString();
          if (typeof g == "string") return g.startsWith("raw:") ? g.replace("raw:", "") : '"' + g + '"';
          throw new Error('[wktcrs] unexpected attribute "' + g + '"');
        }).join(",") + "]" };
      }
      s(mA, "unparse");
      var R = { parse: ce, unparse: mA, sort: KA };
      typeof define == "function" && define(function() {
        return R;
      });
      typeof b == "object" && (b.exports = R);
      typeof window == "object" && (window.wktcrs = R);
      typeof self == "object" && (self.wktcrs = R);
    });
    var UA = D((Ft, z) => {
      var j = v();
      function le(A5) {
        let { data: e } = j.parse(A5, { raw: true });
        return j.sort(e), j.unparse(e, { raw: true }).data;
      }
      s(le, "sort_wkt");
      function yA(A5, { debug: e = false } = { debug: false }) {
        return A5 = A5.trim(), A5 = A5.replace(/\n/g, " "), A5 = A5.replace(/\t/g, " "), A5 = A5.replace(/ +/g, " "), A5 = A5.replace(/ /g, "_"), A5 = A5.replace('GEOGCS["GCS_', 'GEOGCS["'), A5 = A5.replace('DATUM["D_', 'DATUM["'), A5 = A5.replace("Gauss_Kruger", "GK"), A5 = A5.replace(/\.\d{16,}/g, (t) => t.substr(0, 16)), A5 = A5.replace(/\d+\.0[,"'\]]/g, (t) => t.substring(0, t.indexOf(".")) + t.charAt(t.length - 1)), A5 = A5.replace(/[_|"]1984[_|"]/g, (t) => t.charAt(0) + "84" + t.charAt(t.length - 1)), A5 = A5.replace(/"[A-Za-z_\d]+"/g, (t) => '"' + t.substring(1, t.length - 1).toLowerCase() + '"'), A5 = le(A5), e && console.log('[get-epsg-code] wkt after cleaning: "' + A5 + '"'), A5;
      }
      s(yA, "normalize_wkt");
      z.exports = yA;
      z.exports.default = yA;
    });
    var VA = D((Pt, _) => {
      var we = UA();
      function SA(A5, { debug: e = false } = { debug: false }) {
        return we(A5, { debug: e });
      }
      s(SA, "normalize_esriwkt");
      _.exports = SA;
      _.exports.default = SA;
    });
    var WA = D((Tt, $) => {
      function kA(A5, { debug: e = false, remove_k1: t = true, remove_no_defs: r = true, remove_title: o = true, remove_init: g = true, remove_type: n = true } = {}) {
        A5 = A5.trim(), A5 = A5.replace(/ +/g, " ");
        let C = A5.split(/ ?\+/g).filter((Q) => Q.trim() !== "").sort();
        return t && (C = C.filter((Q) => Q !== "k=1")), r && (C = C.filter((Q) => Q !== "no_defs")), n && (C = C.filter((Q) => !Q.startsWith("type"))), g && (C = C.filter((Q) => !Q.startsWith("init"))), o && (C = C.filter((Q) => !Q.startsWith("title"))), A5 = C.map((Q) => "+" + Q).join(" "), e && console.log(`normalized proj4 string
from "` + arguments[0] + `"
to "` + A5 + '"'), A5;
      }
      s(kA, "normalize_proj4");
      $.exports = kA;
      $.exports.default = kA;
    });
    var qA = D((mt, O2) => {
      var YA = ["PROJECTEDCRS", "PROJCRS", "GEOGCS", "GEOCCS", "PROJCS", "LOCAL_CS", "GEODCRS", "GEODETICCRS", "GEODETICDATUM", "ENGCRS", "ENGINEERINGCRS", "PRIMEM", "DATUM"];
      function u(A5) {
        if (A5 = A5.trim(), A5.startsWith("PROJCS[") || A5.startsWith("PROJCRS[") || A5.startsWith("GEOGCS[") || A5.startsWith("GEOGCRS[")) for (let e = 0; e < YA.length; e++) {
          let t = YA[e];
          if (A5.includes(t + "[")) return true;
        }
        else return false;
      }
      s(u, "isWKT");
      typeof define == "function" && define.amd && define(function() {
        return u;
      });
      typeof O2 == "object" && (O2.exports = u, O2.exports.default = u);
      typeof self == "object" && (self.isWKT = u);
      typeof window == "object" && (window.isWKT = u);
    });
    var AA = D((Ut, XA) => {
      var de = { ESRI_WKT: "esriwkt", GEOSERVER: "geoserver", MAPFILE: "mapfile", MAPNIK: "mapnik", OGC_GML: "gml", OGC_XML: "xml", OGC_WKT: "wkt", POSTGIS: "postgis", PROJ_4: "proj4", PROJ_4_JS: "js", PROJJSON: "PROJJSON", WKT_2: "wkt2" };
      XA.exports = { FORMATS: de };
    });
    var bA = D((St, eA) => {
      var ue = qA(), Ie = v(), { FORMATS: Ge } = AA(), { ESRI_WKT: he, GEOSERVER: Me, MAPFILE: xe, MAPNIK: Ne, OGC_GML: Re, OGC_XML: Oe, OGC_WKT: He, POSTGIS: pe, PROJ_4: Fe, PROJ_4_JS: Je, PROJJSON: Pe, WKT_2: Le } = Ge;
      function ZA(A5, { debug: e = false } = { debug: false }) {
        if (A5.startsWith("{") && A5.includes("projjson")) return Pe;
        if (ue(A5)) {
          let t = Ie.parse(A5.toUpperCase()).data;
          return "AUTHORITY" in (t.PROJCS || t.PROJCRS || t.GEOGCS || t.GEOGCRS) ? He : "ID" in t ? Le : he;
        } else return A5.includes("gml:ProjectedCRS") || A5.includes("gml:GeodeticCRS") || A5.includes("gml:GeographicCRS") ? A5.includes("gml:srsID") ? Oe : Re : A5.startsWith("+") && A5.includes("+proj=") ? Fe : A5.startsWith("proj4.defs(") ? Je : /^\d{1,6}\=(PROJCS|GEOGCS)/.test(A5) ? Me : A5.startsWith("PROJECTION") && A5.endsWith("END") ? xe : A5.endsWith("</Map>") ? Ne : A5.startsWith("INSERT") ? pe : (e && console.log('get-proj-type could not identify "' + A5 + '"'), "SOMETHING ELSE");
      }
      s(ZA, "getProjType");
      eA.exports = ZA;
      eA.exports.default = ZA;
    });
    var jA = D((kt, tA) => {
      function vA(A5, { debug: e = false } = { debug: false }) {
        let t = A5.indexOf(":") + 1, r = A5.indexOf('"', t + 2), o = A5.substring(t, r);
        if (e && console.log('parseProj4JS str: "' + o + '"'), o) return Number(o);
      }
      s(vA, "parseProj4JS");
      tA.exports = vA;
      tA.exports.default = vA;
    });
    var zA = D((Yt, Te) => {
      Te.exports = { properties: { columns: ["epsg_code", "esriwkt", "mapfile", "proj4"], key: "epsg_code", dataType: "int32" }, data: "" };
    });
    var Ke = sA();
    var me = GA();
    var _A = U();
    var ye = MA();
    var $A = FA();
    var Ue = JA();
    var Se = PA();
    var Ve = TA();
    var ke = VA();
    var We = WA();
    var Ye = bA();
    var qe = jA();
    var { FORMATS: Xe } = AA();
    var p = zA();
    var H = s((A5) => A5.default || A5, "getDefault");
    var I2 = [];
    function re(A5) {
      let e = Ke.toArrayBuffer(p.data), t = new Int32Array(e);
      A5 && console.log("arr:", t);
      let r = p.properties.columns.length, o = t.length / r;
      for (let g = 0; g < o; g++) {
        let n = {};
        for (let C = 0; C < r; C++) n[p.properties.columns[C]] = t[g * r + C];
        I2.push(n);
      }
      return A5 && console.log("[get-epsg-code] rows:", I2), I2;
    }
    s(re, "_load_rows");
    function rA(A5, e, t = false) {
      if (!p.properties.columns.includes(e)) throw new Error("[get-epsg-code] " + e + " not supported");
      I2.length === 0 && re(t);
      let r = Ve(A5);
      t && console.log("[get-epsg-code] hashed:", r);
      let o = I2.filter((g) => g[e] === r);
      return t && console.log("[get-epsg-code] found:", o), o.map((g) => g.epsg_code);
    }
    s(rA, "lookup");
    var { ESRI_WKT: Ae, GEOSERVER: Ze, MAPFILE: ee, MAPNIK: be, OGC_GML: ve, OGC_XML: je, OGC_WKT: ze, POSTGIS: _e, PROJJSON: $e, PROJ_4: te, PROJ_4_JS: At, WKT_2: et } = Xe;
    function G(A5, e) {
      var t = e && e.debug ? e.debug : false;
      typeof A5 == "string" && (A5 = A5.trim());
      let r = Ye(A5, { debug: t });
      if (t && console.log("dataType:", r), r === ze) {
        let o = H($A)(A5);
        if (t && console.log("parsed:", o), o.AUTHORITY) {
          let g = o.AUTHORITY;
          return { type: r, codes: [Number(g.epsg || g.EPSG)] };
        }
      } else if (r === et) {
        let o = H($A)(A5);
        if (t && console.log("parsed:", o), typeof o.ID == "object" && typeof o.ID.EPSG == "number") return { type: r, codes: [o.ID.EPSG] };
      } else if (r == Ae) {
        let o = Ue(A5);
        return o ? { type: r, codes: [o] } : (A5 = ke(A5, { debug: t }), { type: r, codes: rA(A5, Ae, t) });
      } else if (r === ve) {
        let o = H(_A)(A5, "gml:identifier", { debug: t }).inner;
        return { type: r, codes: [Number(o.replace("urn:ogc:def:crs:EPSG::", ""))] };
      } else {
        if (r === je) return { type: r, codes: [Number(H(me)(A5, ["gml:srsID", "gml:name"], { debug: t }).inner)] };
        if (r === te) return A5 = We(A5, { debug: t }), A5.startsWith("+") && A5.includes("+proj=utm") ? { type: r, codes: [Se(A5)] } : { type: r, codes: rA(A5, te, t) };
        if (r === At) {
          let o = qe(A5);
          return { type: r, codes: o ? [o] : [] };
        } else {
          if (r === Ze) return { type: r, codes: [Number(A5.match(/^\d{1,6}/)[0])] };
          if (r === ee) {
            if (A5.includes("init=epsg:")) return { type: r, codes: [Number.parseInt(/("init\=epsg:)(\d{1,10})(")/.exec(A5)[2])] };
            if (A5.includes('"proj=utm"')) {
              let o = /("zone\=)(\d{1,2})(")/.exec(A5)[2], g = A5.includes('"south"');
              if (A5.includes("ellps=GRS80") && g === false) return { type: r, codes: [Number.parseInt("269" + o)] };
              {
                let n = g ? "7" : "6";
                return { type: r, codes: [Number.parseInt("32" + n + o)] };
              }
            } else return { type: r, codes: rA(A5, ee, t) };
          } else if (r === be) {
            let o = _A(A5, "Map"), g = ye(o.outer, "srs");
            return { type: r, codes: G(g).codes };
          } else {
            if (r === _e) return { type: r, codes: [Number(A5.substring(A5.indexOf("values (") + 8, A5.indexOf("EPSG") - 3).trim())] };
            if (r === $e) {
              let o = JSON.parse(A5);
              if (typeof o.id == "object" && (o.id.authority === "EPSG" || !("authority" in o.id)) && typeof o.id.code == "number") return { type: r, codes: [o.id.code] };
            }
          }
        }
      }
    }
    s(G, "getEPSGCodes");
    function F(A5, e) {
      let t = G(A5, e);
      if (t) return t.codes[0];
    }
    s(F, "getEPSGCode");
    typeof module < "u" && typeof module.exports < "u" && (module.exports = F, module.exports.getEPSGCode = F, module.exports.getEPSGCodes = G, module.exports._load_rows = re);
    typeof window < "u" ? (window.getEPSGCode = F, window.getEPSGCodes = G) : typeof self < "u" && (self.getEPSGCode = F, self.getEPSGCodes = G);
  }
});

// node_modules/geography-markup-language/dist/geography-markup-language.cjs
var require_geography_markup_language = __commonJS({
  "node_modules/geography-markup-language/dist/geography-markup-language.cjs"(exports, module) {
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __commonJS2 = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var require_polygon2 = __commonJS2({
      "node_modules/.pnpm/bbox-fns@0.6.0/node_modules/bbox-fns/polygon.js"(exports2, module2) {
        function polygon([x0, y0, x1, y1]) {
          return [
            [
              [x0, y1],
              // top-left
              [x0, y0],
              // bottom-left
              [x1, y0],
              // bottom-right
              [x1, y1],
              // top-right
              [x0, y1]
              // top-left
            ]
          ];
        }
        module2.exports = polygon;
        module2.exports.default = polygon;
      }
    });
    var require_get_attribute = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/get-attribute.js"(exports2, module2) {
        function getAttribute8(tag, attributeName, options) {
          const debug = options && options.debug || false;
          if (debug)
            console.log("getting " + attributeName + " in " + tag);
          const xml = typeof tag === "object" ? tag.outer : tag;
          const pattern = `${attributeName}\\="([^"]*)"`;
          if (debug)
            console.log("pattern:", pattern);
          const re = new RegExp(pattern);
          const match2 = re.exec(xml);
          if (debug)
            console.log("match:", match2);
          if (match2)
            return match2[1];
        }
        module2.exports = getAttribute8;
        module2.exports.default = getAttribute8;
      }
    });
    var require_index_of_match = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/index-of-match.js"(exports2, module2) {
        function indexOfMatch(xml, pattern, startIndex) {
          const re = new RegExp(pattern);
          const match2 = re.exec(xml.slice(startIndex));
          if (match2)
            return startIndex + match2.index;
          else
            return -1;
        }
        module2.exports = indexOfMatch;
        module2.exports.default = indexOfMatch;
      }
    });
    var require_index_of_match_end = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/index-of-match-end.js"(exports2, module2) {
        function indexOfMatchEnd(xml, pattern, startIndex) {
          const re = new RegExp(pattern);
          const match2 = re.exec(xml.slice(startIndex));
          if (match2)
            return startIndex + match2.index + match2[0].length - 1;
          else
            return -1;
        }
        module2.exports = indexOfMatchEnd;
        module2.exports.default = indexOfMatchEnd;
      }
    });
    var require_count_substring = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/count-substring.js"(exports2, module2) {
        function countSubstring(string, substring) {
          const pattern = new RegExp(substring, "g");
          const match2 = string.match(pattern);
          return match2 ? match2.length : 0;
        }
        module2.exports = countSubstring;
        module2.exports.default = countSubstring;
      }
    });
    var require_find_tag_by_name = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/find-tag-by-name.js"(exports2, module2) {
        var indexOfMatch = require_index_of_match();
        var indexOfMatchEnd = require_index_of_match_end();
        var countSubstring = require_count_substring();
        function findTagByName4(xml, tagName, options) {
          const debug = options && options.debug || false;
          const nested = !(options && typeof options.nested === false);
          const startIndex = options && options.startIndex || 0;
          if (debug)
            console.log("[xml-utils] starting findTagByName with", tagName, " and ", options);
          const start2 = indexOfMatch(xml, `<${tagName}[ >/]`, startIndex);
          if (debug)
            console.log("[xml-utils] start:", start2);
          if (start2 === -1)
            return void 0;
          const afterStart = xml.slice(start2 + tagName.length);
          let relativeEnd = indexOfMatchEnd(afterStart, "^[^<]*[ /]>", 0);
          const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === "/";
          if (debug)
            console.log("[xml-utils] selfClosing:", selfClosing);
          if (selfClosing === false) {
            if (nested) {
              let startIndex2 = 0;
              let openings = 1;
              let closings = 0;
              while ((relativeEnd = indexOfMatchEnd(afterStart, "[ /]" + tagName + ">", startIndex2)) !== -1) {
                const clip = afterStart.substring(startIndex2, relativeEnd + 1);
                openings += countSubstring(clip, "<" + tagName);
                closings += countSubstring(clip, "/" + tagName + ">");
                if (closings >= openings)
                  break;
                startIndex2 = relativeEnd;
              }
            } else {
              relativeEnd = indexOfMatchEnd(afterStart, "[ /]" + tagName + ">", 0);
            }
          }
          const end = start2 + tagName.length + relativeEnd + 1;
          if (debug)
            console.log("[xml-utils] end:", end);
          if (end === -1)
            return void 0;
          const outer = xml.slice(start2, end);
          let inner;
          if (selfClosing) {
            inner = null;
          } else {
            inner = outer.slice(outer.indexOf(">") + 1, outer.lastIndexOf("<"));
          }
          return { inner, outer, start: start2, end };
        }
        module2.exports = findTagByName4;
        module2.exports.default = findTagByName4;
      }
    });
    var require_find_tags_by_name = __commonJS2({
      "node_modules/.pnpm/xml-utils@1.3.0/node_modules/xml-utils/find-tags-by-name.js"(exports2, module2) {
        var findTagByName4 = require_find_tag_by_name();
        function findTagsByName3(xml, tagName, options) {
          const tags = [];
          const debug = options && options.debug || false;
          const nested = options && typeof options.nested === "boolean" ? options.nested : true;
          let startIndex = options && options.startIndex || 0;
          let tag;
          while (tag = findTagByName4(xml, tagName, { debug, startIndex })) {
            if (nested) {
              startIndex = tag.start + 1 + tagName.length;
            } else {
              startIndex = tag.end;
            }
            tags.push(tag);
          }
          if (debug)
            console.log("findTagsByName found", tags.length, "tags");
          return tags;
        }
        module2.exports = findTagsByName3;
        module2.exports.default = findTagsByName3;
      }
    });
    var geography_markup_language_exports = {};
    __export2(geography_markup_language_exports, {
      Envelope: () => Envelope2,
      Geometry: () => Geometry,
      LineString: () => LineString3,
      Point: () => Point3,
      Polygon: () => Polygon4,
      findGeometries: () => geometries
    });
    module.exports = __toCommonJS2(geography_markup_language_exports);
    var import_polygon2 = __toESM2(require_polygon2(), 1);
    var import_get_attribute = __toESM2(require_get_attribute(), 1);
    var import_find_tags_by_name = __toESM2(require_find_tags_by_name(), 1);
    function find(xml, names36) {
      for (let i = 0; i < names36.length; i++) {
        const name = names36[i];
        const tags = (0, import_find_tags_by_name.default)(xml, name);
        if (tags.length >= 1) {
          return tags;
        }
      }
      return [];
    }
    var Envelope_default = ["gml:envelope", "envelope", "gml:Envelope", "Envelope"];
    function envelope(xml) {
      return find(xml, Envelope_default)[0];
    }
    var import_find_tag_by_name = __toESM2(require_find_tag_by_name(), 1);
    function reorder(point3) {
      const y = point3[0];
      const x = point3[1];
      const rest = point3.slice(2);
      return [x, y].concat(rest);
    }
    function lowerCorner(xml, { order = "default", raw = false } = {}) {
      const tag = (0, import_find_tag_by_name.default)(xml, "gml:lowerCorner") || (0, import_find_tag_by_name.default)("lowerCorner");
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let point3 = inner.trim().split(/[ ,]+/g);
      if (!raw)
        point3 = point3.map((n) => Number(n));
      if (order === "geojson")
        point3 = reorder(point3);
      return point3;
    }
    var import_find_tag_by_name2 = __toESM2(require_find_tag_by_name(), 1);
    function upperCorner(xml, { order = "default", raw = false } = {}) {
      const tag = (0, import_find_tag_by_name2.default)(xml, "gml:upperCorner") || (0, import_find_tag_by_name2.default)("upperCorner");
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let point3 = inner.trim().split(/[ ,]+/g);
      if (!raw)
        point3 = point3.map((n) => Number(n));
      if (order === "geojson")
        point3 = reorder(point3);
      return point3;
    }
    function envelope2(xml, { raw = false } = {}) {
      const tag = envelope(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const lowerCorner2 = lowerCorner(inner, { raw });
      if (!lowerCorner2)
        return;
      const upperCorner2 = upperCorner(inner, { raw });
      if (!upperCorner2)
        return;
      if (lowerCorner2.length !== upperCorner2.length) {
        throw new Error("[geography-markup-language/parse/envelope] inconsistent number of dimensions");
      }
      const srs2 = (0, import_get_attribute.default)(tag.outer, "srsName") || null;
      return { srs: srs2, corners: [lowerCorner2, upperCorner2] };
    }
    function Envelope2(xml, { format = "default" } = {}) {
      let order = "default";
      let raw = false;
      if (format === "geojson") {
        order = "geojson";
      }
      const obj2 = envelope2(xml, { order, raw });
      if (!obj2)
        return;
      if (!format || format === "default")
        return obj2;
      const { srs: srs2, corners } = obj2;
      const [lowerCorner2, upperCorner2] = corners;
      if (format === "bbox" || format === "geojson") {
        const [ymin, xmin, ...lowerCornerRest] = lowerCorner2;
        const [ymax, xmax, ...upperCornerRest] = upperCorner2;
        if (format === "bbox") {
          return [xmin, ymin, ...lowerCornerRest, xmax, ymax, ...upperCornerRest];
        } else if (format === "geojson") {
          const bbox = [xmin, ymin, xmax, ymax];
          const feature = {
            type: "Feature",
            bbox,
            properties: {},
            geometry: {
              type: "Polygon",
              coordinates: (0, import_polygon2.default)(bbox)
            }
          };
          if (srs2) {
            feature.properties.srsName = srs2;
            feature.crs = {
              type: "name",
              properties: {
                name: srs2
              }
            };
          }
          return feature;
        }
      }
    }
    var import_get_attribute4 = __toESM2(require_get_attribute(), 1);
    var LineString_default = ["gml:LineString", "LineString", "gml:lineString", "lineString", "gml:linestring", "linestring"];
    function LineString(xml) {
      return find(xml, LineString_default)[0];
    }
    var import_get_attribute2 = __toESM2(require_get_attribute(), 1);
    function coordinates(xml) {
      return find(xml, ["gml:coordinates", "coordinates", "gml:Coordinates", "Coordinates"])[0];
    }
    function chunk(arr, chunkSize = 2) {
      const result2 = [];
      for (let i = 0; i < arr.length; i += chunkSize) {
        const chunk2 = [];
        for (let c = 0; c < chunkSize; c++) {
          chunk2.push(arr[i + c]);
        }
        result2.push(chunk2);
      }
      return result2;
    }
    function coordinates2(xml, { debug = false, order = "default", raw = false } = {}) {
      const tag = coordinates(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let nums = inner.trim().split(/[ ,\t\n]+/g);
      if (!raw) {
        if (debug)
          console.log("[geography-markup-language] converting to numbers");
        nums = nums.map((n) => Number(n));
      }
      const srsDimension = (0, import_get_attribute2.default)(tag, "srsDimension");
      const chunkSize = srsDimension ? Number(srsDimension) : 2;
      let points = chunk(nums, chunkSize);
      if (order === "geojson") {
        points = points.map((pt) => reorder(pt));
      }
      if (points.length === 1) {
        return points[0];
      } else {
        return points;
      }
    }
    var import_get_attribute3 = __toESM2(require_get_attribute(), 1);
    function posLists(xml) {
      return find(xml, ["gml:posList", "posList", "gml:PosList", "PosList", "gml:poslist", "poslist"]);
    }
    function posList(xml) {
      return posLists(xml)[0];
    }
    function posList2(xml, { debug = false, order = "default", raw = false } = {}) {
      const tag = posList(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let nums = inner.trim().split(/[ ,\t\n]+/g);
      if (!raw) {
        if (debug)
          console.log("[geography-markup-language] converting to numbers");
        nums = nums.map((n) => Number(n));
      }
      const srsDimension = (0, import_get_attribute3.default)(tag, "srsDimension");
      const chunkSize = srsDimension ? Number(srsDimension) : 2;
      let points = chunk(nums, chunkSize);
      if (order === "geojson") {
        points = points.map((pt) => reorder(pt));
      }
      return points;
    }
    function LineString2(xml, { debug, order, raw } = {}) {
      const tag = LineString(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const coords = posList2(inner, { debug, order, raw }) || coordinates2(inner, { debug, order, raw });
      const result2 = {
        type: "LineString",
        coords
      };
      const srsName = (0, import_get_attribute4.default)(tag.outer, "srsName");
      if (debug)
        console.log("[geography-markup-language] srsName:", srs);
      if (srsName) {
        result2.srs = srsName;
      }
      return result2;
    }
    function LineString3(xml, { format = "default" } = { format: "default " }) {
      if (format === "geojson") {
        const { coords, srs: srs2 } = LineString2(xml, { order: "geojson" });
        const feature = {
          type: "Feature",
          properties: {},
          geometry: {
            type: "LineString",
            coordinates: coords
          }
        };
        if (srs2) {
          feature.properties.srsName = srs2;
          feature.crs = {
            type: "name",
            properties: {
              name: srs2
            }
          };
        }
        return feature;
      } else {
        const obj2 = LineString2(xml);
        return obj2;
      }
    }
    var import_get_attribute5 = __toESM2(require_get_attribute(), 1);
    var Point_default2 = ["gml:Point", "Point", "gml:point", "point"];
    function Points(xml) {
      return find(xml, Point_default2);
    }
    function Point2(xml) {
      return Points(xml)[0];
    }
    var import_find_tag_by_name3 = __toESM2(require_find_tag_by_name(), 1);
    function pos(xml, { order = "default", raw = false } = {}) {
      const tag = (0, import_find_tag_by_name3.default)(xml, "gml:pos") || (0, import_find_tag_by_name3.default)("pos");
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      let point3 = inner.trim().split(/[ ,]+/g);
      if (!raw)
        point3 = point3.map((n) => Number(n));
      if (order === "geojson")
        point3 = reorder(point3);
      return point3;
    }
    function Point22(xml, { debug, raw } = {}) {
      const tag = Point2(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const point3 = pos(inner, { debug, raw }) || (posList2(inner, { debug, raw }) || [])[0] || coordinates2(inner, { debug, raw });
      if (!point3 || point3.length === 0)
        return;
      const [y, x, z = null] = point3;
      return {
        type: "Point",
        srs: (0, import_get_attribute5.default)(tag.outer, "srsName") || null,
        coord: point3,
        x,
        y,
        z
      };
    }
    function Point3(xml, { format = "default" } = { format: "default" }) {
      const obj2 = Point22(xml);
      if (!format || format === "default")
        return obj2;
      const { x, y, srs: srs2 } = obj2;
      if (format === "geojson") {
        const feature = {
          type: "Feature",
          properties: {},
          geometry: {
            type: "Point",
            coordinates: [x, y]
          }
        };
        if (srs2) {
          feature.properties.srsName = srs2;
          feature.crs = {
            type: "name",
            properties: {
              name: srs2
            }
          };
        }
        return feature;
      }
    }
    var import_get_attribute7 = __toESM2(require_get_attribute(), 1);
    function innerBoundaries(xml) {
      return find(xml, ["gml:innerBoundaryIs", "innerBoundaryIs", "gml:InnerBoundaryIs", "InnerBoundaryIs", "gml:innerboundaryis", "innerboundaryis"]);
    }
    function interiors(xml) {
      return find(xml, ["gml:interior", "interior", "gml:Interior", "Interior"]);
    }
    var Polygon_default = ["gml:Polygon", "polygon", "gml:polygon", "polygon"];
    function Polygon(xml) {
      return find(xml, Polygon_default);
    }
    function Polygon2(xml) {
      return Polygon(xml)[0];
    }
    function exteriors(xml) {
      return find(xml, ["gml:exterior", "exterior", "gml:Exterior", "Exterior"]);
    }
    function exterior(xml) {
      return exteriors(xml)[0];
    }
    var import_get_attribute6 = __toESM2(require_get_attribute(), 1);
    function LinearRing(xml) {
      return find(xml, ["gml:LinearRing", "LinearRing", "gml:linearRing", "linearRing", "gml:linearring", "linearring"])[0];
    }
    function LinearRing2(xml, { debug, order = "default", raw } = {}) {
      const tag = LinearRing(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const coordinatesTag = coordinates(inner);
      if (coordinatesTag) {
        return coordinates2(coordinatesTag.outer, { debug, order, raw });
      }
      const posListTag = posList(xml);
      if (posListTag) {
        return posList2(posListTag.outer, { debug, order, raw });
      }
      let nums = inner.trim().split(/[ ,\t\n]+/g);
      if (!raw) {
        if (debug)
          console.log("[geography-markup-language] converting to numbers");
        nums = nums.map((n) => Number(n));
      }
      const srsDimension = (0, import_get_attribute6.default)(tag, "srsDimension");
      const chunkSize = srsDimension ? Number(srsDimension) : 2;
      let points = chunk(nums, chunkSize);
      if (order === "geojson") {
        points = points.map((pt) => reorder(pt));
      }
      return points;
    }
    function exterior2(xml, { debug, order, raw } = {}) {
      const tag = exterior(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      return LinearRing2(inner, { debug, order, raw });
    }
    function innerBoundaries2(xml) {
      return innerBoundaries(xml)[0];
    }
    function innerBoundaryIs(xml, { debug, order, raw } = {}) {
      const tag = innerBoundaries2(xml.outer);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      return LinearRing2(inner, { debug, order, raw });
    }
    function interior(xml) {
      return interiors(xml)[0];
    }
    function interior2(xml, { debug, order, raw } = {}) {
      const tag = interior(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      return LinearRing2(inner, { debug, order, raw });
    }
    function outerBoundaryIs(xml) {
      return find(xml, ["gml:outerBoundaryIs", "outerBoundaryIs", "gml:OuterBoundaryIs", "OuterBoundaryIs", "gml:outerboundaryis", "outerboundaryis"])[0];
    }
    function outerBoundaryIs2(xml, { debug, order, raw } = {}) {
      const tag = outerBoundaryIs(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      return LinearRing2(inner, { debug, order, raw });
    }
    function Polygon3(xml, { debug, order, raw } = {}) {
      const tag = Polygon2(xml);
      if (!tag)
        return;
      const { inner } = tag;
      if (!inner)
        return;
      const exterior3 = exterior2(xml, { debug, order, raw }) || outerBoundaryIs2(xml, { debug, order, raw });
      let holes = interiors(xml).map((interior3) => interior2(interior3, { debug, order, raw }));
      if (holes.length === 0) {
        holes = innerBoundaries(xml).map((boundary) => innerBoundaryIs(boundary, { debug, order, raw }));
      }
      const rings = [exterior3].concat(holes);
      const result2 = {
        type: "Polygon",
        rings
      };
      const srsName = (0, import_get_attribute7.default)(tag.outer, "srsName");
      if (debug)
        console.log("[geography-markup-language] srsName:", srs);
      if (srsName) {
        result2.srs = srsName;
      }
      return result2;
    }
    function Polygon4(xml, { format = "default" } = {}) {
      if (format === "geojson") {
        const { rings, srs: srs2 } = Polygon3(xml, { order: "geojson" });
        const feature = {
          type: "Feature",
          properties: {},
          geometry: {
            type: "Polygon",
            coordinates: rings
          }
        };
        if (srs2) {
          feature.properties.srsName = srs2;
          feature.crs = {
            type: "name",
            properties: {
              name: srs2
            }
          };
        }
        return feature;
      } else {
        const obj2 = Polygon3(xml);
        return obj2;
      }
    }
    function Geometry(xml, { format = "default" } = { format: "default" }) {
      const envelope3 = envelope(xml);
      if (envelope3) {
        const result2 = Envelope2(envelope3.outer, { format });
        if (result2) {
          return result2;
        }
      }
      const lineString = LineString(xml);
      if (lineString) {
        const result2 = LineString3(lineString.outer, { format });
        if (result2) {
          return result2;
        }
      }
      const point3 = Point2(xml);
      if (point3) {
        const result2 = Point3(point3.outer, { format });
        if (result2) {
          return result2;
        }
      }
      const polygon = Polygon2(xml);
      if (polygon) {
        const result2 = Polygon4(polygon.outer, { format });
        if (result2) {
          return result2;
        }
      }
    }
    var import_find_tags_by_name2 = __toESM2(require_find_tags_by_name(), 1);
    function find2(xml, names36) {
      let tags = [];
      for (let i = 0; i < names36.length; i++) {
        const name = names36[i];
        tags = tags.concat((0, import_find_tags_by_name2.default)(xml, name));
      }
      return tags;
    }
    var GEOMETRY_TAG_NAMES;
    function geometries(xml) {
      if (!GEOMETRY_TAG_NAMES)
        GEOMETRY_TAG_NAMES = Envelope_default.concat(LineString_default).concat(Point_default2).concat(Polygon_default);
      return find2(xml, GEOMETRY_TAG_NAMES).map((tag) => tag.outer);
    }
  }
});

// node_modules/bbox-fns/reproject.js
var require_reproject = __commonJS({
  "node_modules/bbox-fns/reproject.js"(exports, module) {
    "use_strict";
    var bboxArray2 = require_bbox_array();
    var densePolygon3 = require_dense_polygon();
    function reproject(bbox, fwd, { async = false, density, nan_strategy = "throw" } = {}) {
      const polygon = densePolygon3(bbox, { density });
      const ring = polygon[0];
      const reprojected = ring.map((pt) => fwd(pt));
      if (async) {
        return Promise.all(reprojected).then((points) => bboxArray2(points, { nan_strategy }));
      } else {
        return bboxArray2(reprojected, { nan_strategy });
      }
    }
    module.exports = reproject;
    module.exports.default = reproject;
  }
});

// node_modules/reproject-bbox/reproject-bbox.js
var require_reproject_bbox = __commonJS({
  "node_modules/reproject-bbox/reproject-bbox.js"(exports, module) {
    var merge = require_proj4_merge();
    var proj43 = require_proj4_fully_loaded();
    var bboxMerge2 = require_merge();
    var bboxSplit = require_split();
    var reproject = require_reproject();
    if (typeof merge !== "function") {
      console.warn("[reproject-bbox] failed to import proj4-merge");
    }
    var CUSTOM_PROJECTION_ERROR = "[reproject-bbox] You passed in a value of 32767 for {{%s}}, which means a custom non-standard projection.  Please pass in a Well-Known Text or PROJ4JS String instead.";
    function reprojectBoundingBox2({ bbox, debug_level = 0, density, from, nan_strategy = "throw", proj4: _proj4, split = true, to }) {
      if (from === 32767) throw new Error(CUSTOM_PROJECTION_ERROR.replace("{{%s}}", "from"));
      if (to === 32767) throw new Error(CUSTOM_PROJECTION_ERROR.replace("{{%s}}", "to"));
      if (typeof from === "number") from = "EPSG:" + from;
      if (typeof to === "number") to = "EPSG:" + to;
      const instances = [_proj4, proj43];
      if (typeof window === "object" && window.proj4) instances.push(window.proj4);
      if (typeof self === "object" && self.proj4) instances.push(self.proj4);
      const proj = merge(instances);
      const fwd = proj(from, to).forward;
      const bboxes = split ? bboxSplit(bbox, { x: [0], y: [0] }) : [bbox];
      if (debug_level >= 2) console.log("[reproject-bbox] bboxes:", bboxes);
      const bboxes_reprojected = bboxes.map((bbox2) => {
        return reproject(bbox2, fwd, { density, nan_strategy });
      });
      if (debug_level >= 2) console.log("[reproject-bbox] bboxes_reprojected:", bboxes_reprojected);
      const merged = bboxMerge2(bboxes_reprojected);
      return merged;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return reprojectBoundingBox2;
      });
    }
    if (typeof module === "object") {
      module.exports = reprojectBoundingBox2;
      module.exports.default = reprojectBoundingBox2;
    }
    if (typeof window === "object") {
      window.reprojectBoundingBox = reprojectBoundingBox2;
    }
    if (typeof self === "object") {
      self.reprojectBoundingBox = reprojectBoundingBox2;
    }
  }
});

// node_modules/bbox-fns/bbox-area.js
var require_bbox_area = __commonJS({
  "node_modules/bbox-fns/bbox-area.js"(exports, module) {
    "use strict";
    function bboxArea([xmin, ymin, xmax, ymax]) {
      return (xmax - xmin) * (ymax - ymin);
    }
    module.exports = bboxArea;
    module.exports.default = bboxArea;
  }
});

// node_modules/bbox-fns/bbox-point.js
var require_bbox_point = __commonJS({
  "node_modules/bbox-fns/bbox-point.js"(exports, module) {
    "use strict";
    function bboxPoint([x, y]) {
      return [x, y, x, y];
    }
    module.exports = bboxPoint;
    module.exports.default = bboxPoint;
  }
});

// node_modules/bbox-fns/bbox-size.js
var require_bbox_size = __commonJS({
  "node_modules/bbox-fns/bbox-size.js"(exports, module) {
    "use strict";
    function bboxSize([xmin, ymin, xmax, ymax]) {
      return [xmax - xmin, ymax - ymin];
    }
    module.exports = bboxSize;
    module.exports.default = bboxSize;
  }
});

// node_modules/bbox-fns/boolean-contains-point.js
var require_boolean_contains_point = __commonJS({
  "node_modules/bbox-fns/boolean-contains-point.js"(exports, module) {
    "use_strict";
    function booleanContainsPoint([xmin, ymin, xmax, ymax], [x, y], { exclusive = false } = { exclusive: false }) {
      if (exclusive) {
        return y < ymax && y > ymin && x < xmax && x > xmin;
      } else {
        return y >= ymin && y <= ymax && x >= xmin && x <= xmax;
      }
    }
    module.exports = booleanContainsPoint;
    module.exports.default = booleanContainsPoint;
  }
});

// node_modules/bbox-fns/boolean-rectangle.js
var require_boolean_rectangle = __commonJS({
  "node_modules/bbox-fns/boolean-rectangle.js"(exports, module) {
    var VALID_ORDERING = [
      // clockwise
      "right -> down -> left -> up",
      "down -> left -> up -> right",
      "left -> up -> right -> down",
      "up -> right -> down -> left",
      // counter-clockwise
      "down -> right -> up -> left",
      "right -> up -> left -> down",
      "up -> left -> down -> right",
      "left -> down -> right -> up"
    ];
    function booleanRectangle(coords, { debug = 0 } = { debug: 0 }) {
      if (!Array.isArray(coords)) {
        if (debug) {
          console.log("[bbox-fns/booleanRectangle] coords is not an array");
        }
        return false;
      }
      if (coords.length === 1) coords = coords[0];
      if (coords.length === 1) coords = coords[0];
      if (!coords.every((pt) => Array.isArray(pt) && pt.every((n) => typeof n === "number"))) {
        if (debug) console.log("[bbox-fns/booleanRectangle] invalid points");
        return false;
      }
      if (JSON.stringify(coords[0]) !== JSON.stringify(coords[coords.length - 1])) {
        if (debug) console.log("[bbox-fns/booleanRectangle] first and last coordinates not equal");
        return false;
      }
      let order = [];
      for (let i = 1; i < coords.length; i++) {
        const [x0, y0] = coords[i - 1];
        const [x1, y1] = coords[i];
        const vertical = x0 === x1;
        const horizontal = y0 === y1;
        if (vertical === horizontal) {
          if (debug) console.log("[bbox-fns/booleanRectangle] invalid angle");
          return false;
        }
        let direction;
        if (vertical) {
          direction = y1 > y0 ? "up" : "down";
        } else if (horizontal) {
          direction = x1 > x0 ? "right" : "left";
        }
        if (direction !== order[order.length - 1]) {
          if (order.length === 4) {
            if (debug) console.log("[bbox-fns/booleanRectangle] more than 4 turns");
            return false;
          }
          order.push(direction);
        }
      }
      order = order.join(" -> ");
      if (debug) console.log("[bbox-fns/booleanRectangle] order: " + order);
      if (VALID_ORDERING.indexOf(order) === -1) {
        if (debug) console.log("[bbox-fns/booleanRectangle] invalid order");
        return false;
      }
      return true;
    }
    module.exports = booleanRectangle;
    module.exports.default = booleanRectangle;
  }
});

// node_modules/bbox-fns/calc.js
var require_calc = __commonJS({
  "node_modules/bbox-fns/calc.js"(exports, module) {
    "use_strict";
    var merge = require_merge();
    function calc(geom) {
      if (geom.geometry) geom = geom.geometry;
      if (geom.coordinates) geom = geom.coordinates;
      if (geom.paths) geom = geom.paths;
      if (geom.points) geom = geom.points;
      if (geom.rings) geom = geom.rings;
      if (Array.isArray(geom.features)) {
        return merge(geom.features.map(calc));
      }
      if (Array.isArray(geom.geometries)) {
        return merge(geom.geometries.map(calc));
      }
      if (Array.isArray(geom) && Array.isArray(geom[0]) && Array.isArray(geom[0][0])) {
        return merge(geom.map(calc));
      }
      if (Array.isArray(geom) && Array.isArray(geom[0]) && typeof geom[0][0] === "number") {
        const [x, y] = geom[0];
        let xmin = x;
        let ymin = y;
        let xmax = x;
        let ymax = y;
        geom.forEach(([px, py]) => {
          if (px < xmin) xmin = px;
          if (px > xmax) xmax = px;
          if (py < ymin) ymin = py;
          if (py > ymax) ymax = py;
        });
        return [xmin, ymin, xmax, ymax];
      }
      if (Array.isArray(geom) && (geom.length === 2 || geom.length === 3) && typeof geom[0] === "number") {
        const [x, y] = geom;
        return [x, y, x, y];
      }
      if (typeof geom.x === "number" && typeof geom.y === "number") {
        const { x, y } = geom;
        return [x, y, x, y];
      }
      if (["xmin", "xmax", "ymin", "ymax"].every((k) => typeof geom[k] === "number")) {
        return [geom.xmin, geom.ymin, geom.xmax, geom.ymax];
      }
    }
    module.exports = calc;
    module.exports.default = calc;
  }
});

// node_modules/bbox-fns/dedupe.js
var require_dedupe = __commonJS({
  "node_modules/bbox-fns/dedupe.js"(exports, module) {
    function dedupe(arr) {
      const strs = [];
      for (let i = 0; i < arr.length; i++) {
        const it = arr[i];
        const s = JSON.stringify(it);
        if (strs.indexOf(s) === -1) {
          strs.push(s);
        }
      }
      return strs.map((s) => JSON.parse(s));
    }
    module.exports = dedupe;
    module.exports.default = dedupe;
  }
});

// node_modules/bbox-fns/calc-all.js
var require_calc_all = __commonJS({
  "node_modules/bbox-fns/calc-all.js"(exports, module) {
    "use_strict";
    var dedupe = require_dedupe();
    function flatten(arr) {
      const out = [];
      for (let a = 0; a < arr.length; a++) {
        const it = arr[a];
        for (let i = 0; i < it.length; i++) {
          out.push(it[i]);
        }
      }
      return out;
    }
    function calcAll(geom) {
      if (geom.geometry) geom = geom.geometry;
      if (geom.coordinates) geom = geom.coordinates;
      if (geom.paths) geom = geom.paths;
      if (geom.points) geom = geom.points;
      if (geom.rings) geom = geom.rings;
      if (Array.isArray(geom.features)) {
        return dedupe(flatten(geom.features.map(calcAll)));
      }
      if (Array.isArray(geom.geometries)) {
        return dedupe(flatten(geom.geometries.map(calcAll)));
      }
      if (Array.isArray(geom) && Array.isArray(geom[0]) && Array.isArray(geom[0][0])) {
        return dedupe(flatten(geom.map(calcAll)));
      }
      if (Array.isArray(geom) && Array.isArray(geom[0]) && typeof geom[0][0] === "number") {
        const [x, y] = geom[0];
        let xmin = x;
        let ymin = y;
        let xmax = x;
        let ymax = y;
        geom.forEach(([px, py]) => {
          if (px < xmin) xmin = px;
          if (px > xmax) xmax = px;
          if (py < ymin) ymin = py;
          if (py > ymax) ymax = py;
        });
        return [[xmin, ymin, xmax, ymax]];
      }
      if (Array.isArray(geom) && (geom.length === 2 || geom.length === 3) && typeof geom[0] === "number") {
        const [x, y] = geom;
        return [[x, y, x, y]];
      }
      if (typeof geom.x === "number" && typeof geom.y === "number") {
        const { x, y } = geom;
        return [[x, y, x, y]];
      }
      if (["xmin", "xmax", "ymin", "ymax"].every((k) => typeof geom[k] === "number")) {
        return [[geom.xmin, geom.ymin, geom.xmax, geom.ymax]];
      }
    }
    module.exports = calcAll;
    module.exports.default = calcAll;
  }
});

// node_modules/bbox-fns/grid.js
var require_grid = __commonJS({
  "node_modules/bbox-fns/grid.js"(exports, module) {
    "use strict";
    function grid([xmin, ymin, xmax, ymax], div) {
      if (typeof div === "number") div = [div, div];
      else if (typeof div === "undefined") div = [2, 2];
      const [columns, rows] = div;
      const height = ymax - ymin;
      const width = xmax - xmin;
      const cells = [];
      const cell_width = width / columns;
      const cell_height = height / rows;
      for (let r = 0; r < rows; r++) {
        const cell_ymin = ymin + r * cell_height;
        const cell_ymax = r === rows.length - 1 ? ymax : cell_ymin + cell_height;
        for (let c = 0; c < columns; c++) {
          const cell_xmin = xmin + c * cell_width;
          const cell_xmax = c === columns.length - 1 ? xmax : cell_xmin + cell_width;
          cells.push([cell_xmin, cell_ymin, cell_xmax, cell_ymax]);
        }
      }
      return cells;
    }
    module.exports = grid;
    module.exports.default = grid;
  }
});

// node_modules/bbox-fns/intersect.js
var require_intersect = __commonJS({
  "node_modules/bbox-fns/intersect.js"(exports, module) {
    "use_strict";
    var booleanIntersects2 = require_boolean_intersects();
    function intersect(a, b) {
      const [axmin, aymin, axmax, aymax] = a;
      const [bxmin, bymin, bxmax, bymax] = b;
      if (!booleanIntersects2(a, b)) return null;
      return [Math.max(axmin, bxmin), Math.max(aymin, bymin), Math.min(axmax, bxmax), Math.min(aymax, bymax)];
    }
    module.exports = intersect;
    module.exports.default = intersect;
  }
});

// node_modules/bbox-fns/precise/dense-polygon.js
var require_dense_polygon2 = __commonJS({
  "node_modules/bbox-fns/precise/dense-polygon.js"(exports, module) {
    "use_strict";
    var add3 = require_add();
    var divide2 = require_divide();
    var multiply2 = require_multiply();
    var subtract2 = require_subtract();
    function preciseDensePolygon(bbox, { density = 0 } = { density: 0 }) {
      bbox = bbox.map((n) => n.toString());
      let [xmin, ymin, xmax, ymax] = bbox;
      if (typeof density === "number" || typeof density === "string") density = [density, density];
      density = density.map((n) => n.toString());
      const [x_density, y_density] = density;
      const height = subtract2(ymax, ymin);
      const width = subtract2(xmax, xmin);
      const ring = [];
      const x_distance = divide2(width, add3(x_density, "1"));
      const y_distance = divide2(height, add3(y_density, "1"));
      ring.push([xmin, ymax]);
      for (let i = 1; i <= y_density; i++) {
        ring.push([xmin, subtract2(ymax, multiply2(i.toString(), y_distance))]);
      }
      ring.push([xmin, ymin]);
      for (let i = 1; i <= x_density; i++) {
        ring.push([add3(xmin, multiply2(i.toString(), x_distance)), ymin]);
      }
      ring.push([xmax, ymin]);
      for (let i = 1; i <= y_density; i++) {
        ring.push([xmax, add3(ymin, multiply2(i.toString(), y_distance))]);
      }
      ring.push([xmax, ymax]);
      for (let i = 1; i <= x_density; i++) {
        ring.push([subtract2(xmax, multiply2(i.toString(), x_distance)), ymax]);
      }
      ring.push([xmin, ymax]);
      return [ring];
    }
    module.exports = preciseDensePolygon;
    module.exports.default = preciseDensePolygon;
  }
});

// node_modules/bbox-fns/precise/divide.js
var require_divide2 = __commonJS({
  "node_modules/bbox-fns/precise/divide.js"(exports, module) {
    "use strict";
    var divide2 = require_divide();
    function preciseDivide([xmin, ymin, xmax, ymax], div, { ellipsis = false, max_decimal_digits = 100 } = {}) {
      const [dx, dy] = typeof div === "string" || typeof div === "number" ? [div, div] : div.length === 1 ? [div[0].toString(), div[0].toString()] : div;
      const opts = { ellipsis, max_decimal_digits };
      const dxstr = dx.toString();
      const dystr = dy.toString();
      return [divide2(xmin.toString(), dxstr, opts), divide2(ymin.toString(), dystr, opts), divide2(xmax.toString(), dxstr, opts), divide2(ymax.toString(), dystr, opts)];
    }
    module.exports = preciseDivide;
    module.exports.default = preciseDivide;
  }
});

// node_modules/preciso/compare.js
var require_compare = __commonJS({
  "node_modules/preciso/compare.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var compare_positive = require_compare_positive();
    function compare(a, b) {
      a = clean(a);
      b = clean(b);
      const a_is_positive = a[0] !== "-";
      const b_is_positive = b[0] !== "-";
      if (a_is_positive) {
        if (b_is_positive) {
          return compare_positive(a, b);
        } else {
          return ">";
        }
      } else if (b_is_positive) {
        return "<";
      } else {
        return compare_positive(b.substring(1), a.substring(1));
      }
    }
    module.exports = compare;
    module.exports.default = compare;
  }
});

// node_modules/bbox-fns/precise/bbox-array.js
var require_bbox_array2 = __commonJS({
  "node_modules/bbox-fns/precise/bbox-array.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    function bboxArray2(points) {
      const count = points.length;
      const [x, y] = points[0];
      let xmin = x;
      let xmax = x;
      let ymin = y;
      let ymax = y;
      for (let i = 1; i < count; i++) {
        const [x2, y2] = points[i];
        if (compare(x2, xmin) === "<") xmin = x2;
        else if (compare(x2, xmax) === ">") xmax = x2;
        if (compare(y2, ymin) === "<") ymin = y2;
        else if (compare(y2, ymax) === ">") ymax = y2;
      }
      return [xmin, ymin, xmax, ymax];
    }
    module.exports = bboxArray2;
    module.exports.default = bboxArray2;
  }
});

// node_modules/bbox-fns/precise/reproject.js
var require_reproject2 = __commonJS({
  "node_modules/bbox-fns/precise/reproject.js"(exports, module) {
    "use_strict";
    var preciseBboxArray = require_bbox_array2();
    var preciseDensePolygon = require_dense_polygon2();
    function preciseReproject(bbox, reproject, { async = false, density } = {}) {
      const polygon = preciseDensePolygon(bbox, { density });
      const ring = polygon[0];
      const reprojected = ring.map((pt) => reproject(pt));
      if (async) {
        return Promise.all(reprojected).then((points) => preciseBboxArray(points));
      } else {
        return preciseBboxArray(reprojected);
      }
    }
    module.exports = preciseReproject;
    module.exports.default = preciseReproject;
  }
});

// node_modules/bbox-fns/scale.js
var require_scale = __commonJS({
  "node_modules/bbox-fns/scale.js"(exports, module) {
    "use strict";
    function scale([xmin, ymin, xmax, ymax], scl) {
      const [sx, sy] = typeof scl === "number" ? [scl, scl] : scl.length === 1 ? [scl[0], scl[0]] : scl;
      return [xmin * sx, ymin * sy, xmax * sx, ymax * sy];
    }
    module.exports = scale;
    module.exports.default = scale;
  }
});

// node_modules/bbox-fns/validate.js
var require_validate = __commonJS({
  "node_modules/bbox-fns/validate.js"(exports, module) {
    "use strict";
    function validate(bbox) {
      if (!Array.isArray(bbox)) return false;
      if (bbox.length !== 4) return false;
      if (bbox.some((n) => typeof n !== "number")) return false;
      const [xmin, ymin, xmax, ymax] = bbox;
      if (xmin > xmax) return false;
      if (ymin > ymax) return false;
      return true;
    }
    module.exports = validate;
    module.exports.default = validate;
  }
});

// node_modules/bbox-fns/precise/validate.js
var require_validate2 = __commonJS({
  "node_modules/bbox-fns/precise/validate.js"(exports, module) {
    var compare = require_compare();
    function preciseValidate(bbox) {
      if (!Array.isArray(bbox)) return false;
      if (bbox.length !== 4) return false;
      if (bbox.some((n) => typeof n !== "string")) return false;
      const [xmin, ymin, xmax, ymax] = bbox;
      if (compare(xmin, xmax) === ">") return false;
      if (compare(ymin, ymax) === ">") return false;
      return true;
    }
    module.exports = preciseValidate;
    module.exports.default = preciseValidate;
  }
});

// node_modules/bbox-fns/index.js
var require_bbox_fns = __commonJS({
  "node_modules/bbox-fns/index.js"(exports, module) {
    "use_strict";
    var bboxArea = require_bbox_area();
    var bboxArray2 = require_bbox_array();
    var bboxPoint = require_bbox_point();
    var bboxSize = require_bbox_size();
    var booleanContains2 = require_boolean_contains();
    var booleanContainsPoint = require_boolean_contains_point();
    var booleanIntersects2 = require_boolean_intersects();
    var booleanRectangle = require_boolean_rectangle();
    var calc = require_calc();
    var calcAll = require_calc_all();
    var densePolygon3 = require_dense_polygon();
    var grid = require_grid();
    var intersect = require_intersect();
    var merge = require_merge();
    var polygon = require_polygon();
    var preciseDensePolygon = require_dense_polygon2();
    var preciseDivide = require_divide2();
    var preciseReproject = require_reproject2();
    var reproject = require_reproject();
    var scale = require_scale();
    var shift = require_shift();
    var sort = require_sort();
    var split = require_split();
    var validate = require_validate();
    var preciseValidate = require_validate2();
    var union = require_union();
    var unwrap2 = require_unwrap();
    var bboxfns = {
      bboxArea,
      bboxArray: bboxArray2,
      bboxPoint,
      bboxSize,
      booleanContains: booleanContains2,
      booleanContainsPoint,
      booleanIntersects: booleanIntersects2,
      booleanRectangle,
      calc,
      calcAll,
      densePolygon: densePolygon3,
      grid,
      intersect,
      merge,
      polygon,
      preciseDensePolygon,
      preciseDivide,
      preciseReproject,
      reproject,
      scale,
      shift,
      split,
      validate,
      preciseValidate,
      sort,
      union,
      unwrap: unwrap2
    };
    if (typeof define === "function" && define.amd) {
      define(function() {
        return bboxfns;
      });
    }
    if (typeof module === "object") {
      module.exports = bboxfns;
    }
    if (typeof window === "object") {
      window.bboxfns = bboxfns;
    }
    if (typeof self === "object") {
      self.bboxfns = bboxfns;
    }
  }
});

// node_modules/dufour-peyton-intersection/src/categorize-intersection.js
var require_categorize_intersection = __commonJS({
  "node_modules/dufour-peyton-intersection/src/categorize-intersection.js"(exports, module) {
    "use strict";
    module.exports = function categorizeIntersection(segments) {
      try {
        let through, xmin, xmax;
        const n = segments.length;
        const first = segments[0];
        if (n === 1) {
          through = true;
          xmin = first.xmin;
          xmax = first.xmax;
        } else {
          const last = segments[n - 1];
          through = first.direction === last.direction;
          xmin = Math.min(first.xmin, last.xmin);
          xmax = Math.max(first.xmax, last.xmax);
        }
        if (xmin === void 0 || xmax === void 0 || through === void 0 || isNaN(xmin) || isNaN(xmax)) {
          throw Error("categorizeIntersection failed with xmin", xmin, "and xmax", xmax);
        }
        return { xmin, xmax, through };
      } catch (error) {
        console.error("[categorizeIntersection] segments:", segments);
        console.error("[categorizeIntersection]", error);
        throw error;
      }
    };
  }
});

// node_modules/dufour-peyton-intersection/src/clamp.js
var require_clamp = __commonJS({
  "node_modules/dufour-peyton-intersection/src/clamp.js"(exports, module) {
    "use strict";
    module.exports = function clamp(n, min, max) {
      if (n < min) return min;
      else if (n > max) return max;
      return n;
    };
  }
});

// node_modules/dufour-peyton-intersection/src/cluster.js
var require_cluster = __commonJS({
  "node_modules/dufour-peyton-intersection/src/cluster.js"(exports, module) {
    "use strict";
    module.exports = function cluster(items, newClusterTest) {
      try {
        const numberOfItems = items.length;
        const clusters = [];
        let cluster2 = [];
        for (let i = 0; i < numberOfItems; i++) {
          const item = items[i];
          cluster2.push(item);
          if (newClusterTest(item)) {
            clusters.push(cluster2);
            cluster2 = [];
          }
        }
        if (cluster2.length > 0) clusters.push(cluster2);
        return clusters;
      } catch (error) {
        console.error("[cluster]:", error);
      }
    };
  }
});

// node_modules/dufour-peyton-intersection/src/cluster-line-segments.js
var require_cluster_line_segments = __commonJS({
  "node_modules/dufour-peyton-intersection/src/cluster-line-segments.js"(exports, module) {
    "use strict";
    var cluster = require_cluster();
    module.exports = function clusterLineSegments(lineSegments, numberOfEdges, debug = false) {
      try {
        const clusters = cluster(lineSegments, (s) => s.endsOffLine);
        const numberOfClusters = clusters.length;
        if (numberOfClusters >= 2) {
          const firstCluster = clusters[0];
          const firstSegment = firstCluster[0];
          const lastCluster = clusters[clusters.length - 1];
          const lastSegment = lastCluster[lastCluster.length - 1];
          if (lastSegment.last_edge_in_ring && firstSegment.index === 0 && lastSegment.endsOnLine) {
            clusters[0] = clusters.pop().concat(firstCluster);
          }
        }
        return clusters;
      } catch (error) {
        console.error("[clusterLineSegments]", error);
      }
    };
  }
});

// node_modules/dufour-peyton-intersection/src/each-polygon.js
var require_each_polygon = __commonJS({
  "node_modules/dufour-peyton-intersection/src/each-polygon.js"(exports, module) {
    "use strict";
    var getDepth = require_get_depth();
    module.exports = function eachPolygon(geojson, callback) {
      if (geojson.type === "FeatureCollection") {
        geojson.features.forEach((feature) => eachPolygon(feature, callback));
      } else if (geojson.type === "GeometryCollection") {
        geojson.geometries.forEach((geometry) => eachPolygon(geometry, callback));
      } else if (geojson.type === "Feature") {
        eachPolygon(geojson.geometry, callback);
      } else if (geojson.type === "Polygon") {
        eachPolygon(geojson.coordinates, callback);
      } else if (geojson.type === "MultiPolygon") {
        geojson.coordinates.forEach((polygon) => {
          callback(polygon);
        });
      } else if (Array.isArray(geojson)) {
        const depth = getDepth(geojson);
        if (depth === 4) {
          geojson.forEach((polygon) => {
            callback(polygon);
          });
        } else if (depth === 3) {
          callback(geojson);
        } else if (depth === 2) {
          callback([geojson]);
        }
      }
    };
  }
});

// node_modules/dufour-peyton-intersection/src/get-polygons.js
var require_get_polygons = __commonJS({
  "node_modules/dufour-peyton-intersection/src/get-polygons.js"(exports, module) {
    "use strict";
    var eachPolygon = require_each_polygon();
    module.exports = function getPolygons(geojson) {
      const polygons = [];
      eachPolygon(geojson, (polygon) => polygons.push(polygon));
      return polygons;
    };
  }
});

// node_modules/dufour-peyton-intersection/src/range/merge-consecutive.js
var require_merge_consecutive = __commonJS({
  "node_modules/dufour-peyton-intersection/src/range/merge-consecutive.js"(exports, module) {
    module.exports = function mergeConsecutive(ranges) {
      const numberOfRanges = ranges.length;
      if (numberOfRanges === 0) return [];
      const firstRange = ranges[0];
      let previousEnd = firstRange[1];
      const result2 = [firstRange];
      for (let i = 1; i < numberOfRanges; i++) {
        const tempRange = ranges[i];
        const [start2, end] = tempRange;
        if (start2 <= previousEnd + 1) {
          result2[result2.length - 1][1] = Math.max(previousEnd, end);
        } else {
          result2.push(tempRange);
        }
        previousEnd = end;
      }
      return result2;
    };
  }
});

// node_modules/dufour-peyton-intersection/src/range/compare.js
var require_compare2 = __commonJS({
  "node_modules/dufour-peyton-intersection/src/range/compare.js"(exports, module) {
    module.exports = function compare(a, b) {
      return Math.sign(a[0] - b[0]) || Math.sign(a[1] - b[1]);
    };
  }
});

// node_modules/dufour-peyton-intersection/src/range/sort.js
var require_sort2 = __commonJS({
  "node_modules/dufour-peyton-intersection/src/range/sort.js"(exports, module) {
    var compare = require_compare2();
    module.exports = function sort(ranges) {
      return ranges.sort(compare);
    };
  }
});

// node_modules/dufour-peyton-intersection/src/range/overlaps.js
var require_overlaps = __commonJS({
  "node_modules/dufour-peyton-intersection/src/range/overlaps.js"(exports, module) {
    module.exports = function overlaps(a, b) {
      if (!Array.isArray(a)) throw new Error("[overlaps] a is not an array");
      if (!Array.isArray(b)) throw new Error("[overlaps] b is not an array");
      return a[0] <= b[1] && b[0] <= a[1];
    };
  }
});

// node_modules/dufour-peyton-intersection/src/range/cut.js
var require_cut = __commonJS({
  "node_modules/dufour-peyton-intersection/src/range/cut.js"(exports, module) {
    var rangeOverlap = require_overlaps();
    module.exports = function cut(range2, hole) {
      if (!Array.isArray(range2)) throw new Error("[cut] range is not an array: " + JSON.stringify(range2));
      if (hole === void 0) return [range2];
      if (!Array.isArray(hole)) throw new Error("[cut] hole is not an array:" + JSON.stringify(hole));
      if (!rangeOverlap(range2, hole)) return [range2];
      const result2 = [];
      if (range2[0] < hole[0]) result2.push([range2[0], hole[0] - 1]);
      if (range2[1] > hole[1]) result2.push([hole[1] + 1, range2[1]]);
      return result2;
    };
  }
});

// node_modules/dufour-peyton-intersection/src/range/multicut.js
var require_multicut = __commonJS({
  "node_modules/dufour-peyton-intersection/src/range/multicut.js"(exports, module) {
    var rangeCut = require_cut();
    module.exports = function carve(insides, holes) {
      let results = insides;
      holes.forEach((hole) => {
        results = results.map((pc) => rangeCut(pc, hole)).flat();
      });
      return results;
    };
  }
});

// node_modules/dufour-peyton-intersection/src/couple.js
var require_couple = __commonJS({
  "node_modules/dufour-peyton-intersection/src/couple.js"(exports, module) {
    "use strict";
    module.exports = function couple(array) {
      const couples = [];
      const lengthOfArray = array.length;
      for (let i = 0; i < lengthOfArray; i += 2) {
        couples.push([array[i], array[i + 1]]);
      }
      return couples;
    };
  }
});

// node_modules/dufour-peyton-intersection/src/each-pair.js
var require_each_pair = __commonJS({
  "node_modules/dufour-peyton-intersection/src/each-pair.js"(exports, module) {
    "use strict";
    module.exports = function eachPair(arr, callback) {
      for (let i = 1; i < arr.length; i++) {
        const a = arr[i - 1];
        const b = arr[i];
        callback([a, b], i - 1);
      }
    };
  }
});

// node_modules/dufour-peyton-intersection/src/range/merge.js
var require_merge2 = __commonJS({
  "node_modules/dufour-peyton-intersection/src/range/merge.js"(exports, module) {
    module.exports = function mergeRanges(ranges) {
      const numberOfRanges = ranges.length;
      if (numberOfRanges > 0) {
        ranges.sort((a, b) => a[0] - b[0] || a[1] - b[1]);
        const result2 = [];
        let [currentStart, currentEnd] = ranges[0];
        for (let i = 1; i < numberOfRanges; i++) {
          const [start2, end] = ranges[i];
          if (start2 <= currentEnd) {
            currentEnd = Math.max(currentEnd, end);
          } else {
            result2.push([currentStart, currentEnd]);
            currentStart = start2;
            currentEnd = end;
          }
        }
        result2.push([currentStart, currentEnd]);
        return result2;
      }
    };
  }
});

// node_modules/dufour-peyton-intersection/src/partition.js
var require_partition = __commonJS({
  "node_modules/dufour-peyton-intersection/src/partition.js"(exports, module) {
    "use strict";
    module.exports = function partition(array, filter) {
      const passed = [];
      const unpassed = [];
      const len = array.length;
      for (let i = 0; i < len; i++) {
        const item = array[i];
        if (filter(item)) passed.push(item);
        else unpassed.push(item);
      }
      return [passed, unpassed];
    };
  }
});

// node_modules/dufour-peyton-intersection/src/round-down.js
var require_round_down = __commonJS({
  "node_modules/dufour-peyton-intersection/src/round-down.js"(exports, module) {
    "use strict";
    module.exports = function roundDown(n) {
      return -1 * Math.round(-1 * n);
    };
  }
});

// node_modules/dufour-peyton-intersection/src/prepare-snap.js
var require_prepare_snap = __commonJS({
  "node_modules/dufour-peyton-intersection/src/prepare-snap.js"(exports, module) {
    "use strict";
    var roundDown = require_round_down();
    module.exports = function prepareSnap(raster_xmin, pixel_width) {
      return ([xmin, xmax]) => {
        xmin = roundDown((xmin - raster_xmin) / pixel_width);
        if (xmin === -0) xmin = 0;
        xmax = Math.round((xmax - raster_xmin) / pixel_width);
        if (xmax === -0) xmax = 0;
        return [xmin, xmax];
      };
    };
  }
});

// node_modules/dufour-peyton-intersection/src/calculate-core.js
var require_calculate_core = __commonJS({
  "node_modules/dufour-peyton-intersection/src/calculate-core.js"(exports, module) {
    "use strict";
    var categorizeIntersection = require_categorize_intersection();
    var clamp = require_clamp();
    var couple = require_couple();
    var clusterLineSegments = require_cluster_line_segments();
    var eachPair = require_each_pair();
    var mergeRanges = require_merge2();
    var partition = require_partition();
    var prepareSnap = require_prepare_snap();
    module.exports = function calculateCore({
      debug_level = 0,
      raster_bbox,
      raster_height,
      // number of rows of pixels in the raster
      raster_width,
      // number of columns of pixels in the raster
      pixel_height,
      pixel_width,
      ring,
      // array of points
      per_pixel,
      per_row_segment
    }) {
      const [raster_xmin, raster_ymin, raster_xmax, raster_ymax] = raster_bbox;
      const intersectionsByRow = [];
      for (let i = 0; i < raster_height; i++) intersectionsByRow.push([]);
      eachPair(ring, (edge, iedge) => {
        const [startPoint, endPoint] = edge;
        const [x1, y1] = startPoint;
        const [x2, y2] = endPoint;
        const direction = Math.sign(y2 - y1);
        const horizontal = y1 === y2;
        const vertical = x1 === x2;
        const slope = (y2 - y1) / (x2 - x1);
        const edgeY = y1;
        const edgeYMin = Math.min(y1, y2);
        const edgeYMax = Math.max(y1, y2);
        let startLng, startLat, endLat, endLng;
        if (x1 < x2) {
          [startLng, startLat] = startPoint;
          [endLng, endLat] = endPoint;
        } else {
          [startLng, startLat] = endPoint;
          [endLng, endLat] = startPoint;
        }
        if (startLng === void 0) throw Error("startLng is " + startLng);
        const imageY1 = Math.round((raster_bbox[3] - 0.5 * pixel_height - startLat) / pixel_height);
        const imageY2 = Math.round((raster_bbox[3] - 0.5 * pixel_height - endLat) / pixel_height);
        let rowStart, rowEnd;
        if (imageY1 < imageY2) {
          rowStart = imageY1;
          rowEnd = imageY2;
        } else {
          rowStart = imageY2;
          rowEnd = imageY1;
        }
        rowStart = clamp(rowStart, 0, raster_height - 1);
        rowEnd = clamp(rowEnd, 0, raster_height - 1);
        for (let j = rowStart; j < rowEnd + 1; j++) {
          const imageLineY = raster_ymax - pixel_height * j - pixel_height / 2;
          const startsOnLine = y1 === imageLineY;
          const endsOnLine = y2 === imageLineY;
          const endsOffLine = !endsOnLine;
          let xminOnLine, xmaxOnLine;
          if (horizontal) {
            if (edgeY === imageLineY) {
              xminOnLine = startLng;
              xmaxOnLine = endLng;
            } else {
              continue;
            }
          } else if (vertical) {
            if (imageLineY >= edgeYMin && imageLineY <= edgeYMax) {
              xminOnLine = startLng;
              xmaxOnLine = endLng;
            }
          } else if (startsOnLine) {
            xminOnLine = xmaxOnLine = x1;
          } else if (endsOnLine) {
            xminOnLine = xmaxOnLine = x2;
          } else {
            try {
              xminOnLine = xmaxOnLine = x1 + (imageLineY - y1) / slope;
            } catch (error) {
              throw error;
            }
          }
          if (xminOnLine !== void 0 && xmaxOnLine !== void 0 && (horizontal || xminOnLine >= startLng && xmaxOnLine <= endLng && imageLineY <= edgeYMax && imageLineY >= edgeYMin)) {
            intersectionsByRow[j].push({
              direction,
              index: iedge,
              edge,
              // e.g: if there are 5 points (last repeated), there are 4 edges, with the last index being 3 (zero-indexed)
              last_edge_in_ring: iedge === ring.length - 2,
              endsOnLine,
              endsOffLine,
              horizontal,
              startsOnLine,
              vertical,
              xmin: xminOnLine,
              xmax: xmaxOnLine,
              imageLineY
            });
          }
        }
      });
      const half_pixel_width = pixel_width / 2;
      const snap2 = prepareSnap(raster_xmin, pixel_width);
      if (debug_level >= 1) console.log("[dufour-peyton-intersection] intersectionsByRow:", intersectionsByRow);
      intersectionsByRow.forEach((segmentsInRow, row_index) => {
        if (segmentsInRow.length > 0) {
          const clusters = clusterLineSegments(segmentsInRow);
          const categorized = clusters.map(categorizeIntersection);
          const [throughs, nonthroughs] = partition(categorized, (item) => item.through);
          if (throughs.length % 2 === 1) {
            if (debug_level >= 1) console.error("[dufour-peyton-intersection] throughs:", JSON.stringify(throughs));
            throw Error("throughs.length for " + row_index + " is odd with " + throughs.length);
          }
          let insides = nonthroughs.map((intersection) => [intersection.xmin, intersection.xmax]);
          throughs.sort((a, b) => a.xmin - b.xmin);
          const couples = couple(throughs).map((couple2) => {
            const [left, right] = couple2;
            return [left.xmin, right.xmax];
          });
          insides = insides.concat(couples);
          insides = mergeRanges(insides);
          insides.forEach((pair) => {
            const [xmin, xmax] = pair;
            if (xmax - xmin < half_pixel_width) return;
            const [left, right] = snap2(pair);
            if (left === right) return;
            if (left > raster_width) return;
            if (right <= 0) return;
            const start_column_index = Math.max(left, 0);
            const end_column_index = Math.min(right - 1, raster_width - 1);
            if (per_row_segment) {
              per_row_segment({
                row: row_index,
                columns: [start_column_index, end_column_index]
              });
            }
            if (per_pixel) {
              for (let column_index = start_column_index; column_index <= end_column_index; column_index++) {
                per_pixel({ row: row_index, column: column_index });
              }
            }
          });
        }
      });
    };
  }
});

// node_modules/dufour-peyton-intersection/src/check-rows.js
var require_check_rows = __commonJS({
  "node_modules/dufour-peyton-intersection/src/check-rows.js"(exports, module) {
    "use strict";
    module.exports = function checkRanges(rows) {
      rows.forEach((ranges, irow) => {
        for (let irange = 0; irange < ranges.length; irange++) {
          const range2 = ranges[irange];
          const [start2, end] = range2;
          if (start2 > end) {
            console.warn("[dufour-peyton-intersection] uh oh, encountered invalid range", range2, "at row index", irow, "with ranges", ranges);
          }
          for (let iother = irange + 1; iother < ranges.length; iother++) {
            if (iother[0] <= end) {
              console.warn("[dufour-peyton-intersection] encountered range problem on row index", irow, ":", ranges);
            }
          }
        }
      });
    };
  }
});

// node_modules/dufour-peyton-intersection/src/calculate-ring.js
var require_calculate_ring = __commonJS({
  "node_modules/dufour-peyton-intersection/src/calculate-ring.js"(exports, module) {
    "use strict";
    var calculateCore = require_calculate_core();
    var checkRows = require_check_rows();
    var mergeConsecutiveRanges = require_merge_consecutive();
    var rangeSort = require_sort2();
    module.exports = function calculateRing({ debug_level = 0, raster_bbox, raster_height, raster_width, pixel_height, pixel_width, ring }) {
      const [xmin, ymin, xmax, ymax] = raster_bbox;
      if (raster_bbox.every((it) => typeof it === "string")) {
        throw new Error("[dufour-peyton-intersection] raster_bbox should be all numbers, not strings");
      }
      if (pixel_height === void 0 || pixel_height === null) pixel_height = (ymax - ymin) / raster_height;
      if (pixel_width === void 0 || pixel_width === null) pixel_width = (xmax - xmin) / raster_width;
      const rows = [];
      for (let i = 0; i < raster_height; i++) rows.push([]);
      calculateCore({
        debug_level,
        raster_bbox,
        raster_height,
        raster_width,
        pixel_height,
        pixel_width,
        ring,
        per_row_segment: ({ row, columns }) => {
          rows[row].push(columns);
        }
      });
      for (let irow = 0; irow < rows.length; irow++) {
        const ranges = rows[irow];
        if (ranges) {
          rangeSort(ranges);
          rows[irow] = mergeConsecutiveRanges(ranges);
        }
      }
      if (debug_level >= 2) checkRows(rows);
      return rows;
    };
  }
});

// node_modules/dufour-peyton-intersection/src/calculate-polygon.js
var require_calculate_polygon = __commonJS({
  "node_modules/dufour-peyton-intersection/src/calculate-polygon.js"(exports, module) {
    "use strict";
    var carveHoles = require_multicut();
    var calculateRing = require_calculate_ring();
    module.exports = function calculatePolygon({ polygon, ...options }) {
      const { debug_level = 0 } = options;
      const [exterior, ...holes] = polygon.map((ring) => calculateRing({ ring, ...options }));
      if (debug_level >= 2) console.log("[dufour-peyton-intersection] exterior:", exterior);
      const result2 = exterior.map((row_insides, irow) => {
        const row_holes = holes.map((hole_rows) => hole_rows[irow]).flat();
        return carveHoles(row_insides, row_holes);
      });
      return result2;
    };
  }
});

// node_modules/dufour-peyton-intersection/src/calculate.js
var require_calculate = __commonJS({
  "node_modules/dufour-peyton-intersection/src/calculate.js"(exports, module) {
    "use strict";
    var getPolygons = require_get_polygons();
    var mergeConsecutiveRanges = require_merge_consecutive();
    var rangeSort = require_sort2();
    var calculatePolygon = require_calculate_polygon();
    module.exports = function calculate({ geometry, raster_height, per_pixel, per_row_segment, debug_level = 0, ...rest }) {
      const polys = getPolygons(geometry);
      const inside_rows_by_polygon = polys.map(
        (polygon) => calculatePolygon({
          polygon,
          raster_height,
          debug_level,
          ...rest
        })
      );
      if (debug_level >= 1) console.log("[dufour-peyton-intersection] inside_rows_by_polygon:", inside_rows_by_polygon);
      const results = new Array(raster_height);
      for (let i = 0; i < raster_height; i++) {
        const insides = inside_rows_by_polygon.map((polygon_rows) => polygon_rows[i]).filter((it) => it !== void 0 && it.length > 0).flat();
        if (insides.length > 0) {
          const sorted = rangeSort(insides);
          const merged = mergeConsecutiveRanges(sorted);
          results[i] = merged;
        }
      }
      if (per_row_segment || per_pixel) {
        results.forEach((row_segments, row_index) => {
          if (row_segments) {
            row_segments.forEach((seg, iseg) => {
              if (per_row_segment) {
                per_row_segment({ row: row_index, columns: seg });
              }
              if (per_pixel) {
                const [start_column_index, end_column_index] = seg;
                for (let column_index = start_column_index; column_index <= end_column_index; column_index++) {
                  per_pixel({ row: row_index, column: column_index });
                }
              }
            });
          }
        });
      }
      return { rows: results };
    };
  }
});

// node_modules/dufour-peyton-intersection/src/range/contains.js
var require_contains = __commonJS({
  "node_modules/dufour-peyton-intersection/src/range/contains.js"(exports, module) {
    module.exports = function contains(a, b) {
      return b[0] >= a[0] && b[1] <= a[1];
    };
  }
});

// node_modules/dufour-peyton-intersection/src/index.js
var require_src = __commonJS({
  "node_modules/dufour-peyton-intersection/src/index.js"(exports, module) {
    "use strict";
    var categorizeIntersection = require_categorize_intersection();
    var clamp = require_clamp();
    var cluster = require_cluster();
    var clusterLineSegments = require_cluster_line_segments();
    var calculate = require_calculate();
    var calculateCore = require_calculate_core();
    var couple = require_couple();
    var eachPair = require_each_pair();
    var eachPolygon = require_each_polygon();
    var mergeRanges = require_merge2();
    var mergeConsecutiveRanges = require_merge_consecutive();
    var partition = require_partition();
    var prepareSnap = require_prepare_snap();
    var rangeContains = require_contains();
    var rangeCut = require_cut();
    var carveHoles = require_multicut();
    var rangeOverlap = require_overlaps();
    var roundDown = require_round_down();
    var rangeSort = require_sort2();
    var dufour_peyton_intersection = {
      calculate,
      calculateCore,
      carveHoles,
      categorizeIntersection,
      clamp,
      cluster,
      clusterLineSegments,
      couple,
      eachPair,
      eachPolygon,
      mergeRanges,
      mergeConsecutiveRanges,
      partition,
      prepareSnap,
      rangeContains,
      rangeCut,
      rangeOverlap,
      rangeSort,
      roundDown
    };
    if (typeof define === "function" && define.amd) define(() => dufour_peyton_intersection);
    if (typeof module === "object") module.exports = dufour_peyton_intersection;
    if (typeof self == "object") self.dufour_peyton_intersection = dufour_peyton_intersection;
    if (typeof window == "object") window.dufour_peyton_intersection = dufour_peyton_intersection;
  }
});

// node_modules/geoaffine/fn/apply.js
var require_apply = __commonJS({
  "node_modules/geoaffine/fn/apply.js"(exports, module) {
    function transform2(geotransform, point3) {
      const [a, b, c, d, e, f] = geotransform;
      const [x, y] = point3;
      return [a + b * x + c * y, d + e * x + f * y];
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return transform2;
      });
    }
    if (typeof module === "object") {
      module.exports = transform2;
      module.exports.default = transform2;
    }
  }
});

// node_modules/geoaffine/fn/invert.js
var require_invert = __commonJS({
  "node_modules/geoaffine/fn/invert.js"(exports, module) {
    function invert(geotransform) {
      const [a, b, c, d, e, f] = geotransform;
      const g = b * f - c * e;
      const h = -1 * g;
      return [(c * d - a * f) / g, f / g, c / h, (b * d - a * e) / h, e / h, b / g];
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return invert;
      });
    }
    if (typeof module === "object") {
      module.exports = invert;
      module.exports.default = invert;
    }
  }
});

// node_modules/geoaffine/Geotransform.js
var require_Geotransform = __commonJS({
  "node_modules/geoaffine/Geotransform.js"(exports, module) {
    var apply = require_apply();
    var invert = require_invert();
    function Geotransform(geotransform) {
      const inversion = invert(geotransform);
      return {
        forward: function forward33(point3) {
          return apply(geotransform, point3);
        },
        inverse: function inverse33(point3, { floor = false, round = false } = { floor: false, round: false }) {
          let result2 = apply(inversion, point3);
          if (round) result2 = result2.map((n) => Math.round(n));
          if (floor) result2 = result2.map((n) => Math.floor(n));
          return result2;
        }
      };
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return Geotransform;
      });
    }
    if (typeof module === "object") {
      module.exports = Geotransform;
      module.exports.default = Geotransform;
    }
  }
});

// node_modules/geowarp/node_modules/mediana/src/count.js
var require_count = __commonJS({
  "node_modules/geowarp/node_modules/mediana/src/count.js"(exports, module) {
    function count(nums) {
      const counts = {};
      let total = 0;
      for (let n of nums) {
        total++;
        if (n in counts) counts[n][1]++;
        else counts[n] = [n, 1];
      }
      return { counts, total };
    }
    module.exports = count;
    module.exports.default = count;
  }
});

// node_modules/geowarp/node_modules/mediana/src/mean.js
var require_mean = __commonJS({
  "node_modules/geowarp/node_modules/mediana/src/mean.js"(exports, module) {
    var add3 = require_add();
    var divide2 = require_divide();
    function mean(a, b, { precise = false } = { precise: false }) {
      if (precise) {
        return divide2(add3(a.toString(), b.toString()), "2");
      } else {
        return (a + b) / 2;
      }
    }
    module.exports = mean;
    module.exports.default = mean;
  }
});

// node_modules/geowarp/node_modules/mediana/src/index.js
var require_src2 = __commonJS({
  "node_modules/geowarp/node_modules/mediana/src/index.js"(exports, module) {
    var count = require_count();
    var mean = require_mean();
    function calculate(nums, { no_data = void 0, precise = false } = { no_data: void 0, precise: false }) {
      const { counts, total } = count(nums);
      let total_valid = total;
      if ("NaN" in counts) {
        total_valid -= counts["NaN"][1];
        delete counts["NaN"];
      }
      if ("undefined" in counts) {
        total_valid -= counts["undefined"][1];
        delete counts["undefined"];
      }
      if ("null" in counts) {
        total_valid -= counts["null"][1];
        delete counts["null"];
      }
      if ("" in counts) {
        total_valid -= counts[""][1];
        delete counts[""];
      }
      if (Array.isArray(no_data)) {
        for (let i = 0; i < no_data.length; i++) {
          const n = no_data[i];
          if (n in counts) {
            total_valid -= counts[n][1];
            delete counts[n];
          }
        }
      } else if (no_data in counts) {
        total_valid -= counts[no_data][1];
        delete counts[no_data];
      }
      const countArray = Object.values(counts).sort((a, b) => a[0] - b[0]);
      const half = total_valid / 2;
      const number_of_unique_values = countArray.length;
      if (number_of_unique_values === 0) {
        return void 0;
      } else if (number_of_unique_values === 1) {
        return precise ? countArray[0][0].toString() : countArray[0][0];
      } else {
        let x = 0;
        if (total % 2 === 0) {
          for (let i = 0; i < number_of_unique_values; i++) {
            const [n, ct] = countArray[i];
            x += ct;
            if (x > half) {
              if (x - ct === half) {
                return mean(countArray[i - 1][0], n, { precise });
              } else {
                return precise ? n.toString() : n;
              }
            }
          }
        } else {
          for (let i = 0; i < number_of_unique_values; i++) {
            const [n, ct] = countArray[i];
            x += ct;
            if (x > half) return precise ? n.toString() : n;
          }
        }
      }
    }
    var mediana = { calculate };
    if (typeof define === "function" && define.amd) {
      define(function() {
        return mediana;
      });
    }
    if (typeof module === "object") {
      module.exports = mediana;
      module.exports.default = { calculate };
    }
    if (typeof window === "object") {
      window.mediana = mediana;
    }
    if (typeof self === "object") {
      self.mediana = mediana;
    }
  }
});

// node_modules/proj-turbo/proj-turbo.js
var require_proj_turbo = __commonJS({
  "node_modules/proj-turbo/proj-turbo.js"(exports, module) {
    "use_strict";
    var median = (nums) => nums.sort()[Math.floor(nums.length - 2)];
    var min = (nums) => nums.slice().sort((a, b) => Math.sign(a - b))[0];
    function turbocharge({ bbox, debug_level = 0, quiet = false, reproject, threshold: [x_threshold, y_threshold] }) {
      if (debug_level >= 2) console.log("[proj-turbo] starting");
      if (debug_level >= 3) console.log("[proj-turbo] bbox:", bbox);
      if (debug_level >= 3) console.log("[proj-turbo] reproject:", reproject);
      if (debug_level >= 3) console.log("[proj-turbo] threshold:", [x_threshold, y_threshold]);
      if (debug_level >= 3) console.log("[proj-turbo] quiet:", quiet);
      const [xmin, ymin, xmax, ymax] = bbox;
      const width = xmax - xmin;
      if (debug_level >= 3) console.log("[proj-turbo] width:", width);
      const height = ymax - ymin;
      if (debug_level >= 3) console.log("[proj-turbo] height:", height);
      const corners = [
        [xmin, ymax],
        // top-left
        [xmax, ymax],
        // top-right
        [xmax, ymin],
        // bottom-right
        [xmin, ymin]
        // bottom-left
      ];
      const corner_pairs = corners.map((corner) => [corner, reproject(corner)]);
      const x_drift_left_edge = corner_pairs[0][1][0] - corner_pairs[3][1][0];
      const x_drift_right_edge = corner_pairs[1][1][0] - corner_pairs[2][1][0];
      const max_x_drift = Math.max(x_drift_left_edge, x_drift_right_edge);
      if (debug_level >= 3) console.log("max_x_drift:", max_x_drift);
      const y_drift_top_edge = corner_pairs[1][1][1] - corner_pairs[0][1][1];
      const y_drift_bottom_edge = corner_pairs[2][1][1] - corner_pairs[3][1][1];
      const max_y_drift = Math.max(y_drift_top_edge, y_drift_bottom_edge);
      if (debug_level >= 3) console.log("max_y_drift:", max_y_drift);
      const x_offset = width / 100;
      if (debug_level >= 4) console.log("[proj-turbo] x_offset:", x_offset);
      const y_offset = height / 100;
      if (debug_level >= 4) console.log("[proj-turbo] y_offset:", y_offset);
      const train_points = [
        [xmin + width / 4, ymax - height / 4],
        [xmax - width / 4, ymax - height / 4],
        [xmax - width / 4, ymin + height / 4],
        [xmin + width / 4, ymin + height / 4],
        [xmin + width / 10, ymax - height / 10],
        [xmax - width / 10, ymax - height / 10],
        [xmax - width / 10, ymin + height / 10],
        [xmin + width / 10, ymin + height / 10],
        // center
        [(xmin + xmax) / 2, (ymin + ymax) / 2]
      ];
      if (debug_level >= 5) console.log("[proj-turbo] train_points: " + JSON.stringify(train_points));
      const train_pairs = train_points.map((point3) => [point3, reproject(point3)]);
      if (debug_level >= 5) console.log("[proj-turbo] train_pairs: " + JSON.stringify(train_pairs));
      const x_origin = min(train_pairs.concat(corner_pairs).map(([pt1, [x2, y2]]) => x2));
      if (debug_level >= 4) console.log("[proj-turbo] x_origin:", x_origin);
      const y_origin = min(train_pairs.concat(corner_pairs).map(([pt1, [x2, y2]]) => y2));
      if (debug_level >= 4) console.log("[proj-turbo] y_origin:", y_origin);
      let scales = train_pairs.map(([[x0, y0], [x1, y1]], i) => {
        if (x1 < x_origin) throw new Error("[proj-turbo] uh oh, x1", x1, "is less than origin", x_origin);
        return [(x1 - x_origin) / (x0 - xmin), (y1 - y_origin) / (y0 - ymin)];
      });
      if (debug_level >= 4) console.log("[proj-turbo] scales: ", scales.map(([x, y]) => [x.toFixed(10), y.toFixed(10)]));
      scales = scales.filter(([x, y]) => !(x < 0 || y < 0 || isNaN(x) || isNaN(y) || x === Infinity && y === Infinity));
      if (scales.length < 3) {
        if (debug_level >= 1) console.log("[proj-turbo] origin: ", [x_origin, y_origin]);
        if (debug_level >= 1) console.log("[proj-turbo] scales: ", scales);
        if (quiet) return void 0;
        else throw new Error("[proj-turbo] not enough scales");
      }
      const x_scale = median(scales.map(([x, y]) => x));
      if (debug_level >= 4) console.log("[proj-turbo] median horizontal scale:", x_scale);
      const y_scale = median(scales.map(([x, y]) => y));
      if (debug_level >= 4) console.log("[proj-turbo] median vertical scale:", y_scale);
      const reproj = ([x, y]) => [x_origin + x_scale * (x - xmin), y_origin + y_scale * (y - ymin)];
      const test_pairs = [
        ...corner_pairs,
        // want to test literal edge cases
        ...train_pairs
      ];
      for (let i = 0; i < test_pairs.length; i++) {
        const [original_point, [x_expected, y_expected]] = test_pairs[i];
        const [predicted_x, predicted_y] = reproj(original_point);
        const x_error = Math.abs(predicted_x - x_expected);
        if (x_error >= x_threshold) {
          if (debug_level >= 1) console.log(`${x_origin} + ${x_scale} * (${original_point[0]} - ${xmin})`);
          if (debug_level >= 1) console.log(`predicted ${predicted_x}, which is ${x_error} from ${x_expected}, which is greater than the threshold ${x_threshold}`);
          if (quiet) return void 0;
          else throw Error("[proj-turbo] linear function exceeded horizontal error threshold");
        }
        const y_error = Math.abs(predicted_y - y_expected);
        if (y_error >= y_threshold) {
          if (debug_level >= 1) console.log(`${y_origin} + ${y_scale} * (${original_point[1]} - ${ymin})`);
          if (debug_level >= 1) console.log(`predicted ${predicted_y}, which is ${y_error} from ${y_expected}, which is greater than the threshold ${y_threshold}`);
          if (quiet) return void 0;
          else throw Error("[proj-turbo] linear function exceeded vertical error threshold");
        }
      }
      return { origin: [x_origin, y_origin], reproject: reproj, scale: [x_scale, y_scale], scales };
    }
    var projturbo = { turbocharge };
    if (typeof define === "function" && define.amd) {
      define(function() {
        return projturbo;
      });
    }
    if (typeof module === "object" && module.exports) {
      module.exports = projturbo;
    }
    if (typeof self === "object") {
      self.projturbo = projturbo;
    }
    if (typeof window === "object") {
      window.projturbo = projturbo;
    }
  }
});

// node_modules/quick-resolve/quick-resolve.js
var require_quick_resolve = __commonJS({
  "node_modules/quick-resolve/quick-resolve.js"(exports, module) {
    module.exports = function resolve(it) {
      if (typeof it === "object" && typeof it.then === "function") {
        return it;
      } else {
        return { then: (func) => func(it) };
      }
    };
  }
});

// node_modules/segflip/segflip.js
var require_segflip = __commonJS({
  "node_modules/segflip/segflip.js"(exports, module) {
    function segflip({ segments: segs, min = -Infinity, max = Infinity, debug = false }) {
      if (debug) console.log("[segflip] segs:", segs);
      if (segs === void 0 || segs === null || Array.isArray(segs) && segs.length === 0) {
        if (debug) console.log("[segflip] segments are empty so return the whole row flipped");
        return [[min, max]];
      }
      const nums = segs.map(([start2, end]) => [start2 - 1, end + 1]).flat();
      nums.unshift(min);
      nums.push(max);
      if (debug) console.log("flattened nums:", nums);
      const results = [];
      for (let i = 1; i < nums.length; i += 2) {
        const start2 = nums[i - 1];
        const end = nums[i];
        if (start2 > end) continue;
        results.push([start2, end]);
      }
      return results;
    }
    if (typeof define === "function" && define.amd)
      define(function() {
        return segflip;
      });
    if (typeof module === "object") module.exports = segflip;
    if (typeof window === "object") window.segflip = segflip;
    if (typeof self === "object") self.segflip = segflip;
  }
});

// node_modules/geowarp/geowarp.js
var require_geowarp = __commonJS({
  "node_modules/geowarp/geowarp.js"(exports, module) {
    var { booleanIntersects: booleanIntersects2, calc: getBoundingBox, intersect, polygon } = require_bbox_fns();
    var dufour_peyton_intersection = require_src();
    var fastMax2 = require_fast_max();
    var fastMin2 = require_fast_min();
    var Geotransform = require_Geotransform();
    var getDepth = require_get_depth();
    var getTheoreticalMax = require_get_max();
    var getTheoreticalMin = require_get_min();
    var calcMedian = require_src2().calculate;
    var reprojectBoundingBox2 = require_reproject();
    var reprojectGeoJSON3 = require_pluggable();
    var { turbocharge } = require_proj_turbo();
    var quickResolve = require_quick_resolve();
    var segflip = require_segflip();
    var xdim = require_xdim();
    var clamp = (n, min, max) => n < min ? min : n > max ? max : n;
    var isInvalid = (n) => n === void 0 || n === null || n !== n;
    var scaleInteger = (n, r) => {
      const n2 = Math.round(n * r);
      return [n2, n2 / n, n / n2];
    };
    var scalePixel = ([column, row], [x_scale, y_scale]) => [
      Math.round(column * x_scale),
      Math.round(row * y_scale),
      Math.round((column + 1) * x_scale),
      Math.round((row + 1) * y_scale)
    ];
    var uniq = (arr) => Array.from(new Set(arr)).sort((a, b) => b - a);
    var range2 = (ct) => new Array(ct).fill(0).map((_, i) => i);
    var forEach = (nums, no_data, cb) => {
      const len = nums.length;
      if (no_data) {
        for (let i = 0; i < len; i++) {
          const n = nums[i];
          if (no_data.indexOf(n) === -1) cb(n);
        }
      } else {
        for (let i = 0; i < len; i++) {
          cb(nums[i]);
        }
      }
    };
    var mean = (nums, in_no_data) => {
      let running_sum = 0;
      let count = 0;
      forEach(nums, in_no_data, (n) => {
        count++;
        running_sum += n;
      });
      return count === 0 ? void 0 : running_sum / count;
    };
    var mode2 = (nums, no_data) => {
      if (nums.length === 0) return void 0;
      const counts = {};
      if (no_data) {
        for (let i = 0; i < nums.length; i++) {
          const n = nums[i];
          if (typeof n === "number" && n === n && no_data.indexOf(n) === -1) {
            if (n in counts) counts[n].count++;
            else counts[n] = { n, count: 1 };
          }
        }
      } else {
        for (let i = 0; i < nums.length; i++) {
          const n = nums[i];
          if (n in counts) counts[n].count++;
          else counts[n] = { n, count: 1 };
        }
      }
      const items = Object.values(counts);
      const count = items.sort((a, b) => Math.sign(b.count - a.count))[0].count;
      return items.filter((it) => it.count === count).map((it) => it.n);
    };
    var cacheFunction = (f, str = (it) => it.toString()) => {
      let cache = {};
      return [(xy) => cache[str(xy)] ??= f(xy), () => cache = {}];
    };
    var quickHistogram = ({ select, width, height }, [across, down]) => {
      const hist = {};
      const x_scale = width / across;
      const y_scale = height / down;
      const rows = new Array(down).fill(null).map((_, i) => Math.floor(i * y_scale));
      const cols = new Array(across).fill(null).map((_, i) => Math.floor(i * x_scale));
      rows.forEach((row) => {
        cols.forEach((column) => {
          const value = select({ row, column });
          if (value in hist) hist[value]++;
          else hist[value] = 1;
        });
      });
      return Object.entries(hist).sort(([apx, act], [bpx, bct]) => Math.sign(bct - act));
    };
    var geowarp3 = function geowarp4({
      debug_level = 0,
      in_data,
      in_bbox = void 0,
      in_geotransform = void 0,
      // 6-parameter geotransform, only necessary when in_data is skewed or rotated
      in_layout = "[band][row,column]",
      in_srs,
      in_height,
      in_pixel_depth,
      // number of input bands
      in_pixel_height,
      // optional, automatically calculated from in_bbox
      in_pixel_width,
      // optional, automatically calculated from in_bbox
      in_width,
      in_no_data,
      // optional, supports one number or an array of unique no data values
      out_array_types,
      // array of constructor names passed to internal call to xdim's prepareData function
      out_bands,
      // array of bands to keep and order, default is keeping all the bands in same order
      out_data,
      // single or multi-dimensional array that geowarp will fill in with the output
      out_pixel_depth,
      // optional, number of output bands
      out_pixel_height,
      // optional, automatically calculated from out_bbox
      out_pixel_width,
      // optional, automatically calculated from out_bbox
      out_bbox = null,
      out_bbox_in_srs,
      // very optional, output bbox reprojected into the srs of the input
      out_layout,
      out_resolution = [1, 1],
      out_srs,
      out_width = 256,
      out_height = 256,
      out_no_data = null,
      // out_no_data_strategy = "keep",
      method = "median",
      read_bands = void 0,
      // which bands to read, used in conjunction with expr
      row_start = 0,
      // which sample row to start writing with
      row_end,
      // last sample row to write
      expr = void 0,
      // band expression function
      round = false,
      // whether to round output
      theoretical_min,
      // minimum theoretical value (e.g., 0 for unsigned integer arrays)
      theoretical_max,
      // maximum values (e.g., 255 for 8-bit unsigned integer arrays),
      inverse: inverse33,
      // function to reproject [x, y] point from out_srs back to in_srs
      forward: forward33,
      // function to reproject [x, y] point from in_srs to out_srs
      cutline,
      // polygon or polygons defining areas to cut out (everything outside becomes no data)
      cutline_bbox,
      // bounding box of the cutline geometry, can lead to a performance increase when combined with turbo
      cutline_srs,
      // spatial reference system of the cutline
      cutline_forward,
      // function to reproject [x, y] point from cutline_srs to out_srs
      cutline_strategy = "outside",
      // cut out the pixels inside or outside the cutline
      turbo = false,
      // enable experimental turbocharging via proj-turbo
      insert_pixel,
      // over-ride function that inserts data into output multi-dimensional array
      insert_sample,
      // over-ride function that inserts each sample into the output multi-dimensional array (calls insert)
      insert_null_strategy = "skip",
      // whether to insert or skip null values
      skip_no_data_strategy,
      // skip processing pixels if "any" or "all" values are "no data"
      cache_process = false
      // whether to try to cache the processing step
      // cache_functions // this really helps if functions are asynchronous and require posting to a web worker
    }) {
      if (debug_level >= 1) console.log("[geowarp] starting");
      const start_time = debug_level >= 1 ? performance.now() : 0;
      if (isNaN(out_height)) throw new Error("[geowarp] out_height is NaN");
      if (isNaN(out_width)) throw new Error("[geowarp] out_width is NaN");
      let pending = 0;
      const [out_height_in_samples, y_resolution, y_scale] = scaleInteger(out_height, out_resolution[1]);
      const [out_width_in_samples, x_resolution, x_scale] = scaleInteger(out_width, out_resolution[0]);
      if (debug_level >= 1) console.log("[geowarp] scaled size:", [out_width_in_samples, out_height_in_samples]);
      if (debug_level >= 1) console.log("[geowarp] resolution:", [x_resolution, y_resolution]);
      if (debug_level >= 1) console.log("[geowarp] scale:", [x_scale, y_scale]);
      const same_srs = in_srs === out_srs;
      if (debug_level >= 1) console.log("[geowarp] input and output srs are the same:", same_srs);
      if (debug_level >= 1) console.log("[geowarp] skip_no_data_strategy:", skip_no_data_strategy);
      inverse33 ??= arguments[0].reproject;
      insert_pixel ??= arguments[0].insert;
      let in_bbox_out_srs, intersect_bbox_in_srs, intersect_bbox_out_srs;
      if (!same_srs) {
        if (!in_bbox) throw new Error("[geowarp] can't reproject without in_bbox");
        if (!out_bbox) {
          if (forward33) out_bbox = in_bbox_out_srs = intersect_bbox_out_srs = reprojectBoundingBox2(in_bbox, forward33, { density: 100 });
          else throw new Error("[geowarp] must specify out_bbox or forward");
        }
      }
      if (!same_srs && typeof inverse33 !== "function") {
        throw new Error("[geowarp] you must specify a reproject function");
      }
      if (!in_height) throw new Error("[geowarp] you must provide in_height");
      if (!in_width) throw new Error("[geowarp] you must provide in_width");
      if (!out_layout) out_layout = in_layout;
      if (in_pixel_depth === void 0 || in_pixel_depth === null) {
        if (in_layout.startsWith("[band]")) {
          in_pixel_depth = in_data.length;
        } else {
          const depth = getDepth(in_data);
          if (depth === 1) {
            in_pixel_depth = in_data.length / in_height / in_width;
          } else if (depth === 2) {
            in_pixel_depth = in_data[0].length;
          } else if (depth === 3) {
            in_pixel_depth = in_data[0][0].length;
          }
        }
      }
      if (debug_level >= 1) console.log("[geowarp] number of bands in source data:", in_pixel_depth);
      if (!read_bands) {
        if (expr) read_bands = range2(in_pixel_depth);
        else if (out_bands) read_bands = uniq(out_bands);
        else read_bands = range2(in_pixel_depth);
      }
      out_bands ??= read_bands;
      if (round && typeof out_no_data === "number") out_no_data = Math.round(out_no_data);
      if (Array.isArray(in_no_data) === false) {
        if ("in_no_data" in arguments[0]) {
          in_no_data = [in_no_data];
        } else {
          in_no_data = [];
        }
      }
      const primary_in_no_data = in_no_data[0];
      let process;
      if (expr) {
        if (round) {
          process = ({ pixel: pixel2 }) => quickResolve(expr({ pixel: pixel2 })).then((pixel3) => pixel3.map((n) => Math.round(n)));
        } else {
          process = expr;
        }
      } else {
        const out_bands_to_read_bands = out_bands.map((iband) => read_bands.indexOf(iband));
        if (round) {
          process = ({ pixel: pixel2 }) => out_bands_to_read_bands.map((iband) => {
            const value = pixel2[iband];
            return isInvalid(value) || in_no_data.includes(value) ? out_no_data : Math.round(value);
          });
        } else {
          process = ({ pixel: pixel2 }) => out_bands_to_read_bands.map((iband) => {
            const value = pixel2[iband];
            return isInvalid(value) || in_no_data.includes(value) ? out_no_data : value;
          });
        }
      }
      let clear_process_cache;
      if (cache_process) {
        [process, clear_process_cache] = cacheFunction(process, ({ pixel: pixel2 }) => pixel2.toString());
      }
      if (debug_level >= 1) console.log("[geowarp] read_bands:", read_bands);
      if (debug_level >= 1) console.log("[geowarp] out_height:", out_height);
      if (debug_level >= 1) console.log("[geowarp] out_width:", out_width);
      if (same_srs && in_bbox && !out_bbox) {
        out_bbox = in_bbox;
      }
      const [in_xmin, in_ymin, in_xmax, in_ymax] = in_bbox;
      in_pixel_height ??= (in_ymax - in_ymin) / in_height;
      in_pixel_width ??= (in_xmax - in_xmin) / in_width;
      if (debug_level >= 1) console.log("[geowarp] pixel height of source data:", in_pixel_height);
      if (debug_level >= 1) console.log("[geowarp] pixel width of source data:", in_pixel_width);
      in_geotransform ??= [in_xmin, in_pixel_width, 0, in_ymax, 0, -1 * in_pixel_height];
      const { forward: in_img_pt_to_srs_pt, inverse: in_srs_pt_to_in_img_pt } = Geotransform(in_geotransform);
      const out_srs_pt_to_in_img_pt = same_srs ? in_srs_pt_to_in_img_pt : (pt) => in_srs_pt_to_in_img_pt(inv(pt));
      const [out_xmin, out_ymin, out_xmax, out_ymax] = out_bbox;
      if (debug_level >= 1) console.log("[geowarp] out_xmin:", out_xmin);
      if (debug_level >= 1) console.log("[geowarp] out_ymin:", out_ymin);
      if (debug_level >= 1) console.log("[geowarp] out_xmax:", out_xmax);
      if (debug_level >= 1) console.log("[geowarp] out_ymax:", out_ymax);
      out_pixel_height ??= (out_ymax - out_ymin) / out_height;
      out_pixel_width ??= (out_xmax - out_xmin) / out_width;
      if (debug_level >= 1) console.log("[geowarp] out_pixel_height:", out_pixel_height);
      if (debug_level >= 1) console.log("[geowarp] out_pixel_width:", out_pixel_width);
      const out_sample_height = out_pixel_height * y_scale;
      const out_sample_width = out_pixel_width * x_scale;
      if (debug_level >= 1) console.log("[geowarp] out_sample_height:", out_sample_height);
      if (debug_level >= 1) console.log("[geowarp] out_sample_width:", out_sample_width);
      const half_out_sample_height = out_sample_height / 2;
      const half_out_sample_width = out_sample_width / 2;
      const in_img_pt_to_out_srs_pt = same_srs ? in_img_pt_to_srs_pt : (pt) => fwd(in_img_pt_to_srs_pt(pt));
      if (theoretical_min === void 0 || theoretical_max === void 0) {
        try {
          const data_constructor = in_data[0].constructor.name;
          if (debug_level >= 1) console.log("[geowarp] data_constructor:", data_constructor);
          theoretical_min ??= getTheoreticalMin(data_constructor);
          theoretical_max ??= getTheoreticalMax(data_constructor);
          if (debug_level >= 1) console.log("[geowarp] theoretical_min:", theoretical_min);
          if (debug_level >= 1) console.log("[geowarp] theoretical_max:", theoretical_max);
        } catch (error) {
          console.error(error);
        }
      }
      if (![void 0, null, ""].includes(cutline_forward) && typeof cutline_forward !== "function") {
        throw new Error("[geowarp] cutline_forward must be of type function not " + typeof cutline);
      }
      let segments_by_row = new Array(out_height_in_samples).fill(0).map(() => []);
      if (cutline && cutline_srs !== out_srs) {
        if (!cutline_forward) {
          if (in_srs === cutline_srs) cutline_forward = forward33;
          throw new Error("[geowarp] must specify cutline_forward when cutline_srs and out_srs differ");
        }
        let cutline_forward_turbocharged;
        if (cutline_forward && cutline_bbox) {
          cutline_forward_turbocharged = turbocharge({
            bbox: cutline_bbox,
            debug_level,
            quiet: true,
            reproject: cutline_forward,
            threshold: [half_out_sample_width, half_out_sample_height]
          })?.reproject;
        }
        cutline = reprojectGeoJSON3(cutline, { reproject: cutline_forward_turbocharged || cutline_forward });
      }
      const out_column_max = out_width_in_samples - 1;
      const full_width_row_segment = [0, out_column_max];
      const full_width_row = [full_width_row_segment];
      if (cutline) {
        const intersections = dufour_peyton_intersection.calculate({
          raster_bbox: out_bbox,
          raster_height: out_height_in_samples,
          raster_width: out_width_in_samples,
          geometry: cutline
        });
        intersections.rows.forEach((segs, irow) => {
          segments_by_row[irow] = segs;
        });
        if (cutline_strategy === "inside") {
          segments_by_row = segments_by_row.map((segs) => {
            if (segs.length === 0) {
              return full_width_row;
            } else {
              return segflip({
                segments: segs,
                min: 0,
                max: out_column_max,
                debug: false
              });
            }
          });
        }
      } else {
        for (let row_index = 0; row_index < out_height_in_samples; row_index++) {
          segments_by_row[row_index].push(full_width_row_segment);
        }
      }
      const in_sizes = {
        band: in_pixel_depth,
        row: in_height,
        column: in_width
      };
      const select = xdim.prepareSelect({ data: in_data, layout: in_layout, sizes: in_sizes });
      const selectPixel2 = ({ row, column }) => read_bands.map(
        (band) => select({
          point: {
            band,
            row,
            column
          }
        }).value
      );
      const hist = quickHistogram({ select: selectPixel2, width: in_width, height: in_height }, [10, 10]);
      const { hits, total } = hist.reduce(
        (acc, [px, ct]) => {
          acc.total += ct;
          acc.hits += ct - 1;
          return acc;
        },
        { hits: 0, total: 0 }
      );
      const predicted_cache_hit_rate = hits / total;
      if (cache_process === void 0 || cache_process === null) {
        cache_process = predicted_cache_hit_rate >= 0.85;
      }
      if (typeof insert_pixel !== "function") {
        let update;
        const update_pixel = ({ row, column, pixel: pixel2 }) => {
          pixel2.forEach((value, band) => {
            update({
              point: { band, row, column },
              value
            });
          });
        };
        let insert_pixel_sync = ({ pixel: pixel2, ...rest }) => {
          try {
            out_pixel_depth ??= pixel2.length;
            if (debug_level >= 1) console.log("[geowarp] out_pixel_depth:", out_pixel_depth);
            const out_sizes = {
              band: out_pixel_depth,
              row: out_height,
              column: out_width
            };
            if (debug_level >= 1) console.log("[geowarp] out_sizes:", out_sizes);
            out_data ??= xdim.prepareData({
              fill: out_no_data,
              layout: out_layout,
              sizes: out_sizes,
              arrayTypes: out_array_types
            }).data;
            if (debug_level >= 1) console.log("[geowarp] out_data:", typeof out_data);
            update = xdim.prepareUpdate({ data: out_data, layout: out_layout, sizes: out_sizes });
            if (debug_level >= 1) console.log("[geowarp] prepared update function");
            insert_pixel_sync = update_pixel;
            update_pixel({ pixel: pixel2, ...rest });
          } catch (error) {
            console.error("first call to insert_pixel_sync failed:", error);
          }
        };
        insert_pixel = ({ pixel: pixel2, ...rest }) => {
          pending++;
          quickResolve(pixel2).then((px) => {
            insert_pixel_sync({ pixel: px, ...rest });
            pending--;
          });
        };
      }
      if (typeof insert_sample !== "function") {
        if (x_resolution === 1 && y_resolution === 1) {
          insert_sample = (params2) => insert_pixel(params2);
        } else {
          insert_sample = ({ row, column, pixel: pixel2, ...rest }) => {
            const [xmin, ymin, xmax, ymax] = scalePixel([column, row], [x_scale, y_scale]);
            for (let y = ymin; y < ymax; y++) {
              for (let x = xmin; x < xmax; x++) {
                insert_pixel({ row: y, column: x, pixel: pixel2, ...rest });
              }
            }
          };
        }
      }
      row_end ??= out_height_in_samples;
      if (debug_level >= 1) console.log("[geowarp] method:", method);
      let inverse_pixel = ([c, r]) => {
        const x = out_xmin + c * out_sample_width + half_out_sample_width;
        const y = out_ymax - r * out_sample_height - half_out_sample_height;
        const pt_out_srs = [x, y];
        const pt_in_srs = same_srs ? pt_out_srs : inverse33(pt_out_srs);
        const pt_in_img = in_srs_pt_to_in_img_pt(pt_in_srs).map((n) => Math.floor(n));
        return pt_in_img;
      };
      if (turbo) {
        const reproject = turbocharge({
          bbox: [0, 0, out_width, out_height],
          debug_level,
          quiet: true,
          reproject: inverse_pixel,
          threshold: [0.5, 0.5]
        })?.reproject;
        if (reproject) inverse_pixel = (pt) => reproject(pt).map((n) => Math.round(n));
      }
      let forward_turbocharged, inverse_turbocharged;
      if (turbo) {
        if (forward33) {
          out_bbox_in_srs ??= reprojectBoundingBox2(out_bbox, inverse33, { density: 100, nan_strategy: "skip" });
          intersect_bbox_in_srs ??= intersect(in_bbox, out_bbox_in_srs);
          forward_turbocharged = turbocharge({
            bbox: intersect_bbox_in_srs,
            debug_level,
            quiet: true,
            reproject: forward33,
            threshold: [half_out_sample_width, half_out_sample_height]
          });
        }
        if (inverse33) {
          in_bbox_out_srs ??= reprojectBoundingBox2(in_bbox, forward33, { density: 100 });
          intersect_bbox_out_srs ??= intersect(out_bbox, in_bbox_out_srs);
          inverse_turbocharged = turbocharge({
            bbox: intersect_bbox_out_srs,
            debug_level,
            quiet: true,
            reproject: inverse33,
            threshold: [half_out_sample_width, half_out_sample_height]
          });
        }
      }
      if (debug_level >= 2) {
        if (forward_turbocharged) console.log("[geowarp] turbocharged forward");
        if (inverse_turbocharged) console.log("[geowarp] turbocharged inverse");
      }
      const fwd = forward_turbocharged?.reproject || forward33;
      const inv = inverse_turbocharged?.reproject || inverse33;
      let out_sample_height_in_srs, out_sample_width_in_srs, pixel_height_ratio, pixel_width_ratio;
      if (method === "near-vectorize" || method === "nearest-vectorize") {
        if (debug_level >= 2) console.log('[geowarp] choosing between "near" and "vectorize" for best speed');
        out_bbox_in_srs ??= same_srs ? out_bbox : reprojectBoundingBox2(out_bbox, inverse33, { density: 100, nan_strategy: "skip" });
        out_sample_height_in_srs = (out_bbox_in_srs[3] - out_bbox_in_srs[1]) / out_height_in_samples;
        out_sample_width_in_srs = (out_bbox_in_srs[2] - out_bbox_in_srs[0]) / out_width_in_samples;
        pixel_height_ratio = out_sample_height_in_srs / in_pixel_height;
        pixel_width_ratio = out_sample_width_in_srs / in_pixel_width;
        if (debug_level >= 2) console.log("[geowarp] pixel_height_ratio:", pixel_height_ratio);
        if (debug_level >= 2) console.log("[geowarp] pixel_width_ratio:", pixel_width_ratio);
        if (pixel_height_ratio < 0.1 && pixel_width_ratio < 0.1) {
          method = "vectorize";
          if (debug_level >= 1) console.log('[geowarp] selected "vectorize" method as it is likely to be faster');
        } else {
          method = "near";
          if (debug_level >= 1) console.log('[geowarp] selected "near" method as it is likely to be faster');
        }
      }
      const should_skip = skip_no_data_strategy === "any" ? (px) => px.some((n) => isInvalid(n) || in_no_data.includes(n)) : skip_no_data_strategy === "all" ? (px) => px.every((n) => isInvalid(n) || in_no_data.includes(n)) : () => false;
      if (method === "vectorize") {
        out_bbox_in_srs ??= same_srs ? out_bbox : reprojectBoundingBox2(out_bbox, inverse33, { density: 100, nan_strategy: "skip" });
        let [left, bottom, right, top] = out_bbox_in_srs;
        out_sample_height_in_srs ??= (top - bottom) / out_height_in_samples;
        if (in_pixel_height < out_sample_height_in_srs) {
          if (debug_level >= 1) {
            console.warn(`[geowarp] normalized height of sample area of ${out_sample_height_in_srs} is larger than input pixel height of ${in_pixel_height}`);
          }
        }
        out_sample_width_in_srs ??= (right - left) / out_width;
        if (in_pixel_width < out_sample_width_in_srs) {
          if (debug_level >= 1) {
            console.warn(`[geowarp] normalized width of sample area of ${out_sample_width_in_srs} is larger than input pixel width of ${in_pixel_width}`);
          }
        }
        const cutline_in_srs = cutline && reprojectGeoJSON3(cutline, { reproject: inverse33 });
        const cutline_bbox_in_srs = cutline && getBoundingBox(cutline_in_srs);
        if (!cutline || booleanIntersects2(in_bbox, cutline_bbox_in_srs)) {
          [left, bottom, right, top] = cutline && cutline_strategy !== "inside" ? intersect(out_bbox_in_srs, cutline_bbox_in_srs) : out_bbox_in_srs;
          if (debug_level >= 1) console.log("[geowarp] [left, bottom, right, top]:", [left, bottom, right, top]);
          if (left < in_xmax && bottom < in_ymax && right > in_xmin || top < in_ymin) {
            const out_bbox_in_input_image_coords = reprojectBoundingBox2(out_bbox_in_srs, in_srs_pt_to_in_img_pt);
            if (debug_level >= 1) console.log("[geowarp] out_bbox_in_input_image_coords:", out_bbox_in_input_image_coords);
            if (booleanIntersects2(out_bbox_in_input_image_coords, [0, 0, in_width, in_height])) {
              const [in_column_start, in_row_start, in_column_end, in_row_end] = out_bbox_in_input_image_coords.map((n) => Math.floor(n));
              const in_row_start_clamped = clamp(in_row_start, 0, in_height - 1);
              const in_row_end_clamped = clamp(in_row_end, 0, in_height - 1);
              const in_column_start_clamped = clamp(in_column_start, 0, in_width - 1);
              const in_column_end_clamped = clamp(in_column_end, 0, in_width - 1);
              for (let r = in_row_start_clamped; r <= in_row_end_clamped; r++) {
                for (let c = in_column_start_clamped; c <= in_column_end_clamped; c++) {
                  const raw_values = read_bands.map((band) => select({ point: { band, row: r, column: c } }).value);
                  if (should_skip(raw_values)) continue;
                  const rect = polygon([c, r, c + 1, r + 1]);
                  const pixel_geometry_in_out_srs = reprojectGeoJSON3(rect, { reproject: in_img_pt_to_out_srs_pt });
                  const intersect_options = {
                    debug: false,
                    raster_bbox: out_bbox,
                    raster_height: out_height_in_samples,
                    raster_width: out_width_in_samples,
                    geometry: pixel_geometry_in_out_srs
                  };
                  const pixel2 = process({ pixel: raw_values });
                  if (pixel2 !== null || insert_null_strategy === "insert") {
                    if (cutline) {
                      intersect_options.per_pixel = ({ row, column }) => {
                        if (segments_by_row[row].some(([start2, end]) => column >= start2 && column <= end)) {
                          insert_sample({ raw: raw_values, pixel: pixel2, row, column });
                        }
                      };
                    } else {
                      intersect_options.per_pixel = ({ row, column }) => {
                        insert_sample({ raw: raw_values, pixel: pixel2, row, column });
                      };
                    }
                    dufour_peyton_intersection.calculate(intersect_options);
                  }
                }
              }
            }
          }
        }
      } else if (method === "near" || method === "nearest") {
        const rmax = Math.min(row_end, out_height_in_samples);
        for (let r = row_start; r < rmax; r++) {
          const segments = segments_by_row[r];
          for (let iseg = 0; iseg < segments.length; iseg++) {
            const [cstart, cend] = segments[iseg];
            for (let c = cstart; c <= cend; c++) {
              const [x_in_raster_pixels, y_in_raster_pixels] = inverse_pixel([c, r]);
              let raw_values = [];
              if (x_in_raster_pixels < 0 || y_in_raster_pixels < 0 || x_in_raster_pixels >= in_width || y_in_raster_pixels >= in_height) {
                raw_values = new Array(read_bands.length).fill(primary_in_no_data);
              } else {
                raw_values = selectPixel2({
                  row: y_in_raster_pixels,
                  column: x_in_raster_pixels
                });
              }
              if (should_skip(raw_values)) continue;
              const pixel2 = process({ pixel: raw_values });
              if (pixel2 !== null || insert_null_strategy === "insert") {
                insert_sample({
                  row: r,
                  column: c,
                  pixel: pixel2,
                  raw: raw_values,
                  x_in_raster_pixels,
                  y_in_raster_pixels
                });
              }
            }
          }
        }
      } else if (method === "bilinear") {
        const rmax = Math.min(row_end, out_height_in_samples);
        let y = out_ymax + half_out_sample_height - row_start * out_sample_height;
        for (let r = row_start; r < rmax; r++) {
          y -= out_sample_height;
          const segments = segments_by_row[r];
          for (let iseg = 0; iseg < segments.length; iseg++) {
            const [cstart, cend] = segments[iseg];
            for (let c = cstart; c <= cend; c++) {
              const x = out_xmin + c * out_sample_width + half_out_sample_width;
              const pt_out_srs = [x, y];
              const pt_in_srs = same_srs ? pt_out_srs : inv(pt_out_srs);
              const [xInRasterPixels, yInRasterPixels] = in_srs_pt_to_in_img_pt(pt_in_srs);
              const left = Math.floor(xInRasterPixels);
              const right = Math.ceil(xInRasterPixels);
              const top = Math.floor(yInRasterPixels);
              const bottom = Math.ceil(yInRasterPixels);
              const leftWeight = right - xInRasterPixels;
              const rightWeight = xInRasterPixels - left;
              const topWeight = top === bottom ? 0.5 : bottom - yInRasterPixels;
              const bottomWeight = top === bottom ? 0.5 : yInRasterPixels - top;
              const leftOutside = left < 0 || left >= in_width;
              const rightOutside = right < 0 || right >= in_width;
              const topOutside = top < 0 || top >= in_height;
              const bottomOutside = bottom < 0 || bottom >= in_height;
              const upperleftOutside = topOutside || leftOutside;
              const upperRightOutside = topOutside || rightOutside;
              const lowerleftOutside = bottomOutside || leftOutside;
              const lowerRightOutside = bottomOutside || rightOutside;
              const raw_values = new Array();
              for (let i = 0; i < read_bands.length; i++) {
                const read_band = read_bands[i];
                const upperLeftValue = upperleftOutside ? primary_in_no_data : select({ point: { band: read_band, row: top, column: left } }).value;
                const upperRightValue = upperRightOutside ? primary_in_no_data : select({ point: { band: read_band, row: top, column: right } }).value;
                const lowerLeftValue = lowerleftOutside ? primary_in_no_data : select({ point: { band: read_band, row: bottom, column: left } }).value;
                const lowerRightValue = lowerRightOutside ? primary_in_no_data : select({ point: { band: read_band, row: bottom, column: right } }).value;
                let topValue;
                const upperLeftInvalid = isInvalid(upperLeftValue) || in_no_data.includes(upperLeftValue);
                const upperRightInvalid = isInvalid(upperRightValue) || in_no_data.includes(upperRightValue);
                if (upperLeftInvalid && upperRightInvalid) {
                } else if (upperLeftInvalid) {
                  topValue = upperRightValue;
                } else if (upperRightInvalid) {
                  topValue = upperLeftValue;
                } else if (upperLeftValue === upperRightValue) {
                  topValue = upperLeftValue;
                } else {
                  topValue = leftWeight * upperLeftValue + rightWeight * upperRightValue;
                }
                let bottomValue;
                const lowerLeftInvalid = isInvalid(lowerLeftValue) || in_no_data.includes(lowerLeftValue);
                const lowerRightInvalid = isInvalid(lowerRightValue) || in_no_data.includes(lowerRightValue);
                if (lowerLeftInvalid && lowerRightInvalid) {
                } else if (lowerLeftInvalid) {
                  bottomValue = lowerRightValue;
                } else if (lowerRightInvalid) {
                  bottomValue = lowerLeftValue;
                } else if (lowerLeftValue === lowerRightValue) {
                  bottomValue = lowerLeftValue;
                } else {
                  bottomValue = leftWeight * lowerLeftValue + rightWeight * lowerRightValue;
                }
                let value;
                if (topValue === void 0 && bottomValue === void 0) {
                  value = primary_in_no_data;
                } else if (topValue === void 0) {
                  value = bottomValue;
                } else if (bottomValue === void 0) {
                  value = topValue;
                } else {
                  value = bottomWeight * bottomValue + topWeight * topValue;
                }
                raw_values.push(value);
              }
              if (should_skip(raw_values)) continue;
              const pixel2 = process({ pixel: raw_values });
              if (pixel2 !== null || insert_null_strategy === "insert") {
                insert_sample({ row: r, column: c, pixel: pixel2, raw: raw_values });
              }
            }
          }
        }
      } else {
        let calc;
        if (typeof method === "function") {
          calc = (values) => method({ values });
        } else if (method === "max") {
          calc = (values) => fastMax2(values, { theoretical_max });
        } else if (method === "mean") {
          calc = (values) => mean(values);
        } else if (method === "median") {
          calc = (values) => calcMedian(values);
        } else if (method === "min") {
          calc = (values) => fastMin2(values, { theoretical_min });
        } else if (method === "mode") {
          calc = (values) => mode2(values)[0];
        } else if (method === "mode-max") {
          calc = (values) => fastMax2(mode2(values));
        } else if (method === "mode-mean") {
          calc = (values) => mean(mode2(values));
        } else if (method === "mode-median") {
          calc = (values) => calcMedian(mode2(values));
        } else if (method === "mode-min") {
          calc = (values) => fastMin2(mode2(values));
        } else {
          throw new Error(`[geowarp] unknown method "${method}"`);
        }
        let top, left, bottom, right;
        bottom = out_ymax - row_start * row_start;
        const rmax = Math.min(row_end, out_height_in_samples);
        for (let r = row_start; r < rmax; r++) {
          top = bottom;
          bottom = top - out_sample_height;
          const segments = segments_by_row[r];
          for (let iseg = 0; iseg < segments.length; iseg++) {
            const [cstart, cend] = segments[iseg];
            right = out_xmin + out_sample_width * cstart;
            for (let c = cstart; c <= cend; c++) {
              left = right;
              right = left + out_sample_width;
              let leftInRasterPixels, topInRasterPixels, rightInRasterPixels, bottomInRasterPixels;
              try {
                [leftInRasterPixels, topInRasterPixels, rightInRasterPixels, bottomInRasterPixels] = reprojectBoundingBox2(
                  [left, bottom, right, top],
                  out_srs_pt_to_in_img_pt,
                  { nan_strategy: "throw" }
                );
              } catch (error) {
                continue;
              }
              if (debug_level >= 4) console.log("[geowarp] leftInRasterPixels:", leftInRasterPixels);
              if (debug_level >= 4) console.log("[geowarp] rightInRasterPixels:", rightInRasterPixels);
              if (debug_level >= 4) console.log("[geowarp] topInRasterPixels:", topInRasterPixels);
              if (debug_level >= 4) console.log("[geowarp] bottomInRasterPixels:", bottomInRasterPixels);
              let leftSample = Math.round(leftInRasterPixels);
              let rightSample = Math.round(rightInRasterPixels);
              let topSample = Math.round(topInRasterPixels);
              let bottomSample = Math.round(bottomInRasterPixels);
              if (leftSample === rightSample) {
                const xCenterSample = (rightInRasterPixels + leftInRasterPixels) / 2;
                leftSample = Math.floor(xCenterSample);
                rightSample = leftSample + 1;
              }
              if (topSample === bottomSample) {
                const yCenterSample = (topInRasterPixels + bottomInRasterPixels) / 2;
                topSample = Math.floor(yCenterSample);
                bottomSample = topSample + 1;
              }
              let raw_values = [];
              if (leftSample >= in_width || rightSample < 0 || bottomSample < 0 || topSample >= in_height) {
                raw_values = new Array(read_bands.length).fill(primary_in_no_data);
              } else {
                leftSample = Math.max(0, leftSample);
                rightSample = Math.min(rightSample, in_width);
                topSample = Math.max(0, topSample);
                bottomSample = Math.min(bottomSample, in_height);
                for (let i = 0; i < read_bands.length; i++) {
                  const read_band = read_bands[i];
                  const { data: values } = xdim.clip({
                    data: in_data,
                    flat: true,
                    layout: in_layout,
                    sizes: in_sizes,
                    rect: {
                      band: [read_band, read_band],
                      row: [topSample, Math.max(topSample, bottomSample - 1)],
                      column: [leftSample, Math.max(leftSample, rightSample - 1)]
                    }
                  });
                  const valid_values = values.filter((v) => typeof v === "number" && v === v && in_no_data.indexOf(v) === -1);
                  if (valid_values.length === 0) {
                    raw_values.push(primary_in_no_data);
                  } else {
                    raw_values.push(calc(valid_values));
                  }
                }
              }
              if (should_skip(raw_values)) continue;
              const pixel2 = process({ pixel: raw_values });
              if (pixel2 !== null || insert_null_strategy === "insert") {
                insert_sample({ row: r, column: c, pixel: pixel2, raw: raw_values });
              }
            }
          }
        }
      }
      const generate_result = () => {
        if (debug_level >= 1) console.log("[geowarp] took " + (performance.now() - start_time).toFixed(0) + "ms");
        return {
          data: out_data,
          out_bands,
          out_height,
          out_layout,
          out_pixel_depth,
          out_pixel_height,
          out_pixel_width,
          out_sample_height,
          out_sample_width,
          out_width,
          read_bands
        };
      };
      if (pending > 0) {
        return new Promise((resolve) => {
          const ms = 5;
          const intervalId = setInterval(() => {
            if (pending === 0) {
              clearInterval(intervalId);
              resolve(generate_result());
            }
          }, ms);
        });
      } else {
        return generate_result();
      }
    };
    if (typeof module === "object") {
      module.exports = geowarp3;
      module.exports.default = geowarp3;
    }
    if (typeof window === "object") window.geowarp = geowarp3;
    if (typeof self === "object") self.geowarp = geowarp3;
  }
});

// node_modules/preciso/multiply_range.js
var require_multiply_range = __commonJS({
  "node_modules/preciso/multiply_range.js"(exports, module) {
    "use strict";
    var compare_positive = require_compare_positive();
    var is_zero = require_is_zero();
    var long_multiplication = require_long_multiplication();
    var long_addition = require_long_addition();
    function multiply_range(min, max, step = "1") {
      if (is_zero(min)) return "0";
      let product = min;
      let n = min;
      while (compare_positive(n, max) === "<") {
        n = long_addition(n, step);
        product = long_multiplication(product, n);
      }
      return product;
    }
    module.exports = multiply_range;
    module.exports.default = multiply_range;
  }
});

// node_modules/preciso/factorial.js
var require_factorial = __commonJS({
  "node_modules/preciso/factorial.js"(exports, module) {
    "use strict";
    var multiply_range = require_multiply_range();
    function factorial(n) {
      if (n === "0") return "1";
      return multiply_range("1", n);
    }
    module.exports = factorial;
    module.exports.default = factorial;
  }
});

// node_modules/preciso/binomial_coefficient.js
var require_binomial_coefficient = __commonJS({
  "node_modules/preciso/binomial_coefficient.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var compare_positive = require_compare_positive();
    var factorial = require_factorial();
    var long_addition = require_long_addition();
    var long_subtraction = require_long_subtraction();
    var long_division = require_long_division();
    var multiply_range = require_multiply_range();
    function binomial_coefficient(n, k) {
      n = clean(n);
      k = clean(k);
      switch (compare_positive(n, k)) {
        case "=":
          return "1";
        case ">": {
          const diff = long_subtraction(n, k);
          const numerator = multiply_range(long_addition(k, "1"), n);
          const denominator = factorial(diff);
          return long_division(numerator, denominator);
        }
        case "<": {
          throw new Error("[binominal_coefficient] unsupported");
        }
      }
    }
    module.exports = binomial_coefficient;
    module.exports.default = binomial_coefficient;
  }
});

// node_modules/preciso/sign.js
var require_sign = __commonJS({
  "node_modules/preciso/sign.js"(exports, module) {
    "use strict";
    var is_zero = require_is_zero();
    var sign_nonzero = require_sign_nonzero();
    function sign(n) {
      return is_zero(n) ? "" : sign_nonzero(n);
    }
    module.exports = sign;
    module.exports.default = sign;
  }
});

// node_modules/preciso/ceil.js
var require_ceil = __commonJS({
  "node_modules/preciso/ceil.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var long_addition = require_long_addition();
    var sign = require_sign();
    function ceil(n) {
      n = clean(n);
      const idot = n.indexOf(".");
      if (idot === -1) return n;
      const nsign = sign(n);
      n = absolute(n).split(".")[0];
      if (nsign === "+") {
        return long_addition(n, "1");
      } else if (nsign === "-") {
        if (n === "0" || n === "") {
          return "0";
        } else {
          return "-" + n;
        }
      }
    }
    module.exports = ceil;
    module.exports.default = ceil;
  }
});

// node_modules/preciso/constants/pi_100.js
var require_pi_100 = __commonJS({
  "node_modules/preciso/constants/pi_100.js"(exports, module) {
    module.exports = {
      PI_100: "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679"
    };
  }
});

// node_modules/preciso/constants/index.js
var require_constants = __commonJS({
  "node_modules/preciso/constants/index.js"(exports, module) {
    "use strict";
    var { MAX_SAFE_INTEGER } = require_max_safe_integer();
    var { MAX_SAFE_INTEGER_LENGTH } = require_max_safe_integer_length();
    var { PI } = require_pi_100();
    module.exports = {
      MAX_SAFE_INTEGER,
      MAX_SAFE_INTEGER_LENGTH,
      PI
    };
  }
});

// node_modules/preciso/fraction.js
var require_fraction = __commonJS({
  "node_modules/preciso/fraction.js"(exports, module) {
    "use strict";
    var count_decimal_digits = require_count_decimal_digits();
    function fraction(n) {
      const decimal_digits = count_decimal_digits(n);
      const numerator = n.replace(/\./g, "").replace(/^0/, "");
      const denominator = 1 + "0".repeat(decimal_digits);
      return [numerator, denominator];
    }
    module.exports = fraction;
    module.exports.default = fraction;
  }
});

// node_modules/preciso/pow_positive.js
var require_pow_positive = __commonJS({
  "node_modules/preciso/pow_positive.js"(exports, module) {
    "use strict";
    var multiply_rational = require_multiply_rational();
    function pow_positive(base, exponent) {
      const imax = Number(exponent);
      let product = base;
      for (let i = 1; i < imax; i++) {
        product = multiply_rational([product, base]);
      }
      return product;
    }
    module.exports = pow_positive;
    module.exports.default = pow_positive;
  }
});

// node_modules/preciso/is_fraction.js
var require_is_fraction = __commonJS({
  "node_modules/preciso/is_fraction.js"(exports, module) {
    "use strict";
    function is_fraction(n) {
      return n.includes("/");
    }
    module.exports = is_fraction;
    module.exports.default = is_fraction;
  }
});

// node_modules/preciso/parse_fraction.js
var require_parse_fraction = __commonJS({
  "node_modules/preciso/parse_fraction.js"(exports, module) {
    "use strict";
    function parse_fraction(n) {
      return n.split("/");
    }
    module.exports = parse_fraction;
    module.exports.default = parse_fraction;
  }
});

// node_modules/preciso/reciprocal.js
var require_reciprocal = __commonJS({
  "node_modules/preciso/reciprocal.js"(exports, module) {
    "use strict";
    var divide2 = require_divide();
    var is_fraction = require_is_fraction();
    var parse_fraction = require_parse_fraction();
    function reciprocal(n, { max_decimal_digits = 100, fraction = false } = {}) {
      if (is_fraction(n)) {
        const [numerator, denominator] = parse_fraction(n);
        if (fraction) {
          return denominator + "/" + numerator;
        } else {
          return divide2(denominator, numerator, { max_decimal_digits });
        }
      } else {
        if (fraction) {
          return "1/" + n;
        } else {
          return divide2("1", n, { max_decimal_digits });
        }
      }
    }
    module.exports = reciprocal;
    module.exports.default = reciprocal;
  }
});

// node_modules/preciso/is_even.js
var require_is_even = __commonJS({
  "node_modules/preciso/is_even.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var is_integer = require_is_integer();
    function is_even(n) {
      n = clean(n);
      if (!is_integer(n)) throw new Error("can't call is_even on decimal");
      return ["0", "2", "4", "6", "8"].includes(n.charAt(n.length - 1));
    }
    module.exports = is_even;
    module.exports.default = is_even;
  }
});

// node_modules/preciso/count_integer_digits.js
var require_count_integer_digits = __commonJS({
  "node_modules/preciso/count_integer_digits.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    function count_integer_digits(n) {
      n = absolute(clean(n));
      const i = n.indexOf(".");
      return (i === -1 ? n.length : i).toString();
    }
    module.exports = count_integer_digits;
    module.exports.default = count_integer_digits;
  }
});

// node_modules/preciso/root_integer_digits.js
var require_root_integer_digits = __commonJS({
  "node_modules/preciso/root_integer_digits.js"(exports, module) {
    "use strict";
    var ceil = require_ceil();
    var count_integer_digits = require_count_integer_digits();
    var divide2 = require_divide();
    function root_integer_digits(radicand, index) {
      const digits = count_integer_digits(radicand);
      if (digits === "0") return "0";
      return ceil(divide2(digits, index, { max_decimal_digits: 1 }));
    }
    module.exports = root_integer_digits;
    module.exports.default = root_integer_digits;
  }
});

// node_modules/preciso/root.js
var require_root = __commonJS({
  "node_modules/preciso/root.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var compare_positive = require_compare_positive();
    var is_even = require_is_even();
    var is_integer = require_is_integer();
    var is_negative = require_is_negative();
    var pow_positive = require_pow_positive();
    var root_integer_digits = require_root_integer_digits();
    function root(radicand, index, { imaginary = true, max_decimal_digits = 100 } = {}) {
      radicand = clean(radicand);
      index = clean(index);
      if (index === "1") return radicand;
      if (radicand === "1") return "1";
      if (!is_integer(index)) throw new Error("[preciso] can't find fractional roots");
      if (is_negative(index)) throw new Error("[preciso] can't find root of negative indexes");
      const rad = absolute(radicand);
      const radicand_is_negative = is_negative(radicand);
      const index_is_even = is_even(index);
      const has_imaginary = radicand_is_negative && index_is_even;
      if (has_imaginary && !imaginary) throw new Error("[preciso] root has an imaginary number");
      const out_sign = radicand_is_negative && !index_is_even ? "-" : "";
      const count_of_integer_places = root_integer_digits(rad, index);
      const digits = ["9", "8", "7", "6", "5", "4", "3", "2", "1", "0"];
      let left = "";
      for (let i = 0; i < count_of_integer_places; i++) {
        for (let ii = 0; ii < digits.length; ii++) {
          const digit = digits[ii];
          const test_start = left + digit;
          let test_base = test_start + "0".repeat(count_of_integer_places - i - 1);
          const test_res = pow_positive(test_base, index);
          const comparison = compare_positive(test_res, rad);
          if (comparison === "=") {
            if (has_imaginary) test_base += "i";
            return out_sign + test_base;
          } else if (comparison === "<") {
            left = test_start;
            break;
          }
        }
      }
      let base = left + ".";
      for (let i = 0; i < max_decimal_digits; i++) {
        let added = false;
        for (let ii = 0; ii < digits.length; ii++) {
          const digit = digits[ii];
          let test_base = base + digit;
          const test_res = pow_positive(test_base, index);
          const comparison = compare_positive(test_res, rad);
          if (comparison === "=") {
            if (has_imaginary) test_base += "i";
            return out_sign + test_base;
          } else if (comparison === "<") {
            base = test_base;
            added = true;
            break;
          }
        }
        if (!added) break;
      }
      if (has_imaginary) base += "i";
      return out_sign + base;
    }
    module.exports = root;
    module.exports.default = root;
  }
});

// node_modules/preciso/min.js
var require_min = __commonJS({
  "node_modules/preciso/min.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var compare = require_compare();
    function min(nums) {
      if (typeof nums === "string") nums = Array.prototype.slice.call(arguments);
      let result2 = clean(nums[0]);
      const len = nums.length;
      for (let i = 1; i < len; i++) {
        const n = nums[i];
        if (compare(n, result2) === "<") {
          result2 = n;
        }
      }
      return result2;
    }
    module.exports = min;
    module.exports.default = min;
  }
});

// node_modules/preciso/primes.js
var require_primes = __commonJS({
  "node_modules/preciso/primes.js"(exports, module) {
    "use strict";
    var compare_positive = require_compare_positive();
    var divide2 = require_divide();
    var is_integer = require_is_integer();
    var long_addition = require_long_addition();
    function primes(start2 = "0", end = "100") {
      const prime_single_digits = ["2", "3", "5", "7", "11"];
      const results = prime_single_digits.filter((n) => compare_positive(n, start2) !== "<" && compare_positive(n, end) !== ">");
      let num = "13";
      while (compare_positive(num, end) !== ">") {
        if (!(/^\d+5/.test(num) || /^(\d)\1+/.test(num))) {
          if (["9", "7", "3"].every((digit) => !is_integer(divide2(num, digit)))) {
            results.push(num);
          }
        }
        num = long_addition(num, "2");
      }
      return results;
    }
    module.exports = primes;
    module.exports.default = primes;
  }
});

// node_modules/preciso/simplify_fraction.js
var require_simplify_fraction = __commonJS({
  "node_modules/preciso/simplify_fraction.js"(exports, module) {
    "use strict";
    var divide2 = require_divide();
    var is_even = require_is_even();
    var min = require_min();
    var primes = require_primes();
    function simplify_fraction(numerator, denominator) {
      const digits = primes("2", min(["1000", denominator, denominator]));
      while (numerator.endsWith("0") && denominator.endsWith("0")) {
        numerator = numerator.substring(0, numerator.length - 1);
        denominator = denominator.substring(0, denominator.length - 1);
      }
      while (is_even(numerator) && is_even(denominator)) {
        numerator = divide2(numerator, "2");
        denominator = divide2(denominator, "2");
      }
      let proceed = true;
      while (proceed) {
        proceed = false;
        for (let i = 0; i < digits.length; i++) {
          const digit = digits[i];
          const digit_length = digit.length;
          const max_decimal_digits = digit_length + 1;
          const numerator_divided = divide2(numerator, digit, { ellipsis: true, max_decimal_digits });
          if (numerator_divided.indexOf(".") === -1) {
            const denominator_divided = divide2(denominator, digit, { ellipsis: true, max_decimal_digits });
            if (denominator_divided.indexOf(".") === -1) {
              numerator = numerator_divided;
              denominator = denominator_divided;
              proceed = true;
              break;
            }
          }
        }
      }
      return [numerator, denominator];
    }
    module.exports = simplify_fraction;
    module.exports.default = simplify_fraction;
  }
});

// node_modules/preciso/pow.js
var require_pow = __commonJS({
  "node_modules/preciso/pow.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var divide2 = require_divide();
    var fraction = require_fraction();
    var is_integer = require_is_integer();
    var is_imaginary = require_is_imaginary();
    var is_odd = require_is_odd();
    var is_zero = require_is_zero();
    var multiply2 = require_multiply();
    var pow_positive = require_pow_positive();
    var reciprocal = require_reciprocal();
    var root = require_root();
    var round = require_round();
    var sign = require_sign();
    var simplify_fraction = require_simplify_fraction();
    function pow(base, exponent, {
      zero_to_the_power_of_zero = "1",
      // passed to divide then long_division
      ellipsis = false,
      imaginary = true,
      max_decimal_digits = 100,
      fraction: use_fraction = false
    } = {}) {
      base = clean(base);
      exponent = clean(exponent);
      const base_is_imaginary = imaginary && is_imaginary(base);
      if (base_is_imaginary) base = base.replace(/i$/, "");
      const base_is_zero = is_zero(base);
      const exponent_is_zero = is_zero(exponent);
      if (base_is_zero && exponent_is_zero) {
        return zero_to_the_power_of_zero;
      }
      if (exponent_is_zero) {
        return "1";
      }
      const sign_of_exponent = sign(exponent);
      if (base_is_zero) {
        if (sign_of_exponent === "+") {
          return "0";
        } else if (sign_of_exponent === "-") {
          return "Infinity";
        }
      }
      const exponent_is_integer = is_integer(exponent);
      if (sign_of_exponent === "+" && exponent_is_integer) {
        let product = pow_positive(base, exponent);
        if (typeof max_decimal_digits === "number") {
          product = round(product, { digits: max_decimal_digits });
        }
        if (base_is_imaginary && is_odd(exponent)) product += "i";
        return product;
      }
      if (sign_of_exponent === "-" && exponent_is_integer) {
        const numerator = "1";
        const denominator = pow_positive(base, absolute(exponent));
        return divide2(numerator, denominator, { ellipsis, max_decimal_digits });
      }
      if (!exponent_is_integer) {
        exponent = absolute(exponent);
        let [numerator, denominator] = exponent.includes("/") ? exponent.split("/") : fraction(exponent);
        [numerator, denominator] = simplify_fraction(numerator, denominator);
        let inner = root(base, denominator, { imaginary });
        let result2 = multiply2(numerator, inner);
        if (typeof max_decimal_digits === "number") result2 = round(result2, { digits: max_decimal_digits });
        if (sign_of_exponent === "-") {
          result2 = reciprocal(result2, { fraction: use_fraction, max_decimal_digits });
        }
        return result2;
      }
    }
    module.exports = pow;
    module.exports.default = pow;
  }
});

// node_modules/preciso/square.js
var require_square = __commonJS({
  "node_modules/preciso/square.js"(exports, module) {
    "use strict";
    var pow = require_pow();
    function square(base, options) {
      return pow(base, "2", options);
    }
    module.exports = square;
    module.exports.default = square;
  }
});

// node_modules/preciso/cosine_radians.js
var require_cosine_radians = __commonJS({
  "node_modules/preciso/cosine_radians.js"(exports, module) {
    "use strict";
    var add3 = require_add();
    var is_zero = require_is_zero();
    var square = require_square();
    var multiply_rational = require_multiply_rational();
    var divide2 = require_divide();
    function cosine_radians(n, { steps = 100, max_decimal_digits = 100 } = {}) {
      if (is_zero(n)) return "0";
      let sign = "-";
      let result2 = "1";
      let imax = steps;
      let nsquare = square(n);
      let numerator = "1";
      let denominator = "1";
      let f1;
      let f2 = "0";
      for (let i = 0; i < imax; i++) {
        f1 = add3(f2, "1");
        f2 = add3(f1, "1");
        numerator = multiply_rational([numerator, nsquare], { max_decimal_digits });
        denominator = multiply_rational([denominator, f1, f2], { max_decimal_digits });
        const diff = divide2(numerator, denominator, { max_decimal_digits });
        result2 = add3(result2, sign + diff);
        sign = sign === "-" ? "+" : "-";
      }
      return result2;
    }
    module.exports = cosine_radians;
    module.exports.default = cosine_radians;
  }
});

// node_modules/preciso/cube.js
var require_cube = __commonJS({
  "node_modules/preciso/cube.js"(exports, module) {
    "use strict";
    var pow = require_pow();
    function cube(base, options) {
      return pow(base, "3", options);
    }
    module.exports = cube;
    module.exports.default = cube;
  }
});

// node_modules/preciso/cube_root.js
var require_cube_root = __commonJS({
  "node_modules/preciso/cube_root.js"(exports, module) {
    "use strict";
    var root = require_root();
    function cube_root(radicand, options) {
      return root(radicand, "3", options);
    }
    module.exports = cube_root;
    module.exports.default = cube_root;
  }
});

// node_modules/preciso/eulers_number.js
var require_eulers_number = __commonJS({
  "node_modules/preciso/eulers_number.js"(exports, module) {
    "use strict";
    var add3 = require_add();
    var divide2 = require_divide();
    function eulers_number({ max_decimal_digits = 100, steps = 100 } = {}) {
      let sum = "1";
      let step = "1";
      for (let i = 1; i < steps; i++) {
        step = divide2(step, i.toString(), { max_decimal_digits });
        sum = add3(sum, step);
      }
      return sum;
    }
    module.exports = eulers_number;
    module.exports.default = eulers_number;
  }
});

// node_modules/preciso/is_negative_infinity.js
var require_is_negative_infinity = __commonJS({
  "node_modules/preciso/is_negative_infinity.js"(exports, module) {
    "use strict";
    function is_negative_infinity(n) {
      return !!n.match(/^-inf(inity)?$/i);
    }
    module.exports = is_negative_infinity;
    module.exports.default = is_negative_infinity;
  }
});

// node_modules/preciso/is_positive_infinity.js
var require_is_positive_infinity = __commonJS({
  "node_modules/preciso/is_positive_infinity.js"(exports, module) {
    "use strict";
    function is_positive_infinity(n) {
      return !!n.match(/^\+?inf(inity)?$/i);
    }
    module.exports = is_positive_infinity;
    module.exports.default = is_positive_infinity;
  }
});

// node_modules/preciso/exp.js
var require_exp = __commonJS({
  "node_modules/preciso/exp.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var is_negative_infinity = require_is_negative_infinity();
    var is_positive_infinity = require_is_positive_infinity();
    var is_zero = require_is_zero();
    var eulers_number = require_eulers_number();
    var pow = require_pow();
    function exp(power, { max_decimal_digits = 100 } = {}) {
      const e = eulers_number({ max_decimal_digits: 2 * max_decimal_digits });
      if (is_negative_infinity(power)) return "0";
      if (is_positive_infinity(power)) return "Infinity";
      if (is_zero(power)) return "1";
      power = clean(power);
      return pow(e, power, { max_decimal_digits });
    }
    module.exports = exp;
    module.exports.default = exp;
  }
});

// node_modules/preciso/flip_sign.js
var require_flip_sign = __commonJS({
  "node_modules/preciso/flip_sign.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var sign = require_sign();
    function flip_sign(n) {
      n = clean(n);
      const s = sign(n);
      if (s === "") {
        return n;
      } else if (s === "-") {
        return absolute(n);
      } else if (s === "+") {
        return "-" + n;
      }
      return void 0;
    }
    module.exports = flip_sign;
    module.exports.default = flip_sign;
  }
});

// node_modules/preciso/floor.js
var require_floor = __commonJS({
  "node_modules/preciso/floor.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var long_addition = require_long_addition();
    var sign = require_sign();
    function floor(n) {
      n = clean(n);
      const idot = n.indexOf(".");
      if (idot === -1) return n;
      const nsign = sign(n);
      n = absolute(n).split(".")[0];
      if (nsign === "+") {
        return n;
      } else if (nsign === "-") {
        if (n === "0" || n === "") {
          return "-1";
        } else {
          return "-" + long_addition(n, "1");
        }
      }
    }
    module.exports = floor;
    module.exports.default = floor;
  }
});

// node_modules/preciso/square_root.js
var require_square_root = __commonJS({
  "node_modules/preciso/square_root.js"(exports, module) {
    "use strict";
    var root = require_root();
    function square_root(radicand, options) {
      return root(radicand, "2", options);
    }
    module.exports = square_root;
    module.exports.default = square_root;
  }
});

// node_modules/preciso/sum.js
var require_sum = __commonJS({
  "node_modules/preciso/sum.js"(exports, module) {
    "use strict";
    var add3 = require_add();
    function sum(nums) {
      let total = "0";
      for (let num of nums) {
        total = add3(total, num);
      }
      return total;
    }
    module.exports = sum;
    module.exports.default = sum;
  }
});

// node_modules/preciso/hypotenuse.js
var require_hypotenuse = __commonJS({
  "node_modules/preciso/hypotenuse.js"(exports, module) {
    "use strict";
    var square = require_square();
    var square_root = require_square_root();
    var sum = require_sum();
    function hypotenuse() {
      const args = Array.from(arguments);
      const options = typeof args[args.length - 1] === "object" ? args[args.length - 1] : void 0;
      const nums = Array.isArray(args[0]) ? args[0] : options ? args.slice(0, args.length - 1) : args;
      const squares = nums.map((n) => square(n));
      return square_root(sum(squares), options);
    }
    module.exports = hypotenuse;
    module.exports.default = hypotenuse;
  }
});

// node_modules/preciso/is_factorial.js
var require_is_factorial = __commonJS({
  "node_modules/preciso/is_factorial.js"(exports, module) {
    "use strict";
    function is_factorial(n) {
      return !!n.match(/^\d+!$/i);
    }
    module.exports = is_factorial;
    module.exports.default = is_factorial;
  }
});

// node_modules/preciso/max.js
var require_max = __commonJS({
  "node_modules/preciso/max.js"(exports, module) {
    "use strict";
    var clean = require_clean();
    var compare = require_compare();
    function max(nums) {
      if (typeof nums === "string") nums = Array.prototype.slice.call(arguments);
      let result2 = clean(nums[0]);
      const len = nums.length;
      for (let i = 1; i < len; i++) {
        const n = nums[i];
        if (compare(n, result2) === ">") {
          result2 = n;
        }
      }
      return result2;
    }
    module.exports = max;
    module.exports.default = max;
  }
});

// node_modules/preciso/mean.js
var require_mean2 = __commonJS({
  "node_modules/preciso/mean.js"(exports, module) {
    "use strict";
    var add3 = require_add();
    var divide2 = require_divide();
    function mean(nums, options) {
      let count = 0;
      let total = "0";
      for (let num of nums) {
        count++;
        total = add3(total, num);
      }
      return divide2(total, count.toString(), options);
    }
    module.exports = mean;
    module.exports.default = mean;
  }
});

// node_modules/preciso/nilakantha.js
var require_nilakantha = __commonJS({
  "node_modules/preciso/nilakantha.js"(exports, module) {
    "use strict";
    var add3 = require_add();
    var long_addition = require_long_addition();
    var divide2 = require_divide();
    var multiply_rational = require_multiply_rational();
    function nilakantha(steps = 100, { divide_options } = {}) {
      let sign = "+";
      let pi = "3";
      let a = "2";
      let b = "3";
      let c = "4";
      for (let i = 1; i < steps; i++) {
        const divisor = multiply_rational([a, b, c]);
        const part = sign + divide2("4", divisor, divide_options);
        pi = add3(pi, part);
        sign = sign === "-" ? "+" : "-";
        a = c;
        b = long_addition(c, "1");
        c = long_addition(b, "1");
      }
      return pi;
    }
    module.exports = nilakantha;
    module.exports.default = nilakantha;
  }
});

// node_modules/preciso/ols.js
var require_ols = __commonJS({
  "node_modules/preciso/ols.js"(exports, module) {
    "use strict";
    var add3 = require_add();
    var divide2 = require_divide();
    var multiply_rational = require_multiply_rational();
    var round = require_round();
    var subtract2 = require_subtract();
    var square = require_square();
    function ols(points, options) {
      const number_of_points = points.length;
      let sum_of_x = "0";
      let sum_of_x_squares = "0";
      let sum_of_y = "0";
      let sum_of_y_squares = "0";
      if (number_of_points === 0) throw Error("[preciso] zero points passed to linear_regression");
      for (let i = 0; i < number_of_points; i++) {
        const [x, y] = points[i];
        sum_of_x = add3(sum_of_x, x);
        sum_of_x_squares = add3(sum_of_x_squares, square(x));
        sum_of_y = add3(sum_of_y, y);
        sum_of_y_squares = add3(sum_of_y_squares, square(y));
      }
      const number_of_points_as_string = number_of_points.toString();
      const x_mean = divide2(sum_of_x, number_of_points_as_string);
      const y_mean = divide2(sum_of_y, number_of_points_as_string);
      let sum_of_errors = "0";
      let sum_of_residual_squares = "0";
      for (let i = 0; i < number_of_points; i++) {
        const [x, y] = points[i];
        const x_error = subtract2(x, x_mean);
        const y_error = subtract2(y, y_mean);
        const xy_error = multiply_rational([x_error, y_error]);
        sum_of_errors = add3(sum_of_errors, xy_error);
        const x_error_square = square(x_error);
        sum_of_residual_squares = add3(sum_of_residual_squares, x_error_square);
      }
      let m = divide2(sum_of_errors, sum_of_residual_squares);
      let b = subtract2(y_mean, multiply_rational(m, x_mean));
      if (options && typeof options.max_decimal_digits === "number") {
        m = round(m, { digits: options.max_decimal_digits });
        b = round(b, { digits: options.max_decimal_digits });
      }
      return { m, b };
    }
    module.exports = ols;
    module.exports.default = ols;
  }
});

// node_modules/preciso/truncate.js
var require_truncate = __commonJS({
  "node_modules/preciso/truncate.js"(exports, module) {
    "use strict";
    function truncate(n) {
      const i = n.indexOf(".");
      if (i === -1) return n;
      else return n.substring(0, i);
    }
    module.exports = truncate;
    module.exports.default = truncate;
  }
});

// node_modules/preciso/remainder.js
var require_remainder = __commonJS({
  "node_modules/preciso/remainder.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var clean = require_clean();
    var compare_positive = require_compare_positive();
    var long_division = require_long_division();
    var multiply2 = require_multiply();
    var subtract2 = require_subtract();
    var truncate = require_truncate();
    function remainder(dividend, divisor) {
      dividend = clean(dividend);
      divisor = clean(divisor);
      const sign = dividend[0] === "-" ? "-" : "";
      dividend = absolute(dividend);
      divisor = absolute(divisor);
      const comparison = compare_positive(dividend, divisor);
      if (comparison === "=") return "0";
      if (comparison === "<") {
        if (dividend[0] === ".") dividend = "0" + dividend;
        return sign + dividend;
      }
      const quotient = long_division(dividend, divisor, { max_decimal_places: 0 });
      const times = truncate(quotient);
      const product = multiply2(divisor, times);
      return sign + subtract2(dividend, product);
    }
    module.exports = remainder;
    module.exports.default = remainder;
  }
});

// node_modules/preciso/sine_radians.js
var require_sine_radians = __commonJS({
  "node_modules/preciso/sine_radians.js"(exports, module) {
    "use strict";
    var add3 = require_add();
    var is_zero = require_is_zero();
    var square = require_square();
    var multiply_rational = require_multiply_rational();
    var divide2 = require_divide();
    function sine_radians(n, { steps = 100, max_decimal_digits = 100 } = {}) {
      if (is_zero(n)) return "0";
      let sign = "-";
      let result2 = n;
      let imax = steps;
      let nsquare = square(n);
      let numerator = n;
      let denominator = "1";
      let f1;
      let f2 = "1";
      for (let i = 0; i < imax; i++) {
        f1 = add3(f2, "1");
        f2 = add3(f1, "1");
        numerator = multiply_rational([numerator, nsquare], { max_decimal_digits });
        denominator = multiply_rational([denominator, f1, f2], { max_decimal_digits });
        const diff = divide2(numerator, denominator, { max_decimal_digits });
        result2 = add3(result2, sign + diff);
        sign = sign === "-" ? "+" : "-";
      }
      return result2;
    }
    module.exports = sine_radians;
    module.exports.default = sine_radians;
  }
});

// node_modules/preciso/softmax.js
var require_softmax = __commonJS({
  "node_modules/preciso/softmax.js"(exports, module) {
    "use strict";
    var divide2 = require_divide();
    var exp = require_exp();
    var sum = require_sum();
    function softmax(vector, { max_decimal_digits }) {
      vector = vector.map((n) => exp(n, { max_decimal_digits }));
      const total = sum(vector);
      return vector.map((n) => divide2(n, total, { max_decimal_digits, ellipsis: false }));
    }
    module.exports = softmax;
    module.exports.default = softmax;
  }
});

// node_modules/preciso/sort.js
var require_sort3 = __commonJS({
  "node_modules/preciso/sort.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    function sort(nums, { direction = "ascending" } = { direction: "ascending" }) {
      const op = direction === "desc" || direction === "descending" ? "<" : ">";
      return nums.sort((a, b) => compare(a, b) === op ? 1 : -1);
    }
    module.exports = sort;
    module.exports.default = sort;
  }
});

// node_modules/preciso/preciso.js
var require_preciso = __commonJS({
  "node_modules/preciso/preciso.js"(exports, module) {
    "use strict";
    var absolute = require_absolute();
    var add3 = require_add();
    var binomial_coefficient = require_binomial_coefficient();
    var ceil = require_ceil();
    var clean = require_clean();
    var compare = require_compare();
    var compare_positive = require_compare_positive();
    var constants = require_constants();
    var cosine_radians = require_cosine_radians();
    var count_decimal_digits = require_count_decimal_digits();
    var count_integer_digits = require_count_integer_digits();
    var cube = require_cube();
    var cube_root = require_cube_root();
    var divide2 = require_divide();
    var eulers_number = require_eulers_number();
    var exp = require_exp();
    var expand = require_expand();
    var factorial = require_factorial();
    var flip_sign = require_flip_sign();
    var floor = require_floor();
    var fraction = require_fraction();
    var hypotenuse = require_hypotenuse();
    var is_factorial = require_is_factorial();
    var is_infinity = require_is_infinity();
    var is_integer = require_is_integer();
    var is_negative_infinity = require_is_negative_infinity();
    var is_positive_infinity = require_is_positive_infinity();
    var is_zero = require_is_zero();
    var long_addition = require_long_addition();
    var long_division = require_long_division();
    var long_multiplication = require_long_multiplication();
    var long_subtraction = require_long_subtraction();
    var max = require_max();
    var mean = require_mean2();
    var min = require_min();
    var multiply2 = require_multiply();
    var multiply_array = require_multiply_array();
    var multiply_range = require_multiply_range();
    var nilakantha = require_nilakantha();
    var ols = require_ols();
    var pow = require_pow();
    var pow_positive = require_pow_positive();
    var primes = require_primes();
    var reciprocal = require_reciprocal();
    var remainder = require_remainder();
    var root = require_root();
    var root_integer_digits = require_root_integer_digits();
    var round = require_round();
    var round_last_decimal = require_round_last_decimal();
    var sign = require_sign();
    var sign_nonzero = require_sign_nonzero();
    var simplify_fraction = require_simplify_fraction();
    var sine_radians = require_sine_radians();
    var softmax = require_softmax();
    var sort = require_sort3();
    var square = require_square();
    var square_root = require_square_root();
    var subtract2 = require_subtract();
    var sum = require_sum();
    var truncate = require_truncate();
    var module_exports = {
      absolute,
      add: add3,
      binomial_coefficient,
      ceil,
      clean,
      compare,
      compare_positive,
      constants,
      cosine_radians,
      count_decimal_digits,
      count_integer_digits,
      cube,
      cube_root,
      divide: divide2,
      eulers_number,
      exp,
      expand,
      factorial,
      flip_sign,
      floor,
      fraction,
      // gregory_leibniz,
      hypotenuse,
      is_infinity,
      is_integer,
      is_factorial,
      is_negative_infinity,
      is_positive_infinity,
      is_zero,
      long_addition,
      long_division,
      long_multiplication,
      long_subtraction,
      mean,
      max,
      min,
      multiply: multiply2,
      multiply_array,
      multiply_range,
      nilakantha,
      ols,
      pow,
      pow_positive,
      primes,
      reciprocal,
      remainder,
      root,
      root_integer_digits,
      round,
      round_last_decimal,
      sign,
      sign_nonzero,
      simplify_fraction,
      sine_radians,
      softmax,
      sort,
      square,
      square_root,
      subtract: subtract2,
      sum,
      truncate
    };
    if (typeof define === "function" && define.amd)
      define(function() {
        return module_exports;
      });
    if (typeof module === "object") {
      module.exports = module_exports;
      module.exports.default = module_exports;
    }
    if (typeof window === "object") window.preciso = module_exports;
    if (typeof self === "object") self.preciso = module_exports;
  }
});

// node_modules/mediana/src/count.js
var require_count2 = __commonJS({
  "node_modules/mediana/src/count.js"(exports, module) {
    function count({ nums, no_data }) {
      let len = nums.length;
      const counts = {};
      let total = 0;
      if (no_data !== void 0) {
        for (let i = 0; i < len; i++) {
          const n = nums[i];
          if (n !== no_data) {
            total++;
            if (n in counts) counts[n].ct++;
            else counts[n] = { n, ct: 1 };
          }
        }
      } else {
        for (let i = 0; i < len; i++) {
          const n = nums[i];
          total++;
          if (n in counts) counts[n].ct++;
          else counts[n] = { n, ct: 1 };
        }
      }
      return { counts, total };
    }
    module.exports = count;
    module.exports.default = count;
  }
});

// node_modules/mediana/node_modules/preciso/expand.js
var require_expand2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/expand.js"(exports, module) {
    function expand(n) {
      if (n[0] === "+") n = n.substring(1);
      const sign = n[0] === "-" ? "-" : "";
      if (sign === "-") n = n.substring(1);
      const index_of_e = n.indexOf("e");
      if (index_of_e === -1) return sign + n;
      let index_of_dot = n.indexOf(".");
      if (index_of_dot === -1) index_of_dot = index_of_e;
      const shift = Number(n.substring(index_of_e + 1));
      const base = n.substring(0, index_of_e).replace(".", "");
      const normshift = index_of_dot + shift;
      const baselen = base.length;
      if (normshift >= baselen) {
        const zct = normshift - baselen;
        let result2 = base;
        for (let i = 0; i < zct; i++) result2 += "0";
        return sign + result2;
      } else if (normshift < 0) {
        result = "0.";
        for (let i = 0; i > normshift; i--) result += "0";
        result += base;
        return sign + result;
      } else {
        return sign + base.substring(0, normshift) + "." + base.substring(normshift);
      }
    }
    module.exports = expand;
    module.exports.default = expand;
  }
});

// node_modules/mediana/node_modules/preciso/clean.js
var require_clean2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/clean.js"(exports, module) {
    var expand = require_expand2();
    module.exports = function clean(n) {
      if (n[0] === "+") n = n.substring(1);
      n = expand(n);
      n = n.replace(/^0+(?=\d)/, "");
      if (n.includes(".")) n = n.replace(/\.?0+$/, "");
      if (n === "") n = "0";
      return n;
    };
  }
});

// node_modules/mediana/node_modules/preciso/compare_positive.js
var require_compare_positive2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/compare_positive.js"(exports, module) {
    var clean = require_clean2();
    function compare_positive(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index, blen - b_adjusted_dot_index);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let i = 0;
      while (i < imax) {
        const ai = i - aoffset;
        const achar = ai === a_adjusted_dot_index ? "." : a[ai] || "0";
        const bi = i - boffset;
        const bchar = bi === b_adjusted_dot_index ? "." : b[bi] || "0";
        if (achar !== bchar) {
          if (achar > bchar) return ">";
          else if (achar < bchar) return "<";
        }
        i++;
      }
      return "=";
    }
    module.exports = compare_positive;
    module.exports.default = compare_positive;
  }
});

// node_modules/mediana/node_modules/preciso/constants.js
var require_constants2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/constants.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAX_SAFE_INTEGER_LENGTH = MAX_SAFE_INTEGER.toString().length - 1;
    module.exports = {
      MAX_SAFE_INTEGER,
      MAX_SAFE_INTEGER_LENGTH
    };
  }
});

// node_modules/mediana/node_modules/preciso/long_addition.js
var require_long_addition2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/long_addition.js"(exports, module) {
    var { MAX_SAFE_INTEGER_LENGTH } = require_constants2();
    module.exports = function long_addition(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      if (aidx === -1 && bidx === -1 && alen < MAX_SAFE_INTEGER_LENGTH && blen < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) + Number(b)).toFixed();
      }
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index - 1, blen - b_adjusted_dot_index - 1);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let result2 = "";
      let carried = 0;
      let i = imax;
      if (right > 0) {
        while (i > imax - right) {
          const achar = a[i - aoffset] || "0";
          const bchar = b[i - boffset] || "0";
          let n = Number(achar) + Number(bchar) + carried;
          if (n >= 10) {
            n -= 10;
            carried = 1;
          } else {
            carried = 0;
          }
          if (result2 !== "" || n !== 0) {
            result2 = n + result2;
          }
          i--;
        }
        if (result2) result2 = "." + result2;
        i--;
      }
      if (left > 0) {
        while (i >= 0) {
          const achar = a[i - aoffset] || "0";
          const bchar = b[i - boffset] || "0";
          let n = Number(achar) + Number(bchar) + carried;
          if (n >= 10) {
            n -= 10;
            carried = 1;
          } else {
            carried = 0;
          }
          result2 = n + result2;
          i--;
        }
      }
      if (carried === 1) {
        result2 = carried + result2;
      }
      if (result2[0] === ".") result2 = "0" + result2;
      return result2;
    };
  }
});

// node_modules/mediana/node_modules/preciso/long_subtraction.js
var require_long_subtraction2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/long_subtraction.js"(exports, module) {
    var { MAX_SAFE_INTEGER_LENGTH } = require_constants2();
    module.exports = function long_subtraction(a, b) {
      const alen = a.length;
      const blen = b.length;
      const aidx = a.indexOf(".");
      const bidx = b.indexOf(".");
      const a_adjusted_dot_index = aidx === -1 ? alen : aidx;
      const b_adjusted_dot_index = bidx === -1 ? blen : bidx;
      if (aidx === -1 && bidx === -1 && alen < MAX_SAFE_INTEGER_LENGTH && blen < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) - Number(b)).toFixed();
      }
      const offset = a_adjusted_dot_index - b_adjusted_dot_index;
      let left = Math.max(a_adjusted_dot_index, b_adjusted_dot_index);
      let right = Math.max(alen - a_adjusted_dot_index - 1, blen - b_adjusted_dot_index - 1);
      let aoffset = offset < 0 ? -1 * offset : 0;
      let boffset = offset <= 0 ? 0 : offset;
      let imax = left + 1 + right - 1;
      let result2 = "";
      let borrowed = 0;
      let i = imax;
      if (right > 0) {
        while (i > imax - right) {
          let top = a[i - aoffset] || "0";
          let bottom = b[i - boffset] || "0";
          top -= borrowed;
          borrowed = 0;
          let n = top - bottom;
          if (n < 0) {
            while (n < 0) {
              borrowed++;
              n += 10;
            }
          } else if (borrowed) {
            borrowed--;
          }
          if (result2 !== "" || n !== 0) {
            result2 = n + result2;
          }
          i--;
        }
        if (result2 !== "") {
          result2 = "." + result2;
        }
        i--;
      }
      if (left > 0) {
        while (i > 0) {
          let top = a[i - aoffset] || "0";
          let bottom = b[i - boffset] || "0";
          top -= borrowed;
          borrowed = 0;
          let n2 = top - bottom;
          if (n2 < 0) {
            while (n2 < 0) {
              borrowed++;
              n2 += 10;
            }
          } else if (borrowed) {
            borrowed--;
          }
          result2 = n2 + result2;
          i--;
        }
        const achar = a[0 - aoffset] || "0";
        const bchar = b[0 - boffset] || "0";
        let n = Number(achar) - (borrowed > 0 ? 1 : 0) - Number(bchar);
        if (n !== 0) {
          result2 = n + result2;
        }
        result2 = result2.replace(/^0+/, "");
      }
      if (result2[0] === ".") result2 = "0" + result2;
      return result2;
    };
  }
});

// node_modules/mediana/node_modules/preciso/add.js
var require_add2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/add.js"(exports, module) {
    var compare_positive = require_compare_positive2();
    var clean = require_clean2();
    var long_addition = require_long_addition2();
    var long_subtraction = require_long_subtraction2();
    function add3(a, b) {
      a = clean(a);
      b = clean(b);
      const apos = a[0] !== "-";
      const bpos = b[0] !== "-";
      if (apos && bpos) {
        return long_addition(a, b);
      } else if (!apos && !bpos) {
        return "-" + long_addition(a.substring(1), b.substring(1));
      } else if (!apos && bpos) {
        a = a.substring(1);
        switch (compare_positive(a, b)) {
          case "=":
            return "0";
          case "<":
            return long_subtraction(b, a);
          case ">":
            return "-" + long_subtraction(a, b);
        }
      } else if (apos && !bpos) {
        b = b.substring(1);
        switch (compare_positive(a, b)) {
          case "=":
            return "0";
          case "<":
            return "-" + long_subtraction(b, a);
          case ">":
            return long_subtraction(a, b);
        }
      }
    }
    module.exports = add3;
    module.exports.default = add3;
  }
});

// node_modules/mediana/node_modules/preciso/absolute.js
var require_absolute2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/absolute.js"(exports, module) {
    var clean = require_clean2();
    function absolute(n) {
      n = clean(n);
      if (n[0] === "-") return n.substring(1);
      else return n;
    }
    module.exports = absolute;
    module.exports.default = absolute;
  }
});

// node_modules/mediana/node_modules/preciso/long_multiplication.js
var require_long_multiplication2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/long_multiplication.js"(exports, module) {
    var { MAX_SAFE_INTEGER_LENGTH } = require_constants2();
    var CHUNK_SIZE = 15;
    module.exports = function long_multiplication(a, b) {
      if (a === "0" || b === "0") return "0";
      const top_index_of_dot = a.indexOf(".");
      const bottom_index_of_dot = b.indexOf(".");
      const a_num_integer_places = top_index_of_dot === -1 ? a.length : top_index_of_dot;
      const b_num_integer_places = bottom_index_of_dot === -1 ? b.length : bottom_index_of_dot;
      const max_total_num_integer_places = a_num_integer_places + b_num_integer_places;
      const a_num_decimal_places = top_index_of_dot === -1 ? 0 : a.length - 1 - top_index_of_dot;
      const b_num_decimal_places = bottom_index_of_dot === -1 ? 0 : b.length - 1 - bottom_index_of_dot;
      const out_num_decimal_places = a_num_decimal_places + b_num_decimal_places;
      if (out_num_decimal_places === 0 && max_total_num_integer_places < MAX_SAFE_INTEGER_LENGTH) {
        return (Number(a) * Number(b)).toFixed(0);
      }
      const aint = a.replace(".", "");
      const bint = b.replace(".", "");
      const alen = aint.length;
      const blen = bint.length;
      const chunks = [];
      let i = alen;
      while (i >= 0) {
        const end = i;
        const start2 = i -= CHUNK_SIZE;
        const str = aint.substring(start2, end);
        chunks.push([Number(str), str.length]);
      }
      const partial_products = [];
      const partials = [];
      for (let i2 = 0, ireverse = blen - 1; ireverse >= 0; ireverse--, i2++) {
        const bstr = bint[ireverse];
        const bnum = Number(bstr);
        let carried2 = 0;
        let partial = "";
        const ichunklast = chunks.length - 1;
        chunks.forEach(([chunk, chunklen], c) => {
          const subpartial = carried2 + bnum * chunk;
          let subpartstr = subpartial.toString();
          const subpartcharlen = subpartstr.length;
          if (subpartcharlen > chunklen && c !== ichunklast) {
            const islice = -1 * chunklen;
            partial = subpartstr.slice(islice) + partial;
            carried2 = Number(subpartstr.slice(0, islice));
          } else {
            const imax = chunklen - subpartcharlen;
            for (let i3 = 0; i3 < imax; i3++) {
              subpartstr = "0" + subpartstr;
            }
            carried2 = 0;
            partial = subpartstr + partial;
          }
        });
        partial += "0".repeat(i2);
        partial_products.push(partial);
        partials.push([Array.from(partial).map((char) => Number(char)), partial.length]);
      }
      const num_partials = partial_products.length;
      const number_of_columns = partials[partials.length - 1][1] + num_partials;
      let result2 = "";
      let carried = 0;
      for (let icol = 0; icol < number_of_columns; icol++) {
        let sum = carried;
        const pmax = Math.min(icol, num_partials - 1);
        for (let p = 0; p <= pmax; p++) {
          const [pnums, plen] = partials[p];
          const i2 = plen - 1 - icol;
          if (i2 >= 0) {
            sum += pnums[i2];
          }
        }
        if (sum >= 10) {
          sum = sum.toString();
          result2 = sum[sum.length - 1] + result2;
          carried = Number(sum.slice(0, -1));
        } else {
          result2 = sum + result2;
          carried = 0;
        }
      }
      if (out_num_decimal_places === 0) {
        result2 = result2.replace(/^0+/, "");
      } else {
        const idot = result2.length - out_num_decimal_places;
        result2 = result2.substring(0, idot) + "." + result2.substring(idot);
        result2 = result2.replace(/^0+/, "");
        result2 = result2.replace(/\.?0+$/, "");
        if (result2[0] === ".") result2 = "0" + result2;
      }
      return result2;
    };
  }
});

// node_modules/mediana/node_modules/preciso/multiply.js
var require_multiply2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/multiply.js"(exports, module) {
    var absolute = require_absolute2();
    var clean = require_clean2();
    var compare_positive = require_compare_positive2();
    var long_multiplication = require_long_multiplication2();
    function multiply2(a, b) {
      a = clean(a);
      b = clean(b);
      const apos = a[0] !== "-";
      const bpos = b[0] !== "-";
      const out_sign = apos !== bpos ? "-" : "";
      a = absolute(a);
      b = absolute(b);
      const comparison = compare_positive(a, b);
      if (comparison === "<") {
        const aold = a;
        const bold = b;
        a = bold;
        b = aold;
      }
      return out_sign + long_multiplication(a, b);
    }
    module.exports = multiply2;
    module.exports.default = multiply2;
  }
});

// node_modules/mediana/node_modules/preciso/subtract.js
var require_subtract2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/subtract.js"(exports, module) {
    var clean = require_clean2();
    var compare_positive = require_compare_positive2();
    var long_addition = require_long_addition2();
    var long_subtraction = require_long_subtraction2();
    function subtract2(a, b) {
      a = clean(a);
      b = clean(b);
      const a_is_positive = a[0] !== "-";
      const b_is_positive = b[0] !== "-";
      if (a_is_positive) {
        if (b_is_positive) {
          const comparison = compare_positive(a, b);
          if (comparison === ">") {
            return long_subtraction(a, b);
          } else if (comparison === "<") {
            return "-" + long_subtraction(b, a);
          } else {
            return "0";
          }
        } else {
          return long_addition(a, b.substring(1));
        }
      } else if (b_is_positive) {
        return "-" + long_addition(a.substring(1), b);
      } else {
        a = a.substring(1);
        b = b.substring(1);
        const comparison = compare_positive(a, b);
        if (comparison === ">") {
          return "-" + long_subtraction(a, b);
        } else if (comparison === "<") {
          return long_subtraction(b, a);
        } else {
          return "0";
        }
      }
    }
    module.exports = subtract2;
    module.exports.default = subtract2;
  }
});

// node_modules/mediana/node_modules/preciso/round_last_decimal.js
var require_round_last_decimal2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/round_last_decimal.js"(exports, module) {
    var up = ["5", "6", "7", "8", "9"];
    module.exports = function round_last_decimal(n) {
      if (n[0] === "+") n = n.substring(1);
      const len = n.length;
      let result2 = "";
      const last_char = n[n.length - 1];
      if (up.includes(last_char)) {
        let i;
        for (i = len - 2; i >= 0; i--) {
          const char = n[i];
          if (char === "." || char === "-") continue;
          const nchar = Number(char) + 1;
          if (nchar === 10) {
            result2 = "0" + result2;
          } else {
            result2 = nchar + result2;
            break;
          }
        }
        if (i > 0) result2 = n.substring(0, i) + result2;
      } else {
        result2 = n.substring(0, len - 1);
      }
      if (result2[result2.length - 1] === ".") result2 = result2.substring(0, result2.length - 1);
      if (result2.indexOf(".") > -1) result2 = result2.replace(/0+$/, "");
      return result2;
    };
  }
});

// node_modules/mediana/node_modules/preciso/long_division.js
var require_long_division2 = __commonJS({
  "node_modules/mediana/node_modules/preciso/long_division.js"(exports, module) {
    var compare_positive = require_compare_positive2();
    var add3 = require_add2();
    var multiply2 = require_multiply2();
    var subtract2 = require_subtract2();
    var round_last_decimal = require_round_last_decimal2();
    module.exports = function long_division(dividend, divisor, { max_decimal_digits = 100, ellipsis = false } = {}) {
      if (dividend[0] === "0") dividend = dividend.substring(1);
      if (divisor[0] === "0") divisor = divisor.substring(1);
      const dividend_index_of_dot = dividend.indexOf(".");
      const divisor_index_of_dot = divisor.indexOf(".");
      const adjusted_dividend_index_of_dot = dividend_index_of_dot === -1 ? dividend.length : dividend_index_of_dot;
      const divisor_num_decimal_places = divisor_index_of_dot === -1 ? 0 : divisor.length - 1 - divisor_index_of_dot;
      let repeating = false;
      dividend = dividend.replace(/\./, "");
      divisor = divisor.replace(/\./, "");
      const dividend_length = dividend.length;
      let current = "";
      let quotient = "";
      let comparison;
      let offset = -1 * divisor_num_decimal_places;
      let skip = 0;
      for (let i = 0; i < dividend_length; i++) {
        const char = dividend[i];
        current += char;
        comparison = compare_positive(current, divisor);
        if (comparison === ">") {
          let times = 1;
          let product = add3(divisor, divisor);
          let passed_product = divisor;
          while (compare_positive(product, current) !== ">") {
            times++;
            passed_product = product;
            product = add3(product, divisor);
          }
          times = times.toString();
          if (quotient !== "") {
            for (let i2 = times.length; i2 <= skip; i2++) quotient += "0";
          }
          quotient += times;
          current = subtract2(current, passed_product);
          skip = 0;
        } else if (comparison === "<") {
          if (quotient === "") {
            offset++;
          }
          skip++;
          continue;
        } else if (comparison === "=") {
          if (quotient !== "") {
            for (let i2 = 0; i2 < skip; i2++) quotient += "0";
          }
          quotient += "1";
          current = "0";
          skip = 0;
        }
      }
      if (current.match(/^0+$/g)) {
        if (comparison === "<") {
          quotient += current.substring(0, current.length - 1);
        }
      } else {
        const previous = {};
        const idot2 = adjusted_dividend_index_of_dot - offset;
        const qlen2 = quotient.length;
        const imax = idot2 - qlen2 + max_decimal_digits + 1;
        if (quotient === "") {
          skip = 0;
        }
        for (let i = 0; i < imax; i++) {
          current += "0";
          if (ellipsis) {
            if (current in previous) {
              previous[current]++;
              if (previous[current] > 3) {
                quotient += "...";
                repeating = true;
                break;
              }
            } else {
              previous[current] = 1;
            }
          }
          const comparison2 = compare_positive(current, divisor);
          if (comparison2 === ">") {
            let times = 1;
            let product = add3(divisor, divisor);
            let passed_product = divisor;
            while (compare_positive(product, current) !== ">") {
              times++;
              passed_product = product;
              product = add3(product, divisor);
            }
            times = times.toString();
            for (let i2 = times.length; i2 <= skip; i2++) quotient += "0";
            quotient += times;
            current = subtract2(current, passed_product);
            if (current === "0") {
              break;
            }
            skip = 0;
          } else if (comparison2 === "<") {
            skip++;
            continue;
          } else if (comparison2 === "=") {
            for (let i2 = 0; i2 < skip; i2++) quotient += "0";
            quotient += "1";
            skip = 0;
            break;
          }
        }
      }
      const idot = adjusted_dividend_index_of_dot - offset;
      const qlen = quotient.length;
      let num_decimals;
      if (idot === qlen) {
        num_decimals = 0;
      } else if (idot < 0) {
        quotient = "0." + "0".repeat(Math.abs(idot)) + quotient;
        num_decimals = qlen - idot;
      } else if (idot > qlen) {
        for (let i = qlen; i < idot; i++) quotient += "0";
        num_decimals = 0;
      } else if (idot < qlen) {
        quotient = quotient.substring(0, idot) + "." + quotient.substring(idot);
        num_decimals = qlen - idot;
      } else if (idot === 0) {
        quotient = "0." + quotient;
        num_decimals = qlen;
      }
      quotient = quotient.replace(/^0+/, "");
      quotient = quotient.replace(/\.\d+0+$/, "");
      if (!repeating) {
        const extra_decimals = num_decimals - max_decimal_digits;
        if (extra_decimals > 0) {
          quotient = round_last_decimal(quotient.substring(0, quotient.length - extra_decimals + 1));
        }
      }
      if (quotient[0] === ".") quotient = "0" + quotient;
      return quotient;
    };
  }
});

// node_modules/mediana/node_modules/preciso/divide.js
var require_divide3 = __commonJS({
  "node_modules/mediana/node_modules/preciso/divide.js"(exports, module) {
    var absolute = require_absolute2();
    var clean = require_clean2();
    var long_division = require_long_division2();
    function divide2(dividend, divisor, options) {
      dividend = clean(dividend);
      divisor = clean(divisor);
      if (divisor === "0") throw new Error("[preciso] division by zero");
      if (dividend === "" || dividend === "0") return "0";
      const dividend_is_positive = dividend[0] !== "-";
      const divisor_is_positive = divisor[0] !== "-";
      const out_sign = dividend_is_positive !== divisor_is_positive ? "-" : "";
      if (!dividend_is_positive) dividend = absolute(dividend);
      if (!divisor_is_positive) divisor = absolute(divisor);
      return out_sign + long_division(dividend, divisor, options);
    }
    module.exports = divide2;
    module.exports.default = divide2;
  }
});

// node_modules/mediana/src/mean.js
var require_mean3 = __commonJS({
  "node_modules/mediana/src/mean.js"(exports, module) {
    var add3 = require_add2();
    var divide2 = require_divide3();
    function mean(a, b, { precise = false } = { precise: false }) {
      if (precise) {
        return divide2(add3(a.toString(), b.toString()), "2");
      } else {
        return (a + b) / 2;
      }
    }
    module.exports = mean;
    module.exports.default = mean;
  }
});

// node_modules/mediana/src/median-of-a-lot.js
var require_median_of_a_lot = __commonJS({
  "node_modules/mediana/src/median-of-a-lot.js"(exports, module) {
    var count = require_count2();
    var mean = require_mean3();
    function median_of_a_lot({ counts, nums, no_data, precise = false, total }) {
      if (counts === void 0 || total === void 0) {
        ({ counts, total } = count({ nums, no_data }));
      }
      const countArray = Object.values(counts).sort((a, b) => a.n - b.n);
      const half = total / 2;
      const number_of_unique_values = countArray.length;
      if (number_of_unique_values === 0) {
        return void 0;
      } else if (number_of_unique_values === 1) {
        return precise ? countArray[0].n.toString() : countArray[0].n;
      } else {
        let x = 0;
        if (total % 2 === 0) {
          for (let i = 0; i < number_of_unique_values; i++) {
            const { n, ct } = countArray[i];
            x += ct;
            if (x > half) {
              if (x - ct === half) {
                return mean(countArray[i - 1].n, n, { precise });
              } else {
                return precise ? n.toString() : n;
              }
            }
          }
        } else {
          for (let i = 0; i < number_of_unique_values; i++) {
            const { n, ct } = countArray[i];
            x += ct;
            if (x > half) return precise ? n.toString() : n;
          }
        }
      }
    }
    module.exports = median_of_a_lot;
    module.exports.default = median_of_a_lot;
  }
});

// node_modules/mediana/src/median-of-a-few.js
var require_median_of_a_few = __commonJS({
  "node_modules/mediana/src/median-of-a-few.js"(exports, module) {
    var mean = require_mean3();
    function median_of_a_few({ nums, no_data, precise = false }) {
      nums = nums.filter((n) => n !== no_data).sort((a, b) => a - b);
      switch (nums.length) {
        case 0:
          return void 0;
        case 1:
          return precise ? nums[0].toString() : nums[0];
        default:
          const mid = nums.length / 2;
          if (nums.length % 2 === 0) {
            return mean(nums[mid - 1], nums[mid], { precise });
          } else {
            const i = Math.floor(mid);
            return precise ? nums[i].toString() : nums[i];
          }
      }
    }
    module.exports = median_of_a_few;
    module.exports.default = median_of_a_few;
  }
});

// node_modules/mediana/src/index.js
var require_src3 = __commonJS({
  "node_modules/mediana/src/index.js"(exports, module) {
    var median_of_a_lot = require_median_of_a_lot();
    var median_of_a_few = require_median_of_a_few();
    function calculate({ counts, nums, no_data, precise, threshold = 50, total }) {
      if (counts !== void 0 || total !== void 0 || nums.length > threshold) {
        return median_of_a_lot({ counts, no_data, nums, precise, total });
      } else {
        return median_of_a_few({ no_data, nums, precise });
      }
    }
    var mediana = { calculate };
    if (typeof define === "function" && define.amd) {
      define(function() {
        return mediana;
      });
    }
    if (typeof module === "object") {
      module.exports = mediana;
      module.exports.default = { calculate };
    }
    if (typeof window === "object") {
      window.mediana = mediana;
    }
    if (typeof self === "object") {
      self.mediana = mediana;
    }
  }
});

// node_modules/calc-stats/calc-stats.js
var require_calc_stats = __commonJS({
  "node_modules/calc-stats/calc-stats.js"(exports, module) {
    var { getOrCreateIterator } = require_iter_fun();
    var { add: add3, compare, divide: divide2, mean, multiply: multiply2, pow, round, sort, subtract: subtract2, sum } = require_preciso();
    var mediana = require_src3();
    var isValidNumber = (n) => typeof n === "number" && n === n;
    var computeVariance = ({ count, histogram, mean_value, precise = false }) => {
      if (precise) {
        mean_value = mean_value.toString();
        const reduced = Object.values(histogram).reduce((sum2, { n, ct }) => {
          const diff = subtract2(n.toString(), mean_value);
          return add3(sum2, multiply2(ct.toString(), pow(diff, "2")));
        }, "0");
        return divide2(reduced, count.toString());
      } else {
        return Object.values(histogram).reduce((sum2, { n, ct }) => {
          return sum2 + ct * Math.pow(n - mean_value, 2);
        }, 0) / count;
      }
    };
    function calcStats(data, {
      async = false,
      chunked = false,
      noData = void 0,
      filter = void 0,
      map,
      calcCount = true,
      calcFrequency = true,
      calcHistogram = true,
      calcInvalid = true,
      calcMax = true,
      calcMean = true,
      calcMedian = true,
      calcMin = true,
      calcMode = true,
      calcModes = true,
      calcProduct = true,
      calcRange = true,
      calcStd = true,
      calcSum = true,
      calcValid = true,
      calcVariance = true,
      calcUniques = true,
      precise = false,
      precise_max_decimal_digits = 100,
      stats,
      timed = false
    } = { debugLevel: 0 }) {
      const start2 = timed ? performance.now() : 0;
      if (stats) {
        stats.forEach((stat) => {
          if (![
            "count",
            "frequency",
            "histogram",
            "invalid",
            "max",
            "mean",
            "median",
            "min",
            "mode",
            "modes",
            "product",
            "range",
            "sum",
            "std",
            "valid",
            "variance",
            "uniques"
          ].includes(stat)) {
            console.warn(`[calc-stats] skipping unknown stat "${stat}"`);
          }
        });
        calcCount = stats.includes("count");
        calcFrequency = stats.includes("frequency");
        calcHistogram = stats.includes("histogram");
        calcInvalid = stats.includes("invalid");
        calcMax = stats.includes("max");
        calcMean = stats.includes("mean");
        calcMedian = stats.includes("median");
        calcMin = stats.includes("min");
        calcMode = stats.includes("mode");
        calcModes = stats.includes("modes");
        calcProduct = stats.includes("product");
        calcRange = stats.includes("range");
        calcStd = stats.includes("std");
        calcSum = stats.includes("sum");
        calcValid = stats.includes("valid");
        calcVariance = stats.includes("variance");
        calcUniques = stats.includes("uniques");
      }
      if (typeof map === "string") {
        const key = map;
        map = (it) => it[key];
      }
      const iter = getOrCreateIterator(data);
      let needHistogram = calcFrequency || calcHistogram || calcMedian || calcMode || calcModes || calcVariance || calcStd || calcUniques;
      let needValid = calcCount || calcFrequency || calcMean || calcMedian || calcProduct || calcValid || calcVariance || calcStd || typeof filter === "function";
      let needInvalid = calcCount || calcInvalid || typeof filter === "function";
      let needSum = calcSum || calcMean || calcVariance || calcStd;
      let needMin = calcMin || calcRange;
      let needMax = calcMax || calcRange;
      let needProduct = calcProduct;
      let valid = 0;
      let invalid = 0;
      let index = 0;
      let min;
      let max;
      let product;
      let sum2 = precise ? "0" : 0;
      const histogram = {};
      let process;
      const initial_process = (value) => {
        if (needValid) valid = 1;
        if (needMin) min = value;
        if (needMax) max = value;
        if (needProduct) product = value;
        if (needSum) sum2 = value;
        if (needHistogram) {
          histogram[value] = { n: value, ct: 1 };
        }
        process = subsequent_process;
      };
      const subsequent_process = (value) => {
        if (needValid) valid++;
        if (needMin && value < min) min = value;
        if (needMax && value > max) max = value;
        if (needProduct) product *= value;
        if (needSum) sum2 += value;
        if (needHistogram) {
          if (value in histogram) histogram[value].ct++;
          else histogram[value] = { n: value, ct: 1 };
        }
      };
      if (precise) {
        process = (value) => {
          value = value.toString();
          if (needValid) valid++;
          if (needMin && (typeof min === "undefined" || compare(value, min) === "<")) min = value;
          if (needMax && (typeof max === "undefined" || compare(value, max) === ">")) max = value;
          if (needProduct) {
            product = valid === 1 ? value : multiply2(product, value, { max_decimal_digits: precise_max_decimal_digits });
          }
          if (needSum) sum2 = add3(sum2, value);
          if (needHistogram) {
            if (value in histogram) histogram[value].ct++;
            else histogram[value] = { n: value.toString(), ct: 1 };
          }
        };
      } else {
        process = initial_process;
      }
      let step;
      if (typeof noData === "number" && typeof filter === "function") {
        step = (value) => {
          index++;
          if (isValidNumber(value) && value !== noData && filter({ valid, index, value }) === true) {
            process(value);
          } else if (needInvalid) {
            invalid++;
          }
        };
      } else if (typeof noData === "number") {
        step = (value) => {
          if (isValidNumber(value) && value !== noData) {
            process(value);
          } else if (needInvalid) {
            invalid++;
          }
        };
      } else if (Array.isArray(noData) && noData.length > 0 && typeof filter === "function") {
        step = (value) => {
          index++;
          if (isValidNumber(value) && !noData.includes(value) && filter({ valid, index, value }) === true) {
            process(value);
          } else if (needInvalid) {
            invalid++;
          }
        };
      } else if (Array.isArray(noData) && noData.length > 0) {
        step = (value) => {
          if (isValidNumber(value) && !noData.includes(value)) {
            process(value);
          } else if (needInvalid) {
            invalid++;
          }
        };
      } else if (typeof filter === "function") {
        step = (value) => {
          index++;
          if (isValidNumber(value) && filter({ valid, index, value }) === true) {
            process(value);
          } else if (needInvalid) {
            invalid++;
          }
        };
      } else {
        step = (value) => {
          if (isValidNumber(value)) {
            process(value);
          } else if (needInvalid) {
            invalid++;
          }
        };
      }
      const finish = () => {
        const results = {};
        if (calcCount) results.count = precise ? add3(invalid.toString(), valid.toString()) : invalid + valid;
        if (calcValid) results.valid = precise ? valid.toString() : valid;
        if (calcInvalid) results.invalid = precise ? invalid.toString() : invalid;
        if (calcMedian) {
          results.median = mediana.calculate({ counts: histogram, precise, total: valid });
        }
        if (calcMin) results.min = min;
        if (calcMax) results.max = max;
        if (calcProduct) results.product = product;
        if (calcSum) results.sum = sum2;
        if (calcRange) results.range = precise ? subtract2(max.toString(), min.toString()) : max - min;
        if (calcMean || calcVariance || calcStd) {
          const mean_value = precise ? divide2(sum2, valid.toString(), { max_decimal_digits: precise_max_decimal_digits }) : sum2 / valid;
          if (calcMean) results.mean = mean_value;
          if (calcVariance || calcStd) {
            let variance = computeVariance({
              count: valid,
              histogram,
              // want enough precision, so we can get a good standard deviation later
              max_decimal_digits: typeof precise_max_decimal_digits === "number" && precise_max_decimal_digits < 20 ? 20 : precise_max_decimal_digits,
              mean_value,
              precise
            });
            if (calcVariance) {
              results.variance = precise && typeof precise_max_decimal_digits === "number" ? round(variance, { digits: precise_max_decimal_digits }) : variance;
            }
            if (calcStd) results.std = precise ? Math.sqrt(Number(variance)).toString() : Math.sqrt(variance);
          }
        }
        if (calcHistogram) {
          if (precise) {
            Object.values(histogram).forEach((obj2) => {
              obj2.ct = obj2.ct.toString();
            });
          }
          results.histogram = histogram;
        }
        if (calcFrequency) {
          const frequency = {};
          if (precise) {
            const valid_as_string = valid.toString();
            for (let key in histogram) {
              const obj2 = histogram[key];
              frequency[key] = {
                n: obj2.n.toString(),
                freq: divide2(obj2.ct, valid_as_string, { max_decimal_digits: precise_max_decimal_digits })
              };
            }
          } else {
            for (let key in histogram) {
              const obj2 = histogram[key];
              frequency[key] = {
                n: obj2.n,
                freq: obj2.ct / valid
              };
            }
          }
          results.frequency = frequency;
        }
        if (calcMode || calcModes) {
          let highest_count = 0;
          let modes = [];
          for (let key in histogram) {
            const { n, ct } = histogram[key];
            if (ct === highest_count) {
              modes.push(precise ? n.toString() : n);
            } else if (ct > highest_count) {
              highest_count = ct;
              modes = [precise ? n.toString() : n];
            }
          }
          if (calcModes) results.modes = modes;
          if (calcMode) {
            results.mode = precise ? mean(modes) : modes.reduce((acc, n) => acc + n, 0) / modes.length;
          }
        }
        if (calcUniques) {
          if (precise) {
            results.uniques = sort(Object.keys(histogram));
          } else {
            results.uniques = Object.values(histogram).map(({ n }) => n).sort((a, b) => a - b);
          }
        }
        if (timed) {
          const duration = Math.round(performance.now() - start2);
          if (duration > 2e3) {
            console.log("[calc-stats] took " + Math.round(duration / 1e3).toLocaleString() + " seconds");
          } else {
            console.log("[calc-stats] took " + duration.toLocaleString() + " milliseconds");
          }
        }
        return results;
      };
      if (chunked) {
        if (async) {
          return (async () => {
            for await (let value of iter) {
              for (let v of value) {
                if (map) v = map(v);
                step(v);
              }
            }
            return finish();
          })();
        } else {
          if (Array.isArray(data) && data[0].length) {
            for (let i = 0; i < data.length; i++) {
              const value = data[i];
              for (let ii = 0; ii < value.length; ii++) {
                let v = value[ii];
                if (map) v = map(v);
                step(v);
              }
            }
          } else {
            for (let value of iter) {
              for (let v of value) {
                if (map) v = map(v);
                step(v);
              }
            }
          }
          return finish();
        }
      } else {
        if (async) {
          return (async () => {
            for await (let value of iter) {
              if (map) value = map(value);
              step(value);
            }
            return finish();
          })();
        } else {
          for (let value of iter) {
            if (map) value = map(value);
            step(value);
          }
          return finish();
        }
      }
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return calcStats;
      });
    }
    if (typeof module === "object") {
      module.exports = calcStats;
      module.exports.default = calcStats;
      module.exports.calcStats = calcStats;
    }
    if (typeof self === "object") {
      self.calcStats = calcStats;
    }
    if (typeof window === "object") {
      window.calcStats = calcStats;
    }
  }
});

// node_modules/guess-image-layout/guess-image-layout.js
var require_guess_image_layout = __commonJS({
  "node_modules/guess-image-layout/guess-image-layout.js"(exports, module) {
    var getDepth = require_get_depth();
    function guessImageLayout({ bands, data, height, layout, width }) {
      const depth = getDepth(data);
      if (layout === "[row,column,band]" || depth === 1) {
        return {
          layout: "[row,column,band]",
          bands: bands ? bands : height && width ? data.length / (height * width) : void 0,
          height: height ? height : bands && width ? data.length / (bands * width) : void 0,
          width: width ? width : bands && height ? data.length / (bands * height) : void 0
        };
      } else if (depth === 2) {
        if (height && width) {
          if (data[0].length === height * width) {
            return { layout: "[band][row,column]", bands: data.length, height, width };
          } else if (data.length === height * width) {
            return { layout: "[row,column][band]", bands: data[0].length, height, width };
          }
        } else {
          if (data.length < data[0].length) {
            return {
              bands: data.length,
              layout: "[band][row,column]",
              height: height ? height : width ? data[0].length / width : void 0,
              width: width ? width : height ? data[0].length / height : void 0
            };
          } else {
            return {
              bands: data[0].length,
              layout: "[row,column][band]",
              height: height ? height : width ? data.length / width : void 0,
              width: width ? width : height ? data.length / height : void 0
            };
          }
        }
      } else if (depth === 3) {
        const len1 = data.length;
        const len2 = data[0].length;
        const len3 = data[0][0].length;
        if (height && width) {
          if (len1 === height && len2 === width) {
            return { layout: "[row][column][band]", bands: len3, height, width };
          } else if (len2 === height && len3 === width) {
            return { layout: "[band][row][column]", bands: len1, height, width };
          }
        } else {
          if (len1 < len2 && len1 < len3) {
            return { layout: "[band][row][column]", bands: len1, height: len2, width: len3 };
          } else if (len3 < len1 && len3 < len2) {
            return { layout: "[row][column][band]", bands: len3, height: len1, width: len2 };
          }
        }
      }
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return guessImageLayout;
      });
    }
    if (typeof module === "object") {
      module.exports = guessImageLayout;
      module.exports.default = guessImageLayout;
      module.exports.guessImageLayout = guessImageLayout;
    }
    if (typeof window === "object") {
      window.guessImageLayout = guessImageLayout;
    }
    if (typeof self === "object") {
      self.guessImageLayout = guessImageLayout;
    }
  }
});

// node_modules/calc-image-stats/dist/calc-image-stats.min.js
var require_calc_image_stats_min = __commonJS({
  "node_modules/calc-image-stats/dist/calc-image-stats.min.js"(exports, module) {
    var d = Object.defineProperty;
    var f = Object.getOwnPropertySymbols;
    var b = Object.prototype.hasOwnProperty;
    var g = Object.prototype.propertyIsEnumerable;
    var p = (e, o, c) => o in e ? d(e, o, { enumerable: true, configurable: true, writable: true, value: c }) : e[o] = c;
    var w = (e, o) => {
      for (var c in o || (o = {})) b.call(o, c) && p(e, c, o[c]);
      if (f) for (var c of f(o)) g.call(o, c) && p(e, c, o[c]);
      return e;
    };
    var m = (e, o) => d(e, "name", { value: o, configurable: true });
    var S = (e, o) => {
      var c = {};
      for (var n in e) b.call(e, n) && o.indexOf(n) < 0 && (c[n] = e[n]);
      if (e != null && f) for (var n of f(e)) o.indexOf(n) < 0 && g.call(e, n) && (c[n] = e[n]);
      return c;
    };
    var calcStats = require_calc_stats();
    var guessImageLayout = require_guess_image_layout();
    var xdim = require_xdim();
    var range2 = m((e) => new Array(e).fill(0).map((o, c) => c), "range");
    function calcImageStats(e, k = {}) {
      var i = k, { bands: o, height: c, precise: n = false, stats: j, width: r, layout: t } = i, q = S(i, ["bands", "height", "precise", "stats", "width", "layout"]);
      if (typeof e.then == "function") throw new Error("[calc-image-stats] you passed in a promise as the data values.  please resolve the promise first before calling calcImageStats");
      const s = guessImageLayout({ bands: o, data: e, height: c, layout: t, width: r });
      o != null || (o = s.bands), c != null || (c = s.height), t != null || (t = s.layout), r != null || (r = s.width);
      const I2 = range2(o).map((l) => {
        let a;
        const u = w({ precise: n, stats: j }, q);
        if (["[band][row,column]", "[band][column,row]"].includes(t)) a = e[l];
        else if (["[band][row][column]", "[band][column][row]"].includes(t)) a = e[l], u.chunked = true;
        else if (o === 1 && ["[band,row,column]", "[row,column,band]", "[column,band,row]", "[column,row,band]"].includes(t)) a = e;
        else {
          const x = { band: [l, l] }, R = { band: o, column: r, row: c };
          a = xdim.iterClip({ data: e, layout: t, rect: x, sizes: R });
        }
        return calcStats(a, u);
      });
      return { depth: o, height: c, width: r, bands: I2 };
    }
    m(calcImageStats, "calcImageStats"), typeof define == "function" && define.amd && define(function() {
      return calcImageStats;
    }), typeof module == "object" && (module.exports = calcImageStats, module.exports.default = calcImageStats, module.exports.calcImageStats = calcImageStats), typeof self == "object" && (self.calcImageStats = calcImageStats), typeof window == "object" && (self.calcImageStats = calcImageStats);
  }
});

// node_modules/pixel-utils/dist/cjs/add-alpha/index.js
var require_add_alpha = __commonJS({
  "node_modules/pixel-utils/dist/cjs/add-alpha/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = addAlpha2;
    function addAlpha2(rgb) {
      return [...rgb, 255];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/make-no-data-rgba/index.js
var require_make_no_data_rgba = __commonJS({
  "node_modules/pixel-utils/dist/cjs/make-no-data-rgba/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = makeNoDataRgba2;
    function makeNoDataRgba2(noDataValue) {
      return [noDataValue, noDataValue, noDataValue, 0];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/make-no-data-rgba-string/index.js
var require_make_no_data_rgba_string = __commonJS({
  "node_modules/pixel-utils/dist/cjs/make-no-data-rgba-string/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = makeNoDataRgbaString2;
    function makeNoDataRgbaString2(noDataValue) {
      return `rgba(${noDataValue}, ${noDataValue}, ${noDataValue}, 0)`;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-single.js
var require_convert_single = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-single.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_one2;
    function convert_one2(old_no_data_value, noDataPixel, scalefn, pixel2) {
      const n = pixel2[0];
      if (n === old_no_data_value) return noDataPixel;
      const scaled = scalefn(n);
      return [scaled, scaled, scaled, 255];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-single-str.js
var require_convert_single_str = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-single-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_one_band_pixel_to_rgba_string2;
    function convert_raw_one_band_pixel_to_rgba_string2(old_no_data_value, noDataPixel, scalefn, pixel2) {
      const n = pixel2[0];
      if (n === old_no_data_value) return noDataPixel;
      const scaled = scalefn(n);
      return `rgba(${scaled}, ${scaled}, ${scaled}, 255)`;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-double.js
var require_convert_double = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-double.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_two_band_pixel_to_rgba2;
    function convert_raw_two_band_pixel_to_rgba2(old_no_data_value, new_no_data_value, scalefn1, scalefn2, pixel2) {
      const [r, g] = pixel2;
      return [r === old_no_data_value ? new_no_data_value : scalefn1(r), g === old_no_data_value ? new_no_data_value : scalefn2(g), 0, r === old_no_data_value || g === old_no_data_value ? 0 : 255];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-double-str.js
var require_convert_double_str = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-double-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_two_band_pixel_to_rgba_string2;
    function convert_raw_two_band_pixel_to_rgba_string2(old_no_data_value, new_no_data_value, scalefn1, scalefn2, pixel2) {
      const [r, g] = pixel2;
      return `rgba(${r === old_no_data_value ? new_no_data_value : scalefn1(r)}, ${g === old_no_data_value ? new_no_data_value : scalefn2(g)}, 0, ${r === old_no_data_value || g === old_no_data_value ? 0 : 255})`;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-double-all.js
var require_convert_double_all = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-double-all.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_double_all2;
    function convert_double_all2(old_no_data_value, noDataPixel, scalefn1, scalefn2, pixel2) {
      if (pixel2.includes(old_no_data_value)) return noDataPixel;
      return [scalefn1(pixel2[0]), scalefn2(pixel2[1]), 0, 255];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-double-all-str.js
var require_convert_double_all_str = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-double-all-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_double_all_string2;
    function convert_double_all_string2(old_no_data_value, noDataPixel, scalefn1, scalefn2, pixel2) {
      if (pixel2.includes(old_no_data_value)) return noDataPixel;
      return `rgba(${scalefn1(pixel2[0])},${scalefn2(pixel2[1])},0,255)`;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-multiband.js
var require_convert_multiband = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-multiband.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_multiband2;
    function convert_multiband2(old_no_data_value, new_no_data_value, scalefn1, scalefn2, scalefn3, pixel2) {
      const [r, g, b] = pixel2;
      return [
        // @ts-ignore
        r === old_no_data_value ? new_no_data_value : scalefn1(r),
        // @ts-ignore
        g === old_no_data_value ? new_no_data_value : scalefn2(g),
        // @ts-ignore
        b === old_no_data_value ? new_no_data_value : scalefn3(b),
        // @ts-ignore
        r === old_no_data_value || g === old_no_data_value || b === old_no_data_value ? 0 : 255
      ];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-multiband-str.js
var require_convert_multiband_str = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-multiband-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_multiband_to_rgba_string2;
    function convert_raw_multiband_to_rgba_string2(old_no_data_value, new_no_data_value, scalefn1, scalefn2, scalefn3, pixel2) {
      const [r, g, b] = pixel2;
      return `rgba(${r === old_no_data_value ? new_no_data_value : scalefn1(r)}, ${g === old_no_data_value ? new_no_data_value : scalefn2(g)}, ${b === old_no_data_value ? new_no_data_value : scalefn3(b)}, ${r === old_no_data_value || g === old_no_data_value || b === old_no_data_value ? "0" : "255"})`;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-multiband-all.js
var require_convert_multiband_all = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-multiband-all.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_multiband_all2;
    function convert_multiband_all2(old_no_data_value, noDataPixel, scalefn1, scalefn2, scalefn3, pixel2) {
      if (pixel2.includes(old_no_data_value)) return noDataPixel;
      return [scalefn1(pixel2[0]), scalefn2(pixel2[1]), scalefn3(pixel2[2]), 255];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-multiband-all-str.js
var require_convert_multiband_all_str = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/convert-multiband-all-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_multiband_all_to_string2;
    function convert_multiband_all_to_string2(old_no_data_value, noDataPixel, scalefn1, scalefn2, scalefn3, pixel2) {
      if (pixel2.includes(old_no_data_value)) return noDataPixel;
      return `rgba(${scalefn1(pixel2[0])}, ${scalefn2(pixel2[1])}, ${scalefn3(pixel2[2])}, 255)`;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgba/index.js
var require_raw_to_rgba = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgba/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rawToRgba2;
    var _quickScale = require_quick_scale();
    var _makeNoDataRgba = _interopRequireDefault(require_make_no_data_rgba());
    var _makeNoDataRgbaString = _interopRequireDefault(require_make_no_data_rgba_string());
    var _convertSingle = _interopRequireDefault(require_convert_single());
    var _convertSingleStr = _interopRequireDefault(require_convert_single_str());
    var _convertDouble = _interopRequireDefault(require_convert_double());
    var _convertDoubleStr = _interopRequireDefault(require_convert_double_str());
    var _convertDoubleAll = _interopRequireDefault(require_convert_double_all());
    var _convertDoubleAllStr = _interopRequireDefault(require_convert_double_all_str());
    var _convertMultiband = _interopRequireDefault(require_convert_multiband());
    var _convertMultibandStr = _interopRequireDefault(require_convert_multiband_str());
    var _convertMultibandAll = _interopRequireDefault(require_convert_multiband_all());
    var _convertMultibandAllStr = _interopRequireDefault(require_convert_multiband_all_str());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function rawToRgba2({
      debug_level = 0,
      format = "array",
      ranges,
      flip = false,
      new_no_data_value,
      no_data_strategy,
      no_range_value,
      no_range_value_strategy,
      old_no_data_value
    }) {
      if (debug_level >= 1) console.log("[pixel-utils/raw-to-rgba] ranges:", ranges);
      const nbands = ranges.length;
      const new_range = [0 === new_no_data_value ? 1 : 0, 255 === new_no_data_value ? 254 : 255];
      if (debug_level >= 1) console.log("[pixel-utils/raw-to-rgba] new_range:", new_range);
      const options = {
        no_data_value: new_no_data_value,
        flip,
        no_range_value,
        no_range_value_strategy,
        round: true
      };
      if (debug_level >= 1) console.log("[pixel-utils/raw-to-rgba] options:", options);
      const scalefns = ranges.slice(0, 3).map((rng) => (0, _quickScale.createScaleFunction)(rng, new_range, options));
      if (nbands === 1) {
        if (format === "string") {
          return _convertSingleStr.default.bind(null, old_no_data_value, (0, _makeNoDataRgbaString.default)(new_no_data_value !== null && new_no_data_value !== void 0 ? new_no_data_value : "null"), scalefns[0]);
        } else if (format === "array") {
          return _convertSingle.default.bind(null, old_no_data_value, (0, _makeNoDataRgba.default)(new_no_data_value), scalefns[0]);
        }
      } else if (nbands === 2) {
        if (no_data_strategy === "all") {
          if (format === "string") {
            return _convertDoubleAllStr.default.bind(null, old_no_data_value, (0, _makeNoDataRgbaString.default)(new_no_data_value !== null && new_no_data_value !== void 0 ? new_no_data_value : "null"), ...scalefns);
          } else if (format === "array") {
            return _convertDoubleAll.default.bind(null, old_no_data_value, (0, _makeNoDataRgba.default)(new_no_data_value), ...scalefns);
          }
        } else {
          if (format === "string") {
            return _convertDoubleStr.default.bind(null, old_no_data_value, new_no_data_value !== null && new_no_data_value !== void 0 ? new_no_data_value : "null", ...scalefns);
          } else if (format === "array") {
            return _convertDouble.default.bind(null, old_no_data_value, new_no_data_value, ...scalefns);
          }
        }
      } else if (nbands >= 3) {
        if (no_data_strategy === "all") {
          if (format === "string") {
            return _convertMultibandAllStr.default.bind(null, old_no_data_value, (0, _makeNoDataRgbaString.default)(new_no_data_value), ...scalefns);
          } else if (format === "array") {
            return _convertMultibandAll.default.bind(null, old_no_data_value, (0, _makeNoDataRgba.default)(new_no_data_value), ...scalefns);
          }
        } else {
          if (format === "string") {
            return _convertMultibandStr.default.bind(null, old_no_data_value, new_no_data_value, ...scalefns);
          } else if (format === "array") {
            return _convertMultiband.default.bind(null, old_no_data_value, new_no_data_value, ...scalefns);
          }
        }
      }
      throw Error("uh oh");
    }
  }
});

// node_modules/pixel-utils/dist/cjs/enums.js
var require_enums = __commonJS({
  "node_modules/pixel-utils/dist/cjs/enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Layout = void 0;
    var Layout2;
    exports.Layout = Layout2;
    (function(Layout3) {
      Layout3["[band][row][column]"] = "[band][row][column]";
      Layout3["[band][row,column]"] = "[band][row,column]";
      Layout3["[band,row,column]"] = "[band,row,column]";
      Layout3["[row,column,band]"] = "[row,column,band]";
      Layout3["[row,column][band]"] = "[row,column][band]";
      Layout3["[row][column][band]"] = "[row][column][band]";
      Layout3["[row][column,band]"] = "[row][column,band]";
    })(Layout2 || (exports.Layout = Layout2 = {}));
  }
});

// node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-brc.js
var require_select_pixel_from_brc = __commonJS({
  "node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-brc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = select_brc2;
    function select_brc2(data, depth, height, width, r, c) {
      const pixel2 = [];
      const size = height * width;
      const i = r * width + c;
      for (let b = 0; b < depth; b++) {
        pixel2.push(data[b * size + i]);
      }
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-b-r-c.js
var require_select_pixel_from_b_r_c = __commonJS({
  "node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-b-r-c.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = select_b_r_c2;
    function select_b_r_c2(data, depth, r, c) {
      const pixel2 = [];
      for (let b = 0; b < depth; b++) {
        pixel2.push(data[b][r][c]);
      }
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-b-rc.js
var require_select_pixel_from_b_rc = __commonJS({
  "node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-b-rc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = select_b_rc2;
    function select_b_rc2(data, depth, width, r, c) {
      const pixel2 = [];
      const i = r * width + c;
      for (let b = 0; b < depth; b++) {
        pixel2.push(data[b][i]);
      }
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-rcb.js
var require_select_pixel_from_rcb = __commonJS({
  "node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-rcb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = select_rcb2;
    function select_rcb2(data, depth, width, r, c) {
      const pixel2 = [];
      let i = (r * width + c) * depth;
      const imax = i + depth;
      for (; i < imax; i++) {
        pixel2.push(data[i]);
      }
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-rc-b.js
var require_select_pixel_from_rc_b = __commonJS({
  "node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-rc-b.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = select_rc_b2;
    function select_rc_b2(data, width, r, c) {
      return data[r * width + c];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-r-c-b.js
var require_select_pixel_from_r_c_b = __commonJS({
  "node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-r-c-b.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = select_r_c_b2;
    function select_r_c_b2(data, r, c) {
      return data[r][c];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-r-cb.js
var require_select_pixel_from_r_cb = __commonJS({
  "node_modules/pixel-utils/dist/cjs/select-pixel/select-pixel-from-r-cb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = select_r_cb2;
    function select_r_cb2(data, depth, r, c) {
      const pixel2 = [];
      const row = data[r];
      let i = c * depth;
      const imax = i + depth;
      for (; i < imax; i++) {
        pixel2.push(row[i]);
      }
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/select-pixel/index.js
var require_select_pixel = __commonJS({
  "node_modules/pixel-utils/dist/cjs/select-pixel/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = selectPixel2;
    var _enums = require_enums();
    var _selectPixelFromBrc = _interopRequireDefault(require_select_pixel_from_brc());
    var _selectPixelFromBRC = _interopRequireDefault(require_select_pixel_from_b_r_c());
    var _selectPixelFromBRc = _interopRequireDefault(require_select_pixel_from_b_rc());
    var _selectPixelFromRcb = _interopRequireDefault(require_select_pixel_from_rcb());
    var _selectPixelFromRcB = _interopRequireDefault(require_select_pixel_from_rc_b());
    var _selectPixelFromRCB = _interopRequireDefault(require_select_pixel_from_r_c_b());
    var _selectPixelFromRCb = _interopRequireDefault(require_select_pixel_from_r_cb());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function selectPixel2(data, {
      depth,
      height,
      layout,
      width
    }) {
      switch (layout) {
        case _enums.Layout["[band][row][column]"]:
          return _selectPixelFromBRC.default.bind(null, data, depth);
        case _enums.Layout["[band][row,column]"]:
          return _selectPixelFromBRc.default.bind(null, data, depth, width);
        case _enums.Layout["[band,row,column]"]:
          return _selectPixelFromBrc.default.bind(null, data, depth, height, width);
        case _enums.Layout["[row,column][band]"]:
          return _selectPixelFromRcB.default.bind(null, data, width);
        case _enums.Layout["[row][column][band]"]:
          return _selectPixelFromRCB.default.bind(null, data);
        case _enums.Layout["[row][column,band]"]:
          return _selectPixelFromRCb.default.bind(null, data, depth);
        case _enums.Layout["[row,column,band]"]:
          return _selectPixelFromRcb.default.bind(null, data, depth, width);
        default:
          throw new Error("[pixel-utils] unknown layout " + layout);
      }
    }
  }
});

// node_modules/pixel-utils/dist/cjs/fit/index.js
var require_fit = __commonJS({
  "node_modules/pixel-utils/dist/cjs/fit/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = fit2;
    var _xdim = require_xdim();
    var _rawToRgba = _interopRequireDefault(require_raw_to_rgba());
    var _selectPixel = _interopRequireDefault(require_select_pixel());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function fit2({
      data,
      debug_level = 0,
      depth,
      flip = false,
      old_no_data_value,
      old_layout,
      no_data_strategy = "partial",
      // png strategy
      no_range_value,
      no_range_value_strategy = "top",
      new_layout = "[row,column,band]",
      new_no_data_value,
      height,
      ranges,
      width
    }) {
      if (!ranges) throw new Error("[expand] can't expand without ranges");
      if (debug_level >= 1) console.log("[stretch] starting fit");
      if (typeof height !== "number") throw new Error("[fit] height must be a number");
      if (typeof width !== "number") throw new Error("[fit] height must be a number");
      if (typeof old_layout !== "string") throw new Error("[fit] old_layout must be a string");
      if (typeof new_layout !== "string") throw new Error("[fit] new_layout must be a string");
      const select = (0, _selectPixel.default)(data, {
        depth,
        height,
        layout: old_layout,
        width
      });
      const out_sizes = {
        band: 4,
        row: height,
        column: width
      };
      const {
        data: out_data
      } = (0, _xdim.prepareData)({
        fill: new_no_data_value,
        layout: new_layout,
        sizes: out_sizes
      });
      const convert = (0, _rawToRgba.default)({
        debug_level: debug_level - 1,
        format: "array",
        flip,
        ranges,
        new_no_data_value,
        no_data_strategy,
        no_range_value,
        no_range_value_strategy,
        old_no_data_value
      });
      const update = (0, _xdim.prepareUpdate)({
        data: out_data,
        layout: new_layout,
        sizes: out_sizes
      });
      for (let row = 0; row < height; row++) {
        for (let column = 0; column < width; column++) {
          const [r, g, b, a] = convert(select(row, column));
          update({
            point: {
              band: 0,
              row,
              column
            },
            value: r
          });
          update({
            point: {
              band: 1,
              row,
              column
            },
            value: g
          });
          update({
            point: {
              band: 2,
              row,
              column
            },
            value: b
          });
          update({
            point: {
              band: 3,
              row,
              column
            },
            value: a
          });
        }
      }
      if (debug_level >= 1) console.log("[pixel-utils/fit] out_data:", out_data);
      return {
        // @ts-ignore
        data: out_data,
        layout: new_layout
      };
    }
  }
});

// node_modules/pixel-utils/dist/cjs/has-no-data/index.js
var require_has_no_data = __commonJS({
  "node_modules/pixel-utils/dist/cjs/has-no-data/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = hasNoData2;
    function hasNoData2(noDataValue, pixel2) {
      return pixel2.includes(noDataValue);
    }
  }
});

// node_modules/pixel-utils/dist/cjs/hide-rgba/index.js
var require_hide_rgba = __commonJS({
  "node_modules/pixel-utils/dist/cjs/hide-rgba/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = hide_rgba2;
    function hide_rgba2([r, g, b]) {
      return [r, g, b, 0];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/is-hidden/index.js
var require_is_hidden = __commonJS({
  "node_modules/pixel-utils/dist/cjs/is-hidden/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHidden2;
    function isHidden2(pixel2) {
      return pixel2[3] === 0;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/is-no-data/index.js
var require_is_no_data = __commonJS({
  "node_modules/pixel-utils/dist/cjs/is-no-data/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isNoData2;
    function isNoData2(no_data_value, pixel2) {
      return pixel2[0] === no_data_value;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/make-no-data-rgb/index.js
var require_make_no_data_rgb = __commonJS({
  "node_modules/pixel-utils/dist/cjs/make-no-data-rgb/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = makeNoDataRGB2;
    function makeNoDataRGB2(noDataValue) {
      return [noDataValue, noDataValue, noDataValue];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/pop-alpha/index.js
var require_pop_alpha = __commonJS({
  "node_modules/pixel-utils/dist/cjs/pop-alpha/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = popAlpha2;
    function popAlpha2(pixel2) {
      pixel2.pop();
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/range/index.js
var require_range = __commonJS({
  "node_modules/pixel-utils/dist/cjs/range/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = range2;
    function range2(ct) {
      return new Array(ct).fill(0).map((_, i) => i);
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-single.js
var require_convert_single2 = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-single.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_one_band_pixel_to_rgb2;
    function convert_raw_one_band_pixel_to_rgb2(noDataValue, noDataPixel, scale, pixel2) {
      if (pixel2.includes(noDataValue)) return noDataPixel;
      const scaled = scale(pixel2[0]);
      return [scaled, scaled, scaled];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-single-str.js
var require_convert_single_str2 = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-single-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_one_band_pixel_to_rgb_str2;
    function convert_raw_one_band_pixel_to_rgb_str2(noDataValue, noDataPixel, scale, pixel2) {
      if (pixel2.includes(noDataValue)) return noDataPixel;
      const scaled = scale(pixel2[0]);
      return "rgb(" + scaled + ", " + scaled + ", " + scaled + ")";
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-double.js
var require_convert_double2 = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-double.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_two_band_pixel_to_rgb3;
    function convert_raw_two_band_pixel_to_rgb3(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, pixel2) {
      if (pixel2.includes(noDataValue)) return noDataPixel;
      return [scaleFunction1(pixel2[0]), scaleFunction2(pixel2[1]), 0];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-double-str.js
var require_convert_double_str2 = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-double-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_two_band_pixel_to_rgb_str3;
    function convert_raw_two_band_pixel_to_rgb_str3(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, pixel2) {
      if (pixel2.includes(noDataValue)) return noDataPixel;
      return "rgb(" + scaleFunction1(pixel2[0]) + ", " + scaleFunction2(pixel2[1]) + ", 0)";
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-triple.js
var require_convert_triple = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-triple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_three_band_pixel_to_rgb2;
    function convert_raw_three_band_pixel_to_rgb2(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, scaleFunction3, pixel2) {
      if (pixel2.includes(noDataValue)) return noDataPixel;
      return [scaleFunction1(pixel2[0]), scaleFunction2(pixel2[1]), scaleFunction3(pixel2[2])];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-triple-str.js
var require_convert_triple_str = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-triple-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_three_band_pixel_to_rgb_css2;
    function convert_raw_three_band_pixel_to_rgb_css2(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, scaleFunction3, pixel2) {
      if (pixel2.includes(noDataValue)) return noDataPixel;
      return "rgb(" + scaleFunction1(pixel2[0]) + ", " + scaleFunction2(pixel2[1]) + ", " + scaleFunction3(pixel2[2]) + ")";
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-many.js
var require_convert_many = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-many.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_two_band_pixel_to_rgb3;
    function convert_raw_two_band_pixel_to_rgb3(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, scaleFunction3, pixel2) {
      pixel2 = pixel2.slice(0, 3);
      if (pixel2.includes(noDataValue)) return noDataPixel;
      return [scaleFunction1(pixel2[0]), scaleFunction2(pixel2[1]), scaleFunction3(pixel2[2])];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-many-str.js
var require_convert_many_str = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/convert-many-str.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = convert_raw_two_band_pixel_to_rgb_str3;
    function convert_raw_two_band_pixel_to_rgb_str3(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, scaleFunction3, pixel2) {
      pixel2 = pixel2.slice(0, 3);
      if (pixel2.includes(noDataValue)) return noDataPixel;
      return "rgb(" + scaleFunction1(pixel2[0]) + ", " + scaleFunction2(pixel2[1]) + ", " + scaleFunction3(pixel2[2]) + ")";
    }
  }
});

// node_modules/pixel-utils/dist/cjs/rgb-to-str/index.js
var require_rgb_to_str = __commonJS({
  "node_modules/pixel-utils/dist/cjs/rgb-to-str/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rgbToStr2;
    function rgbToStr2([r, g, b]) {
      return "rgb(" + r + ", " + g + ", " + b + ")";
    }
  }
});

// node_modules/pixel-utils/dist/cjs/raw-to-rgb/index.js
var require_raw_to_rgb = __commonJS({
  "node_modules/pixel-utils/dist/cjs/raw-to-rgb/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rawToRgb2;
    var _quickScale = require_quick_scale();
    var _makeNoDataRgb = _interopRequireDefault(require_make_no_data_rgb());
    var _convertSingle = _interopRequireDefault(require_convert_single2());
    var _convertSingleStr = _interopRequireDefault(require_convert_single_str2());
    var _convertDouble = _interopRequireDefault(require_convert_double2());
    var _convertDoubleStr = _interopRequireDefault(require_convert_double_str2());
    var _convertTriple = _interopRequireDefault(require_convert_triple());
    var _convertTripleStr = _interopRequireDefault(require_convert_triple_str());
    var _convertMany = _interopRequireDefault(require_convert_many());
    var _convertManyStr = _interopRequireDefault(require_convert_many_str());
    var _rgbToStr = _interopRequireDefault(require_rgb_to_str());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function rawToRgb2({
      format = "array",
      ranges,
      flip,
      new_no_data_pixel,
      new_no_data_value,
      no_range_value,
      no_range_value_strategy,
      old_no_data_value,
      round = true
    }) {
      const nbands = ranges.length;
      if (new_no_data_pixel && new_no_data_value) {
        throw new Error("[pixel-utils/raw-to-rgb] can't specify both new_no_data_pixel and new_no_data_value");
      }
      if (new_no_data_pixel === void 0 || new_no_data_pixel === null) {
        if (new_no_data_value === void 0 || new_no_data_value === null) {
          new_no_data_pixel = (0, _makeNoDataRgb.default)(null);
        } else {
          new_no_data_pixel = (0, _makeNoDataRgb.default)(new_no_data_value);
        }
      }
      if (new_no_data_pixel === void 0) throw new Error("[raw-to-rgb] undefined new_no_data_pixel");
      const new_range = [0 === new_no_data_value ? 1 : 0, 255 === new_no_data_value ? 254 : 255];
      const options = {
        flip,
        no_range_value,
        no_range_value_strategy,
        round
      };
      const scalefns = ranges.slice(0, 3).map((rng) => (0, _quickScale.createScaleFunction)(rng, new_range, options));
      if (nbands === 1) {
        if (format === "string") {
          return _convertSingleStr.default.bind(null, old_no_data_value, (0, _rgbToStr.default)(new_no_data_pixel), ...scalefns);
        } else {
          return _convertSingle.default.bind(null, old_no_data_value, new_no_data_pixel, ...scalefns);
        }
      } else if (nbands === 2) {
        if (format === "string") {
          return _convertDoubleStr.default.bind(null, old_no_data_value, (0, _rgbToStr.default)(new_no_data_pixel), ...scalefns);
        } else {
          return _convertDouble.default.bind(null, old_no_data_value, new_no_data_pixel, ...scalefns);
        }
      } else if (nbands === 3) {
        if (format === "string") {
          return _convertTripleStr.default.bind(null, old_no_data_value, (0, _rgbToStr.default)(new_no_data_pixel), ...scalefns);
        } else {
          return _convertTriple.default.bind(null, old_no_data_value, new_no_data_pixel, ...scalefns);
        }
      } else if (nbands >= 4) {
        if (format === "string") {
          return _convertManyStr.default.bind(null, old_no_data_value, (0, _rgbToStr.default)(new_no_data_pixel), ...scalefns);
        } else {
          return _convertMany.default.bind(null, old_no_data_value, new_no_data_pixel, ...scalefns);
        }
      } else {
        throw new Error("[pixel-utils/raw-to-rgb] invalid number of bands: " + nbands);
      }
    }
  }
});

// node_modules/pixel-utils/dist/cjs/push-alpha/index.js
var require_push_alpha = __commonJS({
  "node_modules/pixel-utils/dist/cjs/push-alpha/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = pushAlpha2;
    function pushAlpha2(pixel2) {
      pixel2.push(255);
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/rgb-to-rgba/safely-convert.js
var require_safely_convert = __commonJS({
  "node_modules/pixel-utils/dist/cjs/rgb-to-rgba/safely-convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = safely_convert_rgb_to_rgba2;
    var _addAlpha = _interopRequireDefault(require_add_alpha());
    var _isNoData = _interopRequireDefault(require_is_no_data());
    var _makeNoDataRgba = _interopRequireDefault(require_make_no_data_rgba());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function safely_convert_rgb_to_rgba2(old_no_data_value, new_no_data_value, pixel2) {
      return (0, _isNoData.default)(old_no_data_value, pixel2) ? (0, _makeNoDataRgba.default)(new_no_data_value) : (0, _addAlpha.default)(pixel2);
    }
  }
});

// node_modules/pixel-utils/dist/cjs/rgb-to-rgba/quickly-convert.js
var require_quickly_convert = __commonJS({
  "node_modules/pixel-utils/dist/cjs/rgb-to-rgba/quickly-convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = quickly_convert2;
    var _isNoData = _interopRequireDefault(require_is_no_data());
    var _pushAlpha = _interopRequireDefault(require_push_alpha());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function quickly_convert2(old_no_data_value, new_no_data_pixel, px) {
      return (0, _isNoData.default)(old_no_data_value, px) ? new_no_data_pixel : (0, _pushAlpha.default)(px);
    }
  }
});

// node_modules/pixel-utils/dist/cjs/rgb-to-rgba/index.js
var require_rgb_to_rgba = __commonJS({
  "node_modules/pixel-utils/dist/cjs/rgb-to-rgba/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rgbToRgba2;
    var _addAlpha = _interopRequireDefault(require_add_alpha());
    var _pushAlpha = _interopRequireDefault(require_push_alpha());
    var _makeNoDataRgba = _interopRequireDefault(require_make_no_data_rgba());
    var _safelyConvert = _interopRequireDefault(require_safely_convert());
    var _quicklyConvert = _interopRequireDefault(require_quickly_convert());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function rgbToRgba2({
      old_no_data_value,
      new_no_data_value = null,
      safe = true
    } = {}) {
      if (typeof old_no_data_value === "number") {
        if (safe) {
          return _safelyConvert.default.bind(null, old_no_data_value, new_no_data_value);
        } else {
          const new_no_data_pixel = (0, _makeNoDataRgba.default)(new_no_data_value);
          return _quicklyConvert.default.bind(null, old_no_data_value, new_no_data_pixel);
        }
      } else {
        if (safe) {
          return _addAlpha.default;
        } else {
          return _pushAlpha.default;
        }
      }
    }
  }
});

// node_modules/pixel-utils/dist/cjs/slice-alpha/index.js
var require_slice_alpha = __commonJS({
  "node_modules/pixel-utils/dist/cjs/slice-alpha/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = sliceAlpha2;
    function sliceAlpha2(pixel2) {
      return pixel2.slice(0, 3);
    }
  }
});

// node_modules/pixel-utils/dist/cjs/rgba-to-rgb/safely-convert.js
var require_safely_convert2 = __commonJS({
  "node_modules/pixel-utils/dist/cjs/rgba-to-rgb/safely-convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = safely_convert_rgba_to_rgb2;
    var _isHidden = _interopRequireDefault(require_is_hidden());
    var _makeNoDataRgb = _interopRequireDefault(require_make_no_data_rgb());
    var _sliceAlpha = _interopRequireDefault(require_slice_alpha());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function safely_convert_rgba_to_rgb2(noDataValue, pixel2) {
      return (0, _isHidden.default)(pixel2) ? (0, _makeNoDataRgb.default)(noDataValue) : (0, _sliceAlpha.default)(pixel2);
    }
  }
});

// node_modules/pixel-utils/dist/cjs/rgba-to-rgb/quickly-convert.js
var require_quickly_convert2 = __commonJS({
  "node_modules/pixel-utils/dist/cjs/rgba-to-rgb/quickly-convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = quickly_convert_rgba_to_rgb2;
    var _isHidden = _interopRequireDefault(require_is_hidden());
    var _popAlpha = _interopRequireDefault(require_pop_alpha());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function quickly_convert_rgba_to_rgb2(noDataPixel, pixel2) {
      return (0, _isHidden.default)(pixel2) ? noDataPixel : (0, _popAlpha.default)(pixel2);
    }
  }
});

// node_modules/pixel-utils/dist/cjs/rgba-to-rgb/index.js
var require_rgba_to_rgb = __commonJS({
  "node_modules/pixel-utils/dist/cjs/rgba-to-rgb/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rgbaToRgb2;
    var _makeNoDataRgb = _interopRequireDefault(require_make_no_data_rgb());
    var _popAlpha = _interopRequireDefault(require_pop_alpha());
    var _sliceAlpha = _interopRequireDefault(require_slice_alpha());
    var _safelyConvert = _interopRequireDefault(require_safely_convert2());
    var _quicklyConvert = _interopRequireDefault(require_quickly_convert2());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    function rgbaToRgb2({
      new_no_data_value,
      safe = true
    } = {}) {
      if (safe) {
        if (typeof new_no_data_value === "number") {
          return _safelyConvert.default.bind(null, new_no_data_value);
        } else {
          return _sliceAlpha.default;
        }
      } else {
        if (typeof new_no_data_value === "number") {
          return _quicklyConvert.default.bind(null, (0, _makeNoDataRgb.default)(new_no_data_value));
        } else {
          return _popAlpha.default;
        }
      }
    }
  }
});

// node_modules/pixel-utils/dist/cjs/set-hidden/index.js
var require_set_hidden = __commonJS({
  "node_modules/pixel-utils/dist/cjs/set-hidden/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = setHidden2;
    function setHidden2(pixel2) {
      pixel2[3] = 0;
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/set-visible/index.js
var require_set_visible = __commonJS({
  "node_modules/pixel-utils/dist/cjs/set-visible/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = setVisible2;
    function setVisible2(pixel2) {
      pixel2[3] = 255;
      return pixel2;
    }
  }
});

// node_modules/pixel-utils/dist/cjs/show-rgba/index.js
var require_show_rgba = __commonJS({
  "node_modules/pixel-utils/dist/cjs/show-rgba/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = showRGBA2;
    function showRGBA2([r, g, b]) {
      return [r, g, b, 255];
    }
  }
});

// node_modules/pixel-utils/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/pixel-utils/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "addAlpha", {
      enumerable: true,
      get: function() {
        return _addAlpha.default;
      }
    });
    Object.defineProperty(exports, "fit", {
      enumerable: true,
      get: function() {
        return _fit.default;
      }
    });
    Object.defineProperty(exports, "hasNoData", {
      enumerable: true,
      get: function() {
        return _hasNoData.default;
      }
    });
    Object.defineProperty(exports, "hideRgba", {
      enumerable: true,
      get: function() {
        return _hideRgba.default;
      }
    });
    Object.defineProperty(exports, "isHidden", {
      enumerable: true,
      get: function() {
        return _isHidden.default;
      }
    });
    Object.defineProperty(exports, "isNoData", {
      enumerable: true,
      get: function() {
        return _isNoData.default;
      }
    });
    Object.defineProperty(exports, "makeNoDataRgb", {
      enumerable: true,
      get: function() {
        return _makeNoDataRgb.default;
      }
    });
    Object.defineProperty(exports, "makeNoDataRgba", {
      enumerable: true,
      get: function() {
        return _makeNoDataRgba.default;
      }
    });
    Object.defineProperty(exports, "popAlpha", {
      enumerable: true,
      get: function() {
        return _popAlpha.default;
      }
    });
    Object.defineProperty(exports, "range", {
      enumerable: true,
      get: function() {
        return _range.default;
      }
    });
    Object.defineProperty(exports, "rawToRgb", {
      enumerable: true,
      get: function() {
        return _rawToRgb.default;
      }
    });
    Object.defineProperty(exports, "rawToRgba", {
      enumerable: true,
      get: function() {
        return _rawToRgba.default;
      }
    });
    Object.defineProperty(exports, "rgbToRgba", {
      enumerable: true,
      get: function() {
        return _rgbToRgba.default;
      }
    });
    Object.defineProperty(exports, "rgbToStr", {
      enumerable: true,
      get: function() {
        return _rgbToStr.default;
      }
    });
    Object.defineProperty(exports, "rgbaToRgb", {
      enumerable: true,
      get: function() {
        return _rgbaToRgb.default;
      }
    });
    Object.defineProperty(exports, "setHidden", {
      enumerable: true,
      get: function() {
        return _setHidden.default;
      }
    });
    Object.defineProperty(exports, "setVisible", {
      enumerable: true,
      get: function() {
        return _setVisible.default;
      }
    });
    Object.defineProperty(exports, "showRgba", {
      enumerable: true,
      get: function() {
        return _showRgba.default;
      }
    });
    Object.defineProperty(exports, "sliceAlpha", {
      enumerable: true,
      get: function() {
        return _sliceAlpha.default;
      }
    });
    var _addAlpha = _interopRequireDefault(require_add_alpha());
    var _fit = _interopRequireDefault(require_fit());
    var _hasNoData = _interopRequireDefault(require_has_no_data());
    var _hideRgba = _interopRequireDefault(require_hide_rgba());
    var _isHidden = _interopRequireDefault(require_is_hidden());
    var _isNoData = _interopRequireDefault(require_is_no_data());
    var _makeNoDataRgb = _interopRequireDefault(require_make_no_data_rgb());
    var _makeNoDataRgba = _interopRequireDefault(require_make_no_data_rgba());
    var _popAlpha = _interopRequireDefault(require_pop_alpha());
    var _range = _interopRequireDefault(require_range());
    var _rawToRgb = _interopRequireDefault(require_raw_to_rgb());
    var _rawToRgba = _interopRequireDefault(require_raw_to_rgba());
    var _rgbToRgba = _interopRequireDefault(require_rgb_to_rgba());
    var _rgbToStr = _interopRequireDefault(require_rgb_to_str());
    var _rgbaToRgb = _interopRequireDefault(require_rgba_to_rgb());
    var _setHidden = _interopRequireDefault(require_set_hidden());
    var _setVisible = _interopRequireDefault(require_set_visible());
    var _showRgba = _interopRequireDefault(require_show_rgba());
    var _sliceAlpha = _interopRequireDefault(require_slice_alpha());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
  }
});

// node_modules/geowarp-canvas/index.js
var require_geowarp_canvas = __commonJS({
  "node_modules/geowarp-canvas/index.js"(exports, module) {
    var calcImageStats = require_calc_image_stats_min();
    var guessImageLayout = require_guess_image_layout();
    var { rawToRgba: rawToRgba2 } = require_cjs();
    function geowarp_canvas2(geowarp3) {
      return function({
        plugins = [],
        out_canvas,
        // canvas that has a height and width set
        in_stats,
        out_no_data_color,
        out_resolution = [1, 1],
        // 1 = full resolution, 0.5 sample for half as many pixels across
        draw,
        before_draw,
        after_draw,
        before_warp,
        after_warp,
        palette,
        flip,
        ...rest
      }) {
        if (!plugins.includes("canvas")) {
          return geowarp3({ ...rest, plugins, in_stats });
        }
        if (typeof out_canvas.height !== "number") throw Error("[geowarp-canvas] out_canvas.height not set");
        if (typeof out_canvas.width !== "number") throw Error("[geowarp-canvas] out_canvas.width not set");
        const options = { ...rest };
        let [x_resolution, y_resolution] = out_resolution;
        options.debug_level = Math.max(0, options.debug_level || 0);
        options.out_pixel_depth = 4;
        options.out_height = Math.round(out_canvas.height * y_resolution);
        options.out_width = Math.round(out_canvas.width * x_resolution);
        x_resolution = options.out_width / out_canvas.width;
        y_resolution = options.out_height / out_canvas.height;
        const scale = [1 / x_resolution, 1 / y_resolution];
        const out_context = out_canvas.getContext("2d");
        options.skip_no_data_strategy ??= "any";
        options.insert_null_strategy = "skip";
        if (!options.expr) {
          if (palette) {
            if (typeof palette[pixel[0]] === "string") {
              options.expr = ({ pixel: pixel2 }) => palette[pixel2[0]];
            } else if (palette[0].length === 3) {
              options.expr = ({ pixel: pixel2 }) => `rgb(${palette[pixel2[0]].join(", ")})`;
            } else if (palette[0].length === 4) {
              options.expr = ({ pixel: pixel2 }) => {
                const [r, g, b, a] = palette[pixel2[0]];
                return `rgba(${r}, ${g}, ${b}, ${a / 255})`;
              };
            }
          } else {
            if (options.debug_level >= 1) console.log("[geowarp-canvas] creating expr function that fits pixels to 0-255 color space");
            const guessed = guessImageLayout({
              data: options.in_data,
              height: options.in_height,
              width: options.in_width
            });
            options.in_pixel_depth ??= guessed.bands;
            options.in_height ??= guessed.height;
            options.in_width ??= guessed.width;
            flip ??= options.in_pixel_depth === 1;
            in_stats ??= calcImageStats(options.in_data, {
              height: options.in_height,
              noData: options.in_no_data,
              stats: ["min", "max"],
              width: options.in_width
            }).bands;
            const rawToRgbaFn = rawToRgba2({
              debug_level: options.debug_level,
              format: "string",
              ranges: in_stats.map((band) => [band.min, band.max]),
              flip,
              no_data_strategy: "all",
              no_range_value_strategy: flip ? "highest" : "lowest",
              old_no_data_value: options.in_no_data
            });
            if (options.debug_level >= 2) console.log("[geowarp-canvas] created a function for converting from raw pixel values to RGBA");
            options.expr = ({ pixel: pixel2 }) => rawToRgbaFn(pixel2);
          }
        }
        let image_data;
        options.insert_sample = function({
          pixel: color,
          row,
          column,
          raw,
          // the following are currently only provided by geowarp when using "near" resampling
          pt_in_srs,
          pt_out_srs,
          x_in_raster_pixels,
          y_in_raster_pixels
        }) {
          if (color === null || color === void 0) return;
          if (Array.isArray(color)) {
            const len = color.length;
            if (len === 3) {
              const [r, g, b] = color;
              color = `rgb(${r},${g},${b})`;
            } else if (len === 4) {
              const [r, g, b, a] = color;
              color = `rgba(${r},${g},${b},${a / 255})`;
            }
          }
          out_context.fillStyle = color;
          const xmin = column / x_resolution;
          const ymin = row / y_resolution;
          const xmax = (column + 1) / x_resolution;
          const ymax = (row + 1) / y_resolution;
          const xmin_rounded = Math.round(xmin);
          const ymin_rounded = Math.round(ymin);
          const width = Math.round(xmax) - xmin_rounded;
          const height = Math.round(ymax) - ymin_rounded;
          const draw_options = {
            bbox: [xmin, ymin, xmax, ymax],
            canvas: out_canvas,
            color,
            context: out_context,
            data: options.in_data,
            pixel: raw,
            rect: [xmin_rounded, ymin_rounded, width, height],
            resolution: out_resolution,
            cell: [column, row],
            scale,
            points: [pt_in_srs, pt_out_srs],
            sample: [x_in_raster_pixels, y_in_raster_pixels]
          };
          if (typeof before_draw === "function") {
            before_draw(draw_options);
          }
          if (typeof draw === "function") {
            draw(draw_options);
          } else {
            out_context.fillRect(xmin_rounded, ymin_rounded, width, height);
          }
          if (typeof after_draw === "function") {
            after_draw(draw_options);
          }
        };
        if (typeof out_no_data_color === "string") {
          out_context.fillStyle = out_no_data_color;
          out_context.fillRect(0, 0, out_canvas.width, out_canvas.height);
        }
        if (options.debug_level >= 2) {
          console.log("[geowarp-canvas] calling geowarp with the following options:", options);
        }
        out_context.save();
        if (typeof before_warp === "function") before_warp(options);
        const result2 = geowarp3(options);
        if (typeof after_warp === "function") after_warp(result2);
        if (image_data) out_context.putImageData(image_data, 0, 0);
        out_context.restore();
        result2.canvas = out_canvas;
        return result2;
      };
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return geowarp_canvas2;
      });
    }
    if (typeof module === "object") {
      module.exports = geowarp_canvas2;
      module.exports.default = geowarp_canvas2;
    }
    if (typeof window === "object") {
      window.geowarp_canvas = geowarp_canvas2;
    }
  }
});

// node_modules/snap-bbox/lib/snap-bbox.js
var require_snap_bbox = __commonJS({
  "node_modules/snap-bbox/lib/snap-bbox.js"(exports, module) {
    function snap_bbox({ bbox, container, debug, origin, overflow, padding, scale, size }) {
      function clean(n) {
        return n === 0 ? 0 : n;
      }
      if (debug) console.log("[snap-bbox] starting");
      if (debug) console.log("[snap-bbox] bbox:", bbox);
      if (debug) console.log("[snap-bbox] debug:", debug);
      if (debug) console.log("[snap-bbox] origin:", origin);
      if (debug) console.log("[snap-bbox] overflow:", overflow);
      if (debug) console.log("[snap-bbox] padding:", padding);
      if (debug) console.log("[snap-bbox] scale:", scale);
      if (debug) console.log("[snap-bbox] size:", size);
      const [originX, originY] = origin;
      if (debug) console.log("[snap-bbox] originX:", originX);
      if (debug) console.log("[snap-bbox] originY:", originY);
      const [padX, padY] = padding || [0, 0];
      if (debug) console.log("[snap-bbox] padX:", padX);
      if (debug) console.log("[snap-bbox] padY:", padY);
      const [scale_x, scale_y] = scale;
      if (debug) console.log("[snap-bbox] scale_x:", scale_x);
      if (debug) console.log("[snap-bbox] scale_y:", scale_y);
      const sign_scale_x = Math.sign(scale_x);
      const sign_scale_y = Math.sign(scale_y);
      if (debug) console.log("[snap-bbox] sign_scale_x:", sign_scale_x);
      if (debug) console.log("[snap-bbox] sign_scale_y:", sign_scale_y);
      const [xmin, ymin, xmax, ymax] = bbox;
      if (debug) console.log("[snap-bbox] xmin:", xmin);
      if (debug) console.log("[snap-bbox] ymin:", ymin);
      if (debug) console.log("[snap-bbox] xmax:", xmax);
      if (debug) console.log("[snap-bbox] ymax:", ymax);
      const left = (xmin - originX) / scale_x;
      const right = (xmax - originX) / scale_x;
      const top = (ymax - originY) / scale_y;
      const bottom = (ymin - originY) / scale_y;
      if (debug) console.log("[snap-bbox] left:", left);
      if (debug) console.log("[snap-bbox] right:", right);
      if (debug) console.log("[snap-bbox] top:", top);
      if (debug) console.log("[snap-bbox] bottom:", bottom);
      let left_int = Math.floor(left) - padX;
      let right_int = Math.ceil(right) + padX;
      let top_int = Math.floor(top) - padY;
      let bottom_int = Math.ceil(bottom) + padY;
      if (debug) console.log("[snap-bbox] left_int:", left_int);
      if (debug) console.log("[snap-bbox] right_int:", right_int);
      if (debug) console.log("[snap-bbox] top_int:", top_int);
      if (debug) console.log("[snap-bbox] bottom_int:", bottom_int);
      if (container) {
        if (debug) console.log("[snap-bbox] container:", container);
        const min_left = (container[0] - originX) / scale_x;
        const max_right = (container[2] - originX) / scale_x;
        const min_top = (container[3] - originY) / scale_y;
        const max_bottom = (container[1] - originY) / scale_y;
        if (debug) console.log("[snap-bbox] min_left:", min_left);
        if (debug) console.log("[snap-bbox] max_right:", max_right);
        if (debug) console.log("[snap-bbox] min_top:", min_top);
        if (debug) console.log("[snap-bbox] max_bottom:", max_bottom);
        const min_left_int = Math.ceil(min_left);
        const max_right_int = Math.floor(max_right);
        const min_top_int = Math.ceil(min_top);
        const max_bottom_int = Math.floor(max_bottom);
        if (debug) console.log("[snap-bbox] min_left_int:", min_left_int);
        if (debug) console.log("[snap-bbox] max_right_int:", max_right_int);
        if (debug) console.log("[snap-bbox] min_top_int:", min_top_int);
        if (debug) console.log("[snap-bbox] max_bottom_int:", max_bottom_int);
        left_int = Math.max(left_int, min_left_int);
        right_int = Math.min(right_int, max_right_int);
        top_int = Math.max(top_int, min_top_int);
        bottom_int = Math.min(bottom_int, max_bottom_int);
        if (debug) console.log("[snap-bbox] after containment, left_int:", left_int);
        if (debug) console.log("[snap-bbox] after containment, right_int:", right_int);
        if (debug) console.log("[snap-bbox] after containment, top_int:", top_int);
        if (debug) console.log("[snap-bbox] after containment, bottom_int:", bottom_int);
      }
      if (size && overflow === false) {
        if (debug) console.log("[snap-bbox] size:", size);
        const [width, height] = size;
        if (debug) console.log("[snap-bbox] width:", width);
        if (debug) console.log("[snap-bbox] height:", height);
        if (left_int > width || right_int < 0 || bottom_int < 0 || top_int > height) {
          throw new Error("[snap-bbox] bbox doesn't intersect the grid");
        }
        left_int = Math.max(left_int, 0);
        right_int = Math.min(right_int, width);
        top_int = Math.max(top_int, 0);
        bottom_int = Math.min(bottom_int, height);
      }
      const bbox_in_grid_cells = [clean(left_int), clean(bottom_int), clean(right_int), clean(top_int)];
      if (debug) console.log("[snap-bbox] bbox_in_grid_cells:", bbox_in_grid_cells);
      const bbox_in_coordinate_system = [
        clean(originX + left_int * scale_x),
        // xmin
        clean(originY + bottom_int * scale_y),
        // ymin
        clean(originX + right_int * scale_x),
        // xmax
        clean(originY + top_int * scale_y)
        // ymax
      ];
      return { bbox_in_coordinate_system, bbox_in_grid_cells };
    }
    if (typeof define === "function" && define.amd)
      define(function() {
        return snap_bbox;
      });
    if (typeof module === "object") module.exports = snap_bbox;
  }
});

// node_modules/snap-bbox/lib/snap-precise-bbox.js
var require_snap_precise_bbox = __commonJS({
  "node_modules/snap-bbox/lib/snap-precise-bbox.js"(exports, module) {
    var add3 = require_add();
    var ceil = require_ceil();
    var compare = require_compare();
    var divide2 = require_divide();
    var floor = require_floor();
    var max = require_max();
    var min = require_min();
    var multiply2 = require_multiply();
    var sign = require_sign();
    var subtract2 = require_subtract();
    function snap_precise_bbox({ bbox, container, debug, origin, overflow, padding, scale, size }) {
      if (debug) console.log("[snap-bbox] starting");
      if (debug) console.log("[snap-bbox] bbox:", bbox);
      if (debug) console.log("[snap-bbox] debug:", debug);
      if (debug) console.log("[snap-bbox] origin:", origin);
      if (debug) console.log("[snap-bbox] overflow:", overflow);
      if (debug) console.log("[snap-bbox] padding:", padding);
      if (debug) console.log("[snap-bbox] scale:", scale);
      const [originX, originY] = origin;
      if (debug) console.log("[snap-bbox] originX:", originX);
      if (debug) console.log("[snap-bbox] originY:", originY);
      const [padX, padY] = padding || ["0", "0"];
      if (debug) console.log("[snap-bbox] padX:", padX);
      if (debug) console.log("[snap-bbox] padY:", padY);
      const [scale_x, scale_y] = scale;
      if (debug) console.log("[snap-bbox] scale_x:", scale_x);
      if (debug) console.log("[snap-bbox] scale_y:", scale_y);
      const sign_scale_x = sign(scale_x);
      const sign_scale_y = sign(scale_y);
      if (debug) console.log("[snap-bbox] sign_scale_x:", sign_scale_x);
      if (debug) console.log("[snap-bbox] sign_scale_y:", sign_scale_y);
      const [xmin, ymin, xmax, ymax] = bbox;
      if (debug) console.log("[snap-bbox] xmin:", xmin);
      if (debug) console.log("[snap-bbox] ymin:", ymin);
      if (debug) console.log("[snap-bbox] xmax:", xmax);
      if (debug) console.log("[snap-bbox] ymax:", ymax);
      const left = divide2(subtract2(xmin, originX), scale_x);
      const right = divide2(subtract2(xmax, originX), scale_x);
      const top = divide2(subtract2(ymax, originY), scale_y);
      const bottom = divide2(subtract2(ymin, originY), scale_y);
      if (debug) console.log("[snap-bbox] left:", left);
      if (debug) console.log("[snap-bbox] right:", right);
      if (debug) console.log("[snap-bbox] top:", top);
      if (debug) console.log("[snap-bbox] bottom:", bottom);
      let left_int = subtract2(floor(left), padX);
      let right_int = add3(ceil(right), padX);
      let top_int = subtract2(floor(top), padY);
      let bottom_int = add3(ceil(bottom), padY);
      if (debug) console.log("[snap-bbox] left_int:", left_int);
      if (debug) console.log("[snap-bbox] right_int:", right_int);
      if (debug) console.log("[snap-bbox] top_int:", top_int);
      if (debug) console.log("[snap-bbox] bottom_int:", bottom_int);
      if (container) {
        if (debug) console.log("[snap-bbox] container:", container);
        const min_left = divide2(subtract2(container[0], originX), scale_x);
        const max_right = divide2(subtract2(container[2], originX), scale_x);
        const min_top = divide2(subtract2(container[3], originY), scale_y);
        const max_bottom = divide2(subtract2(container[1], originY), scale_y);
        if (debug) console.log("[snap-bbox] min_left:", min_left);
        if (debug) console.log("[snap-bbox] max_right:", max_right);
        if (debug) console.log("[snap-bbox] min_top:", min_top);
        if (debug) console.log("[snap-bbox] max_bottom:", max_bottom);
        const min_left_int = ceil(min_left);
        const max_right_int = floor(max_right);
        const min_top_int = ceil(min_top);
        const max_bottom_int = floor(max_bottom);
        if (debug) console.log("[snap-bbox] min_left_int:", min_left_int);
        if (debug) console.log("[snap-bbox] max_right_int:", max_right_int);
        if (debug) console.log("[snap-bbox] min_top_int:", min_top_int);
        if (debug) console.log("[snap-bbox] max_bottom_int:", max_bottom_int);
        left_int = max(left_int, min_left_int);
        right_int = min(right_int, max_right_int);
        top_int = max(top_int, min_top_int);
        bottom_int = min(bottom_int, max_bottom_int);
        if (debug) console.log("[snap-bbox] after containment, left_int:", left_int);
        if (debug) console.log("[snap-bbox] after containment, right_int:", right_int);
        if (debug) console.log("[snap-bbox] after containment, top_int:", top_int);
        if (debug) console.log("[snap-bbox] after containment, bottom_int:", bottom_int);
      }
      if (size && overflow === false) {
        if (debug) console.log("[snap-bbox] size:", size);
        const [width, height] = size;
        if (debug) console.log("[snap-bbox] width:", width);
        if (debug) console.log("[snap-bbox] height:", height);
        if (compare(left_int, width) === ">" || compare(right_int, "0") === "<" || compare(bottom_int, "0") === "<" || compare(top_int, height) === ">") {
          throw new Error("[snap-bbox] bbox doesn't intersect the grid");
        }
        left_int = max(left_int, "0");
        right_int = min(right_int, width);
        top_int = max(top_int, "0");
        bottom_int = min(bottom_int, height);
      }
      const bbox_in_grid_cells = [left_int, bottom_int, right_int, top_int];
      if (debug) console.log("[snap-bbox] bbox_in_grid_cells:", bbox_in_grid_cells);
      const bbox_in_coordinate_system = [
        add3(originX, multiply2(left_int, scale_x)),
        // xmin
        add3(originY, multiply2(bottom_int, scale_y)),
        // ymin
        add3(originX, multiply2(right_int, scale_x)),
        // xmax
        add3(originY, multiply2(top_int, scale_y))
        // ymax
      ];
      return { bbox_in_coordinate_system, bbox_in_grid_cells };
    }
    if (typeof define === "function" && define.amd)
      define(function() {
        return snap_precise_bbox;
      });
    if (typeof module === "object") module.exports = snap_precise_bbox;
  }
});

// node_modules/snap-bbox/lib/index.js
var require_lib = __commonJS({
  "node_modules/snap-bbox/lib/index.js"(exports, module) {
    var snap_bbox = require_snap_bbox();
    var snap_precise_bbox = require_snap_precise_bbox();
    function snap2({ precise = false, ...rest }) {
      if (precise) {
        return snap_precise_bbox(rest);
      } else {
        return snap_bbox(rest);
      }
    }
    if (typeof define === "function" && define.amd)
      define(function() {
        return snap2;
      });
    if (typeof module === "object") module.exports = snap2;
  }
});

// node_modules/microlink/esm/enums.js
var DEFAULT_FUNCTION_PREFIX, DEFAULT_PROMISE_PREFIX;
var init_enums = __esm({
  "node_modules/microlink/esm/enums.js"() {
    DEFAULT_FUNCTION_PREFIX = "microlink.function:";
    DEFAULT_PROMISE_PREFIX = "microlink.promise:";
  }
});

// node_modules/microlink/esm/serialize.js
function serialize(things, { function_prefix = DEFAULT_FUNCTION_PREFIX, promise_prefix = DEFAULT_PROMISE_PREFIX } = {}, generate_id) {
  const funcs = {};
  const proms = {};
  if (!generate_id) generate_id = () => Math.random();
  function stringify(it) {
    if (Array.isArray(it)) {
      return it.map((i) => stringify(i));
    } else if (typeof it === "function") {
      const fid = generate_id(it);
      funcs[fid] = it;
      return function_prefix + fid;
    } else if (typeof it === "object" && it !== null && typeof it.then === "function") {
      const pid = generate_id(it);
      proms[pid] = it;
      funcs[pid] = () => it;
      return promise_prefix + pid;
    } else if (typeof it === "object" && it !== null && it.constructor.name.indexOf("Array") === -1) {
      return Object.fromEntries(Object.entries(it).map(([k, v]) => [k, stringify(v)]));
    } else {
      return it;
    }
  }
  things = stringify(things);
  return [things, funcs, proms];
}
var init_serialize = __esm({
  "node_modules/microlink/esm/serialize.js"() {
    init_enums();
  }
});

// node_modules/microlink/esm/batch.js
function batch(action, { size = 1, wait = Infinity }) {
  let timeout = null;
  let current = [];
  return (params2) => {
    const batch2 = current;
    const send = async () => {
      Promise.resolve(action(batch2.map((it) => it.params))).then((results) => {
        results.forEach((result2, i) => {
          batch2[i].resolve(result2);
        });
      });
    };
    return new Promise((resolve, reject) => {
      batch2.push({ resolve, params: params2, reject });
      if (batch2.length === size) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        send();
        current = [];
      } else if (!timeout && wait !== Infinity) {
        timeout = setTimeout(function() {
          if (current === batch2) {
            current = [];
            clearTimeout(timeout);
            timeout = null;
            send();
          }
        }, wait);
      }
    });
  };
}
var init_batch = __esm({
  "node_modules/microlink/esm/batch.js"() {
  }
});

// node_modules/microlink/esm/batchcall.js
function batchcall(it, batch2, { debug_level = 0 } = {}) {
  let all_params_functions = {};
  const requests = batch2.map(({ id, method, params: params2 }) => {
    if (typeof id !== "number") id = Math.random();
    const [params_serialized, params_functions] = serialize(params2 || [], "microlink.call:");
    Object.assign(all_params_functions, params_functions);
    return {
      jsonrpc: "2.0",
      id,
      method,
      params: params_serialized
    };
  });
  if (debug_level >= 2) console.log("[microlink.batchcall] requests serialized to ", requests);
  const ids = requests.map((req) => req.id);
  return new Promise((resolve) => {
    const listener = async function listener2(evt) {
      if (debug_level >= 2) {
        console.log("[microlink.batchcall] response listener received message event with data", evt.data);
      }
      let { data } = evt;
      if (typeof data !== "object" || data === null) return;
      if (data.jsonrpc === "2.0" && data.method && data.method in all_params_functions) {
        if (!Array.isArray(data.params)) throw Error("[microlink.batchcall] params should be an array");
        const result2 = await all_params_functions[data.method](...data.params);
        const msg = { jsonrpc: "2.0", result: result2, id: data.id };
        if (debug_level >= 2) console.log("[microlink.batchcall] posting message down to worker:", msg);
        return it.postMessage(msg);
      }
      if (Array.isArray(data) && data.every((it2) => typeof it2 === "object" && ids.includes(it2.id))) {
        if (debug_level >= 2) console.log("[microlink.batchcall] removing exhausted listener");
        it.removeEventListener("message", listener2);
        all_params_functions = null;
        data.sort((a, b) => Math.sign(ids.indexOf(a.id) - ids.indexOf(b.id)));
        const results = data.map((res) => res.result);
        if (debug_level >= 2) console.log("[microlink.batchcall] resolving batch call:", results);
        resolve(results);
      }
    };
    it.addEventListener("message", listener);
    if (debug_level >= 2) console.log("[microlink.batchcall] posting message down to worker:", requests);
    return it.postMessage(requests);
  });
}
var init_batchcall = __esm({
  "node_modules/microlink/esm/batchcall.js"() {
    init_serialize();
  }
});

// node_modules/microlink/esm/deserialize.js
function deserialize(it, inpt, depth = 1, { batch_size = 1, batch_wait = 10, debug_level = 0 } = {}) {
  if (Array.isArray(inpt)) {
    if (depth >= 0) {
      return inpt.map((param) => deserialize(it, param, depth - 1, { batch_size, batch_wait }));
    } else {
      return inpt;
    }
  } else if (typeof inpt === "object" && inpt !== null && inpt.constructor.name.indexOf("Array") === -1) {
    const obj2 = {};
    for (let key in inpt) {
      obj2[key] = deserialize(it, inpt[key], depth - 1, { batch_size, batch_wait });
    }
    return obj2;
  } else if (typeof inpt === "string" && inpt.startsWith(DEFAULT_FUNCTION_PREFIX)) {
    const method = inpt.replace(DEFAULT_FUNCTION_PREFIX, "");
    const runInBatch = batch(
      (params2) => {
        return batchcall(it, params2, { debug_level });
      },
      { size: batch_size, wait: batch_wait }
    );
    return function() {
      const params2 = Array.from(arguments);
      return runInBatch({ method, params: params2 });
    };
  } else if (typeof inpt === "string" && inpt.startsWith(DEFAULT_PROMISE_PREFIX)) {
    const method = inpt.replace(DEFAULT_PROMISE_PREFIX, "");
    const runInBatch = batch(
      (params2) => {
        return batchcall(it, params2, { debug_level });
      },
      { size: batch_size, wait: batch_wait }
    );
    return runInBatch({ method, params: [] });
  } else {
    return inpt;
  }
}
var init_deserialize = __esm({
  "node_modules/microlink/esm/deserialize.js"() {
    init_batch();
    init_batchcall();
    init_enums();
  }
});

// node_modules/microlink/esm/call.js
function call(it, method, params2, { debug_level = 0 } = {}) {
  if (!params2) params2 = [];
  let [params_serialized, params_functions] = serialize(params2);
  if (debug_level >= 2) {
    console.log("[microlink.call] serialized to ", [params_serialized, params_functions]);
  }
  return new Promise((resolve, reject) => {
    const id = Math.random();
    const listener = async function listener2(evt) {
      if (debug_level >= 2) {
        console.log("[microlink.call] response listener received message event with data", evt.data);
      }
      let { data } = evt;
      if (typeof data !== "object" || data === null) {
        return;
      }
      if (Array.isArray(data) && data.length >= 1 && data[0].jsonrpc === "2.0" && data[0].method) {
        if (debug_level >= 2) console.log("[microlink.call] top thread received batch request");
        if (!params_functions) throw new Error("[microlink.call] no callable functions");
        const results = await Promise.all(
          data.map(async (req) => {
            const result2 = await params_functions[req.method](...req.params);
            return { jsonrpc: "2.0", result: result2, id: req.id };
          })
        );
        if (debug_level >= 2) console.log("[microlink.call] top thread posting results to worker:", results);
        return it.postMessage(results);
      }
      if (data.jsonrpc !== "2.0") {
        return;
      }
      if (data.method && params_functions && data.method in params_functions) {
        try {
          if (!Array.isArray(data.params)) throw Error("[microlink.call] params should be an array");
          const result2 = await params_functions[data.method](...data.params);
          const msg2 = { jsonrpc: "2.0", result: result2, id: data.id };
          if (debug_level >= 2) console.log("[microlink.call] posting message down to worker:", msg2);
          return it.postMessage(msg2);
        } catch (error) {
          console.error("[microlink.call] error:", error);
          reject(error);
        }
      }
      if (data.id === id) {
        it.removeEventListener("message", listener2);
        params_functions = null;
        const result2 = deserialize(it, data.result);
        if (debug_level >= 2) {
          console.log("[microlink.call] deserialized", data.result, "to", result2);
        }
        resolve(result2);
      }
    };
    it.addEventListener("message", listener);
    const msg = { jsonrpc: "2.0", id, method, params: params_serialized };
    if (debug_level >= 3) console.log("[microlink.call] posting message down to worker:", msg);
    return it.postMessage(msg);
  });
}
var init_call = __esm({
  "node_modules/microlink/esm/call.js"() {
    init_serialize();
    init_deserialize();
  }
});

// node_modules/microlink/esm/wrap.js
var wrap_exports = {};
__export(wrap_exports, {
  default: () => wrap
});
async function wrap(worker, { debug_level = 0 } = {}) {
  const obj2 = {};
  const methods = await call(worker, "microlink.list", void 0, {
    debug_level
  });
  if (debug_level >= 2) console.log("[microlink.wrap] methods:", methods);
  methods.forEach((method) => {
    obj2[method] = (...params2) => {
      if (debug_level >= 2) console.log("[microlink.wrap] called worker." + method);
      return call(worker, method, params2, { debug_level });
    };
  });
  return obj2;
}
var init_wrap = __esm({
  "node_modules/microlink/esm/wrap.js"() {
    init_call();
  }
});

// node_modules/frame-worker/frame-worker.js
var require_frame_worker = __commonJS({
  "node_modules/frame-worker/frame-worker.js"(exports, module) {
    function FrameWorker(workerScript, workerOptions, extraOptions) {
      var context = typeof extraOptions === "object" && typeof extraOptions.context === "object" && extraOptions.context;
      var cjs = typeof extraOptions === "object" && typeof extraOptions.cjs === "boolean" && extraOptions.cjs;
      var debug = typeof extraOptions === "object" && extraOptions.debug === true;
      var id = typeof extraOptions === "object" && typeof extraOptions.id === "string" && extraOptions.id;
      var onblob = typeof extraOptions === "object" && typeof extraOptions.onblob === "string" && extraOptions.onblob;
      var onscripterror = typeof extraOptions === "object" && typeof extraOptions.onscripterror === "string" && extraOptions.onscripterror;
      var onterminate = typeof extraOptions === "object" && typeof extraOptions.onterminate === "string" && extraOptions.onterminate;
      var raw = typeof extraOptions === "object" && typeof extraOptions.raw === "boolean" && extraOptions.raw;
      var revoke = typeof extraOptions === "object" && typeof extraOptions.revoke === "boolean" && extraOptions.revoke;
      var prefix = "[frame-worker" + (id ? " " + id : "") + "] ";
      var blobURL;
      function isPromise(it) {
        return typeof it === "object" && typeof it.then === "function";
      }
      if (typeof workerOptions === "object" && workerOptions.type === "module") {
        throw new Error('[frame-worker] type="module" is not supported');
      }
      if (!workerScript) throw new Error("[frame-worker] can't create a FrameWorker from nothing");
      if (raw) {
        try {
          var blob = new Blob([workerScript], { type: "text/javascript" });
          if (onblob) onblob(blob);
          workerScript = blobURL = URL.createObjectURL(blob);
        } catch (error) {
          workerScript = "data:application/javascript;base64," + btoa(workerScript);
        }
      } else if (workerScript.startsWith("data:")) {
        try {
          if (workerScript.startsWith("data:application/javascript;base64,")) {
            const decodedWorkerScript = atob(workerScript.replace("data:application/javascript;base64,", ""));
            var blob = new Blob([decodedWorkerScript], { type: "text/javascript" });
            if (onblob) onblob(blob);
            workerScript = blobURL = URL.createObjectURL(blob);
            if (debug) console.log(prefix + "converted data url to blob url");
          } else if (workerScript.startsWith("data:application/javascript,")) {
            const content = workerScript.replace("data:application/javascript,", "");
            var blob = new Blob([content], { type: "text/javascript" });
            if (onblob) onblob(blob);
            workerScript = blobURL = URL.createObjectURL(blob);
          }
        } catch (error) {
          return "data:application/javascript;base64," + btoa(text);
        }
      }
      var iframe;
      var ready = false;
      var queue = [];
      var worker = {};
      var handlers = {
        message: [],
        error: [],
        messagerror: []
      };
      function createFrameWorker() {
        iframe = document.createElement("iframe");
        if (id) iframe.id = id;
        iframe.style.display = "none";
        document.body.appendChild(iframe);
        var _self = iframe.contentWindow.self = iframe.contentWindow;
        const self_eventListeners = {};
        _self.addEventListener = function(type, listener) {
          if (!self_eventListeners[type]) self_eventListeners[type] = [];
          self_eventListeners[type].push(listener);
        };
        _self.removeEventListener = function(type, listener) {
          if (!self_eventListeners[type]) return;
          self_eventListeners[type] = self_eventListeners[type].filter(function(it) {
            return it !== listener;
          });
          if (self_eventListeners[type].length === 0) delete self_eventListeners[type];
        };
        function getMessageHandlers() {
          return [_self.onmessage].concat(self_eventListeners.message).filter(Boolean);
        }
        if (context) {
          for (let key in context) {
            if (context.hasOwnProperty(key)) {
              _self[key] = context[key];
            }
          }
        }
        var _module = iframe.contentWindow.module = { exports: {} };
        _self.postMessage = function(data, transfer) {
          if (worker.onmessage) {
            var evt = new MessageEvent(typeof data, { data });
            worker.onmessage(evt, transfer);
          }
          for (let i = 0; i < handlers.message.length; i++) {
            var evt = new MessageEvent(typeof data, { data });
            handlers.message[i](evt, transfer);
          }
        };
        var script = document.createElement("script");
        if (debug) console.log(prefix + "workerScript:", workerScript);
        iframe.contentWindow.onerror = function(error) {
          if (worker.onerror) {
            worker.onerror(error);
          }
        };
        script.onerror = function(e) {
          console.error("script errror:", e);
          if (onscripterror) onscripterror(e);
        };
        script.addEventListener("error", function(e) {
          console.error("script errror:", e);
          if (onscripterror) onscripterror(e);
        });
        script.src = workerScript;
        script.onload = function() {
          ready = true;
          for (var q = 0; q < queue.length; q++) {
            var entry = queue[q];
            var queuedMessage = entry[0];
            var queuedTransfer = entry[1];
            var messageHandlers = getMessageHandlers();
            if (messageHandlers.length > 0) {
              for (let h = 0; h < messageHandlers.length; h++) {
                try {
                  const handler = messageHandlers[h];
                  handler(queuedMessage, queuedTransfer);
                } catch (error) {
                  console.error(error);
                  if (worker.onerror) {
                    worker.onerror(error);
                  }
                }
              }
            } else if (cjs && (typeof _module.exports === "function" || typeof _module.exports.default === "function")) {
              const func = _module.exports.default || _module.exports;
              const result2 = func(queuedMessage.data);
              if (isPromise(result2)) {
                result2.then(function(ret) {
                  _self.postMessage(ret);
                });
              } else {
                _self.postMessage(result2);
              }
            }
          }
          if (revoke && script.src.startsWith("data:") || script.src.startsWith("blob:")) {
            if (debug) console.log(prefix + "revoking " + script.src);
            URL.revokeObjectURL(script.src);
          }
        };
        iframe.contentDocument.body.appendChild(script);
        worker.addEventListener = function(type, listener) {
          if (handlers[type].indexOf(listener) === -1) {
            handlers[type].push(listener);
          }
        };
        worker.removeEventListener = function(type, listener) {
          handlers[type] = handlers[type].filter(function(it) {
            return it !== listener;
          });
        };
        worker.postMessage = function(data, transfer) {
          const evt = new MessageEvent(typeof data, { data });
          if (ready) {
            var messageHandlers = getMessageHandlers();
            if (messageHandlers.length > 0) {
              for (let h = 0; h < messageHandlers.length; h++) {
                try {
                  const handler = messageHandlers[h];
                  handler(evt, transfer);
                } catch (error) {
                  console.error(error);
                  if (worker.onerror) {
                    worker.onerror(error);
                  }
                }
              }
            } else if (cjs && (typeof _module.exports === "function" || typeof _module.exports.default === "function")) {
              const func = _module.exports.default || _module.exports;
              const result2 = func(data);
              if (isPromise(result2)) {
                result2.then(function(ret) {
                  _self.postMessage(ret);
                });
              } else {
                _self.postMessage(result2);
              }
            }
          } else {
            queue.push([evt, transfer]);
          }
        };
        worker.terminate = function() {
          iframe.parentNode.removeChild(iframe);
          if (blobURL) {
            if (debug) console.log("[frame-worker] revoking blob object url " + blobURL);
            try {
              URL.revokeObjectURL(blobURL);
            } catch (error) {
              console.log(error);
            }
          }
          if (onterminate) onterminate();
        };
      }
      createFrameWorker();
      return worker;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return FrameWorker;
      });
    }
    if (typeof module === "object" && module.exports) {
      module.exports = FrameWorker;
      module.exports.default = FrameWorker;
    }
  }
});

// node_modules/geotiff-tile-web-worker/lib/worker-string.prod.js
var require_worker_string_prod = __commonJS({
  "node_modules/geotiff-tile-web-worker/lib/worker-string.prod.js"(exports, module) {
    module.exports = { workerString: '!function(A,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e=t();for(var i in e)("object"==typeof exports?exports:A)[i]=e[i]}}(self,(()=>(()=>{var A={6068:A=>{"use strict";function t(A){const t=A.length,[e,i]=A[0];let s=e,a=e,n=i,o=i;for(let e=1;e<t;e++){const[t,i]=A[e];t<s?s=t:t>a&&(a=t),i<n?n=i:i>o&&(o=i)}return[s,n,a,o]}A.exports=t,A.exports.default=t},7437:A=>{"use strict";function t([A,t,e,i]){return[e-A,i-t]}A.exports=t,A.exports.default=t},5652:A=>{function t([A,t,e,i],{density:s=0}={density:0}){"number"==typeof s&&(s=[s,s]);const[a,n]=s,o=[],r=(e-A)/(a+1),l=(i-t)/(n+1);o.push([A,i]);for(let t=1;t<=n;t++)o.push([A,i-t*l]);o.push([A,t]);for(let e=1;e<=a;e++)o.push([A+e*r,t]);o.push([e,t]);for(let A=1;A<=n;A++)o.push([e,t+A*l]);o.push([e,i]);for(let A=1;A<=a;A++)o.push([e-A*r,i]);return o.push([A,i]),[o]}A.exports=t,A.exports.default=t},954:(A,t,e)=>{const i=e(6068),s=e(5652);function a(A,t,{async:e=!1,density:a}={}){const n=s(A,{density:a})[0].map((A=>t(A)));return e?Promise.all(n).then((A=>i(A))):i(n)}A.exports=a,A.exports.default=a},2944:A=>{"use strict";function t([A,t,e,i],s){const[a,n]="number"==typeof s?[s,s]:1===s.length?[s[0],s[0]]:s;return[A*a,t*n,e*a,i*n]}A.exports=t,A.exports.default=t},4812:(A,t,e)=>{const i=e(9121),s=e(2603),a=e(3107),n=e(1793),o=e(6601),r=e(3358),l=e(3077),h=e(4759);A.exports=function({debug_level:A=0,raster_bbox:t,raster_height:e,raster_width:g,pixel_height:c,pixel_width:f,ring:u,per_pixel:d,per_row_segment:I}){const[p,_,C,B]=t,w=[];for(let A=0;A<e;A++)w.push([]);o(u,((A,i)=>{const[a,n]=A,[o,r]=a,[l,h]=n,g=Math.sign(h-r),f=r===h,d=o===l,I=(h-r)/(l-o),p=r,_=Math.min(r,h),C=Math.max(r,h);let E,y,Q,m;if(o<l?([E,y]=a,[m,Q]=n):([E,y]=n,[m,Q]=a),void 0===E)throw Error("startLng is "+E);const k=Math.round((t[3]-.5*c-y)/c),x=Math.round((t[3]-.5*c-Q)/c);let M,b;k<x?(M=k,b=x):(M=x,b=k),M=s(M,0,e-1),b=s(b,0,e-1);for(let t=M;t<b+1;t++){const e=B-c*t-c/2,s=r===e,a=h===e,n=!a;let y,Q;if(f){if(p!==e)continue;y=E,Q=m}else if(d)e>=_&&e<=C&&(y=E,Q=m);else if(s)y=Q=o;else if(a)y=Q=l;else try{y=Q=o+(e-r)/I}catch(A){throw A}void 0!==y&&void 0!==Q&&(f||y>=E&&Q<=m&&e<=C&&e>=_)&&w[t].push({direction:g,index:i,edge:A,last_edge_in_ring:i===u.length-2,endsOnLine:a,endsOffLine:n,horizontal:f,startsOnLine:s,vertical:d,xmin:y,xmax:Q,imageLineY:e})}}));const E=f/2,y=h(p,f);w.forEach(((t,e)=>{if(t.length>0){const s=n(t).map(i),[o,h]=l(s,(A=>A.through));if(o.length%2==1)throw A>=1&&console.error("throughs:",JSON.stringify(o)),Error("throughs.length for "+e+" is odd with "+o.length);let c=h.map((A=>[A.xmin,A.xmax]));o.sort(((A,t)=>A.xmin-t.xmin));const f=a(o).map((A=>{const[t,e]=A;return[t.xmin,e.xmax]}));c=c.concat(f),c=r(c),c.forEach((A=>{const[t,i]=A;if(i-t<E)return;const[s,a]=y(A);if(s===a)return;if(s>g)return;if(a<=0)return;const n=Math.max(s,0),o=Math.min(a-1,g-1);if(I&&I({row:e,columns:[n,o]}),d)for(let A=n;A<=o;A++)d({row:e,column:A})}))}}))}},9509:(A,t,e)=>{const i=e(8631),s=e(808);A.exports=function({polygon:A,...t}){const[e,...a]=A.map((A=>s({ring:A,...t})));return e.map(((A,t)=>{const e=a.map((A=>A[t])).flat();return i(A,e)}))}},808:(A,t,e)=>{const i=e(4812),s=e(4233),a=e(9334),n=e(6208);A.exports=function({debug_level:A=0,raster_bbox:t,raster_height:e,raster_width:o,pixel_height:r,pixel_width:l,ring:h}){const[g,c,f,u]=t;null==r&&(r=(u-c)/e),null==l&&(l=(f-g)/o);const d=[];for(let A=0;A<e;A++)d.push([]);i({debug_level:A,raster_bbox:t,raster_height:e,raster_width:o,pixel_height:r,pixel_width:l,ring:h,per_row_segment:({row:A,columns:t})=>{d[A].push(t)}});for(let A=0;A<d.length;A++){const t=d[A];t&&(n(t),d[A]=a(t))}return A>=2&&s(d),d}},4253:(A,t,e)=>{const i=e(8068),s=e(9334),a=e(6208),n=e(9509);A.exports=function({geometry:A,raster_height:t,per_pixel:e,per_row_segment:o,...r}){polys=i(A);const l=polys.map((A=>n({polygon:A,raster_height:t,...r}))),h=new Array(t);for(let A=0;A<t;A++){const t=l.map((t=>t[A])).filter((A=>void 0!==A&&A.length>0)).flat();if(t.length>0){const e=a(t),i=s(e);h[A]=i}}return(o||e)&&h.forEach(((A,t)=>{A&&A.forEach(((A,i)=>{if(o&&o({row:t,columns:A}),e){const[i,s]=A;for(let A=i;A<=s;A++)e({row:t,column:A})}}))})),{rows:h}}},9121:A=>{A.exports=function(A){try{let t,e,i;const s=A.length,a=A[0];if(1===s)t=!0,e=a.xmin,i=a.xmax;else{const n=A[s-1];t=a.direction===n.direction,e=Math.min(a.xmin,n.xmin),i=Math.max(a.xmax,n.xmax)}if(void 0===e||void 0===i||void 0===t||isNaN(e)||isNaN(i))throw Error("categorizeIntersection failed with xmin",e,"and xmax",i);return{xmin:e,xmax:i,through:t}}catch(t){throw console.error("[categorizeIntersection] segments:",A),console.error("[categorizeIntersection]",t),t}}},4233:A=>{A.exports=function(A){A.forEach(((A,t)=>{for(let e=0;e<A.length;e++){const i=A[e],[s,a]=i;s>a&&console.warn("[dufour-peyton-intersection] uh oh, encountered invalid range",i,"at row index",t,"with ranges",A);for(let i=e+1;i<A.length;i++)i[0]<=a&&console.warn("[dufour-peyton-intersection] encountered range problem on row index",t,":",A)}}))}},2603:A=>{A.exports=function(A,t,e){return A<t?t:A>e?e:A}},1793:(A,t,e)=>{const i=e(841);A.exports=function(A,t,e=!1){try{const t=i(A,(A=>A.endsOffLine));if(t.length>=2){const A=t[0],e=A[0],i=t[t.length-1],s=i[i.length-1];s.last_edge_in_ring&&0===e.index&&s.endsOnLine&&(t[0]=t.pop().concat(A))}return t}catch(A){console.error("[clusterLineSegments]",A)}}},841:A=>{A.exports=function(A,t){try{const e=A.length,i=[];let s=[];for(let a=0;a<e;a++){const e=A[a];s.push(e),t(e)&&(i.push(s),s=[])}return s.length>0&&i.push(s),i}catch(A){console.error("[cluster]:",A)}}},3107:A=>{A.exports=function(A){const t=[],e=A.length;for(let i=0;i<e;i+=2)t.push([A[i],A[i+1]]);return t}},6601:A=>{A.exports=function(A,t){for(let e=1;e<A.length;e++){t([A[e-1],A[e]],e-1)}}},6697:(A,t,e)=>{const i=e(3642);A.exports=function A(t,e){if("FeatureCollection"===t.type)t.features.forEach((t=>A(t,e)));else if("GeometryCollection"===t.type)t.geometries.forEach((t=>A(t,e)));else if("Feature"===t.type)A(t.geometry,e);else if("Polygon"===t.type)A(t.coordinates,e);else if("MultiPolygon"===t.type)t.coordinates.forEach((A=>{e(A)}));else if(Array.isArray(t)){const A=i(t);4===A?t.forEach((A=>{e(A)})):3===A?e(t):2===A&&e([t])}}},8068:(A,t,e)=>{const i=e(6697);A.exports=function(A){const t=[];return i(A,(A=>t.push(A))),t}},7210:(A,t,e)=>{var i;const s=e(9121),a=e(2603),n=e(841),o=e(1793),r=e(4253),l=e(4812),h=e(3107),g=e(6601),c=e(6697),f=e(3358),u=e(9334),d=e(3077),I=e(4759),p=e(7107),_=e(1165),C=e(8631),B=e(247),w=e(9278),E={calculate:r,calculateCore:l,carveHoles:C,categorizeIntersection:s,clamp:a,cluster:n,clusterLineSegments:o,couple:h,eachPair:g,eachPolygon:c,mergeRanges:f,mergeConsecutiveRanges:u,partition:d,prepareSnap:I,rangeContains:p,rangeCut:_,rangeOverlap:B,rangeSort:e(6208),roundDown:w};void 0===(i=(()=>E).call(t,e,t,A))||(A.exports=i),A.exports=E,"object"==typeof self&&(self.dufour_peyton_intersection=E),"object"==typeof window&&(window.dufour_peyton_intersection=E)},3077:A=>{A.exports=function(A,t){const e=[],i=[],s=A.length;for(let a=0;a<s;a++){const s=A[a];t(s)?e.push(s):i.push(s)}return[e,i]}},4759:(A,t,e)=>{const i=e(9278);A.exports=function(A,t){return([e,s])=>(-0===(e=i((e-A)/t))&&(e=0),-0===(s=Math.round((s-A)/t))&&(s=0),[e,s])}},6643:A=>{A.exports=function(A,t){return Math.sign(A[0]-t[0])||Math.sign(A[1]-t[1])}},7107:A=>{A.exports=function(A,t){return t[0]>=A[0]&&t[1]<=A[1]}},1165:(A,t,e)=>{const i=e(247);A.exports=function(A,t){if(!Array.isArray(A))throw new Error("[cut] range is not an array: "+JSON.stringify(A));if(void 0===t)return[A];if(!Array.isArray(t))throw new Error("[cut] hole is not an array:"+JSON.stringify(t));if(!i(A,t))return[A];const e=[];return A[0]<t[0]&&e.push([A[0],t[0]-1]),A[1]>t[1]&&e.push([t[1]+1,A[1]]),e}},9334:A=>{A.exports=function(A){const t=A.length;if(0===t)return[];const e=A[0];let i=e[1];const s=[e];for(let e=1;e<t;e++){const t=A[e],[a,n]=t;a<=i+1?s[s.length-1][1]=Math.max(i,n):s.push(t),i=n}return s}},3358:A=>{A.exports=function(A){const t=A.length;if(t>0){const e=A[0];let i=e[1];const s=[e];for(let e=1;e<t;e++){const t=A[e],[a,n]=t;a<=i?s[s.length-1][1]=n:s.push(t),i=n}return s}}},8631:(A,t,e)=>{const i=e(1165);A.exports=function(A,t){let e=A;return t.forEach((A=>{e=e.map((t=>i(t,A))).flat()})),e}},247:A=>{A.exports=function(A,t){if(!Array.isArray(A))throw new Error("[overlaps] a is not an array");if(!Array.isArray(t))throw new Error("[overlaps] b is not an array");return A[0]<=t[1]&&t[0]<=A[1]}},6208:(A,t,e)=>{const i=e(6643);A.exports=function(A){return A.sort(i)}},9278:A=>{A.exports=function(A){return-1*Math.round(-1*A)}},9035:(A,t,e)=>{const i=e(1003);function s(A,{debug:t=!1,no_data:e,theoretical_max:s}={debug:!1,no_data:void 0,theoretical_max:void 0}){if(t&&console.log("[fast-max] starting with numbers:",A.slice(0,10)),!A.length)throw t&&console.error("[fast-max] Instead of an array of numbers, you passed in",A),new Error("[fast-max] You didn\'t pass in an array of numbers");if(0===A.length)throw new Error("[fast-max] You passed in an empty array");let a;!1===Array.isArray(e)&&(e="number"==typeof e?[e]:[]);const n=A.length;t&&console.log("[fast-max] constructor:",A.constructor.name),null==s&&(s=i(A.constructor.name)),t&&console.log("[fast-max] theoretical maximunm is",s);for(let i=0;i<n;i++){const o=A[i];if("number"==typeof o&&o==o&&-1===e.indexOf(o)&&((void 0===a||o>a)&&(a=o),"number"==typeof s&&o>=s)){t&&console.log("[fast-max] found maximum value of "+o+" at index "+i+" of "+n),a=o;break}}return t&&console.log("[fast-max] returning",a),a}A.exports=s,A.exports.default=s,"object"==typeof self&&(self.fastMax=s),"object"==typeof window&&(window.fastMax=s)},9928:(A,t,e)=>{const i=e(7033);function s(A,{debug:t=!1,no_data:e,theoretical_min:s}={debug:!1,no_data:void 0,theoretical_min:void 0}){if(t&&console.log("[fast-min] starting with numbers:",A.slice(0,10)),!A.length)throw t&&console.error("[fast-min] Instead of an array of numbers, you passed in",A),new Error("[fast-min] You didn\'t pass in an array of numbers");if(0===A.length)throw new Error("[fast-min] You passed in an empty array");let a;!1===Array.isArray(e)&&(e="number"==typeof e?[e]:[]);const n=A.length;t&&console.log("[fast-min] constructor:",A.constructor.name),null==s&&(s=i(A.constructor.name)),t&&console.log("[fast-min] theoretical minimunm is",s);for(let i=0;i<n;i++){const o=A[i];if("number"==typeof o&&o==o&&-1===e.indexOf(o)&&((void 0===a||o<a)&&(a=o),"number"==typeof s&&o<=s)){t&&console.log("[fast-min] found minimum value of "+o+" at index "+i+" of "+n),a=o;break}}return t&&console.log("[fast-min] returning",a),a}A.exports=s,A.exports.default=s,"object"==typeof self&&(self.fastMin=s),"object"==typeof window&&(window.fastMin=s)},4899:(A,t,e)=>{var i;const s=e(3499),a=e(5179);function n(A){const t=a(A);return{forward:function(t){return s(A,t)},inverse:function(A,{floor:e=!1,round:i=!1}={floor:!1,round:!1}){let a=s(t,A);return i&&(a=a.map((A=>Math.round(A)))),e&&(a=a.map((A=>Math.floor(A)))),a}}}void 0===(i=function(){return n}.call(t,e,t,A))||(A.exports=i),A.exports=n,A.exports.default=n},3499:(A,t,e)=>{var i;function s(A,t){const[e,i,s,a,n,o]=A,[r,l]=t;return[e+i*r+s*l,a+n*r+o*l]}void 0===(i=function(){return s}.call(t,e,t,A))||(A.exports=i),A.exports=s,A.exports.default=s},5179:(A,t,e)=>{var i;function s(A){const[t,e,i,s,a,n]=A,o=e*n-i*a,r=-1*o;return[(i*s-t*n)/o,n/o,i/r,(e*s-t*a)/r,a/r,e/o]}void 0===(i=function(){return s}.call(t,e,t,A))||(A.exports=i),A.exports=s,A.exports.default=s},8726:(A,t,e)=>{var i;function s(A,{debug:t=!1}={debug:!1}){const e=A.fileDirectory;if(e.ModelTransformation){const[A,t,i,s,a,n,o,r,l,h,g,c,f,u,d,I]=e.ModelTransformation;return[s,A,t,r,a,n]}if(e.ModelTiepoint&&!e.ModelPixelScale)t&&console.log("[geotiff-geotransform] missing ModelPixelScaleTag");else if(e.ModelPixelScale&&!e.ModelTiepoint)t&&console.log("[geotiff-geotransform] missing ModelTiepointTag");else if(e.ModelTiepoint&&e.ModelPixelScale){const[A,i,s,a,n,o]=e.ModelTiepoint;t&&(0!==A&&console.log("[geotiff-geotransform] unexpected i value in ModelTiepoint: "+A),0!==i&&console.log("[geotiff-geotransform] unexpected j value in ModelTiepoint: "+i),0!==s&&console.log("[geotiff-geotransform] unexpected k value in ModelTiepoint: "+s));const[r,l,h]=e.ModelPixelScale;return[a,r,0,n,0,-1*l]}}void 0===(i=function(){return s}.call(t,e,t,A))||(A.exports=i),A.exports=s,A.exports.default=s},6316:(A,t,e)=>{var i;const s=e(2137);function a(A){const t=s(A);if(void 0===typeof t)return;const e=Number(t);return isNaN(e)?void 0:e}void 0===(i=function(){return a}.call(t,e,t,A))||(A.exports=i),A.exports=a,A.exports.default=a,"object"==typeof window&&(window.getNoDataNumber=a),"object"==typeof self&&(self.getNoDataNumber=a)},2137:A=>{function t(A,t){if(A.fileDirectory&&(A=A.fileDirectory),A.GDAL_NODATA&&(A=A.GDAL_NODATA),"string"==typeof A)return t&&t.raw?A:(A=A.replace("\\0","").trim(),["-inf","-infinity"].includes(A)?"-Infinity":["+inf","inf","+infinity","infinity"].includes(A)?"Infinity":A=A.replace(/^\\+/,""))}A.exports=t,A.exports.default=t,A.exports.getPreciseNoDataValue=t},7298:(A,t,e)=>{const{booleanIntersects:i,calc:s,intersect:a,polygon:n}=e(7882),o=e(7210),r=e(9035),l=e(9928),h=e(4899),g=e(3642),c=e(1003),f=e(7033),u=e(9436).calculate,d=e(2247),I=e(4254),{turbocharge:p}=e(5605),_=e(546),C=e(1185),B=e(883),w=(A,t,e)=>A<t?t:A>e?e:A,E=A=>null==A||A!=A,y=(A,t)=>{const e=Math.round(A*t);return[e,e/A,A/e]},Q=A=>new Array(A).fill(0).map(((A,t)=>t)),m=(A,t)=>{let e=0,i=0;return((A,t,e)=>{const i=A.length;if(t)for(let s=0;s<i;s++){const i=A[s];-1===t.indexOf(i)&&e(i)}else for(let t=0;t<i;t++)e(A[t])})(A,t,(A=>{i++,e+=A})),0===i?void 0:e/i},k=(A,t)=>{if(0===A.length)return;const e={};if(t)for(let i=0;i<A.length;i++){const s=A[i];"number"==typeof s&&s==s&&-1===t.indexOf(s)&&(s in e?e[s].count++:e[s]={n:s,count:1})}else for(let t=0;t<A.length;t++){const i=A[t];i in e?e[i].count++:e[i]={n:i,count:1}}const i=Object.values(e),s=i.sort(((A,t)=>Math.sign(t.count-A.count)))[0].count;return i.filter((A=>A.count===s)).map((A=>A.n))},x=function({debug_level:A=0,in_data:t,in_bbox:e,in_geotransform:x,in_layout:M="[band][row,column]",in_srs:b,in_height:D,in_pixel_depth:v,in_pixel_height:S,in_pixel_width:G,in_width:N,in_no_data:R,out_array_types:F,out_bands:L,out_data:U,out_pixel_depth:O,out_pixel_height:P,out_pixel_width:T,out_bbox:H=null,out_bbox_in_srs:J,out_layout:q,out_resolution:z=[1,1],out_srs:j,out_width:K=256,out_height:Y=256,out_no_data:V=null,method:W="median",read_bands:X,row_start:Z=0,row_end:$,expr:AA,round:tA=!1,theoretical_min:eA,theoretical_max:iA,inverse:sA,forward:aA,cutline:nA,cutline_bbox:oA,cutline_srs:rA,cutline_forward:lA,cutline_strategy:hA="outside",turbo:gA=!1,insert_pixel:cA,insert_sample:fA,insert_null_strategy:uA="skip",skip_no_data_strategy:dA,cache_process:IA=!1}){A>=1&&console.log("[geowarp] starting");const pA=A>=1?performance.now():0;if(isNaN(Y))throw new Error("[geowarp] out_height is NaN");if(isNaN(K))throw new Error("[geowarp] out_width is NaN");let _A=0;const[CA,BA,wA]=y(Y,z[1]),[EA,yA,QA]=y(K,z[0]);A>=1&&console.log("[geowarp] scaled size:",[EA,CA]),A>=1&&console.log("[geowarp] resolution:",[yA,BA]),A>=1&&console.log("[geowarp] scale:",[QA,wA]);const mA=b===j;let kA,xA,MA;if(A>=1&&console.log("[geowarp] input and output srs are the same:",mA),A>=1&&console.log("[geowarp] skip_no_data_strategy:",dA),sA??=arguments[0].reproject,cA??=arguments[0].insert,!mA){if(!e)throw new Error("[geowarp] can\'t reproject without in_bbox");if(!H){if(!aA)throw new Error("[geowarp] must specify out_bbox or forward");H=kA=MA=d(e,aA,{density:100})}}if(!mA&&"function"!=typeof sA)throw new Error("[geowarp] you must specify a reproject function");if(!D)throw new Error("[geowarp] you must provide in_height");if(!N)throw new Error("[geowarp] you must provide in_width");if(q||(q=M),null==v)if(M.startsWith("[band]"))v=t.length;else{const A=g(t);1===A?v=t.length/D/N:2===A?v=t[0].length:3===A&&(v=t[0][0].length)}var bA;A>=1&&console.log("[geowarp] number of bands in source data:",v),X||(AA?X=Q(v):L?(bA=L,X=Array.from(new Set(bA)).sort(((A,t)=>t-A))):X=Q(v)),L??=X,tA&&"number"==typeof V&&(V=Math.round(V)),!1===Array.isArray(R)&&(R="in_no_data"in arguments[0]?[R]:[]);const DA=R[0];let vA,SA;if(AA)vA=tA?({pixel:A})=>_(AA({pixel:A})).then((A=>A.map((A=>Math.round(A))))):AA;else{const A=L.map((A=>X.indexOf(A)));vA=tA?({pixel:t})=>A.map((A=>{const e=t[A];return E(e)||R.includes(e)?V:Math.round(e)})):({pixel:t})=>A.map((A=>{const e=t[A];return E(e)||R.includes(e)?V:e}))}IA&&([vA,SA]=((A,t=(A=>A.toString()))=>{let e={};return[i=>e[t(i)]??=A(i),()=>e={}]})(vA,(({pixel:A})=>A.toString()))),A>=1&&console.log("[geowarp] read_bands:",X),A>=1&&console.log("[geowarp] out_height:",Y),A>=1&&console.log("[geowarp] out_width:",K),mA&&e&&!H&&(H=e);const[GA,NA,RA,FA]=e;S??=(FA-NA)/D,G??=(RA-GA)/N,A>=1&&console.log("[geowarp] pixel height of source data:",S),A>=1&&console.log("[geowarp] pixel width of source data:",G),x??=[GA,G,0,FA,0,-1*S];const{forward:LA,inverse:UA}=h(x),OA=mA?UA:A=>UA(lt(A)),[PA,TA,HA,JA]=H;A>=1&&console.log("[geowarp] out_xmin:",PA),A>=1&&console.log("[geowarp] out_ymin:",TA),A>=1&&console.log("[geowarp] out_xmax:",HA),A>=1&&console.log("[geowarp] out_ymax:",JA),P??=(JA-TA)/Y,T??=(HA-PA)/K,A>=1&&console.log("[geowarp] out_pixel_height:",P),A>=1&&console.log("[geowarp] out_pixel_width:",T);const qA=P*wA,zA=T*QA;A>=1&&console.log("[geowarp] out_sample_height:",qA),A>=1&&console.log("[geowarp] out_sample_width:",zA);const jA=qA/2,KA=zA/2,YA=mA?LA:A=>rt(LA(A));if(void 0===eA||void 0===iA)try{const e=t[0].constructor.name;A>=1&&console.log("[geowarp] data_constructor:",e),eA??=f(e),iA??=c(e),A>=1&&console.log("[geowarp] theoretical_min:",eA),A>=1&&console.log("[geowarp] theoretical_max:",iA)}catch(A){console.error(A)}if(![void 0,null,""].includes(lA)&&"function"!=typeof lA)throw new Error("[geowarp] cutline_forward must be of type function not "+typeof nA);let VA=new Array(CA).fill(0).map((()=>[]));if(nA&&rA!==j){if(!lA)throw b===rA&&(lA=aA),new Error("[geowarp] must specify cutline_forward when cutline_srs and out_srs differ");let t;lA&&oA&&(t=p({bbox:oA,debug_level:A,quiet:!0,reproject:lA,threshold:[KA,jA]})?.reproject),nA=I(nA,{reproject:t||lA})}const WA=EA-1,XA=[0,WA],ZA=[XA];if(nA){o.calculate({raster_bbox:H,raster_height:CA,raster_width:EA,geometry:nA}).rows.forEach(((A,t)=>{VA[t]=A})),"inside"===hA&&(VA=VA.map((A=>0===A.length?ZA:C({segments:A,min:0,max:WA,debug:!1}))))}else for(let A=0;A<CA;A++)VA[A].push(XA);const $A={band:v,row:D,column:N},At=B.prepareSelect({data:t,layout:M,sizes:$A}),tt=({row:A,column:t})=>X.map((e=>At({point:{band:e,row:A,column:t}}).value)),et=(({select:A,width:t,height:e},[i,s])=>{const a={},n=t/i,o=e/s,r=new Array(s).fill(null).map(((A,t)=>Math.floor(t*o))),l=new Array(i).fill(null).map(((A,t)=>Math.floor(t*n)));return r.forEach((t=>{l.forEach((e=>{const i=A({row:t,column:e});i in a?a[i]++:a[i]=1}))})),Object.entries(a).sort((([A,t],[e,i])=>Math.sign(i-t)))})({select:tt,width:N,height:D},[10,10]),{hits:it,total:st}=et.reduce(((A,[t,e])=>(A.total+=e,A.hits+=e-1,A)),{hits:0,total:0});if(null==IA&&(IA=it/st>=.85),"function"!=typeof cA){let t;const e=({row:A,column:e,pixel:i})=>{i.forEach(((i,s)=>{t({point:{band:s,row:A,column:e},value:i})}))};let i=({pixel:s,...a})=>{try{O??=s.length,A>=1&&console.log("[geowarp] out_pixel_depth:",O);const n={band:O,row:Y,column:K};A>=1&&console.log("[geowarp] out_sizes:",n),U??=B.prepareData({fill:V,layout:q,sizes:n,arrayTypes:F}).data,A>=1&&console.log("[geowarp] out_data:",typeof U),t=B.prepareUpdate({data:U,layout:q,sizes:n}),A>=1&&console.log("[geowarp] prepared update function"),i=e,e({pixel:s,...a})}catch(A){console.error("first call to insert_pixel_sync failed:",A)}};cA=({pixel:A,...t})=>{_A++,_(A).then((A=>{i({pixel:A,...t}),_A--}))}}"function"!=typeof fA&&(fA=1===yA&&1===BA?A=>cA(A):({row:A,column:t,pixel:e,...i})=>{const[s,a,n,o]=(([A,t],[e,i])=>[Math.round(A*e),Math.round(t*i),Math.round((A+1)*e),Math.round((t+1)*i)])([t,A],[QA,wA]);for(let A=a;A<o;A++)for(let t=s;t<n;t++)cA({row:A,column:t,pixel:e,...i})}),$??=CA,A>=1&&console.log("[geowarp] method:",W);let at,nt,ot=([A,t])=>{const e=[PA+A*zA+KA,JA-t*qA-jA],i=mA?e:sA(e);return UA(i).map((A=>Math.floor(A)))};if(gA){const t=p({bbox:[0,0,K,Y],debug_level:A,quiet:!0,reproject:ot,threshold:[.5,.5]})?.reproject;t&&(ot=A=>t(A).map((A=>Math.round(A))))}gA&&(aA&&(J??=d(H,sA,{density:100}),xA??=a(e,J),at=p({bbox:xA,debug_level:A,quiet:!0,reproject:aA,threshold:[KA,jA]})),sA&&(kA??=d(e,aA,{density:100}),MA??=a(H,kA),nt=p({bbox:MA,debug_level:A,quiet:!0,reproject:sA,threshold:[KA,jA]}))),A>=2&&(at&&console.log("[geowarp] turbocharged forward"),nt&&console.log("[geowarp] turbocharged inverse"));const rt=at?.reproject||aA,lt=nt?.reproject||sA;let ht,gt,ct,ft;"near-vectorize"!==W&&"nearest-vectorize"!==W||(A>=2&&console.log(\'[geowarp] choosing between "near" and "vectorize" for best speed\'),J??=mA?H:d(H,sA,{density:100}),ht=(J[3]-J[1])/CA,gt=(J[2]-J[0])/EA,ct=ht/S,ft=gt/G,A>=2&&console.log("[geowarp] pixel_height_ratio:",ct),A>=2&&console.log("[geowarp] pixel_width_ratio:",ft),ct<.1&&ft<.1?(W="vectorize",A>=1&&console.log(\'[geowarp] selected "vectorize" method as it is likely to be faster\')):(W="near",A>=1&&console.log(\'[geowarp] selected "near" method as it is likely to be faster\')));const ut="any"===dA?A=>A.some((A=>E(A)||R.includes(A))):"all"===dA?A=>A.every((A=>E(A)||R.includes(A))):()=>!1;if("vectorize"===W){J??=mA?H:d(H,sA,{density:100});let[t,r,l,h]=J;ht??=(h-r)/CA,S<ht&&A>=1&&console.warn(`[geowarp] normalized height of sample area of ${ht} is larger than input pixel height of ${S}`),gt??=(l-t)/K,G<gt&&A>=1&&console.warn(`[geowarp] normalized width of sample area of ${gt} is larger than input pixel width of ${G}`);const g=nA&&I(nA,{reproject:sA}),c=nA&&s(g);if((!nA||i(e,c))&&([t,r,l,h]=nA&&"inside"!==hA?a(J,c):J,A>=1&&console.log("[geowarp] [left, bottom, right, top]:",[t,r,l,h]),t<RA&&r<FA&&l>GA||h<NA)){const t=d(J,UA);if(A>=1&&console.log("[geowarp] out_bbox_in_input_image_coords:",t),i(t,[0,0,N,D])){const[A,e,i,s]=t.map((A=>Math.floor(A))),a=w(e,0,D-1),r=w(s,0,D-1),l=w(A,0,N-1),h=w(i,0,N-1);for(let A=a;A<=r;A++)for(let t=l;t<=h;t++){const e=X.map((e=>At({point:{band:e,row:A,column:t}}).value));if(ut(e))continue;const i=n([t,A,t+1,A+1]),s={debug:!1,raster_bbox:H,raster_height:CA,raster_width:EA,geometry:I(i,{reproject:YA})},a=vA({pixel:e});null===a&&"insert"!==uA||(s.per_pixel=nA?({row:A,column:t})=>{VA[A].some((([A,e])=>t>=A&&t<=e))&&fA({raw:e,pixel:a,row:A,column:t})}:({row:A,column:t})=>{fA({raw:e,pixel:a,row:A,column:t})},o.calculate(s))}}}}else if("near"===W||"nearest"===W){const A=Math.min($,CA);for(let t=Z;t<A;t++){const A=VA[t];for(let e=0;e<A.length;e++){const[i,s]=A[e];for(let A=i;A<=s;A++){const[e,i]=ot([A,t]);let s=[];if(s=e<0||i<0||e>=N||i>=D?new Array(X.length).fill(DA):tt({row:i,column:e}),ut(s))continue;const a=vA({pixel:s});null===a&&"insert"!==uA||fA({row:t,column:A,pixel:a,raw:s,x_in_raster_pixels:e,y_in_raster_pixels:i})}}}}else if("bilinear"===W){const A=Math.min($,CA);let t=JA+jA-Z*qA;for(let e=Z;e<A;e++){t-=qA;const A=VA[e];for(let i=0;i<A.length;i++){const[s,a]=A[i];for(let A=s;A<=a;A++){const i=[PA+A*zA+KA,t],s=mA?i:lt(i),[a,n]=UA(s),o=Math.floor(a),r=Math.ceil(a),l=Math.floor(n),h=Math.ceil(n),g=r-a,c=a-o,f=l===h?.5:h-n,u=l===h?.5:n-l,d=o<0||o>=N,I=r<0||r>=N,p=l<0||l>=D,_=h<0||h>=D,C=p||d,B=p||I,w=_||d,y=_||I,Q=new Array;for(let A=0;A<X.length;A++){const t=X[A],e=C?DA:At({point:{band:t,row:l,column:o}}).value,i=B?DA:At({point:{band:t,row:l,column:r}}).value,s=w?DA:At({point:{band:t,row:h,column:o}}).value,a=y?DA:At({point:{band:t,row:h,column:r}}).value;let n;const d=E(e)||R.includes(e),I=E(i)||R.includes(i);let p;d&&I||(n=d?i:I||e===i?e:g*e+c*i);const _=E(s)||R.includes(s),m=E(a)||R.includes(a);let k;_&&m||(p=_?a:m||s===a?s:g*s+c*a),k=void 0===n&&void 0===p?DA:void 0===n?p:void 0===p?n:u*p+f*n,Q.push(k)}if(ut(Q))continue;const m=vA({pixel:Q});null===m&&"insert"!==uA||fA({row:e,column:A,pixel:m,raw:Q})}}}}else{let e,i,s,a,n;if("function"==typeof W)e=A=>W({values:A});else if("max"===W)e=A=>r(A,{theoretical_max:iA});else if("mean"===W)e=A=>m(A);else if("median"===W)e=A=>u(A);else if("min"===W)e=A=>l(A,{theoretical_min:eA});else if("mode"===W)e=A=>k(A)[0];else if("mode-max"===W)e=A=>r(k(A));else if("mode-mean"===W)e=A=>m(k(A));else if("mode-median"===W)e=A=>u(k(A));else{if("mode-min"!==W)throw new Error(`[geowarp] unknown method "${W}"`);e=A=>l(k(A))}a=JA-Z*Z;const o=Math.min($,CA);for(let r=Z;r<o;r++){i=a,a=i-qA;const o=VA[r];for(let l=0;l<o.length;l++){const[h,g]=o[l];n=PA+zA*h;for(let o=h;o<=g;o++){s=n,n=s+zA;const[l,h,g,c]=d([s,a,n,i],OA);A>=4&&console.log("[geowarp] leftInRasterPixels:",l),A>=4&&console.log("[geowarp] rightInRasterPixels:",g),A>=4&&console.log("[geowarp] topInRasterPixels:",h),A>=4&&console.log("[geowarp] bottomInRasterPixels:",c);let f=Math.round(l),u=Math.round(g),I=Math.round(h),p=Math.round(c);if(f===u){const A=(g+l)/2;f=Math.floor(A),u=f+1}if(I===p){const A=(h+c)/2;I=Math.floor(A),p=I+1}let _=[];if(f>=N||u<0||p<0||I>=D)_=new Array(X.length).fill(DA);else{f=Math.max(0,f),u=Math.min(u,N),I=Math.max(0,I),p=Math.min(p,D);for(let A=0;A<X.length;A++){const i=X[A],{data:s}=B.clip({data:t,flat:!0,layout:M,sizes:$A,rect:{band:[i,i],row:[I,Math.max(I,p-1)],column:[f,Math.max(f,u-1)]}}),a=s.filter((A=>"number"==typeof A&&A==A&&-1===R.indexOf(A)));0===a.length?_.push(DA):_.push(e(a))}}if(ut(_))continue;const C=vA({pixel:_});null===C&&"insert"!==uA||fA({row:r,column:o,pixel:C,raw:_})}}}}const dt=()=>(A>=1&&console.log("[geowarp] took "+(performance.now()-pA).toFixed(0)+"ms"),{data:U,out_bands:L,out_height:Y,out_layout:q,out_pixel_depth:O,out_pixel_height:P,out_pixel_width:T,out_sample_height:qA,out_sample_width:zA,out_width:K,read_bands:X});return _A>0?new Promise((A=>{const t=setInterval((()=>{0===_A&&(clearInterval(t),A(dt()))}),5)})):dt()};A.exports=x,A.exports.default=x,"object"==typeof window&&(window.geowarp=x),"object"==typeof self&&(self.geowarp=x)},2469:A=>{"use strict";function t([A,t,e,i]){return(e-A)*(i-t)}A.exports=t,A.exports.default=t},2084:A=>{"use strict";function t(A,{nan_strategy:t="throw"}={nan_strategy:"throw"}){const e=A.length;let i=null,s=null,a=null,n=null;for(let o=0;o<e;o++){const[e,r]=A[o];if(isNaN(e)){if("throw"===t)throw new Error("[bbox-fns/bbox-array] encountered point with a NaN value: ["+e+", "+r+"]")}else null===i?(i=e,s=e):e<i?i=e:e>s&&(s=e);if(isNaN(r)){if("throw"===t)throw new Error("[bbox-fns/bbox-array] encountered point with a NaN value: ["+e+", "+r+"]")}else null===a?(a=r,n=r):r<a?a=r:r>n&&(n=r)}return[i,a,s,n]}A.exports=t,A.exports.default=t},5552:A=>{"use strict";function t([A,t]){return[A,t,A,t]}A.exports=t,A.exports.default=t},4470:A=>{"use strict";function t([A,t,e,i]){return[e-A,i-t]}A.exports=t,A.exports.default=t},7563:A=>{function t([A,t,e,i],[s,a],{exclusive:n=!1}={exclusive:!1}){return n?a<i&&a>t&&s<e&&s>A:a>=t&&a<=i&&s>=A&&s<=e}A.exports=t,A.exports.default=t},1268:A=>{function t([A,t,e,i],[s,a,n,o],{exclusive:r=!1}={exclusive:!1}){if(r){return s>A&&n<e&&(a>t&&o<i)}return s>=A&&n<=e&&(a>=t&&o<=i)}A.exports=t,A.exports.default=t},8103:A=>{function t([A,t,e,i],[s,a,n,o]){return s<=e&&n>=A&&(a<=i&&o>=t)}A.exports=t,A.exports.default=t},4138:A=>{const t=["right -> down -> left -> up","down -> left -> up -> right","left -> up -> right -> down","up -> right -> down -> left","down -> right -> up -> left","right -> up -> left -> down","up -> left -> down -> right","left -> down -> right -> up"];function e(A,{debug:e=0}={debug:0}){if(!Array.isArray(A))return e&&console.log("[bbox-fns/booleanRectangle] coords is not an array"),!1;if(1===A.length&&(A=A[0]),1===A.length&&(A=A[0]),!A.every((A=>Array.isArray(A)&&A.every((A=>"number"==typeof A)))))return e&&console.log("[bbox-fns/booleanRectangle] invalid points"),!1;if(JSON.stringify(A[0])!==JSON.stringify(A[A.length-1]))return e&&console.log("[bbox-fns/booleanRectangle] first and last coordinates not equal"),!1;let i=[];for(let t=1;t<A.length;t++){const[s,a]=A[t-1],[n,o]=A[t],r=s===n,l=a===o;if(r===l)return e&&console.log("[bbox-fns/booleanRectangle] invalid angle"),!1;let h;if(r?h=o>a?"up":"down":l&&(h=n>s?"right":"left"),h!==i[i.length-1]){if(4===i.length)return e&&console.log("[bbox-fns/booleanRectangle] more than 4 turns"),!1;i.push(h)}}return i=i.join(" -> "),e&&console.log("[bbox-fns/booleanRectangle] order: "+i),-1!==t.indexOf(i)||(e&&console.log("[bbox-fns/booleanRectangle] invalid order"),!1)}A.exports=e,A.exports.default=e},7921:(A,t,e)=>{const i=e(6437);function s(A){const t=[];for(let e=0;e<A.length;e++){const i=A[e];for(let A=0;A<i.length;A++)t.push(i[A])}return t}function a(A){if(A.geometry&&(A=A.geometry),A.coordinates&&(A=A.coordinates),A.paths&&(A=A.paths),A.points&&(A=A.points),A.rings&&(A=A.rings),Array.isArray(A.features))return i(s(A.features.map(a)));if(Array.isArray(A.geometries))return i(s(A.geometries.map(a)));if(Array.isArray(A)&&Array.isArray(A[0])&&Array.isArray(A[0][0]))return i(s(A.map(a)));if(Array.isArray(A)&&Array.isArray(A[0])&&"number"==typeof A[0][0]){const[t,e]=A[0];let i=t,s=e,a=t,n=e;return A.forEach((([A,t])=>{A<i&&(i=A),A>a&&(a=A),t<s&&(s=t),t>n&&(n=t)})),[[i,s,a,n]]}if(Array.isArray(A)&&(2===A.length||3===A.length)&&"number"==typeof A[0]){const[t,e]=A;return[[t,e,t,e]]}if("number"==typeof A.x&&"number"==typeof A.y){const{x:t,y:e}=A;return[[t,e,t,e]]}return["xmin","xmax","ymin","ymax"].every((t=>"number"==typeof A[t]))?[[A.xmin,A.ymin,A.xmax,A.ymax]]:void 0}A.exports=a,A.exports.default=a},8534:(A,t,e)=>{const i=e(1236);function s(A){if(A.geometry&&(A=A.geometry),A.coordinates&&(A=A.coordinates),A.paths&&(A=A.paths),A.points&&(A=A.points),A.rings&&(A=A.rings),Array.isArray(A.features))return i(A.features.map(s));if(Array.isArray(A.geometries))return i(A.geometries.map(s));if(Array.isArray(A)&&Array.isArray(A[0])&&Array.isArray(A[0][0]))return i(A.map(s));if(Array.isArray(A)&&Array.isArray(A[0])&&"number"==typeof A[0][0]){const[t,e]=A[0];let i=t,s=e,a=t,n=e;return A.forEach((([A,t])=>{A<i&&(i=A),A>a&&(a=A),t<s&&(s=t),t>n&&(n=t)})),[i,s,a,n]}if(Array.isArray(A)&&(2===A.length||3===A.length)&&"number"==typeof A[0]){const[t,e]=A;return[t,e,t,e]}if("number"==typeof A.x&&"number"==typeof A.y){const{x:t,y:e}=A;return[t,e,t,e]}return["xmin","xmax","ymin","ymax"].every((t=>"number"==typeof A[t]))?[A.xmin,A.ymin,A.xmax,A.ymax]:void 0}A.exports=s,A.exports.default=s},6437:A=>{function t(A){const t=[];for(let e=0;e<A.length;e++){const i=A[e],s=JSON.stringify(i);-1===t.indexOf(s)&&t.push(s)}return t.map((A=>JSON.parse(A)))}A.exports=t,A.exports.default=t},1672:A=>{function t([A,t,e,i],{density:s=0}={density:0}){"number"==typeof s&&(s=[s,s]);const[a,n]=s,o=[],r=(e-A)/(a+1),l=(i-t)/(n+1);o.push([A,i]);for(let t=1;t<=n;t++)o.push([A,i-t*l]);o.push([A,t]);for(let e=1;e<=a;e++)o.push([A+e*r,t]);o.push([e,t]);for(let A=1;A<=n;A++)o.push([e,t+A*l]);o.push([e,i]);for(let A=1;A<=a;A++)o.push([e-A*r,i]);return o.push([A,i]),[o]}A.exports=t,A.exports.default=t},614:A=>{"use strict";function t([A,t,e,i],s){"number"==typeof s?s=[s,s]:void 0===s&&(s=[2,2]);const[a,n]=s,o=[],r=(e-A)/a,l=(i-t)/n;for(let s=0;s<n;s++){const h=t+s*l,g=s===n.length-1?i:h+l;for(let t=0;t<a;t++){const i=A+t*r,s=t===a.length-1?e:i+r;o.push([i,h,s,g])}}return o}A.exports=t,A.exports.default=t},7882:(A,t,e)=>{var i;const s=e(2469),a=e(2084),n=e(5552),o=e(4470),r=e(1268),l=e(7563),h=e(8103),g=e(4138),c=e(8534),f=e(7921),u=e(1672),d=e(614),I=e(8421),p=e(1236),_=e(6774),C=e(6434),B=e(2619),w=e(2271),E=e(2247),y=e(813),Q=e(7800),m=e(1284),k={bboxArea:s,bboxArray:a,bboxPoint:n,bboxSize:o,booleanContains:r,booleanContainsPoint:l,booleanIntersects:h,booleanRectangle:g,calc:c,calcAll:f,densePolygon:u,grid:d,intersect:I,merge:p,polygon:_,preciseDensePolygon:C,preciseDivide:B,preciseReproject:w,reproject:E,scale:y,shift:Q,split:e(5176),validate:e(8120),preciseValidate:e(2507),sort:m,union:e(8983),unwrap:e(3906)};void 0===(i=function(){return k}.call(t,e,t,A))||(A.exports=i),A.exports=k,"object"==typeof window&&(window.bboxfns=k),"object"==typeof self&&(self.bboxfns=k)},8421:(A,t,e)=>{const i=e(8103);function s(A,t){const[e,s,a,n]=A,[o,r,l,h]=t;return i(A,t)?[Math.max(e,o),Math.max(s,r),Math.min(a,l),Math.min(n,h)]:null}A.exports=s,A.exports.default=s},1236:A=>{"use strict";function t(A){if(0===A.length)return;if(1===A.length)return A[0];let[t,e,i,s]=A[0];for(let a=1;a<A.length;a++){const n=A[a];n[0]<t&&(t=n[0]),n[1]<e&&(e=n[1]),n[2]>i&&(i=n[2]),n[3]>s&&(s=n[3])}return[t,e,i,s]}A.exports=t,A.exports.default=t},6774:A=>{function t([A,t,e,i]){return[[[A,i],[A,t],[e,t],[e,i],[A,i]]]}A.exports=t,A.exports.default=t},1136:(A,t,e)=>{"use strict";const i=e(6130);function s(A){const t=A.length,[e,s]=A[0];let a=e,n=e,o=s,r=s;for(let e=1;e<t;e++){const[t,s]=A[e];"<"===i(t,a)?a=t:">"===i(t,n)&&(n=t),"<"===i(s,o)?o=s:">"===i(s,r)&&(r=s)}return[a,o,n,r]}A.exports=s,A.exports.default=s},6434:(A,t,e)=>{const i=e(5245),s=e(9235),a=e(1031),n=e(8655);function o(A,{density:t=0}={density:0}){A=A.map((A=>A.toString()));let[e,o,r,l]=A;"number"!=typeof t&&"string"!=typeof t||(t=[t,t]),t=t.map((A=>A.toString()));const[h,g]=t,c=n(l,o),f=n(r,e),u=[],d=s(f,i(h,"1")),I=s(c,i(g,"1"));u.push([e,l]);for(let A=1;A<=g;A++)u.push([e,n(l,a(A.toString(),I))]);u.push([e,o]);for(let A=1;A<=h;A++)u.push([i(e,a(A.toString(),d)),o]);u.push([r,o]);for(let A=1;A<=g;A++)u.push([r,i(o,a(A.toString(),I))]);u.push([r,l]);for(let A=1;A<=h;A++)u.push([n(r,a(A.toString(),d)),l]);return u.push([e,l]),[u]}A.exports=o,A.exports.default=o},2619:(A,t,e)=>{"use strict";const i=e(9235);function s([A,t,e,s],a,{ellipsis:n=!1,max_decimal_digits:o=100}={}){const[r,l]="string"==typeof a||"number"==typeof a?[a,a]:1===a.length?[a[0].toString(),a[0].toString()]:a,h={ellipsis:n,max_decimal_digits:o},g=r.toString(),c=l.toString();return[i(A.toString(),g,h),i(t.toString(),c,h),i(e.toString(),g,h),i(s.toString(),c,h)]}A.exports=s,A.exports.default=s},2271:(A,t,e)=>{const i=e(1136),s=e(6434);function a(A,t,{async:e=!1,density:a}={}){const n=s(A,{density:a})[0].map((A=>t(A)));return e?Promise.all(n).then((A=>i(A))):i(n)}A.exports=a,A.exports.default=a},2507:(A,t,e)=>{const i=e(6130);function s(A){if(!Array.isArray(A))return!1;if(4!==A.length)return!1;if(A.some((A=>"string"!=typeof A)))return!1;const[t,e,s,a]=A;return">"!==i(t,s)&&">"!==i(e,a)}A.exports=s,A.exports.default=s},2247:(A,t,e)=>{const i=e(2084),s=e(1672);function a(A,t,{async:e=!1,density:a,nan_strategy:n="throw"}={}){const o=s(A,{density:a})[0].map((A=>t(A)));return e?Promise.all(o).then((A=>i(A,{nan_strategy:n}))):i(o,{nan_strategy:n})}A.exports=a,A.exports.default=a},813:A=>{"use strict";function t([A,t,e,i],s){const[a,n]="number"==typeof s?[s,s]:1===s.length?[s[0],s[0]]:s;return[A*a,t*n,e*a,i*n]}A.exports=t,A.exports.default=t},7800:A=>{function t([A,t,e,i],s){const a=Array.isArray(s)&&s.length>=1?s[0]:"number"==typeof s.x?s.x:0,n=Array.isArray(s)&&s.length>=2?s[1]:"number"==typeof s.y?s.y:0;return[A+a,t+n,e+a,i+n]}A.exports=t,A.exports.default=t},1284:A=>{function t(A){return A.sort(((A,t)=>{const[e,i,s,a]=A,[n,o,r,l]=t;return e<n?-1:e>n||i<o?1:i>o?-1:0}))}A.exports=t,A.exports.default=t},5176:A=>{"use strict";function t(A,t){const[e,i,s,a]=A;if(!t)throw new Error("[bbox-fns/split.js] missing breakpoints");const n=t.x||[],o=t.y||[],r=[e].concat(n.filter((A=>A>e&&A<s))).concat([s]),l=[i].concat(o.filter((A=>A>i&&A<a))).concat([a]),h=[];for(let A=1;A<r.length;A++){const t=r[A-1],e=r[A];for(let A=1;A<l.length;A++){const i=l[A-1],s=l[A];h.push([t,i,e,s])}}return h}A.exports=t,A.exports.default=t},8983:(A,t,e)=>{"use strict";const i=e(8103),s=e(1236);function a(A){if(0===A.length)return[];if(1===A.length)return[A[0]];let t=[A[0]];for(let e=1;e<A.length;e++){const a=A[e],n=t.filter((A=>i(a,A))),o=s(n.concat([a])),r=t.filter((A=>!n.includes(A)));t=[o].concat(r)}return t}A.exports=a,A.exports.default=a},3906:(A,t,e)=>{const i=e(7800),s=e(1284),a=e(5176),n=e(8983);function o(A,t){const[e,o,r,l]=t,h=r-e,g=l-o;let c=a(A,{x:[e-h,e,r,r+h],y:[o-g,o,l,l+g]});return c=c.map((A=>{const[t,s,a,n]=A;return i(A,{x:Math.ceil((e-t)/h)*h,y:Math.ceil((o-s)/g)*g})})),c=n(c),c=s(c),c}A.exports=o,A.exports.default=o},8120:A=>{"use strict";function t(A){if(!Array.isArray(A))return!1;if(4!==A.length)return!1;if(A.some((A=>"number"!=typeof A)))return!1;const[t,e,i,s]=A;return!(t>i)&&!(e>s)}A.exports=t,A.exports.default=t},3642:A=>{A.exports=function(A){const t=A=>Array.isArray(A)||A instanceof Int8Array||A instanceof Uint8Array||A instanceof Uint8ClampedArray||A instanceof Int16Array||A instanceof Uint16Array||A instanceof Int32Array||A instanceof Uint32Array||A instanceof Float32Array||A instanceof Float64Array||A instanceof BigInt64Array||A instanceof BigUint64Array;let e=0,i=A;for(;t(i);)e++,i=i[0];return e}},4091:(A,t,e)=>{var i,s=Object.defineProperty,a=(A,t)=>s(A,"name",{value:t,configurable:!0}),n=(A,t)=>()=>(t||A((t={exports:{}}).exports,t),t.exports),o=n(((s,n)=>{var o={char2bits:{0:"110100",1:"110101",2:"110110",3:"110111",4:"111000",5:"111001",6:"111010",7:"111011",8:"111100",9:"111101",A:"000000",Q:"010000",g:"100000",w:"110000",B:"000001",R:"010001",h:"100001",x:"110001",C:"000010",S:"010010",i:"100010",y:"110010",D:"000011",T:"010011",j:"100011",z:"110011",E:"000100",U:"010100",k:"100100",F:"000101",V:"010101",l:"100101",G:"000110",W:"010110",m:"100110",H:"000111",X:"010111",n:"100111",I:"001000",Y:"011000",o:"101000",J:"001001",Z:"011001",p:"101001",K:"001010",a:"011010",q:"101010",L:"001011",b:"011011",r:"101011",M:"001100",c:"011100",s:"101100",N:"001101",d:"011101",t:"101101",O:"001110",e:"011110",u:"101110","+":"111110",P:"001111",f:"011111",v:"101111","/":"111111"}};o.toArrayBuffer=a((function(A){var t=o.char2bits,e=0;for(let t=A.length;t>=0;t--)"="===A[t]&&e++;for(var i=A.length-e,s=Math.floor(.75*i),a=new Uint8Array(s),n="",r=0;r<i;r++){var l=A[r];if("="===l)break;(n+=t[l]).length>=8&&(a[Math.floor(.75*r)]=parseInt(n.substring(0,8),2),n=n.substring(8))}return a.buffer}),"toArrayBuffer"),o.toBase64String=a((function(A){if(!o.bits2char){o.bits2char={};for(let A in o.char2bits)o.bits2char[o.char2bits[A]]=A}for(var t=o.bits2char,e=new Uint8Array(A),i="",s="",a=0;a<e.length;a++){for(var n=e[a].toString(2);n.length<8;)n="0"+n;for(s+=n;s.length>=6;)i+=t[s.substring(0,6)],s=s.substring(6)}if(s.length>0){for(;s.length<6;)s+="0";i+=t[s]}for(;i.length%4!=0;)i+="=";return i}),"toBase64String"),void 0===(i=function(){return o}.call(t,e,t,A))||(A.exports=i),"object"==typeof n&&(n.exports=o),"object"==typeof window&&(window.b64ab=o),"object"==typeof self&&(self.b64ab=o)})),r=n(((A,t)=>{function e(A,t,e){let i=new RegExp(t).exec(A.slice(e));return i?e+i.index:-1}a(e,"indexOfMatch"),t.exports=e,t.exports.default=e})),l=n(((A,t)=>{function e(A,t,e){let i=new RegExp(t).exec(A.slice(e));return i?e+i.index+i[0].length-1:-1}a(e,"indexOfMatchEnd"),t.exports=e,t.exports.default=e})),h=n(((A,t)=>{function e(A,t){let e=new RegExp(t,"g"),i=A.match(e);return i?i.length:0}a(e,"countSubstring"),t.exports=e,t.exports.default=e})),g=n(((A,t)=>{var e=r(),i=l(),s=h();function n(A,t,a){let n=a&&a.debug||!1,o=!(a&&!1===typeof a.nested),r=a&&a.startIndex||0;n&&console.log("[xml-utils] starting findTagByName with",t," and ",a);let l=e(A,`<${t}[ \\n>/]`,r);if(n&&console.log("[xml-utils] start:",l),-1===l)return;let h=A.slice(l+t.length),g=i(h,"^[^<]*[ /]>",0),c=-1!==g&&"/"===h[g-1];if(n&&console.log("[xml-utils] selfClosing:",c),!1===c)if(o){let A=0,e=1,a=0;for(;-1!==(g=i(h,"[ /]"+t+">",A));){let i=h.substring(A,g+1);if(e+=s(i,"<"+t+"[ \\n\\t>]"),a+=s(i,"</"+t+">"),a>=e)break;A=g}}else g=i(h,"[ /]"+t+">",0);let f=l+t.length+g+1;if(n&&console.log("[xml-utils] end:",f),-1===f)return;let u,d=A.slice(l,f);return u=c?null:d.slice(d.indexOf(">")+1,d.lastIndexOf("<")),{inner:u,outer:d,start:l,end:f}}a(n,"findTagByName"),t.exports=n,t.exports.default=n})),c=n(((A,t)=>{var e=g();function i(A,t,i){let s,a=[],n=i&&i.debug||!1,o=!i||"boolean"!=typeof i.nested||i.nested,r=i&&i.startIndex||0;for(;s=e(A,t,{debug:n,startIndex:r});)r=o?s.start+1+t.length:s.end,a.push(s);return n&&console.log("findTagsByName found",a.length,"tags"),a}a(i,"findTagsByName"),t.exports=i,t.exports.default=i})),f=n(((A,t)=>{var e=c();function i(A,t,i){let s=i&&i.debug||!1,a=i&&i.returnOnFirst||!1,n=e(A,t.shift(),{debug:s,nested:!1});s&&console.log("first tags are:",n);for(let A=0;A<t.length;A++){let i=t[A];s&&console.log("tagName:",i);let o=[];for(let r=0;r<n.length;r++){let l=n[r],h=e(l.outer,i,{debug:s,startIndex:1});if(s&&console.log("subTags.length:",h.length),h.length>0){if(h.forEach((A=>{A.start+=l.start,A.end+=l.start})),a&&A===t.length-1)return[h[0]];o=o.concat(h)}}n=o}return n}a(i,"findTagsByPath"),t.exports=i,t.exports.default=i})),u=n(((A,t)=>{var e=f();function i(A,t,i){let s=i&&i.debug||!1,a=e(A,t,{debug:s,returnOnFirst:!0});if(Array.isArray(a)&&1===a.length)return a[0]}a(i,"findTagByPath"),t.exports=i,t.exports.default=i})),d=n(((A,t)=>{function e(A,t,e){let i=e&&e.debug||!1;i&&console.log("[xml-utils] getting "+t+" in "+A);let s="object"==typeof A?A.outer:A,a=s.slice(0,s.indexOf(">")+1),n=[\'"\',"\'"];for(let A=0;A<n.length;A++){let e=n[A],s=t+"\\\\="+e+"([^"+e+"]*)"+e;i&&console.log("[xml-utils] pattern:",s);let o=new RegExp(s).exec(a);if(i&&console.log("[xml-utils] match:",o),o)return o[1]}}a(e,"getAttribute"),t.exports=e,t.exports.default=e})),I=n(((A,t)=>{"use strict";var e=1,i=/\\s/,s=/[A-Za-z]/,n=/[A-Za-z84_]/,o=/[,\\]]/,r=/[\\d\\.E\\-\\+]/;function l(A){if("string"!=typeof A)throw new Error("not a string");this.text=A.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=e}function h(A){return new l(A).output()}function g(A,t,e){Array.isArray(t)&&(e.unshift(t),t=null);var i=t?{}:A,s=e.reduce((function(A,t){return c(t,A),A}),i);t&&(A[t]=s)}function c(A,t){if(Array.isArray(A)){var e=A.shift();if("PARAMETER"===e&&(e=A.shift()),1===A.length)return Array.isArray(A[0])?(t[e]={},void c(A[0],t[e])):void(t[e]=A[0]);if(A.length)if("TOWGS84"!==e){if("AXIS"===e)return e in t||(t[e]=[]),void t[e].push(A);var i;switch(Array.isArray(e)||(t[e]={}),e){case"UNIT":case"PRIMEM":case"VERT_DATUM":return t[e]={name:A[0].toLowerCase(),convert:A[1]},void(3===A.length&&c(A[2],t[e]));case"SPHEROID":case"ELLIPSOID":return t[e]={name:A[0],a:A[1],rf:A[2]},void(4===A.length&&c(A[3],t[e]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return A[0]=["name",A[0]],void g(t,e,A);default:for(i=-1;++i<A.length;)if(!Array.isArray(A[i]))return c(A,t[e]);return g(t,e,A)}}else t[e]=A;else t[e]=!0}else t[A]=!0}a(l,"Parser"),l.prototype.readCharicter=function(){var A=this.text[this.place++];if(4!==this.state)for(;i.test(A);){if(this.place>=this.text.length)return;A=this.text[this.place++]}switch(this.state){case e:return this.neutral(A);case 2:return this.keyword(A);case 4:return this.quoted(A);case 5:return this.afterquote(A);case 3:return this.number(A);case-1:return}},l.prototype.afterquote=function(A){if(\'"\'===A)return this.word+=\'"\',void(this.state=4);if(o.test(A))return this.word=this.word.trim(),void this.afterItem(A);throw new Error("havn\'t handled \\""+A+\'" in afterquote yet, index \'+this.place)},l.prototype.afterItem=function(A){return","===A?(null!==this.word&&this.currentObject.push(this.word),this.word=null,void(this.state=e)):"]"===A?(this.level--,null!==this.word&&(this.currentObject.push(this.word),this.word=null),this.state=e,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=-1))):void 0},l.prototype.number=function(A){if(!r.test(A)){if(o.test(A))return this.word=parseFloat(this.word),void this.afterItem(A);throw new Error("havn\'t handled \\""+A+\'" in number yet, index \'+this.place)}this.word+=A},l.prototype.quoted=function(A){\'"\'!==A?this.word+=A:this.state=5},l.prototype.keyword=function(A){if(n.test(A))this.word+=A;else{if("["===A){var t=[];return t.push(this.word),this.level++,null===this.root?this.root=t:this.currentObject.push(t),this.stack.push(this.currentObject),this.currentObject=t,void(this.state=e)}if(!o.test(A))throw new Error("havn\'t handled \\""+A+\'" in keyword yet, index \'+this.place);this.afterItem(A)}},l.prototype.neutral=function(A){if(s.test(A))return this.word=A,void(this.state=2);if(\'"\'===A)return this.word="",void(this.state=4);if(r.test(A))return this.word=A,void(this.state=3);if(!o.test(A))throw new Error("havn\'t handled \\""+A+\'" in neutral yet, index \'+this.place);this.afterItem(A)},l.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(-1===this.state)return this.root;throw new Error(\'unable to parse string "\'+this.text+\'". State is \'+this.state)},a(h,"parseString"),a(g,"mapit"),a(c,"sExpr");var f=.017453292519943295;function u(A,t){var e=t[0],i=t[1];!(e in A)&&i in A&&(A[e]=A[i],3===t.length&&(A[e]=t[2](A[e])))}function d(A){return A*f}function I(A){if("GEOGCS"===A.type?A.projName="longlat":"LOCAL_CS"===A.type?(A.projName="identity",A.local=!0):"object"==typeof A.PROJECTION?A.projName=Object.keys(A.PROJECTION)[0]:A.projName=A.PROJECTION,A.AXIS){for(var t="",e=0,i=A.AXIS.length;e<i;++e){var s=[A.AXIS[e][0].toLowerCase(),A.AXIS[e][1].toLowerCase()];-1!==s[0].indexOf("north")||("y"===s[0]||"lat"===s[0])&&"north"===s[1]?t+="n":-1!==s[0].indexOf("south")||("y"===s[0]||"lat"===s[0])&&"south"===s[1]?t+="s":-1!==s[0].indexOf("east")||("x"===s[0]||"lon"===s[0])&&"east"===s[1]?t+="e":(-1!==s[0].indexOf("west")||("x"===s[0]||"lon"===s[0])&&"west"===s[1])&&(t+="w")}2===t.length&&(t+="u"),3===t.length&&(A.axis=t)}A.UNIT&&(A.units=A.UNIT.name.toLowerCase(),"metre"===A.units&&(A.units="meter"),A.UNIT.convert&&("GEOGCS"===A.type?A.DATUM&&A.DATUM.SPHEROID&&(A.to_meter=A.UNIT.convert*A.DATUM.SPHEROID.a):A.to_meter=A.UNIT.convert));var n=A.GEOGCS;function o(t){return t*(A.to_meter||1)}"GEOGCS"===A.type&&(n=A),n&&(n.DATUM?A.datumCode=n.DATUM.name.toLowerCase():A.datumCode=n.name.toLowerCase(),"d_"===A.datumCode.slice(0,2)&&(A.datumCode=A.datumCode.slice(2)),("new_zealand_geodetic_datum_1949"===A.datumCode||"new_zealand_1949"===A.datumCode)&&(A.datumCode="nzgd49"),("wgs_1984"===A.datumCode||"world_geodetic_system_1984"===A.datumCode)&&("Mercator_Auxiliary_Sphere"===A.PROJECTION&&(A.sphere=!0),A.datumCode="wgs84"),"_ferro"===A.datumCode.slice(-6)&&(A.datumCode=A.datumCode.slice(0,-6)),"_jakarta"===A.datumCode.slice(-8)&&(A.datumCode=A.datumCode.slice(0,-8)),~A.datumCode.indexOf("belge")&&(A.datumCode="rnb72"),n.DATUM&&n.DATUM.SPHEROID&&(A.ellps=n.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\\_18/,"clrk"),"international"===A.ellps.toLowerCase().slice(0,13)&&(A.ellps="intl"),A.a=n.DATUM.SPHEROID.a,A.rf=parseFloat(n.DATUM.SPHEROID.rf,10)),n.DATUM&&n.DATUM.TOWGS84&&(A.datum_params=n.DATUM.TOWGS84),~A.datumCode.indexOf("osgb_1936")&&(A.datumCode="osgb36"),~A.datumCode.indexOf("osni_1952")&&(A.datumCode="osni52"),(~A.datumCode.indexOf("tm65")||~A.datumCode.indexOf("geodetic_datum_of_1965"))&&(A.datumCode="ire65"),"ch1903+"===A.datumCode&&(A.datumCode="ch1903"),~A.datumCode.indexOf("israel")&&(A.datumCode="isr93")),A.b&&!isFinite(A.b)&&(A.b=A.a),a(o,"toMeter");var r=a((function(t){return u(A,t)}),"renamer");[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_1","Latitude of 1st standard parallel"],["standard_parallel_2","Standard_Parallel_2"],["standard_parallel_2","Latitude of 2nd standard parallel"],["false_easting","False_Easting"],["false_easting","False easting"],["false-easting","Easting at false origin"],["false_northing","False_Northing"],["false_northing","False northing"],["false_northing","Northing at false origin"],["central_meridian","Central_Meridian"],["central_meridian","Longitude of natural origin"],["central_meridian","Longitude of false origin"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["latitude_of_origin","Latitude of natural origin"],["latitude_of_origin","Latitude of false origin"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",d],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",d],["x0","false_easting",o],["y0","false_northing",o],["long0","central_meridian",d],["lat0","latitude_of_origin",d],["lat0","standard_parallel_1",d],["lat1","standard_parallel_1",d],["lat2","standard_parallel_2",d],["azimuth","Azimuth"],["alpha","azimuth",d],["srsCode","name"]].forEach(r),!A.long0&&A.longc&&("Albers_Conic_Equal_Area"===A.projName||"Lambert_Azimuthal_Equal_Area"===A.projName)&&(A.long0=A.longc),A.lat_ts||!A.lat1||"Stereographic_South_Pole"!==A.projName&&"Polar Stereographic (variant B)"!==A.projName?!A.lat_ts&&A.lat0&&"Polar_Stereographic"===A.projName&&(A.lat_ts=A.lat0,A.lat0=d(A.lat0>0?90:-90)):(A.lat0=d(A.lat1>0?90:-90),A.lat_ts=A.lat1)}a(u,"rename"),a(d,"d2r"),a(I,"cleanWKT");var p=a((function(A){var t=h(A),e=t.shift(),i=t.shift();t.unshift(["name",i]),t.unshift(["type",e]);var s={};return c(t,s),I(s),s}),"index");t.exports=p})),p=n(((s,n)=>{function o(A){if(!A)return;let t=/PROJCS\\[\\"([^"]+)\\"/.exec(A);if(!t)return;let e=t[1];if(e.match(/^WGS_1984_UTM_Zone_\\d{1,2}(N|S)$/)){let A=e.split("_").pop(),t=A.substring(0,A.length-1),i="N"==A.substring(A.length-1)?6:7;return Number.parseInt("32"+i+t)}if(e.match(/^NAD_1983_UTM_Zone_\\d{1,2}N$/)){let A=e.split("_").pop(),t=A.substring(0,A.length-1);return Number.parseInt("269"+t)}}a(o,"getCodeFromEsriWKT"),void 0===(i=function(){return o}.call(t,e,t,A))||(A.exports=i),"object"==typeof n&&(n.exports=o,n.exports.default=o)})),_=n(((s,n)=>{function o(A){if(A.includes("+proj=utm")&&A.includes("+zone=")){let t=A.split(" "),e=t.find((A=>A.startsWith("+zone="))).split("=")[1],i=A.includes("+south"),s=t.find((A=>A.startsWith("+ellps=")));if(s&&(s=s.split("=")[1]),"GRS80"===s&&!1===i)return Number.parseInt("269"+e);{let A=i?"7":"6";return Number.parseInt("32"+A+e)}}}a(o,"getCodeFromProjString"),void 0===(i=function(){return o}.call(t,e,t,A))||(A.exports=i),"object"==typeof n&&(n.exports=o,n.exports.default=o)})),C=n(((A,t)=>{function e(A){let t,e,i=0;if(0===(A=(A=(A=(A=A.trim()).replace(/\\n/g," ")).replace(/\\t/g," ")).replace(/ +/g," ")).length)return i;let s=A.length;for(t=0;t<s;t++)e=A.charCodeAt(t),i=(i<<5)-i+e,i|=0;return i}a(e,"hash32"),t.exports=e,t.exports.default=e})),B=n(((s,n)=>{function o(A,{keywords:t}={}){let e=Object.keys(A).filter((A=>!/\\d+/.test(A)));if(!t){t=[];let e={};if(Array.isArray(A)){A.forEach((A=>{if(Array.isArray(A)&&A.length>=2&&"string"==typeof A[1]){let t=A[0];e[t]||(e[t]=0),e[t]++}}));for(let A in e)e[A]>0&&t.push(A)}}return e.forEach((t=>{A[t]=o(A[t])})),t.forEach((t=>{let e=[],i=[];A.forEach(((A,s)=>{Array.isArray(A)&&A[0]===t&&(e.push(s),i.push(A))})),i.sort(((A,t)=>(A=A[1].toString())<(t=t[1].toString())?-1:A>t?1:0)),i.forEach(((t,i)=>{A[e[i]]=t}))})),A}function r(A,t){let e,i="object"==typeof t&&!0===t.raw,s="object"==typeof t&&!0===t.debug;s&&console.log("[wktcrs] parse starting with\\n",A),A=(A=A.replace(/[A-Z][A-Z\\d_]+\\[/gi,(function(A){return\'["\'+A.substr(0,A.length-1)+\'",\'}))).replace(/, ?([A-Z][A-Z\\d_]+[,\\]])/gi,(function(A,t){let e=t.substr(0,t.length-1);return\',"\'+(i?"raw:":"")+e+\'"\'+t[t.length-1]})),"object"==typeof t&&!0===t.raw&&(A=A.replace(/, {0,2}(-?[\\.\\d]+)(?=,|\\])/g,(function(A,t){return\',"\'+(i?"raw:":"")+t+\'"\'}))),s&&console.log("[wktcrs] json\'d wkt: \'"+A+"\'");try{e=JSON.parse(A)}catch(t){throw console.error(`[wktcrs] failed to parse \'${A}\'`),t}function n(A,t){let e=A[0];A.forEach((function(t){Array.isArray(t)&&n(t,A)}));let i="MULTIPLE_"+e;return i in t?t[i].push(A):e in t?(t[i]=[t[e],A],delete t[e]):t[e]=A,t}s&&console.log("[wktcrs] json parsed: \'"+A+"\'"),a(n,"process");let o=n(e,[e]);return s&&console.log("[wktcrs] parse returning",o),{data:o}}function l(A,t){Array.isArray(A)&&1==A.length&&Array.isArray(A[0])&&(A=A[0]);let[e,...i]=A;return{data:e+"["+i.map((A=>{if(Array.isArray(A))return l(A,t).data;if("number"==typeof A)return A.toString();if("string"==typeof A)return A.startsWith("raw:")?A.replace("raw:",""):\'"\'+A+\'"\';throw new Error(\'[wktcrs] unexpected attribute "\'+A+\'"\')})).join(",")+"]"}}a(o,"sort"),a(r,"parse"),a(l,"unparse");var h={parse:r,unparse:l,sort:o};void 0===(i=function(){return h}.call(t,e,t,A))||(A.exports=i),"object"==typeof n&&(n.exports=h),"object"==typeof window&&(window.wktcrs=h),"object"==typeof self&&(self.wktcrs=h)})),w=n(((A,t)=>{var e=B();function i(A){let{data:t}=e.parse(A,{raw:!0});return e.sort(t),e.unparse(t,{raw:!0}).data}function s(A,{debug:t=!1}={debug:!1}){return A=i(A=(A=(A=(A=(A=(A=(A=(A=(A=(A=(A=(A=A.trim()).replace(/\\n/g," ")).replace(/\\t/g," ")).replace(/ +/g," ")).replace(/ /g,"_")).replace(\'GEOGCS["GCS_\',\'GEOGCS["\')).replace(\'DATUM["D_\',\'DATUM["\')).replace("Gauss_Kruger","GK")).replace(/\\.\\d{16,}/g,(A=>A.substr(0,16)))).replace(/\\d+\\.0[,"\'\\]]/g,(A=>A.substring(0,A.indexOf("."))+A.charAt(A.length-1)))).replace(/[_|"]1984[_|"]/g,(A=>A.charAt(0)+"84"+A.charAt(A.length-1)))).replace(/"[A-Za-z_\\d]+"/g,(A=>\'"\'+A.substring(1,A.length-1).toLowerCase()+\'"\'))),t&&console.log(\'[get-epsg-code] wkt after cleaning: "\'+A+\'"\'),A}a(i,"sort_wkt"),a(s,"normalize_wkt"),t.exports=s,t.exports.default=s})),E=n(((A,t)=>{var e=w();function i(A,{debug:t=!1}={debug:!1}){return e(A,{debug:t})}a(i,"normalize_esriwkt"),t.exports=i,t.exports.default=i})),y=n(((A,t)=>{function e(A,{debug:t=!1,remove_k1:e=!0,remove_no_defs:i=!0,remove_title:s=!0,remove_init:a=!0,remove_type:n=!0}={}){let o=(A=(A=A.trim()).replace(/ +/g," ")).split(/ ?\\+/g).filter((A=>""!==A.trim())).sort();return e&&(o=o.filter((A=>"k=1"!==A))),i&&(o=o.filter((A=>"no_defs"!==A))),n&&(o=o.filter((A=>!A.startsWith("type")))),a&&(o=o.filter((A=>!A.startsWith("init")))),s&&(o=o.filter((A=>!A.startsWith("title")))),A=o.map((A=>"+"+A)).join(" "),t&&console.log(\'normalized proj4 string\\nfrom "\'+arguments[0]+\'"\\nto "\'+A+\'"\'),A}a(e,"normalize_proj4"),t.exports=e,t.exports.default=e})),Q=n(((s,n)=>{var o=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS","PRIMEM","DATUM"];function r(A){if(!((A=A.trim()).startsWith("PROJCS[")||A.startsWith("PROJCRS[")||A.startsWith("GEOGCS[")||A.startsWith("GEOGCRS[")))return!1;for(let t=0;t<o.length;t++){let e=o[t];if(A.includes(e+"["))return!0}}a(r,"isWKT"),void 0===(i=function(){return r}.call(t,e,t,A))||(A.exports=i),"object"==typeof n&&(n.exports=r,n.exports.default=r),"object"==typeof self&&(self.isWKT=r),"object"==typeof window&&(window.isWKT=r)})),m=n(((A,t)=>{t.exports={FORMATS:{ESRI_WKT:"esriwkt",GEOSERVER:"geoserver",MAPFILE:"mapfile",MAPNIK:"mapnik",OGC_GML:"gml",OGC_XML:"xml",OGC_WKT:"wkt",POSTGIS:"postgis",PROJ_4:"proj4",PROJ_4_JS:"js",PROJJSON:"PROJJSON",WKT_2:"wkt2"}}})),k=n(((A,t)=>{var e=Q(),i=B(),{FORMATS:s}=m(),{ESRI_WKT:n,GEOSERVER:o,MAPFILE:r,MAPNIK:l,OGC_GML:h,OGC_XML:g,OGC_WKT:c,POSTGIS:f,PROJ_4:u,PROJ_4_JS:d,PROJJSON:I,WKT_2:p}=s;function _(A,{debug:t=!1}={debug:!1}){if(A.startsWith("{")&&A.includes("projjson"))return I;if(e(A)){let t=i.parse(A.toUpperCase()).data;return"AUTHORITY"in(t.PROJCS||t.PROJCRS||t.GEOGCS||t.GEOGCRS)?c:"ID"in t?p:n}return A.includes("gml:ProjectedCRS")||A.includes("gml:GeodeticCRS")||A.includes("gml:GeographicCRS")?A.includes("gml:srsID")?g:h:A.startsWith("+")&&A.includes("+proj=")?u:A.startsWith("proj4.defs(")?d:/^\\d{1,6}\\=(PROJCS|GEOGCS)/.test(A)?o:A.startsWith("PROJECTION")&&A.endsWith("END")?r:A.endsWith("</Map>")?l:A.startsWith("INSERT")?f:(t&&console.log(\'get-proj-type could not identify "\'+A+\'"\'),"SOMETHING ELSE")}a(_,"getProjType"),t.exports=_,t.exports.default=_})),x=n(((A,t)=>{function e(A,{debug:t=!1}={debug:!1}){let e=A.indexOf(":")+1,i=A.indexOf(\'"\',e+2),s=A.substring(e,i);if(t&&console.log(\'parseProj4JS str: "\'+s+\'"\'),s)return Number(s)}a(e,"parseProj4JS"),t.exports=e,t.exports.default=e})),M=n(((A,t)=>{t.exports={properties:{columns:["epsg_code","esriwkt","mapfile","proj4"],key:"epsg_code",dataType:"int32"},data:""}})),b=o(),D=u(),v=g(),S=d(),G=I(),N=p(),R=_(),F=C(),L=E(),U=y(),O=k(),P=x(),{FORMATS:T}=m(),H=M(),J=a((A=>A.default||A),"getDefault"),q=[];function z(A){let t=b.toArrayBuffer(H.data),e=new Int32Array(t);A&&console.log("arr:",e);let i=H.properties.columns.length,s=e.length/i;for(let A=0;A<s;A++){let t={};for(let s=0;s<i;s++)t[H.properties.columns[s]]=e[A*i+s];q.push(t)}return A&&console.log("[get-epsg-code] rows:",q),q}function j(A,t,e=!1){if(!H.properties.columns.includes(t))throw new Error("[get-epsg-code] "+t+" not supported");0===q.length&&z(e);let i=F(A);e&&console.log("[get-epsg-code] hashed:",i);let s=q.filter((A=>A[t]===i));return e&&console.log("[get-epsg-code] found:",s),s.map((A=>A.epsg_code))}a(z,"_load_rows"),a(j,"lookup");var{ESRI_WKT:K,GEOSERVER:Y,MAPFILE:V,MAPNIK:W,OGC_GML:X,OGC_XML:Z,OGC_WKT:$,POSTGIS:AA,PROJJSON:tA,PROJ_4:eA,PROJ_4_JS:iA,WKT_2:sA}=T;function aA(A,t){var e=!(!t||!t.debug)&&t.debug;"string"==typeof A&&(A=A.trim());let i=O(A,{debug:e});if(e&&console.log("dataType:",i),i===$){let t=J(G)(A);if(e&&console.log("parsed:",t),t.AUTHORITY){let A=t.AUTHORITY;return{type:i,codes:[Number(A.epsg||A.EPSG)]}}}else if(i===sA){let t=J(G)(A);if(e&&console.log("parsed:",t),"object"==typeof t.ID&&"number"==typeof t.ID.EPSG)return{type:i,codes:[t.ID.EPSG]}}else{if(i==K){let t=N(A);return t?{type:i,codes:[t]}:{type:i,codes:j(A=L(A,{debug:e}),K,e)}}if(i===X){let t=J(v)(A,"gml:identifier",{debug:e}).inner;return{type:i,codes:[Number(t.replace("urn:ogc:def:crs:EPSG::",""))]}}if(i===Z)return{type:i,codes:[Number(J(D)(A,["gml:srsID","gml:name"],{debug:e}).inner)]};if(i===eA)return(A=U(A,{debug:e})).startsWith("+")&&A.includes("+proj=utm")?{type:i,codes:[R(A)]}:{type:i,codes:j(A,eA,e)};if(i===iA){let t=P(A);return{type:i,codes:t?[t]:[]}}if(i===Y)return{type:i,codes:[Number(A.match(/^\\d{1,6}/)[0])]};if(i===V){if(A.includes("init=epsg:"))return{type:i,codes:[Number.parseInt(/("init\\=epsg:)(\\d{1,10})(")/.exec(A)[2])]};if(A.includes(\'"proj=utm"\')){let t=/("zone\\=)(\\d{1,2})(")/.exec(A)[2],e=A.includes(\'"south"\');if(A.includes("ellps=GRS80")&&!1===e)return{type:i,codes:[Number.parseInt("269"+t)]};{let A=e?"7":"6";return{type:i,codes:[Number.parseInt("32"+A+t)]}}}return{type:i,codes:j(A,V,e)}}if(i===W){let t=v(A,"Map");return{type:i,codes:aA(S(t.outer,"srs")).codes}}if(i===AA)return{type:i,codes:[Number(A.substring(A.indexOf("values (")+8,A.indexOf("EPSG")-3).trim())]};if(i===tA){let t=JSON.parse(A);if("object"==typeof t.id&&("EPSG"===t.id.authority||!("authority"in t.id))&&"number"==typeof t.id.code)return{type:i,codes:[t.id.code]}}}}function nA(A,t){let e=aA(A,t);if(e)return e.codes[0]}a(aA,"getEPSGCodes"),a(nA,"getEPSGCode"),typeof A.exports<"u"&&(A.exports=nA,A.exports.getEPSGCode=nA,A.exports.getEPSGCodes=aA,A.exports._load_rows=z),typeof window<"u"?(window.getEPSGCode=nA,window.getEPSGCodes=aA):typeof self<"u"&&(self.getEPSGCode=nA,self.getEPSGCodes=aA)},5876:A=>{function t(A){try{A[Symbol.iterator]=function(){return this}}catch(A){}}function e(A){A["@@iterator"]=function(){return this}}function i(A){const i={next:A};return t(i),e(i),i}function s(A){try{return A.constructor.name.endsWith("Array")}catch{return!1}}function a(A){try{return"function"==typeof A.next}catch{return!1}}function n(A){try{return"@@iterator"in A}catch{return!1}}function o(A){try{return Symbol.iterator in A.constructor.prototype}catch{return!1}}function r(A){try{return Symbol.iterator in A&&"function"==typeof A.next&&!1===A.propertyIsEnumerable("next")}catch{return!1}}function l(A){const t=A["@@iterator"];return a(t)?t:"function"==typeof t?t():void 0}function h(A){let t=0,e=A.length;return i((()=>t++<e?{value:A[t],done:!1}:{done:!0}))}function g(A){if(r(A))return A;if(o(A))return A[Symbol.iterator]();if(a(A))return i(A.next);if(n(A))return l(A);if("string"==typeof A||s(A))return h(A);throw"[iter-fun] unable to determine iterator"}A.exports={addSymbolIterator:t,addSymbolIteratorFallback:e,isIterator:r,isArray:s,hasNext:a,hasSymbolIterator:o,hasIterator:n,getIterator:l,createIterator:h,getOrCreateIterator:g,wrapNextFunction:i,zip:function(A){return A=A.map(g),i((function(){const t=A.map((A=>A.next()));return t.every((({done:A})=>A))?{done:!0}:{done:!1,value:t.map((({value:A})=>A))}}))}}},7197:(A,t)=>{var e,i,s,a,n,o,r,l,h,g,c,f,u;\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */i={defaultNoDataValue:-34027999387901484e22,decode:function(A,t){var e=(t=t||{}).encodedMaskData||null===t.encodedMaskData,r=o(A,t.inputOffset||0,e),l=null!==t.noDataValue?t.noDataValue:i.defaultNoDataValue,h=s(r,t.pixelType||Float32Array,t.encodedMaskData,l,t.returnMask),g={width:r.width,height:r.height,pixelData:h.resultPixels,minValue:h.minValue,maxValue:r.pixels.maxValue,noDataValue:l};return h.resultMask&&(g.maskData=h.resultMask),t.returnEncodedMask&&r.mask&&(g.encodedMaskData=r.mask.bitset?r.mask.bitset:null),t.returnFileInfo&&(g.fileInfo=a(r),t.computeUsedBitDepths&&(g.fileInfo.bitDepths=n(r))),g}},s=function(A,t,e,i,s){var a,n,o,l=0,h=A.pixels.numBlocksX,g=A.pixels.numBlocksY,c=Math.floor(A.width/h),f=Math.floor(A.height/g),u=2*A.maxZError,d=Number.MAX_VALUE;e=e||(A.mask?A.mask.bitset:null),n=new t(A.width*A.height),s&&e&&(o=new Uint8Array(A.width*A.height));for(var I,p,_=new Float32Array(c*f),C=0;C<=g;C++){var B=C!==g?f:A.height%g;if(0!==B)for(var w=0;w<=h;w++){var E=w!==h?c:A.width%h;if(0!==E){var y,Q,m,k,x=C*A.width*f+w*c,M=A.width-E,b=A.pixels.blocks[l];if(b.encoding<2?(0===b.encoding?y=b.rawData:(r(b.stuffedData,b.bitsPerPixel,b.numValidPixels,b.offset,u,_,A.pixels.maxValue),y=_),Q=0):m=2===b.encoding?0:b.offset,e)for(p=0;p<B;p++){for(7&x&&(k=e[x>>3],k<<=7&x),I=0;I<E;I++)7&x||(k=e[x>>3]),128&k?(o&&(o[x]=1),d=d>(a=b.encoding<2?y[Q++]:m)?a:d,n[x++]=a):(o&&(o[x]=0),n[x++]=i),k<<=1;x+=M}else if(b.encoding<2)for(p=0;p<B;p++){for(I=0;I<E;I++)d=d>(a=y[Q++])?a:d,n[x++]=a;x+=M}else for(d=d>m?m:d,p=0;p<B;p++){for(I=0;I<E;I++)n[x++]=m;x+=M}if(1===b.encoding&&Q!==b.numValidPixels)throw"Block and Mask do not match";l++}}}return{resultPixels:n,resultMask:o,minValue:d}},a=function(A){return{fileIdentifierString:A.fileIdentifierString,fileVersion:A.fileVersion,imageType:A.imageType,height:A.height,width:A.width,maxZError:A.maxZError,eofOffset:A.eofOffset,mask:A.mask?{numBlocksX:A.mask.numBlocksX,numBlocksY:A.mask.numBlocksY,numBytes:A.mask.numBytes,maxValue:A.mask.maxValue}:null,pixels:{numBlocksX:A.pixels.numBlocksX,numBlocksY:A.pixels.numBlocksY,numBytes:A.pixels.numBytes,maxValue:A.pixels.maxValue,noDataValue:A.noDataValue}}},n=function(A){for(var t=A.pixels.numBlocksX*A.pixels.numBlocksY,e={},i=0;i<t;i++){var s=A.pixels.blocks[i];0===s.encoding?e.float32=!0:1===s.encoding?e[s.bitsPerPixel]=!0:e[0]=!0}return Object.keys(e)},o=function(A,t,e){var i={},s=new Uint8Array(A,t,10);if(i.fileIdentifierString=String.fromCharCode.apply(null,s),"CntZImage"!==i.fileIdentifierString.trim())throw"Unexpected file identifier string: "+i.fileIdentifierString;t+=10;var a=new DataView(A,t,24);if(i.fileVersion=a.getInt32(0,!0),i.imageType=a.getInt32(4,!0),i.height=a.getUint32(8,!0),i.width=a.getUint32(12,!0),i.maxZError=a.getFloat64(16,!0),t+=24,!e)if(a=new DataView(A,t,16),i.mask={},i.mask.numBlocksY=a.getUint32(0,!0),i.mask.numBlocksX=a.getUint32(4,!0),i.mask.numBytes=a.getUint32(8,!0),i.mask.maxValue=a.getFloat32(12,!0),t+=16,i.mask.numBytes>0){var n=new Uint8Array(Math.ceil(i.width*i.height/8)),o=(a=new DataView(A,t,i.mask.numBytes)).getInt16(0,!0),r=2,l=0;do{if(o>0)for(;o--;)n[l++]=a.getUint8(r++);else{var h=a.getUint8(r++);for(o=-o;o--;)n[l++]=h}o=a.getInt16(r,!0),r+=2}while(r<i.mask.numBytes);if(-32768!==o||l<n.length)throw"Unexpected end of mask RLE encoding";i.mask.bitset=n,t+=i.mask.numBytes}else 0==(i.mask.numBytes|i.mask.numBlocksY|i.mask.maxValue)&&(i.mask.bitset=new Uint8Array(Math.ceil(i.width*i.height/8)));a=new DataView(A,t,16),i.pixels={},i.pixels.numBlocksY=a.getUint32(0,!0),i.pixels.numBlocksX=a.getUint32(4,!0),i.pixels.numBytes=a.getUint32(8,!0),i.pixels.maxValue=a.getFloat32(12,!0),t+=16;var g=i.pixels.numBlocksX,c=i.pixels.numBlocksY,f=g+(i.width%g>0?1:0),u=c+(i.height%c>0?1:0);i.pixels.blocks=new Array(f*u);for(var d=0,I=0;I<u;I++)for(var p=0;p<f;p++){var _=0,C=A.byteLength-t;a=new DataView(A,t,Math.min(10,C));var B={};i.pixels.blocks[d++]=B;var w=a.getUint8(0);if(_++,B.encoding=63&w,B.encoding>3)throw"Invalid block encoding ("+B.encoding+")";if(2!==B.encoding){if(0!==w&&2!==w){if(w>>=6,B.offsetType=w,2===w)B.offset=a.getInt8(1),_++;else if(1===w)B.offset=a.getInt16(1,!0),_+=2;else{if(0!==w)throw"Invalid block offset type";B.offset=a.getFloat32(1,!0),_+=4}if(1===B.encoding)if(w=a.getUint8(_),_++,B.bitsPerPixel=63&w,w>>=6,B.numValidPixelsType=w,2===w)B.numValidPixels=a.getUint8(_),_++;else if(1===w)B.numValidPixels=a.getUint16(_,!0),_+=2;else{if(0!==w)throw"Invalid valid pixel count type";B.numValidPixels=a.getUint32(_,!0),_+=4}}var E;if(t+=_,3!==B.encoding)if(0===B.encoding){var y=(i.pixels.numBytes-1)/4;if(y!==Math.floor(y))throw"uncompressed block has invalid length";E=new ArrayBuffer(4*y),new Uint8Array(E).set(new Uint8Array(A,t,4*y));var Q=new Float32Array(E);B.rawData=Q,t+=4*y}else if(1===B.encoding){var m=Math.ceil(B.numValidPixels*B.bitsPerPixel/8),k=Math.ceil(m/4);E=new ArrayBuffer(4*k),new Uint8Array(E).set(new Uint8Array(A,t,m)),B.stuffedData=new Uint32Array(E),t+=m}}else t++}return i.eofOffset=t,i},r=function(A,t,e,i,s,a,n){var o,r,l,h=(1<<t)-1,g=0,c=0,f=Math.ceil((n-i)/s),u=4*A.length-Math.ceil(t*e/8);for(A[A.length-1]<<=8*u,o=0;o<e;o++){if(0===c&&(l=A[g++],c=32),c>=t)r=l>>>c-t&h,c-=t;else{var d=t-c;r=(l&h)<<d&h,r+=(l=A[g++])>>>(c=32-d)}a[o]=r<f?i+r*s:n}return a},g=i,c=function(){"use strict";var A=function(A,t,e,i,s,a,n,o){var r,l,h,g,c,f=(1<<e)-1,u=0,d=0,I=4*A.length-Math.ceil(e*i/8);if(A[A.length-1]<<=8*I,s)for(r=0;r<i;r++)0===d&&(h=A[u++],d=32),d>=e?(l=h>>>d-e&f,d-=e):(l=(h&f)<<(g=e-d)&f,l+=(h=A[u++])>>>(d=32-g)),t[r]=s[l];else for(c=Math.ceil((o-a)/n),r=0;r<i;r++)0===d&&(h=A[u++],d=32),d>=e?(l=h>>>d-e&f,d-=e):(l=(h&f)<<(g=e-d)&f,l+=(h=A[u++])>>>(d=32-g)),t[r]=l<c?a+l*n:o},t=function(A,t,e,i,s,a){var n,o=(1<<t)-1,r=0,l=0,h=0,g=0,c=0,f=[],u=4*A.length-Math.ceil(t*e/8);A[A.length-1]<<=8*u;var d=Math.ceil((a-i)/s);for(l=0;l<e;l++)0===g&&(n=A[r++],g=32),g>=t?(c=n>>>g-t&o,g-=t):(c=(n&o)<<(h=t-g)&o,c+=(n=A[r++])>>>(g=32-h)),f[l]=c<d?i+c*s:a;return f.unshift(i),f},e=function(A,t,e,i,s,a,n,o){var r,l,h,g,c=(1<<e)-1,f=0,u=0,d=0;if(s)for(r=0;r<i;r++)0===u&&(h=A[f++],u=32,d=0),u>=e?(l=h>>>d&c,u-=e,d+=e):(l=h>>>d&c,u=32-(g=e-u),l|=((h=A[f++])&(1<<g)-1)<<e-g,d=g),t[r]=s[l];else{var I=Math.ceil((o-a)/n);for(r=0;r<i;r++)0===u&&(h=A[f++],u=32,d=0),u>=e?(l=h>>>d&c,u-=e,d+=e):(l=h>>>d&c,u=32-(g=e-u),l|=((h=A[f++])&(1<<g)-1)<<e-g,d=g),t[r]=l<I?a+l*n:o}return t},i=function(A,t,e,i,s,a){var n,o=(1<<t)-1,r=0,l=0,h=0,g=0,c=0,f=0,u=[],d=Math.ceil((a-i)/s);for(l=0;l<e;l++)0===g&&(n=A[r++],g=32,f=0),g>=t?(c=n>>>f&o,g-=t,f+=t):(c=n>>>f&o,g=32-(h=t-g),c|=((n=A[r++])&(1<<h)-1)<<t-h,f=h),u[l]=c<d?i+c*s:a;return u.unshift(i),u},s=function(A,t,e,i){var s,a,n,o,r=(1<<e)-1,l=0,h=0,g=4*A.length-Math.ceil(e*i/8);for(A[A.length-1]<<=8*g,s=0;s<i;s++)0===h&&(n=A[l++],h=32),h>=e?(a=n>>>h-e&r,h-=e):(a=(n&r)<<(o=e-h)&r,a+=(n=A[l++])>>>(h=32-o)),t[s]=a;return t},a=function(A,t,e,i){var s,a,n,o,r=(1<<e)-1,l=0,h=0,g=0;for(s=0;s<i;s++)0===h&&(n=A[l++],h=32,g=0),h>=e?(a=n>>>g&r,h-=e,g+=e):(a=n>>>g&r,h=32-(o=e-h),a|=((n=A[l++])&(1<<o)-1)<<e-o,g=o),t[s]=a;return t},n={HUFFMAN_LUT_BITS_MAX:12,computeChecksumFletcher32:function(A){for(var t=65535,e=65535,i=A.length,s=Math.floor(i/2),a=0;s;){var n=s>=359?359:s;s-=n;do{t+=A[a++]<<8,e+=t+=A[a++]}while(--n);t=(65535&t)+(t>>>16),e=(65535&e)+(e>>>16)}return 1&i&&(e+=t+=A[a]<<8),((e=(65535&e)+(e>>>16))<<16|(t=(65535&t)+(t>>>16)))>>>0},readHeaderInfo:function(A,t){var e=t.ptr,i=new Uint8Array(A,e,6),s={};if(s.fileIdentifierString=String.fromCharCode.apply(null,i),0!==s.fileIdentifierString.lastIndexOf("Lerc2",0))throw"Unexpected file identifier string (expect Lerc2 ): "+s.fileIdentifierString;e+=6;var a,n=new DataView(A,e,8),o=n.getInt32(0,!0);if(s.fileVersion=o,e+=4,o>=3&&(s.checksum=n.getUint32(4,!0),e+=4),n=new DataView(A,e,12),s.height=n.getUint32(0,!0),s.width=n.getUint32(4,!0),e+=8,o>=4?(s.numDims=n.getUint32(8,!0),e+=4):s.numDims=1,n=new DataView(A,e,40),s.numValidPixel=n.getUint32(0,!0),s.microBlockSize=n.getInt32(4,!0),s.blobSize=n.getInt32(8,!0),s.imageType=n.getInt32(12,!0),s.maxZError=n.getFloat64(16,!0),s.zMin=n.getFloat64(24,!0),s.zMax=n.getFloat64(32,!0),e+=40,t.headerInfo=s,t.ptr=e,o>=3&&(a=o>=4?52:48,this.computeChecksumFletcher32(new Uint8Array(A,e-a,s.blobSize-14))!==s.checksum))throw"Checksum failed.";return!0},checkMinMaxRanges:function(A,t){var e=t.headerInfo,i=this.getDataTypeArray(e.imageType),s=e.numDims*this.getDataTypeSize(e.imageType),a=this.readSubArray(A,t.ptr,i,s),n=this.readSubArray(A,t.ptr+s,i,s);t.ptr+=2*s;var o,r=!0;for(o=0;o<e.numDims;o++)if(a[o]!==n[o]){r=!1;break}return e.minValues=a,e.maxValues=n,r},readSubArray:function(A,t,e,i){var s;if(e===Uint8Array)s=new Uint8Array(A,t,i);else{var a=new ArrayBuffer(i);new Uint8Array(a).set(new Uint8Array(A,t,i)),s=new e(a)}return s},readMask:function(A,t){var e,i,s=t.ptr,a=t.headerInfo,n=a.width*a.height,o=a.numValidPixel,r=new DataView(A,s,4),l={};if(l.numBytes=r.getUint32(0,!0),s+=4,(0===o||n===o)&&0!==l.numBytes)throw"invalid mask";if(0===o)e=new Uint8Array(Math.ceil(n/8)),l.bitset=e,i=new Uint8Array(n),t.pixels.resultMask=i,s+=l.numBytes;else if(l.numBytes>0){e=new Uint8Array(Math.ceil(n/8));var h=(r=new DataView(A,s,l.numBytes)).getInt16(0,!0),g=2,c=0,f=0;do{if(h>0)for(;h--;)e[c++]=r.getUint8(g++);else for(f=r.getUint8(g++),h=-h;h--;)e[c++]=f;h=r.getInt16(g,!0),g+=2}while(g<l.numBytes);if(-32768!==h||c<e.length)throw"Unexpected end of mask RLE encoding";i=new Uint8Array(n);var u=0,d=0;for(d=0;d<n;d++)7&d?(u=e[d>>3],u<<=7&d):u=e[d>>3],128&u&&(i[d]=1);t.pixels.resultMask=i,l.bitset=e,s+=l.numBytes}return t.ptr=s,t.mask=l,!0},readDataOneSweep:function(A,t,e,i){var s,a=t.ptr,o=t.headerInfo,r=o.numDims,l=o.width*o.height,h=o.imageType,g=o.numValidPixel*n.getDataTypeSize(h)*r,c=t.pixels.resultMask;if(e===Uint8Array)s=new Uint8Array(A,a,g);else{var f=new ArrayBuffer(g);new Uint8Array(f).set(new Uint8Array(A,a,g)),s=new e(f)}if(s.length===l*r)t.pixels.resultPixels=i?n.swapDimensionOrder(s,l,r,e,!0):s;else{t.pixels.resultPixels=new e(l*r);var u=0,d=0,I=0,p=0;if(r>1){if(i){for(d=0;d<l;d++)if(c[d])for(p=d,I=0;I<r;I++,p+=l)t.pixels.resultPixels[p]=s[u++]}else for(d=0;d<l;d++)if(c[d])for(p=d*r,I=0;I<r;I++)t.pixels.resultPixels[p+I]=s[u++]}else for(d=0;d<l;d++)c[d]&&(t.pixels.resultPixels[d]=s[u++])}return a+=g,t.ptr=a,!0},readHuffmanTree:function(A,t){var e=this.HUFFMAN_LUT_BITS_MAX,i=new DataView(A,t.ptr,16);if(t.ptr+=16,i.getInt32(0,!0)<2)throw"unsupported Huffman version";var s=i.getInt32(4,!0),a=i.getInt32(8,!0),r=i.getInt32(12,!0);if(a>=r)return!1;var l=new Uint32Array(r-a);n.decodeBits(A,t,l);var h,g,c,f,u=[];for(h=a;h<r;h++)u[g=h-(h<s?0:s)]={first:l[h-a],second:null};var d=A.byteLength-t.ptr,I=Math.ceil(d/4),p=new ArrayBuffer(4*I);new Uint8Array(p).set(new Uint8Array(A,t.ptr,d));var _,C=new Uint32Array(p),B=0,w=0;for(_=C[0],h=a;h<r;h++)(f=u[g=h-(h<s?0:s)].first)>0&&(u[g].second=_<<B>>>32-f,32-B>=f?32===(B+=f)&&(B=0,_=C[++w]):(B+=f-32,_=C[++w],u[g].second|=_>>>32-B));var E=0,y=0,Q=new o;for(h=0;h<u.length;h++)void 0!==u[h]&&(E=Math.max(E,u[h].first));y=E>=e?e:E;var m,k,x,M,b,D=[];for(h=a;h<r;h++)if((f=u[g=h-(h<s?0:s)].first)>0)if(m=[f,g],f<=y)for(k=u[g].second<<y-f,x=1<<y-f,c=0;c<x;c++)D[k|c]=m;else for(k=u[g].second,b=Q,M=f-1;M>=0;M--)k>>>M&1?(b.right||(b.right=new o),b=b.right):(b.left||(b.left=new o),b=b.left),0!==M||b.val||(b.val=m[1]);return{decodeLut:D,numBitsLUTQick:y,numBitsLUT:E,tree:Q,stuffedData:C,srcPtr:w,bitPos:B}},readHuffman:function(A,t,e,i){var s,a,o,r,l,h,g,c,f,u=t.headerInfo.numDims,d=t.headerInfo.height,I=t.headerInfo.width,p=I*d,_=this.readHuffmanTree(A,t),C=_.decodeLut,B=_.tree,w=_.stuffedData,E=_.srcPtr,y=_.bitPos,Q=_.numBitsLUTQick,m=_.numBitsLUT,k=0===t.headerInfo.imageType?128:0,x=t.pixels.resultMask,M=0;y>0&&(E++,y=0);var b,D=w[E],v=1===t.encodeMode,S=new e(p*u),G=S;if(u<2||v){for(b=0;b<u;b++)if(u>1&&(G=new e(S.buffer,p*b,p),M=0),t.headerInfo.numValidPixel===I*d)for(c=0,h=0;h<d;h++)for(g=0;g<I;g++,c++){if(a=0,l=r=D<<y>>>32-Q,32-y<Q&&(l=r|=w[E+1]>>>64-y-Q),C[l])a=C[l][1],y+=C[l][0];else for(l=r=D<<y>>>32-m,32-y<m&&(l=r|=w[E+1]>>>64-y-m),s=B,f=0;f<m;f++)if(!(s=r>>>m-f-1&1?s.right:s.left).left&&!s.right){a=s.val,y=y+f+1;break}y>=32&&(y-=32,D=w[++E]),o=a-k,v?(o+=g>0?M:h>0?G[c-I]:M,o&=255,G[c]=o,M=o):G[c]=o}else for(c=0,h=0;h<d;h++)for(g=0;g<I;g++,c++)if(x[c]){if(a=0,l=r=D<<y>>>32-Q,32-y<Q&&(l=r|=w[E+1]>>>64-y-Q),C[l])a=C[l][1],y+=C[l][0];else for(l=r=D<<y>>>32-m,32-y<m&&(l=r|=w[E+1]>>>64-y-m),s=B,f=0;f<m;f++)if(!(s=r>>>m-f-1&1?s.right:s.left).left&&!s.right){a=s.val,y=y+f+1;break}y>=32&&(y-=32,D=w[++E]),o=a-k,v?(g>0&&x[c-1]?o+=M:h>0&&x[c-I]?o+=G[c-I]:o+=M,o&=255,G[c]=o,M=o):G[c]=o}}else for(c=0,h=0;h<d;h++)for(g=0;g<I;g++)if(c=h*I+g,!x||x[c])for(b=0;b<u;b++,c+=p){if(a=0,l=r=D<<y>>>32-Q,32-y<Q&&(l=r|=w[E+1]>>>64-y-Q),C[l])a=C[l][1],y+=C[l][0];else for(l=r=D<<y>>>32-m,32-y<m&&(l=r|=w[E+1]>>>64-y-m),s=B,f=0;f<m;f++)if(!(s=r>>>m-f-1&1?s.right:s.left).left&&!s.right){a=s.val,y=y+f+1;break}y>=32&&(y-=32,D=w[++E]),o=a-k,G[c]=o}t.ptr=t.ptr+4*(E+1)+(y>0?4:0),t.pixels.resultPixels=S,u>1&&!i&&(t.pixels.resultPixels=n.swapDimensionOrder(S,p,u,e))},decodeBits:function(n,o,r,l,h){var g=o.headerInfo,c=g.fileVersion,f=0,u=n.byteLength-o.ptr>=5?5:n.byteLength-o.ptr,d=new DataView(n,o.ptr,u),I=d.getUint8(0);f++;var p=I>>6,_=0===p?4:3-p,C=(32&I)>0,B=31&I,w=0;if(1===_)w=d.getUint8(f),f++;else if(2===_)w=d.getUint16(f,!0),f+=2;else{if(4!==_)throw"Invalid valid pixel count type";w=d.getUint32(f,!0),f+=4}var E,y,Q,m,k,x,M,b,D,v=2*g.maxZError,S=g.numDims>1?g.maxValues[h]:g.zMax;if(C){for(o.counter.lut++,b=d.getUint8(f),f++,m=Math.ceil((b-1)*B/8),k=Math.ceil(m/4),y=new ArrayBuffer(4*k),Q=new Uint8Array(y),o.ptr+=f,Q.set(new Uint8Array(n,o.ptr,m)),M=new Uint32Array(y),o.ptr+=m,D=0;b-1>>>D;)D++;m=Math.ceil(w*D/8),k=Math.ceil(m/4),y=new ArrayBuffer(4*k),(Q=new Uint8Array(y)).set(new Uint8Array(n,o.ptr,m)),E=new Uint32Array(y),o.ptr+=m,x=c>=3?i(M,B,b-1,l,v,S):t(M,B,b-1,l,v,S),c>=3?e(E,r,D,w,x):A(E,r,D,w,x)}else o.counter.bitstuffer++,D=B,o.ptr+=f,D>0&&(m=Math.ceil(w*D/8),k=Math.ceil(m/4),y=new ArrayBuffer(4*k),(Q=new Uint8Array(y)).set(new Uint8Array(n,o.ptr,m)),E=new Uint32Array(y),o.ptr+=m,c>=3?null==l?a(E,r,D,w):e(E,r,D,w,!1,l,v,S):null==l?s(E,r,D,w):A(E,r,D,w,!1,l,v,S))},readTiles:function(A,t,e,i){var s=t.headerInfo,a=s.width,o=s.height,r=a*o,l=s.microBlockSize,h=s.imageType,g=n.getDataTypeSize(h),c=Math.ceil(a/l),f=Math.ceil(o/l);t.pixels.numBlocksY=f,t.pixels.numBlocksX=c,t.pixels.ptr=0;var u,d,I,p,_,C,B,w,E,y,Q=0,m=0,k=0,x=0,M=0,b=0,D=0,v=0,S=0,G=0,N=0,R=0,F=0,L=0,U=0,O=new e(l*l),P=o%l||l,T=a%l||l,H=s.numDims,J=t.pixels.resultMask,q=t.pixels.resultPixels,z=s.fileVersion>=5?14:15,j=s.zMax;for(k=0;k<f;k++)for(M=k!==f-1?l:P,x=0;x<c;x++)for(G=k*a*l+x*l,N=a-(b=x!==c-1?l:T),w=0;w<H;w++){if(H>1?(y=q,G=k*a*l+x*l,q=new e(t.pixels.resultPixels.buffer,r*w*g,r),j=s.maxValues[w]):y=null,D=A.byteLength-t.ptr,d={},U=0,v=(u=new DataView(A,t.ptr,Math.min(10,D))).getUint8(0),U++,E=s.fileVersion>=5?4&v:0,S=v>>6&255,(v>>2&z)!=(x*l>>3&z))throw"integrity issue";if(E&&0===w)throw"integrity issue";if((_=3&v)>3)throw t.ptr+=U,"Invalid block encoding ("+_+")";if(2!==_)if(0===_){if(E)throw"integrity issue";if(t.counter.uncompressed++,t.ptr+=U,R=(R=M*b*g)<(F=A.byteLength-t.ptr)?R:F,I=new ArrayBuffer(R%g==0?R:R+g-R%g),new Uint8Array(I).set(new Uint8Array(A,t.ptr,R)),p=new e(I),L=0,J)for(Q=0;Q<M;Q++){for(m=0;m<b;m++)J[G]&&(q[G]=p[L++]),G++;G+=N}else for(Q=0;Q<M;Q++){for(m=0;m<b;m++)q[G++]=p[L++];G+=N}t.ptr+=L*g}else if(C=n.getDataTypeUsed(E&&h<6?4:h,S),B=n.getOnePixel(d,U,C,u),U+=n.getDataTypeSize(C),3===_)if(t.ptr+=U,t.counter.constantoffset++,J)for(Q=0;Q<M;Q++){for(m=0;m<b;m++)J[G]&&(q[G]=E?Math.min(j,y[G]+B):B),G++;G+=N}else for(Q=0;Q<M;Q++){for(m=0;m<b;m++)q[G]=E?Math.min(j,y[G]+B):B,G++;G+=N}else if(t.ptr+=U,n.decodeBits(A,t,O,B,w),U=0,E)if(J)for(Q=0;Q<M;Q++){for(m=0;m<b;m++)J[G]&&(q[G]=O[U++]+y[G]),G++;G+=N}else for(Q=0;Q<M;Q++){for(m=0;m<b;m++)q[G]=O[U++]+y[G],G++;G+=N}else if(J)for(Q=0;Q<M;Q++){for(m=0;m<b;m++)J[G]&&(q[G]=O[U++]),G++;G+=N}else for(Q=0;Q<M;Q++){for(m=0;m<b;m++)q[G++]=O[U++];G+=N}else{if(E)if(J)for(Q=0;Q<M;Q++)for(m=0;m<b;m++)J[G]&&(q[G]=y[G]),G++;else for(Q=0;Q<M;Q++)for(m=0;m<b;m++)q[G]=y[G],G++;t.counter.constant++,t.ptr+=U}}H>1&&!i&&(t.pixels.resultPixels=n.swapDimensionOrder(t.pixels.resultPixels,r,H,e))},formatFileInfo:function(A){return{fileIdentifierString:A.headerInfo.fileIdentifierString,fileVersion:A.headerInfo.fileVersion,imageType:A.headerInfo.imageType,height:A.headerInfo.height,width:A.headerInfo.width,numValidPixel:A.headerInfo.numValidPixel,microBlockSize:A.headerInfo.microBlockSize,blobSize:A.headerInfo.blobSize,maxZError:A.headerInfo.maxZError,pixelType:n.getPixelType(A.headerInfo.imageType),eofOffset:A.eofOffset,mask:A.mask?{numBytes:A.mask.numBytes}:null,pixels:{numBlocksX:A.pixels.numBlocksX,numBlocksY:A.pixels.numBlocksY,maxValue:A.headerInfo.zMax,minValue:A.headerInfo.zMin,noDataValue:A.noDataValue}}},constructConstantSurface:function(A,t){var e=A.headerInfo.zMax,i=A.headerInfo.zMin,s=A.headerInfo.maxValues,a=A.headerInfo.numDims,n=A.headerInfo.height*A.headerInfo.width,o=0,r=0,l=0,h=A.pixels.resultMask,g=A.pixels.resultPixels;if(h)if(a>1){if(t)for(o=0;o<a;o++)for(l=o*n,e=s[o],r=0;r<n;r++)h[r]&&(g[l+r]=e);else for(r=0;r<n;r++)if(h[r])for(l=r*a,o=0;o<a;o++)g[l+a]=s[o]}else for(r=0;r<n;r++)h[r]&&(g[r]=e);else if(a>1&&i!==e)if(t)for(o=0;o<a;o++)for(l=o*n,e=s[o],r=0;r<n;r++)g[l+r]=e;else for(r=0;r<n;r++)for(l=r*a,o=0;o<a;o++)g[l+o]=s[o];else for(r=0;r<n*a;r++)g[r]=e},getDataTypeArray:function(A){var t;switch(A){case 0:t=Int8Array;break;case 1:t=Uint8Array;break;case 2:t=Int16Array;break;case 3:t=Uint16Array;break;case 4:t=Int32Array;break;case 5:t=Uint32Array;break;case 6:default:t=Float32Array;break;case 7:t=Float64Array}return t},getPixelType:function(A){var t;switch(A){case 0:t="S8";break;case 1:t="U8";break;case 2:t="S16";break;case 3:t="U16";break;case 4:t="S32";break;case 5:t="U32";break;case 6:default:t="F32";break;case 7:t="F64"}return t},isValidPixelValue:function(A,t){if(null==t)return!1;var e;switch(A){case 0:e=t>=-128&&t<=127;break;case 1:e=t>=0&&t<=255;break;case 2:e=t>=-32768&&t<=32767;break;case 3:e=t>=0&&t<=65536;break;case 4:e=t>=-2147483648&&t<=2147483647;break;case 5:e=t>=0&&t<=4294967296;break;case 6:e=t>=-34027999387901484e22&&t<=34027999387901484e22;break;case 7:e=t>=-17976931348623157e292&&t<=17976931348623157e292;break;default:e=!1}return e},getDataTypeSize:function(A){var t=0;switch(A){case 0:case 1:t=1;break;case 2:case 3:t=2;break;case 4:case 5:case 6:t=4;break;case 7:t=8;break;default:t=A}return t},getDataTypeUsed:function(A,t){var e=A;switch(A){case 2:case 4:e=A-t;break;case 3:case 5:e=A-2*t;break;case 6:e=0===t?A:1===t?2:1;break;case 7:e=0===t?A:A-2*t+1;break;default:e=A}return e},getOnePixel:function(A,t,e,i){var s=0;switch(e){case 0:s=i.getInt8(t);break;case 1:s=i.getUint8(t);break;case 2:s=i.getInt16(t,!0);break;case 3:s=i.getUint16(t,!0);break;case 4:s=i.getInt32(t,!0);break;case 5:s=i.getUInt32(t,!0);break;case 6:s=i.getFloat32(t,!0);break;case 7:s=i.getFloat64(t,!0);break;default:throw"the decoder does not understand this pixel type"}return s},swapDimensionOrder:function(A,t,e,i,s){var a=0,n=0,o=0,r=0,l=A;if(e>1)if(l=new i(t*e),s)for(a=0;a<t;a++)for(r=a,o=0;o<e;o++,r+=t)l[r]=A[n++];else for(a=0;a<t;a++)for(r=a,o=0;o<e;o++,r+=t)l[n++]=A[r];return l}},o=function(A,t,e){this.val=A,this.left=t,this.right=e};return{decode:function(A,t){var e=(t=t||{}).noDataValue,i=0,s={};if(s.ptr=t.inputOffset||0,s.pixels={},n.readHeaderInfo(A,s)){var a=s.headerInfo,o=a.fileVersion,r=n.getDataTypeArray(a.imageType);if(o>5)throw"unsupported lerc version 2."+o;n.readMask(A,s),a.numValidPixel===a.width*a.height||s.pixels.resultMask||(s.pixels.resultMask=t.maskData);var l=a.width*a.height;s.pixels.resultPixels=new r(l*a.numDims),s.counter={onesweep:0,uncompressed:0,lut:0,bitstuffer:0,constant:0,constantoffset:0};var h,g=!t.returnPixelInterleavedDims;if(0!==a.numValidPixel)if(a.zMax===a.zMin)n.constructConstantSurface(s,g);else if(o>=4&&n.checkMinMaxRanges(A,s))n.constructConstantSurface(s,g);else{var c=new DataView(A,s.ptr,2),f=c.getUint8(0);if(s.ptr++,f)n.readDataOneSweep(A,s,r,g);else if(o>1&&a.imageType<=1&&Math.abs(a.maxZError-.5)<1e-5){var u=c.getUint8(1);if(s.ptr++,s.encodeMode=u,u>2||o<4&&u>1)throw"Invalid Huffman flag "+u;u?n.readHuffman(A,s,r,g):n.readTiles(A,s,r,g)}else n.readTiles(A,s,r,g)}s.eofOffset=s.ptr,t.inputOffset?(h=s.headerInfo.blobSize+t.inputOffset-s.ptr,Math.abs(h)>=1&&(s.eofOffset=t.inputOffset+s.headerInfo.blobSize)):(h=s.headerInfo.blobSize-s.ptr,Math.abs(h)>=1&&(s.eofOffset=s.headerInfo.blobSize));var d={width:a.width,height:a.height,pixelData:s.pixels.resultPixels,minValue:a.zMin,maxValue:a.zMax,validPixelCount:a.numValidPixel,dimCount:a.numDims,dimStats:{minValues:a.minValues,maxValues:a.maxValues},maskData:s.pixels.resultMask};if(s.pixels.resultMask&&n.isValidPixelValue(a.imageType,e)){var I=s.pixels.resultMask;for(i=0;i<l;i++)I[i]||(d.pixelData[i]=e);d.noDataValue=e}return s.noDataValue=e,t.returnFileInfo&&(d.fileInfo=n.formatFileInfo(s)),d}},getBandCount:function(A){for(var t=0,e=0,i={ptr:0,pixels:{}};e<A.byteLength-58;)n.readHeaderInfo(A,i),e+=i.headerInfo.blobSize,t++,i.ptr=e;return t}}}(),l=new ArrayBuffer(4),h=new Uint8Array(l),new Uint32Array(l)[0]=1,f=1===h[0],u={decode:function(A,t){if(!f)throw"Big endian system is not supported.";var e,i,s=(t=t||{}).inputOffset||0,a=new Uint8Array(A,s,10),n=String.fromCharCode.apply(null,a);if("CntZImage"===n.trim())e=g,i=1;else{if("Lerc2"!==n.substring(0,5))throw"Unexpected file identifier string: "+n;e=c,i=2}for(var o,r,l,h,u,d,I=0,p=A.byteLength-10,_=[],C={width:0,height:0,pixels:[],pixelType:t.pixelType,mask:null,statistics:[]},B=0;s<p;){var w=e.decode(A,{inputOffset:s,encodedMaskData:o,maskData:l,returnMask:0===I,returnEncodedMask:0===I,returnFileInfo:!0,returnPixelInterleavedDims:t.returnPixelInterleavedDims,pixelType:t.pixelType||null,noDataValue:t.noDataValue||null});s=w.fileInfo.eofOffset,l=w.maskData,0===I&&(o=w.encodedMaskData,C.width=w.width,C.height=w.height,C.dimCount=w.dimCount||1,C.pixelType=w.pixelType||w.fileInfo.pixelType,C.mask=l),i>1&&(l&&_.push(l),w.fileInfo.mask&&w.fileInfo.mask.numBytes>0&&B++),I++,C.pixels.push(w.pixelData),C.statistics.push({minValue:w.minValue,maxValue:w.maxValue,noDataValue:w.noDataValue,dimStats:w.dimStats})}if(i>1&&B>1){for(d=C.width*C.height,C.bandMasks=_,(l=new Uint8Array(d)).set(_[0]),h=1;h<_.length;h++)for(r=_[h],u=0;u<d;u++)l[u]=l[u]&r[u];C.maskData=l}return C}},void 0===(e=function(){return u}.apply(t,[]))||(A.exports=e)},8619:A=>{function t(A){const t={};let e=0;for(let i of A)e++,i in t?t[i][1]++:t[i]=[i,1];return{counts:t,total:e}}A.exports=t,A.exports.default=t},9436:(A,t,e)=>{var i;const s=e(8619),a=e(9616);function n(A,{no_data:t,precise:e=!1}={no_data:void 0,precise:!1}){const{counts:i,total:n}=s(A);let o=n;if("NaN"in i&&(o-=i.NaN[1],delete i.NaN),"undefined"in i&&(o-=i[void 0][1],delete i[void 0]),"null"in i&&(o-=i.null[1],delete i.null),""in i&&(o-=i[""][1],delete i[""]),Array.isArray(t))for(let A=0;A<t.length;A++){const e=t[A];e in i&&(o-=i[e][1],delete i[e])}else t in i&&(o-=i[t][1],delete i[t]);const r=Object.values(i).sort(((A,t)=>A[0]-t[0])),l=o/2,h=r.length;if(0!==h){if(1===h)return e?r[0][0].toString():r[0][0];{let A=0;if(n%2==0)for(let t=0;t<h;t++){const[i,s]=r[t];if(A+=s,A>l)return A-s===l?a(r[t-1][0],i,{precise:e}):e?i.toString():i}else for(let t=0;t<h;t++){const[i,s]=r[t];if(A+=s,A>l)return e?i.toString():i}}}}const o={calculate:n};void 0===(i=function(){return o}.call(t,e,t,A))||(A.exports=i),A.exports=o,A.exports.default={calculate:n},"object"==typeof window&&(window.mediana=o),"object"==typeof self&&(self.mediana=o)},9616:(A,t,e)=>{const i=e(5245),s=e(9235);function a(A,t,{precise:e=!1}={precise:!1}){return e?s(i(A.toString(),t.toString()),"2"):(A+t)/2}A.exports=a,A.exports.default=a},9657:(A,t,e)=>{"use strict";const i=e(1199);function s(A){return"-"===(A=i(A))[0]?A.substring(1):A}A.exports=s,A.exports.default=s},5245:(A,t,e)=>{"use strict";const i=e(581),s=e(1199),a=e(8786),n=e(2143),o=e(6307);function r(A,t,{infinity_minus_infinity:e="NaN"}={}){A=s(A),t=s(t);const r="-"!==A[0],l="-"!==t[0],h=!r,g=!l,c=o(A),f=o(t);if(c&&f)return r&&l?"Infinity":h&g?"-Infinity":e;if(c)return r?"Infinity":"-Infinity";if(f)return l?"Infinity":"-Infinity";if(r&&l)return a(A,t);if(h&&g)return"-"+a(A.substring(1),t.substring(1));if(h&&l)switch(A=A.substring(1),i(A,t)){case"=":return"0";case"<":return n(t,A);case">":return"-"+n(A,t)}else if(r&&!l)switch(t=t.substring(1),i(A,t)){case"=":return"0";case"<":return"-"+n(t,A);case">":return n(A,t)}}A.exports=r,A.exports.default=r},1199:(A,t,e)=>{"use strict";const i=e(1623);A.exports=function(A){return"+"===A[0]&&(A=A.substring(1)),(A=(A=i(A)).replace(/^0+(?=\\d)/,"")).includes(".")&&(A=A.replace(/\\.?0+$/,"")),""===A&&(A="0"),"-0"===A&&(A="0"),A}},6130:(A,t,e)=>{"use strict";const i=e(1199),s=e(581);function a(A,t){A=i(A),t=i(t);const e="-"!==A[0],a="-"!==t[0];return e?a?s(A,t):">":a?"<":s(t.substring(1),A.substring(1))}A.exports=a,A.exports.default=a},581:A=>{"use strict";function t(A,t){const e=A.length,i=t.length,s=A.indexOf("."),a=t.indexOf("."),n=-1===s?e:s,o=-1===a?i:a,r=n-o;let l=r<0?-1*r:0,h=r<=0?0:r,g=Math.max(n,o)+1+Math.max(e-n,i-o)-1,c=0;for(;c<g;){const e=c-l,i=e===n?".":A[e]||"0",s=c-h,a=s===o?".":t[s]||"0";if(i!==a){if(i>a)return">";if(i<a)return"<"}c++}return"="}A.exports=t,A.exports.default=t},964:A=>{"use strict";A.exports={MAX_SAFE_INTEGER:9007199254740991}},1748:(A,t,e)=>{"use strict";const{MAX_SAFE_INTEGER:i}=e(964),s=i.toString().length-1;A.exports={MAX_SAFE_INTEGER_LENGTH:s}},2892:(A,t,e)=>{"use strict";const i=e(1199);function s(A){const t=(A=i(A)).indexOf(".");return-1===t?"0":(A.length-t-1).toString()}A.exports=s,A.exports.default=s},9235:(A,t,e)=>{"use strict";const i=e(9657),s=e(1199),a=e(6307),n=e(9737);function o(A,t,e){A=s(A),t=s(t);const o="-"!==A[0],r="-"!==t[0],l=a(A),h=a(t);if(l||h)return o==r?"Infinity":"-Infinity";if("0"===t)throw new Error("[preciso] division by zero");if(""===A||"0"===A)return"0";const g=o!==r?"-":"";return o||(A=i(A)),r||(t=i(t)),g+n(A,t,e)}A.exports=o,A.exports.default=o},1623:A=>{"use strict";function t(A){"+"===A[0]&&(A=A.substring(1));const t="-"===A[0]?"-":"";"-"===t&&(A=A.substring(1));const e=A.indexOf("e");if(-1===e)return t+A;let i=A.indexOf(".");-1===i&&(i=e);const s=Number(A.substring(e+1)),a=A.substring(0,e).replace(".",""),n=i+s,o=a.length;if(n>=o){const A=n-o;let e=a;for(let t=0;t<A;t++)e+="0";return t+e}if(n<0){let A="0.";for(let t=0;t>n;t--)A+="0";return A+=a,t+A}return t+a.substring(0,n)+"."+a.substring(n)}A.exports=t,A.exports.default=t},178:A=>{"use strict";function t(A){return A.includes("i")}A.exports=t,A.exports.default=t},6307:A=>{"use strict";function t(A){return!!A.match(/^(|-|\\+)inf(inity)?$/i)}A.exports=t,A.exports.default=t},2965:(A,t,e)=>{"use strict";const i=e(1199),s=e(6307);function a(A){return!s(A)&&(!(A=i(A)).includes(".")&&!A.includes("/"))}A.exports=a,A.exports.default=a},6098:(A,t,e)=>{"use strict";const i=e(1199);function s(A){return"-"===(A=i(A))[0]}A.exports=s,A.exports.default=s},2622:(A,t,e)=>{const i=e(1199),s=e(2965);function a(A){if(A=i(A),!s(A))throw new Error("can\'t call is_odd on decimal");return["1","3","5","7","9"].includes(A.charAt(A.length-1))}A.exports=a,A.exports.default=a},3124:A=>{"use strict";function t(A){return/^[-+]?0(\\.0+)?(e[\\.\\d]+)?$/.test(A)}A.exports=t,A.exports.default=t},8786:(A,t,e)=>{"use strict";const{MAX_SAFE_INTEGER_LENGTH:i}=e(1748);function s(A,t){const e=A.length,s=t.length,a=A.indexOf("."),n=t.indexOf("."),o=-1===a?e:a,r=-1===n?s:n;if(-1===a&&-1===n&&e<i&&s<i)return(Number(A)+Number(t)).toFixed();const l=o-r;let h=Math.max(o,r),g=Math.max(e-o-1,s-r-1),c=l<0?-1*l:0,f=l<=0?0:l,u=h+1+g-1,d="",I=0,p=u;if(g>0){for(;p>u-g;){const e=A[p-c]||"0",i=t[p-f]||"0";let s=Number(e)+Number(i)+I;s>=10?(s-=10,I=1):I=0,""===d&&0===s||(d=s+d),p--}d&&(d="."+d),p--}if(h>0)for(;p>=0;){const e=A[p-c]||"0",i=t[p-f]||"0";let s=Number(e)+Number(i)+I;s>=10?(s-=10,I=1):I=0,d=s+d,p--}return 1===I&&(d=I+d),"."===d[0]&&(d="0"+d),d}A.exports=s,A.exports.default=s},9737:(A,t,e)=>{"use strict";const i=e(581),s=e(5245),a=e(8655),n=e(5567);function o(A,t,{format:e="string",max_decimal_digits:o=100,ellipsis:r=!1}={}){"0"===A[0]&&(A=A.substring(1)),"0"===t[0]&&(t=t.substring(1));const l=A.indexOf("."),h=t.indexOf("."),g=-1===l?A.length:l,c=-1===h?0:t.length-1-h;let f=!1;A=A.replace(/\\./,""),t=t.replace(/\\./,"");const u=A.length;let d,I="",p="",_=-1*c,C=0;for(let e=0;e<u;e++){if(I+=A[e],d=i(I,t),">"===d){let A=1,e=s(t,t),n=t;for(;">"!==i(e,I);)A++,n=e,e=s(e,t);if(A=A.toString(),""!==p)for(let t=A.length;t<=C;t++)p+="0";p+=A,I=a(I,n),C=0}else{if("<"===d){""===p&&_++,C++;continue}if("="===d){if(""!==p)for(let A=0;A<C;A++)p+="0";p+="1",I="0",C=0}}}if(I.match(/^0+$/g))"<"===d&&(p+=I.substring(0,I.length-1));else{const A={},e=g-_-p.length+o+1;""===p&&(C=0);for(let n=0;n<e;n++){if(I+="0",r)if(I in A){if(A[I]++,A[I]>3){p+="...",f=!0;break}}else A[I]=1;const e=i(I,t);if(">"===e){let A=1,e=s(t,t),n=t;for(;">"!==i(e,I);)A++,n=e,e=s(e,t);A=A.toString();for(let t=A.length;t<=C;t++)p+="0";if(p+=A,I=a(I,n),"0"===I)break;C=0}else{if("<"===e){C++;continue}if("="===e){for(let A=0;A<C;A++)p+="0";p+="1",C=0;break}}}}const B=g-_,w=p.length;let E;if(B===w)E=0;else if(B<0)p="0."+"0".repeat(Math.abs(B))+p,E=w-B;else if(B>w){for(let A=w;A<B;A++)p+="0";E=0}else B<w?(p=p.substring(0,B)+"."+p.substring(B),E=w-B):0===B&&(p="0."+p,E=w);p=p.replace(/^0+/,""),p=p.replace(/\\.\\d+0+$/,"");const y=E-o;return f||y>0&&(p=n(p.substring(0,p.length-y+1))),"."===p[0]&&(p="0"+p),"object"===e?{quotient:p,extra_decimals:y}:p}A.exports=o,A.exports.default=o},1858:(A,t,e)=>{"use strict";const{MAX_SAFE_INTEGER_LENGTH:i}=e(1748);function s(A,t){if("0"===A||"0"===t)return"0";const e=A.indexOf("."),s=t.indexOf("."),a=(-1===e?A.length:e)+(-1===s?t.length:s),n=(-1===e?0:A.length-1-e)+(-1===s?0:t.length-1-s);if(0===n&&a<i)return(Number(A)*Number(t)).toFixed(0);const o=A.replace(".",""),r=t.replace(".",""),l=o.length,h=r.length,g=[];let c=l;for(;c>=0;){const A=c,t=c-=15,e=o.substring(t,A);g.push([Number(e),e.length])}const f=[],u=[];for(let A=0,t=h-1;t>=0;t--,A++){const e=r[t],i=Number(e);let s=0,a="";const n=g.length-1;g.forEach((([A,t],e)=>{let o=(s+i*A).toString();const r=o.length;if(r>t&&e!==n){const A=-1*t;a=o.slice(A)+a,s=Number(o.slice(0,A))}else{const A=t-r;for(let t=0;t<A;t++)o="0"+o;s=0,a=o+a}})),a+="0".repeat(A),f.push(a),u.push([Array.from(a).map((A=>Number(A))),a.length])}const d=f.length,I=u[u.length-1][1]+d;let p="",_=0;for(let A=0;A<I;A++){let t=_;const e=Math.min(A,d-1);for(let i=0;i<=e;i++){const[e,s]=u[i],a=s-1-A;a>=0&&(t+=e[a])}t>=10?(t=t.toString(),p=t[t.length-1]+p,_=Number(t.slice(0,-1))):(p=t+p,_=0)}if(0===n)p=p.replace(/^0+/,"");else{const A=p.length-n;p=p.substring(0,A)+"."+p.substring(A),p=p.replace(/^0+/,""),p=p.replace(/\\.?0+$/,""),"."===p[0]&&(p="0"+p)}return p}A.exports=s,A.exports.default=s},2143:(A,t,e)=>{"use strict";const{MAX_SAFE_INTEGER_LENGTH:i}=e(1748);function s(A,t){const e=A.length,s=t.length,a=A.indexOf("."),n=t.indexOf("."),o=-1===a?e:a,r=-1===n?s:n;if(-1===a&&-1===n&&e<i&&s<i)return(Number(A)-Number(t)).toFixed();const l=o-r;let h=Math.max(o,r),g=Math.max(e-o-1,s-r-1),c=l<0?-1*l:0,f=l<=0?0:l,u=h+1+g-1,d="",I=0,p=u;if(g>0){for(;p>u-g;){let e=A[p-c]||"0";e-=I,I=0;let i=e-(t[p-f]||"0");if(i<0)for(;i<0;)I++,i+=10;else I&&I--;""===d&&0===i||(d=i+d),p--}""!==d&&(d="."+d),p--}if(h>0){for(;p>0;){let e=A[p-c]||"0";e-=I,I=0;let i=e-(t[p-f]||"0");if(i<0)for(;i<0;)I++,i+=10;else I&&I--;d=i+d,p--}const e=A[0-c]||"0",i=t[0-f]||"0";let s=Number(e)-(I>0?1:0)-Number(i);0!==s&&(d=s+d),d=d.replace(/^0+/,"")}return"."===d[0]&&(d="0"+d),d}A.exports=s,A.exports.default=s},1031:(A,t,e)=>{"use strict";const i=e(9684);function s(){const A=Array.from(arguments),t="object"==typeof A[A.length-1]?A[A.length-1]:void 0,e=Array.isArray(A[0])?A[0]:t?A.slice(0,A.length-1):A;return i(e,t)}A.exports=s,A.exports.default=s},9684:(A,t,e)=>{"use strict";const i=e(178),s=e(6307),a=e(2622),n=e(3124),o=e(8776),r=e(5694);function l(A,{max_decimal_digits:t,infinity_times_zero:e="NaN"}={}){const l=A.some((A=>s(A))),h=A.some((A=>n(A)));if(l&&h)return e;if(l){return A.filter((A=>"-"===r(A))).length%2==0?"Infinity":"-Infinity"}if(h)return"0";const g=a(A.filter((A=>i(A))).length.toString());let c=o(A.map((A=>A.replace(/i$/,""))),{max_decimal_digits:t});return g&&(c+="i"),c}A.exports=l,A.exports.default=l},8776:(A,t,e)=>{"use strict";const i=e(9657),s=e(1199),a=e(581),n=e(1858),o=e(5195);function r(A,{max_decimal_digits:t}={}){let e=s(A[0]),r=i(e),l="-"===e[0]?"-":"";const h=A.length;for(let t=1;t<h;t++){const o=s(A[t]),h="-"===o[0]?"-":"",g=i(o);l=l!==h?"-":"";r="<"===a(r,g)?n(g,r):n(r,g),e=l+r}return"number"==typeof t&&(e=o(e,{digits:t})),e}A.exports=r,A.exports.default=r},5195:(A,t,e)=>{"use strict";const i=e(178),s=e(1245);function a(A,{digits:t=0}={}){return t=Number(t),i(A)?s(A.substring(0,A.length-1),{digits:t})+"i":s(A,{digits:t})}A.exports=a,A.exports.default=a},5567:(A,t,e)=>{"use strict";const i=e(5245),s=e(5900),a=["5","6","7","8","9"];function n(A){if(A.match(/\\.9+$/))return i(s(A),"1");"+"===A[0]&&(A=A.substring(1));const t=A.length;let e="";const n=A[A.length-1];if(a.includes(n)){let i;for(i=t-2;i>=0;i--){const t=A[i];if("."===t||"-"===t)continue;const s=Number(t)+1;if(10!==s){e=s+e;break}e="0"+e}i>0&&(e=A.substring(0,i)+e)}else e=A.substring(0,t-1);return"."===e[e.length-1]&&(e=e.substring(0,e.length-1)),e.indexOf(".")>-1&&(e=e.replace(/0+$/,"")),e}A.exports=n,A.exports.default=n},1245:(A,t,e)=>{"use strict";const i=e(1199),s=e(2892),a=e(9657),n=e(6098),o=e(5567),r=["5","6","7","8","9"];function l(A,{digits:t=0}={digits:0}){const e=A=i(A),l=n(A)?"-":"",h=(A=a(A)).indexOf(".");if(-1===h)return e;if(s(A)<=t)return e;const g=A[h+t+1];if(r.includes(g)){const e=A.substring(0,h+t+2);return l+o(e)}if(0===t)return l+A.substring(0,h);return l+A.substring(0,h+t+1)}A.exports=l,A.exports.default=l},5694:A=>{"use strict";function t(A){return"-"===A[0]?"-":"+"}A.exports=t,A.exports.default=t},8655:(A,t,e)=>{"use strict";const i=e(1199),s=e(581),a=e(6307),n=e(8786),o=e(2143);function r(A,t,{infinity_minus_infinity:e="NaN"}={}){A=i(A),t=i(t);const r=!("-"===A[0]),l=!("-"===t[0]),h=a(A),g=a(t);if(h&&g){if(r===l)return e;if(r)return"Infinity";if(l)return"-Infinity"}else{if(h)return A;if(g)return l?"-Infinity":"Infinity"}if(r){if(l){const e=s(A,t);return">"===e?o(A,t):"<"===e?"-"+o(t,A):"0"}return n(A,t.substring(1))}if(l)return"-"+n(A.substring(1),t);{A=A.substring(1),t=t.substring(1);const e=s(A,t);return">"===e?"-"+o(A,t):"<"===e?o(t,A):"0"}}A.exports=r,A.exports.default=r},5900:A=>{"use strict";function t(A){return A.substring(0,A.indexOf("."))}A.exports=t,A.exports.default=t},5605:(A,t,e)=>{var i;const s=A=>A.sort()[Math.floor(A.length-2)],a=A=>A.slice().sort(((A,t)=>Math.sign(A-t)))[0];const n={turbocharge:function({bbox:A,debug_level:t=0,quiet:e=!1,reproject:i,threshold:[n,o]}){t>=2&&console.log("[proj-turbo] starting"),t>=3&&console.log("[proj-turbo] bbox:",A),t>=3&&console.log("[proj-turbo] reproject:",i),t>=3&&console.log("[proj-turbo] threshold:",[n,o]),t>=3&&console.log("[proj-turbo] quiet:",e);const[r,l,h,g]=A,c=h-r;t>=3&&console.log("[proj-turbo] width:",c);const f=g-l;t>=3&&console.log("[proj-turbo] height:",f);const u=[[r,g],[h,g],[h,l],[r,l]].map((A=>[A,i(A)])),d=u[0][1][0]-u[3][1][0],I=u[1][1][0]-u[2][1][0],p=Math.max(d,I);t>=3&&console.log("max_x_drift:",p);const _=u[1][1][1]-u[0][1][1],C=u[2][1][1]-u[3][1][1],B=Math.max(_,C);t>=3&&console.log("max_y_drift:",B);const w=c/100;t>=4&&console.log("[proj-turbo] x_offset:",w);const E=f/100;t>=4&&console.log("[proj-turbo] y_offset:",E);const y=[[r+c/4,g-f/4],[h-c/4,g-f/4],[h-c/4,l+f/4],[r+c/4,l+f/4],[r+c/10,g-f/10],[h-c/10,g-f/10],[h-c/10,l+f/10],[r+c/10,l+f/10],[(r+h)/2,(l+g)/2]];t>=5&&console.log("[proj-turbo] train_points: "+JSON.stringify(y));const Q=y.map((A=>[A,i(A)]));t>=5&&console.log("[proj-turbo] train_pairs: "+JSON.stringify(Q));const m=a(Q.concat(u).map((([A,[t,e]])=>t)));t>=4&&console.log("[proj-turbo] x_origin:",m);const k=a(Q.concat(u).map((([A,[t,e]])=>e)));t>=4&&console.log("[proj-turbo] y_origin:",k);let x=Q.map((([[A,t],[e,i]],s)=>{if(e<m)throw new Error("[proj-turbo] uh oh, x1",e,"is less than origin",m);return[(e-m)/(A-r),(i-k)/(t-l)]}));if(t>=4&&console.log("[proj-turbo] scales: ",x.map((([A,t])=>[A.toFixed(10),t.toFixed(10)]))),x=x.filter((([A,t])=>!(A<0||t<0||isNaN(A)||isNaN(t)||A===1/0&&t===1/0))),x.length<3){if(t>=1&&console.log("[proj-turbo] origin: ",[m,k]),t>=1&&console.log("[proj-turbo] scales: ",x),e)return;throw new Error("[proj-turbo] not enough scales")}const M=s(x.map((([A,t])=>A)));t>=4&&console.log("[proj-turbo] median horizontal scale:",M);const b=s(x.map((([A,t])=>t)));t>=4&&console.log("[proj-turbo] median vertical scale:",b);const D=([A,t])=>[m+M*(A-r),k+b*(t-l)],v=[...u,...Q];for(let A=0;A<v.length;A++){const[i,[s,a]]=v[A],[h,g]=D(i),c=Math.abs(h-s);if(c>=n){if(t>=1&&console.log(`${m} + ${M} * (${i[0]} - ${r})`),t>=1&&console.log(`predicted ${h}, which is ${c} from ${s}, which is greater than the threshold ${n}`),e)return;throw Error("[proj-turbo] linear function exceeded horizontal error threshold")}const f=Math.abs(g-a);if(f>=o){if(t>=1&&console.log(`${k} + ${b} * (${i[1]} - ${l})`),t>=1&&console.log(`predicted ${g}, which is ${f} from ${a}, which is greater than the threshold ${o}`),e)return;throw Error("[proj-turbo] linear function exceeded vertical error threshold")}}return{origin:[m,k],reproject:D,scale:[M,b],scales:x}}};void 0===(i=function(){return n}.call(t,e,t,A))||(A.exports=i),A.exports&&(A.exports=n),"object"==typeof self&&(self.projturbo=n),"object"==typeof window&&(window.projturbo=n)},7455:(A,t,e)=>{var i;const s=e(2994),a=e(4472),n=e(2438);function o(A){A||(A=[]),a&&A.push(a),n&&A.push(n),"object"==typeof e.g&&e.g.proj4&&A.push(e.g.proj4),"object"==typeof globalThis&&globalThis.proj4&&A.push(globalThis.proj4),"object"==typeof self&&self.proj4&&A.push(self.proj4),"object"==typeof window&&window.proj4&&A.push(window.proj4),A=A.filter((A=>![void 0,null].includes(A)&&("object"!=typeof A||Object.keys(A).length>0)));return s(A)}void 0===(i=function(){return o}.call(t,e,t,A))||(A.exports=i),A.exports=o,A.exports.default=o,"object"==typeof window&&(window.proj4collect=o),"object"==typeof self&&(self.proj4collect=o)},2438:(A,t,e)=>{var i;let s=e(4472);const a=e(5209);"object"!=typeof s&&"function"!=typeof s||"function"==typeof s.defs||"function"!=typeof s.default||"function"!=typeof s.default.defs||(s=s.default),s.defs(a),void 0===(i=function(){return s}.call(t,e,t,A))||(A.exports=i),A.exports=s,A.exports.default=s},2994:(A,t,e)=>{var i;function s(){const A=[],t=e=>{if(e){if(Array.isArray(e))return e.forEach(t);e.default&&(e=e.default),(A=>"object"==typeof A&&0===Object.keys(A).length&&"{}"===JSON.stringify(A))(e)||A.push(e)}};if(Array.from(arguments).forEach(t),0===A.length)throw Error("[proj4-merge] merge called with zero instances of proj4");const[e,...i]=A;return i.forEach((A=>{e.defs(Object.entries(A.defs))})),e}void 0===(i=function(){return s}.call(t,e,t,A))||(A.exports=i),A.exports=s,A.exports.default=s},4472:(A,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>Ge});var i=1,s=2,a=3,n=5,o=6378137,r=6356752.314,l=.0066943799901413165,h=484813681109536e-20,g=Math.PI/2,c=.16666666666666666,f=.04722222222222222,u=.022156084656084655,d=1e-10,I=.017453292519943295,p=57.29577951308232,_=Math.PI/4,C=2*Math.PI,B=3.14159265359,w={greenwich:0,lisbon:-9.131906111111,paris:2.337229166667,bogota:-74.080916666667,madrid:-3.687938888889,rome:12.452333333333,bern:7.439583333333,jakarta:106.807719444444,ferro:-17.666666666667,brussels:4.367975,stockholm:18.058277777778,athens:23.7163375,oslo:10.722916666667};const E={ft:{to_meter:.3048},"us-ft":{to_meter:1200/3937}};var y=/[\\s_\\-\\/\\(\\)]/g;function Q(A,t){if(A[t])return A[t];for(var e,i=Object.keys(A),s=t.toLowerCase().replace(y,""),a=-1;++a<i.length;)if((e=i[a]).toLowerCase().replace(y,"")===s)return A[e]}function m(A){var t,e,i,s={},a=A.split("+").map((function(A){return A.trim()})).filter((function(A){return A})).reduce((function(A,t){var e=t.split("=");return e.push(!0),A[e[0].toLowerCase()]=e[1],A}),{}),n={proj:"projName",datum:"datumCode",rf:function(A){s.rf=parseFloat(A)},lat_0:function(A){s.lat0=A*I},lat_1:function(A){s.lat1=A*I},lat_2:function(A){s.lat2=A*I},lat_ts:function(A){s.lat_ts=A*I},lon_0:function(A){s.long0=A*I},lon_1:function(A){s.long1=A*I},lon_2:function(A){s.long2=A*I},alpha:function(A){s.alpha=parseFloat(A)*I},gamma:function(A){s.rectified_grid_angle=parseFloat(A)},lonc:function(A){s.longc=A*I},x_0:function(A){s.x0=parseFloat(A)},y_0:function(A){s.y0=parseFloat(A)},k_0:function(A){s.k0=parseFloat(A)},k:function(A){s.k0=parseFloat(A)},a:function(A){s.a=parseFloat(A)},b:function(A){s.b=parseFloat(A)},r_a:function(){s.R_A=!0},zone:function(A){s.zone=parseInt(A,10)},south:function(){s.utmSouth=!0},towgs84:function(A){s.datum_params=A.split(",").map((function(A){return parseFloat(A)}))},to_meter:function(A){s.to_meter=parseFloat(A)},units:function(A){s.units=A;var t=Q(E,A);t&&(s.to_meter=t.to_meter)},from_greenwich:function(A){s.from_greenwich=A*I},pm:function(A){var t=Q(w,A);s.from_greenwich=(t||parseFloat(A))*I},nadgrids:function(A){"@null"===A?s.datumCode="none":s.nadgrids=A},axis:function(A){var t="ewnsud";3===A.length&&-1!==t.indexOf(A.substr(0,1))&&-1!==t.indexOf(A.substr(1,1))&&-1!==t.indexOf(A.substr(2,1))&&(s.axis=A)},approx:function(){s.approx=!0}};for(t in a)e=a[t],t in n?"function"==typeof(i=n[t])?i(e):s[i]=e:s[t]=e;return"string"==typeof s.datumCode&&"WGS84"!==s.datumCode&&(s.datumCode=s.datumCode.toLowerCase()),s}const k=function(A){var t=new G(A);return t.output()};var x=1,M=/\\s/,b=/[A-Za-z]/,D=/[A-Za-z84_]/,v=/[,\\]]/,S=/[\\d\\.E\\-\\+]/;function G(A){if("string"!=typeof A)throw new Error("not a string");this.text=A.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=x}function N(A,t,e){Array.isArray(t)&&(e.unshift(t),t=null);var i=t?{}:A,s=e.reduce((function(A,t){return R(t,A),A}),i);t&&(A[t]=s)}function R(A,t){if(Array.isArray(A)){var e=A.shift();if("PARAMETER"===e&&(e=A.shift()),1===A.length)return Array.isArray(A[0])?(t[e]={},void R(A[0],t[e])):void(t[e]=A[0]);if(A.length)if("TOWGS84"!==e){if("AXIS"===e)return e in t||(t[e]=[]),void t[e].push(A);var i;switch(Array.isArray(e)||(t[e]={}),e){case"UNIT":case"PRIMEM":case"VERT_DATUM":return t[e]={name:A[0].toLowerCase(),convert:A[1]},void(3===A.length&&R(A[2],t[e]));case"SPHEROID":case"ELLIPSOID":return t[e]={name:A[0],a:A[1],rf:A[2]},void(4===A.length&&R(A[3],t[e]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return A[0]=["name",A[0]],void N(t,e,A);default:for(i=-1;++i<A.length;)if(!Array.isArray(A[i]))return R(A,t[e]);return N(t,e,A)}}else t[e]=A;else t[e]=!0}else t[A]=!0}G.prototype.readCharicter=function(){var A=this.text[this.place++];if(4!==this.state)for(;M.test(A);){if(this.place>=this.text.length)return;A=this.text[this.place++]}switch(this.state){case x:return this.neutral(A);case 2:return this.keyword(A);case 4:return this.quoted(A);case 5:return this.afterquote(A);case 3:return this.number(A);case-1:return}},G.prototype.afterquote=function(A){if(\'"\'===A)return this.word+=\'"\',void(this.state=4);if(v.test(A))return this.word=this.word.trim(),void this.afterItem(A);throw new Error("havn\'t handled \\""+A+\'" in afterquote yet, index \'+this.place)},G.prototype.afterItem=function(A){return","===A?(null!==this.word&&this.currentObject.push(this.word),this.word=null,void(this.state=x)):"]"===A?(this.level--,null!==this.word&&(this.currentObject.push(this.word),this.word=null),this.state=x,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=-1))):void 0},G.prototype.number=function(A){if(!S.test(A)){if(v.test(A))return this.word=parseFloat(this.word),void this.afterItem(A);throw new Error("havn\'t handled \\""+A+\'" in number yet, index \'+this.place)}this.word+=A},G.prototype.quoted=function(A){\'"\'!==A?this.word+=A:this.state=5},G.prototype.keyword=function(A){if(D.test(A))this.word+=A;else{if("["===A){var t=[];return t.push(this.word),this.level++,null===this.root?this.root=t:this.currentObject.push(t),this.stack.push(this.currentObject),this.currentObject=t,void(this.state=x)}if(!v.test(A))throw new Error("havn\'t handled \\""+A+\'" in keyword yet, index \'+this.place);this.afterItem(A)}},G.prototype.neutral=function(A){if(b.test(A))return this.word=A,void(this.state=2);if(\'"\'===A)return this.word="",void(this.state=4);if(S.test(A))return this.word=A,void(this.state=3);if(!v.test(A))throw new Error("havn\'t handled \\""+A+\'" in neutral yet, index \'+this.place);this.afterItem(A)},G.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(-1===this.state)return this.root;throw new Error(\'unable to parse string "\'+this.text+\'". State is \'+this.state)};var F=.017453292519943295;function L(A){return A*F}function U(A){var t=k(A),e=t.shift(),i=t.shift();t.unshift(["name",i]),t.unshift(["type",e]);var s={};return R(t,s),function(A){if("GEOGCS"===A.type?A.projName="longlat":"LOCAL_CS"===A.type?(A.projName="identity",A.local=!0):"object"==typeof A.PROJECTION?A.projName=Object.keys(A.PROJECTION)[0]:A.projName=A.PROJECTION,A.AXIS){for(var t="",e=0,i=A.AXIS.length;e<i;++e){var s=[A.AXIS[e][0].toLowerCase(),A.AXIS[e][1].toLowerCase()];-1!==s[0].indexOf("north")||("y"===s[0]||"lat"===s[0])&&"north"===s[1]?t+="n":-1!==s[0].indexOf("south")||("y"===s[0]||"lat"===s[0])&&"south"===s[1]?t+="s":-1!==s[0].indexOf("east")||("x"===s[0]||"lon"===s[0])&&"east"===s[1]?t+="e":-1===s[0].indexOf("west")&&("x"!==s[0]&&"lon"!==s[0]||"west"!==s[1])||(t+="w")}2===t.length&&(t+="u"),3===t.length&&(A.axis=t)}A.UNIT&&(A.units=A.UNIT.name.toLowerCase(),"metre"===A.units&&(A.units="meter"),A.UNIT.convert&&("GEOGCS"===A.type?A.DATUM&&A.DATUM.SPHEROID&&(A.to_meter=A.UNIT.convert*A.DATUM.SPHEROID.a):A.to_meter=A.UNIT.convert));var a=A.GEOGCS;function n(t){return t*(A.to_meter||1)}"GEOGCS"===A.type&&(a=A),a&&(a.DATUM?A.datumCode=a.DATUM.name.toLowerCase():A.datumCode=a.name.toLowerCase(),"d_"===A.datumCode.slice(0,2)&&(A.datumCode=A.datumCode.slice(2)),"new_zealand_geodetic_datum_1949"!==A.datumCode&&"new_zealand_1949"!==A.datumCode||(A.datumCode="nzgd49"),"wgs_1984"!==A.datumCode&&"world_geodetic_system_1984"!==A.datumCode||("Mercator_Auxiliary_Sphere"===A.PROJECTION&&(A.sphere=!0),A.datumCode="wgs84"),"_ferro"===A.datumCode.slice(-6)&&(A.datumCode=A.datumCode.slice(0,-6)),"_jakarta"===A.datumCode.slice(-8)&&(A.datumCode=A.datumCode.slice(0,-8)),~A.datumCode.indexOf("belge")&&(A.datumCode="rnb72"),a.DATUM&&a.DATUM.SPHEROID&&(A.ellps=a.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\\_18/,"clrk"),"international"===A.ellps.toLowerCase().slice(0,13)&&(A.ellps="intl"),A.a=a.DATUM.SPHEROID.a,A.rf=parseFloat(a.DATUM.SPHEROID.rf,10)),a.DATUM&&a.DATUM.TOWGS84&&(A.datum_params=a.DATUM.TOWGS84),~A.datumCode.indexOf("osgb_1936")&&(A.datumCode="osgb36"),~A.datumCode.indexOf("osni_1952")&&(A.datumCode="osni52"),(~A.datumCode.indexOf("tm65")||~A.datumCode.indexOf("geodetic_datum_of_1965"))&&(A.datumCode="ire65"),"ch1903+"===A.datumCode&&(A.datumCode="ch1903"),~A.datumCode.indexOf("israel")&&(A.datumCode="isr93")),A.b&&!isFinite(A.b)&&(A.b=A.a),[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_1","Latitude of 1st standard parallel"],["standard_parallel_2","Standard_Parallel_2"],["standard_parallel_2","Latitude of 2nd standard parallel"],["false_easting","False_Easting"],["false_easting","False easting"],["false-easting","Easting at false origin"],["false_northing","False_Northing"],["false_northing","False northing"],["false_northing","Northing at false origin"],["central_meridian","Central_Meridian"],["central_meridian","Longitude of natural origin"],["central_meridian","Longitude of false origin"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["latitude_of_origin","Latitude of natural origin"],["latitude_of_origin","Latitude of false origin"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",L],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",L],["x0","false_easting",n],["y0","false_northing",n],["long0","central_meridian",L],["lat0","latitude_of_origin",L],["lat0","standard_parallel_1",L],["lat1","standard_parallel_1",L],["lat2","standard_parallel_2",L],["azimuth","Azimuth"],["alpha","azimuth",L],["srsCode","name"]].forEach((function(t){return function(A,t){var e=t[0],i=t[1];!(e in A)&&i in A&&(A[e]=A[i],3===t.length&&(A[e]=t[2](A[e])))}(A,t)})),A.long0||!A.longc||"Albers_Conic_Equal_Area"!==A.projName&&"Lambert_Azimuthal_Equal_Area"!==A.projName||(A.long0=A.longc),A.lat_ts||!A.lat1||"Stereographic_South_Pole"!==A.projName&&"Polar Stereographic (variant B)"!==A.projName?!A.lat_ts&&A.lat0&&"Polar_Stereographic"===A.projName&&(A.lat_ts=A.lat0,A.lat0=L(A.lat0>0?90:-90)):(A.lat0=L(A.lat1>0?90:-90),A.lat_ts=A.lat1)}(s),s}function O(A){var t=this;if(2===arguments.length){var e=arguments[1];"string"==typeof e?"+"===e.charAt(0)?O[A]=m(arguments[1]):O[A]=U(arguments[1]):O[A]=e}else if(1===arguments.length){if(Array.isArray(A))return A.map((function(A){Array.isArray(A)?O.apply(t,A):O(A)}));if("string"==typeof A){if(A in O)return O[A]}else"EPSG"in A?O["EPSG:"+A.EPSG]=A:"ESRI"in A?O["ESRI:"+A.ESRI]=A:"IAU2000"in A?O["IAU2000:"+A.IAU2000]=A:console.log(A);return}}!function(A){A("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"),A("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees"),A("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs"),A.WGS84=A["EPSG:4326"],A["EPSG:3785"]=A["EPSG:3857"],A.GOOGLE=A["EPSG:3857"],A["EPSG:900913"]=A["EPSG:3857"],A["EPSG:102113"]=A["EPSG:3857"]}(O);const P=O;var T=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"];var H=["3857","900913","3785","102113"];const J=function(A){if(!function(A){return"string"==typeof A}(A))return A;if(function(A){return A in P}(A))return P[A];if(function(A){return T.some((function(t){return A.indexOf(t)>-1}))}(A)){var t=U(A);if(function(A){var t=Q(A,"authority");if(t){var e=Q(t,"epsg");return e&&H.indexOf(e)>-1}}(t))return P["EPSG:3857"];var e=function(A){var t=Q(A,"extension");if(t)return Q(t,"proj4")}(t);return e?m(e):t}return function(A){return"+"===A[0]}(A)?m(A):void 0};function q(A,t){var e,i;if(A=A||{},!t)return A;for(i in t)void 0!==(e=t[i])&&(A[i]=e);return A}function z(A,t,e){var i=A*t;return e/Math.sqrt(1-i*i)}function j(A){return A<0?-1:1}function K(A){return Math.abs(A)<=B?A:A-j(A)*C}function Y(A,t,e){var i=A*e,s=.5*A;return i=Math.pow((1-i)/(1+i),s),Math.tan(.5*(g-t))/i}function V(A,t){for(var e,i,s=.5*A,a=g-2*Math.atan(t),n=0;n<=15;n++)if(e=A*Math.sin(a),a+=i=g-2*Math.atan(t*Math.pow((1-e)/(1+e),s))-a,Math.abs(i)<=1e-10)return a;return-9999}function W(A){return A}var X=[{init:function(){var A=this.b/this.a;this.es=1-A*A,"x0"in this||(this.x0=0),"y0"in this||(this.y0=0),this.e=Math.sqrt(this.es),this.lat_ts?this.sphere?this.k0=Math.cos(this.lat_ts):this.k0=z(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)):this.k0||(this.k?this.k0=this.k:this.k0=1)},forward:function(A){var t,e,i=A.x,s=A.y;if(s*p>90&&s*p<-90&&i*p>180&&i*p<-180)return null;if(Math.abs(Math.abs(s)-g)<=d)return null;if(this.sphere)t=this.x0+this.a*this.k0*K(i-this.long0),e=this.y0+this.a*this.k0*Math.log(Math.tan(_+.5*s));else{var a=Math.sin(s),n=Y(this.e,s,a);t=this.x0+this.a*this.k0*K(i-this.long0),e=this.y0-this.a*this.k0*Math.log(n)}return A.x=t,A.y=e,A},inverse:function(A){var t,e,i=A.x-this.x0,s=A.y-this.y0;if(this.sphere)e=g-2*Math.atan(Math.exp(-s/(this.a*this.k0)));else{var a=Math.exp(-s/(this.a*this.k0));if(-9999===(e=V(this.e,a)))return null}return t=K(this.long0+i/(this.a*this.k0)),A.x=t,A.y=e,A},names:["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"]},{init:function(){},forward:W,inverse:W,names:["longlat","identity"]}],Z={},$=[];function AA(A,t){var e=$.length;return A.names?($[e]=A,A.names.forEach((function(A){Z[A.toLowerCase()]=e})),this):(console.log(t),!0)}const tA={start:function(){X.forEach(AA)},add:AA,get:function(A){if(!A)return!1;var t=A.toLowerCase();return void 0!==Z[t]&&$[Z[t]]?$[Z[t]]:void 0}};var eA={MERIT:{a:6378137,rf:298.257,ellipseName:"MERIT 1983"},SGS85:{a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"},GRS80:{a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"},IAU76:{a:6378140,rf:298.257,ellipseName:"IAU 1976"},airy:{a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"},APL4:{a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"},NWL9D:{a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"},mod_airy:{a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"},andrae:{a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"},aust_SA:{a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"},GRS67:{a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"},bessel:{a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"},bess_nam:{a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"},clrk66:{a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"},clrk80:{a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."},clrk80ign:{a:6378249.2,b:6356515,rf:293.4660213,ellipseName:"Clarke 1880 (IGN)"},clrk58:{a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"},CPM:{a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"},delmbr:{a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"},engelis:{a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"},evrst30:{a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"},evrst48:{a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"},evrst56:{a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"},evrst69:{a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"},evrstSS:{a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"},fschr60:{a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"},fschr60m:{a:6378155,rf:298.3,ellipseName:"Fischer 1960"},fschr68:{a:6378150,rf:298.3,ellipseName:"Fischer 1968"},helmert:{a:6378200,rf:298.3,ellipseName:"Helmert 1906"},hough:{a:6378270,rf:297,ellipseName:"Hough"},intl:{a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"},kaula:{a:6378163,rf:298.24,ellipseName:"Kaula 1961"},lerch:{a:6378139,rf:298.257,ellipseName:"Lerch 1979"},mprts:{a:6397300,rf:191,ellipseName:"Maupertius 1738"},new_intl:{a:6378157.5,b:6356772.2,ellipseName:"New International 1967"},plessis:{a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"},krass:{a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"},SEasia:{a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"},walbeck:{a:6376896,b:6355834.8467,ellipseName:"Walbeck"},WGS60:{a:6378165,rf:298.3,ellipseName:"WGS 60"},WGS66:{a:6378145,rf:298.25,ellipseName:"WGS 66"},WGS7:{a:6378135,rf:298.26,ellipseName:"WGS 72"}},iA=eA.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};eA.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"};var sA={};sA.wgs84={towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"},sA.ch1903={towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"},sA.ggrs87={towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"},sA.nad83={towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"},sA.nad27={nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"},sA.potsdam={towgs84:"598.1,73.7,418.2,0.202,0.045,-2.455,6.7",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"},sA.carthage={towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"},sA.hermannskogel={towgs84:"577.326,90.129,463.919,5.137,1.474,5.297,2.4232",ellipse:"bessel",datumName:"Hermannskogel"},sA.militargeographische_institut={towgs84:"577.326,90.129,463.919,5.137,1.474,5.297,2.4232",ellipse:"bessel",datumName:"Militar-Geographische Institut"},sA.osni52={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"airy",datumName:"Irish National"},sA.ire65={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"},sA.rassadiran={towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"},sA.nzgd49={towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"},sA.osgb36={towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"},sA.s_jtsk={towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"},sA.beduaram={towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"},sA.gunung_segara={towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"},sA.rnb72={towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"};const aA=function(A,t,e,o,r,l,g){var c={};return c.datum_type=void 0===A||"none"===A?n:4,t&&(c.datum_params=t.map(parseFloat),0===c.datum_params[0]&&0===c.datum_params[1]&&0===c.datum_params[2]||(c.datum_type=i),c.datum_params.length>3&&(0===c.datum_params[3]&&0===c.datum_params[4]&&0===c.datum_params[5]&&0===c.datum_params[6]||(c.datum_type=s,c.datum_params[3]*=h,c.datum_params[4]*=h,c.datum_params[5]*=h,c.datum_params[6]=c.datum_params[6]/1e6+1))),g&&(c.datum_type=a,c.grids=g),c.a=e,c.b=o,c.es=r,c.ep2=l,c};var nA={};function oA(A){if(0===A.length)return null;var t="@"===A[0];return t&&(A=A.slice(1)),"null"===A?{name:"null",mandatory:!t,grid:null,isNull:!0}:{name:A,mandatory:!t,grid:nA[A]||null,isNull:!1}}function rA(A){return A/3600*Math.PI/180}function lA(A,t,e){return String.fromCharCode.apply(null,new Uint8Array(A.buffer.slice(t,e)))}function hA(A){return A.map((function(A){return[rA(A.longitudeShift),rA(A.latitudeShift)]}))}function gA(A,t,e){return{name:lA(A,t+8,t+16).trim(),parent:lA(A,t+24,t+24+8).trim(),lowerLatitude:A.getFloat64(t+72,e),upperLatitude:A.getFloat64(t+88,e),lowerLongitude:A.getFloat64(t+104,e),upperLongitude:A.getFloat64(t+120,e),latitudeInterval:A.getFloat64(t+136,e),longitudeInterval:A.getFloat64(t+152,e),gridNodeCount:A.getInt32(t+168,e)}}function cA(A,t,e,i){for(var s=t+176,a=[],n=0;n<e.gridNodeCount;n++){var o={latitudeShift:A.getFloat32(s+16*n,i),longitudeShift:A.getFloat32(s+16*n+4,i),latitudeAccuracy:A.getFloat32(s+16*n+8,i),longitudeAccuracy:A.getFloat32(s+16*n+12,i)};a.push(o)}return a}function fA(A,t){if(!(this instanceof fA))return new fA(A);t=t||function(A){if(A)throw A};var e=J(A);if("object"==typeof e){var i=fA.projections.get(e.projName);if(i){if(e.datumCode&&"none"!==e.datumCode){var s=Q(sA,e.datumCode);s&&(e.datum_params=e.datum_params||(s.towgs84?s.towgs84.split(","):null),e.ellps=s.ellipse,e.datumName=s.datumName?s.datumName:e.datumCode)}e.k0=e.k0||1,e.axis=e.axis||"enu",e.ellps=e.ellps||"wgs84",e.lat1=e.lat1||e.lat0;var a,n,o,r,l,h,g,I=function(A,t,e,i,s){if(!A){var a=Q(eA,i);a||(a=iA),A=a.a,t=a.b,e=a.rf}return e&&!t&&(t=(1-1/e)*A),(0===e||Math.abs(A-t)<d)&&(s=!0,t=A),{a:A,b:t,rf:e,sphere:s}}(e.a,e.b,e.rf,e.ellps,e.sphere),p=(a=I.a,n=I.b,I.rf,o=e.R_A,h=((r=a*a)-(l=n*n))/r,g=0,o?(r=(a*=1-h*(c+h*(f+h*u)))*a,h=0):g=Math.sqrt(h),{es:h,e:g,ep2:(r-l)/l}),_=function(A){return void 0===A?null:A.split(",").map(oA)}(e.nadgrids),C=e.datum||aA(e.datumCode,e.datum_params,I.a,I.b,p.es,p.ep2,_);q(this,e),q(this,i),this.a=I.a,this.b=I.b,this.rf=I.rf,this.sphere=I.sphere,this.es=p.es,this.e=p.e,this.ep2=p.ep2,this.datum=C,this.init(),t(null,this)}else t(A)}else t(A)}fA.projections=tA,fA.projections.start();const uA=fA;function dA(A,t,e){var i,s,a,n,o=A.x,r=A.y,l=A.z?A.z:0;if(r<-g&&r>-1.001*g)r=-g;else if(r>g&&r<1.001*g)r=g;else{if(r<-g)return{x:-1/0,y:-1/0,z:A.z};if(r>g)return{x:1/0,y:1/0,z:A.z}}return o>Math.PI&&(o-=2*Math.PI),s=Math.sin(r),n=Math.cos(r),a=s*s,{x:((i=e/Math.sqrt(1-t*a))+l)*n*Math.cos(o),y:(i+l)*n*Math.sin(o),z:(i*(1-t)+l)*s}}function IA(A,t,e,i){var s,a,n,o,r,l,h,c,f,u,d,I,p,_,C,B=1e-12,w=A.x,E=A.y,y=A.z?A.z:0;if(s=Math.sqrt(w*w+E*E),a=Math.sqrt(w*w+E*E+y*y),s/e<B){if(_=0,a/e<B)return g,C=-i,{x:A.x,y:A.y,z:A.z}}else _=Math.atan2(E,w);n=y/a,c=(o=s/a)*(1-t)*(r=1/Math.sqrt(1-t*(2-t)*o*o)),f=n*r,p=0;do{p++,l=t*(h=e/Math.sqrt(1-t*f*f))/(h+(C=s*c+y*f-h*(1-t*f*f))),I=(d=n*(r=1/Math.sqrt(1-l*(2-l)*o*o)))*c-(u=o*(1-l)*r)*f,c=u,f=d}while(I*I>1e-24&&p<30);return{x:_,y:Math.atan(d/Math.abs(u)),z:C}}function pA(A){return A===i||A===s}function _A(A,t,e){if(function(A,t){return A.datum_type===t.datum_type&&!(A.a!==t.a||Math.abs(A.es-t.es)>5e-11)&&(A.datum_type===i?A.datum_params[0]===t.datum_params[0]&&A.datum_params[1]===t.datum_params[1]&&A.datum_params[2]===t.datum_params[2]:A.datum_type!==s||A.datum_params[0]===t.datum_params[0]&&A.datum_params[1]===t.datum_params[1]&&A.datum_params[2]===t.datum_params[2]&&A.datum_params[3]===t.datum_params[3]&&A.datum_params[4]===t.datum_params[4]&&A.datum_params[5]===t.datum_params[5]&&A.datum_params[6]===t.datum_params[6])}(A,t))return e;if(A.datum_type===n||t.datum_type===n)return e;var h=A.a,g=A.es;if(A.datum_type===a){if(0!==CA(A,!1,e))return;h=o,g=l}var c=t.a,f=t.b,u=t.es;if(t.datum_type===a&&(c=o,f=r,u=l),g===u&&h===c&&!pA(A.datum_type)&&!pA(t.datum_type))return e;if((e=dA(e,g,h),pA(A.datum_type)&&(e=function(A,t,e){if(t===i)return{x:A.x+e[0],y:A.y+e[1],z:A.z+e[2]};if(t===s){var a=e[0],n=e[1],o=e[2],r=e[3],l=e[4],h=e[5],g=e[6];return{x:g*(A.x-h*A.y+l*A.z)+a,y:g*(h*A.x+A.y-r*A.z)+n,z:g*(-l*A.x+r*A.y+A.z)+o}}}(e,A.datum_type,A.datum_params)),pA(t.datum_type)&&(e=function(A,t,e){if(t===i)return{x:A.x-e[0],y:A.y-e[1],z:A.z-e[2]};if(t===s){var a=e[0],n=e[1],o=e[2],r=e[3],l=e[4],h=e[5],g=e[6],c=(A.x-a)/g,f=(A.y-n)/g,u=(A.z-o)/g;return{x:c+h*f-l*u,y:-h*c+f+r*u,z:l*c-r*f+u}}}(e,t.datum_type,t.datum_params)),e=IA(e,u,c,f),t.datum_type===a)&&0!==CA(t,!0,e))return;return e}function CA(A,t,e){if(null===A.grids||0===A.grids.length)return console.log("Grid shift grids not found"),-1;var i={x:-e.x,y:e.y},s={x:Number.NaN,y:Number.NaN},a=[];A:for(var n=0;n<A.grids.length;n++){var o=A.grids[n];if(a.push(o.name),o.isNull){s=i;break}if(o.mandatory,null!==o.grid)for(var r=o.grid.subgrids,l=0,h=r.length;l<h;l++){var g=r[l],c=(Math.abs(g.del[1])+Math.abs(g.del[0]))/1e4,f=g.ll[0]-c,u=g.ll[1]-c,d=g.ll[0]+(g.lim[0]-1)*g.del[0]+c,I=g.ll[1]+(g.lim[1]-1)*g.del[1]+c;if(!(u>i.y||f>i.x||I<i.y||d<i.x)&&(s=BA(i,t,g),!isNaN(s.x)))break A}else if(o.mandatory)return console.log("Unable to find mandatory grid \'"+o.name+"\'"),-1}return isNaN(s.x)?(console.log("Failed to find a grid shift table for location \'"+-i.x*p+" "+i.y*p+" tried: \'"+a+"\'"),-1):(e.x=-s.x,e.y=s.y,0)}function BA(A,t,e){var i={x:Number.NaN,y:Number.NaN};if(isNaN(A.x))return i;var s={x:A.x,y:A.y};s.x-=e.ll[0],s.y-=e.ll[1],s.x=K(s.x-Math.PI)+Math.PI;var a=wA(s,e);if(t){if(isNaN(a.x))return i;a.x=s.x-a.x,a.y=s.y-a.y;var n,o,r=9;do{if(o=wA(a,e),isNaN(o.x)){console.log("Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.");break}n={x:s.x-(o.x+a.x),y:s.y-(o.y+a.y)},a.x+=n.x,a.y+=n.y}while(r--&&Math.abs(n.x)>1e-12&&Math.abs(n.y)>1e-12);if(r<0)return console.log("Inverse grid shift iterator failed to converge."),i;i.x=K(a.x+e.ll[0]),i.y=a.y+e.ll[1]}else isNaN(a.x)||(i.x=A.x+a.x,i.y=A.y+a.y);return i}function wA(A,t){var e,i={x:A.x/t.del[0],y:A.y/t.del[1]},s=Math.floor(i.x),a=Math.floor(i.y),n=i.x-1*s,o=i.y-1*a,r={x:Number.NaN,y:Number.NaN};if(s<0||s>=t.lim[0])return r;if(a<0||a>=t.lim[1])return r;e=a*t.lim[0]+s;var l=t.cvs[e][0],h=t.cvs[e][1];e++;var g=t.cvs[e][0],c=t.cvs[e][1];e+=t.lim[0];var f=t.cvs[e][0],u=t.cvs[e][1];e--;var d=t.cvs[e][0],I=t.cvs[e][1],p=n*o,_=n*(1-o),C=(1-n)*(1-o),B=(1-n)*o;return r.x=C*l+_*g+B*d+p*f,r.y=C*h+_*c+B*I+p*u,r}function EA(A,t,e){var i,s,a,n=e.x,o=e.y,r=e.z||0,l={};for(a=0;a<3;a++)if(!t||2!==a||void 0!==e.z)switch(0===a?(i=n,s=-1!=="ew".indexOf(A.axis[a])?"x":"y"):1===a?(i=o,s=-1!=="ns".indexOf(A.axis[a])?"y":"x"):(i=r,s="z"),A.axis[a]){case"e":case"n":l[s]=i;break;case"w":case"s":l[s]=-i;break;case"u":void 0!==e[s]&&(l.z=i);break;case"d":void 0!==e[s]&&(l.z=-i);break;default:return null}return l}function yA(A){var t={x:A[0],y:A[1]};return A.length>2&&(t.z=A[2]),A.length>3&&(t.m=A[3]),t}function QA(A){if("function"==typeof Number.isFinite){if(Number.isFinite(A))return;throw new TypeError("coordinates must be finite numbers")}if("number"!=typeof A||A!=A||!isFinite(A))throw new TypeError("coordinates must be finite numbers")}function mA(A,t,e,n){var o,r=void 0!==(e=Array.isArray(e)?yA(e):{x:e.x,y:e.y,z:e.z,m:e.m}).z;if(function(A){QA(A.x),QA(A.y)}(e),A.datum&&t.datum&&function(A,t){return(A.datum.datum_type===i||A.datum.datum_type===s||A.datum.datum_type===a)&&"WGS84"!==t.datumCode||(t.datum.datum_type===i||t.datum.datum_type===s||t.datum.datum_type===a)&&"WGS84"!==A.datumCode}(A,t)&&(e=mA(A,o=new uA("WGS84"),e,n),A=o),n&&"enu"!==A.axis&&(e=EA(A,!1,e)),"longlat"===A.projName)e={x:e.x*I,y:e.y*I,z:e.z||0};else if(A.to_meter&&(e={x:e.x*A.to_meter,y:e.y*A.to_meter,z:e.z||0}),!(e=A.inverse(e)))return;if(A.from_greenwich&&(e.x+=A.from_greenwich),e=_A(A.datum,t.datum,e))return t.from_greenwich&&(e={x:e.x-t.from_greenwich,y:e.y,z:e.z||0}),"longlat"===t.projName?e={x:e.x*p,y:e.y*p,z:e.z||0}:(e=t.forward(e),t.to_meter&&(e={x:e.x/t.to_meter,y:e.y/t.to_meter,z:e.z||0})),n&&"enu"!==t.axis?EA(t,!0,e):(e&&!r&&delete e.z,e)}var kA=uA("WGS84");function xA(A,t,e,i){var s,a,n;return Array.isArray(e)?(s=mA(A,t,e,i)||{x:NaN,y:NaN},e.length>2?void 0!==A.name&&"geocent"===A.name||void 0!==t.name&&"geocent"===t.name?"number"==typeof s.z?[s.x,s.y,s.z].concat(e.splice(3)):[s.x,s.y,e[2]].concat(e.splice(3)):[s.x,s.y].concat(e.splice(2)):[s.x,s.y]):(a=mA(A,t,e,i),2===(n=Object.keys(e)).length||n.forEach((function(i){if(void 0!==A.name&&"geocent"===A.name||void 0!==t.name&&"geocent"===t.name){if("x"===i||"y"===i||"z"===i)return}else if("x"===i||"y"===i)return;a[i]=e[i]})),a)}function MA(A){return A instanceof uA?A:A.oProj?A.oProj:uA(A)}const bA=function(A,t,e){A=MA(A);var i,s=!1;return void 0===t?(t=A,A=kA,s=!0):(void 0!==t.x||Array.isArray(t))&&(e=t,t=A,A=kA,s=!0),t=MA(t),e?xA(A,t,e):(i={forward:function(e,i){return xA(A,t,e,i)},inverse:function(e,i){return xA(t,A,e,i)}},s&&(i.oProj=t),i)};var DA=6,vA="AJSAJS",SA="AFAFAF",GA=65,NA=73,RA=79,FA=86,LA=90;const UA={forward:OA,inverse:function(A){var t=JA(jA(A.toUpperCase()));if(t.lat&&t.lon)return[t.lon,t.lat,t.lon,t.lat];return[t.left,t.bottom,t.right,t.top]},toPoint:PA};function OA(A,t){return t=t||5,function(A,t){var e="00000"+A.easting,i="00000"+A.northing;return A.zoneNumber+A.zoneLetter+(f=A.easting,u=A.northing,d=A.zoneNumber,I=zA(d),p=Math.floor(f/1e5),_=Math.floor(u/1e5)%20,s=p,a=_,n=I,o=n-1,r=vA.charCodeAt(o),l=SA.charCodeAt(o),h=r+s-1,g=l+a,c=!1,h>LA&&(h=h-LA+GA-1,c=!0),(h===NA||r<NA&&h>NA||(h>NA||r<NA)&&c)&&h++,(h===RA||r<RA&&h>RA||(h>RA||r<RA)&&c)&&++h===NA&&h++,h>LA&&(h=h-LA+GA-1),g>FA?(g=g-FA+GA-1,c=!0):c=!1,(g===NA||l<NA&&g>NA||(g>NA||l<NA)&&c)&&g++,(g===RA||l<RA&&g>RA||(g>RA||l<RA)&&c)&&++g===NA&&g++,g>FA&&(g=g-FA+GA-1),String.fromCharCode(h)+String.fromCharCode(g))+e.substr(e.length-5,t)+i.substr(i.length-5,t);var s,a,n,o,r,l,h,g,c;var f,u,d,I,p,_}(function(A){var t,e,i,s,a,n,o,r,l=A.lat,h=A.lon,g=6378137,c=.00669438,f=.9996,u=TA(l),d=TA(h);r=Math.floor((h+180)/6)+1,180===h&&(r=60);l>=56&&l<64&&h>=3&&h<12&&(r=32);l>=72&&l<84&&(h>=0&&h<9?r=31:h>=9&&h<21?r=33:h>=21&&h<33?r=35:h>=33&&h<42&&(r=37));o=TA(6*(r-1)-180+3),t=c/(1-c),e=g/Math.sqrt(1-c*Math.sin(u)*Math.sin(u)),i=Math.tan(u)*Math.tan(u),s=t*Math.cos(u)*Math.cos(u),a=Math.cos(u)*(d-o),n=g*((1-c/4-3*c*c/64-5*c*c*c/256)*u-(3*c/8+3*c*c/32+45*c*c*c/1024)*Math.sin(2*u)+(15*c*c/256+45*c*c*c/1024)*Math.sin(4*u)-35*c*c*c/3072*Math.sin(6*u));var I=f*e*(a+(1-i+s)*a*a*a/6+(5-18*i+i*i+72*s-58*t)*a*a*a*a*a/120)+5e5,p=f*(n+e*Math.tan(u)*(a*a/2+(5-i+9*s+4*s*s)*a*a*a*a/24+(61-58*i+i*i+600*s-330*t)*a*a*a*a*a*a/720));l<0&&(p+=1e7);return{northing:Math.round(p),easting:Math.round(I),zoneNumber:r,zoneLetter:qA(l)}}({lat:A[1],lon:A[0]}),t)}function PA(A){var t=JA(jA(A.toUpperCase()));return t.lat&&t.lon?[t.lon,t.lat]:[(t.left+t.right)/2,(t.top+t.bottom)/2]}function TA(A){return A*(Math.PI/180)}function HA(A){return A/Math.PI*180}function JA(A){var t=A.northing,e=A.easting,i=A.zoneLetter,s=A.zoneNumber;if(s<0||s>60)return null;var a,n,o,r,l,h,g,c,f,u=.9996,d=6378137,I=.00669438,p=(1-Math.sqrt(.99330562))/(1+Math.sqrt(.99330562)),_=e-5e5,C=t;i<"N"&&(C-=1e7),g=6*(s-1)-180+3,a=.006739496752268451,f=(c=C/u/6367449.145945056)+(3*p/2-27*p*p*p/32)*Math.sin(2*c)+(21*p*p/16-55*p*p*p*p/32)*Math.sin(4*c)+151*p*p*p/96*Math.sin(6*c),n=d/Math.sqrt(1-I*Math.sin(f)*Math.sin(f)),o=Math.tan(f)*Math.tan(f),r=a*Math.cos(f)*Math.cos(f),l=.99330562*d/Math.pow(1-I*Math.sin(f)*Math.sin(f),1.5),h=_/(n*u);var B=f-n*Math.tan(f)/l*(h*h/2-(5+3*o+10*r-4*r*r-9*a)*h*h*h*h/24+(61+90*o+298*r+45*o*o-1.6983531815716497-3*r*r)*h*h*h*h*h*h/720);B=HA(B);var w,E=(h-(1+2*o+r)*h*h*h/6+(5-2*r+28*o-3*r*r+8*a+24*o*o)*h*h*h*h*h/120)/Math.cos(f);if(E=g+HA(E),A.accuracy){var y=JA({northing:A.northing+A.accuracy,easting:A.easting+A.accuracy,zoneLetter:A.zoneLetter,zoneNumber:A.zoneNumber});w={top:y.lat,right:y.lon,bottom:B,left:E}}else w={lat:B,lon:E};return w}function qA(A){var t="Z";return 84>=A&&A>=72?t="X":72>A&&A>=64?t="W":64>A&&A>=56?t="V":56>A&&A>=48?t="U":48>A&&A>=40?t="T":40>A&&A>=32?t="S":32>A&&A>=24?t="R":24>A&&A>=16?t="Q":16>A&&A>=8?t="P":8>A&&A>=0?t="N":0>A&&A>=-8?t="M":-8>A&&A>=-16?t="L":-16>A&&A>=-24?t="K":-24>A&&A>=-32?t="J":-32>A&&A>=-40?t="H":-40>A&&A>=-48?t="G":-48>A&&A>=-56?t="F":-56>A&&A>=-64?t="E":-64>A&&A>=-72?t="D":-72>A&&A>=-80&&(t="C"),t}function zA(A){var t=A%DA;return 0===t&&(t=DA),t}function jA(A){if(A&&0===A.length)throw"MGRSPoint coverting from nothing";for(var t,e=A.length,i=null,s="",a=0;!/[A-Z]/.test(t=A.charAt(a));){if(a>=2)throw"MGRSPoint bad conversion from: "+A;s+=t,a++}var n=parseInt(s,10);if(0===a||a+3>e)throw"MGRSPoint bad conversion from: "+A;var o=A.charAt(a++);if(o<="A"||"B"===o||"Y"===o||o>="Z"||"I"===o||"O"===o)throw"MGRSPoint zone letter "+o+" not handled: "+A;i=A.substring(a,a+=2);for(var r=zA(n),l=function(A,t){var e=vA.charCodeAt(t-1),i=1e5,s=!1;for(;e!==A.charCodeAt(0);){if(++e===NA&&e++,e===RA&&e++,e>LA){if(s)throw"Bad character: "+A;e=GA,s=!0}i+=1e5}return i}(i.charAt(0),r),h=function(A,t){if(A>"V")throw"MGRSPoint given invalid Northing "+A;var e=SA.charCodeAt(t-1),i=0,s=!1;for(;e!==A.charCodeAt(0);){if(++e===NA&&e++,e===RA&&e++,e>FA){if(s)throw"Bad character: "+A;e=GA,s=!0}i+=1e5}return i}(i.charAt(1),r);h<KA(o);)h+=2e6;var g=e-a;if(g%2!=0)throw"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters"+A;var c,f,u,d=g/2,I=0,p=0;return d>0&&(c=1e5/Math.pow(10,d),f=A.substring(a,a+d),I=parseFloat(f)*c,u=A.substring(a+d),p=parseFloat(u)*c),{easting:I+l,northing:p+h,zoneLetter:o,zoneNumber:n,accuracy:c}}function KA(A){var t;switch(A){case"C":t=11e5;break;case"D":t=2e6;break;case"E":t=28e5;break;case"F":t=37e5;break;case"G":t=46e5;break;case"H":t=55e5;break;case"J":t=64e5;break;case"K":t=73e5;break;case"L":t=82e5;break;case"M":t=91e5;break;case"N":t=0;break;case"P":t=8e5;break;case"Q":t=17e5;break;case"R":t=26e5;break;case"S":t=35e5;break;case"T":t=44e5;break;case"U":t=53e5;break;case"V":t=62e5;break;case"W":t=7e6;break;case"X":t=79e5;break;default:t=-1}if(t>=0)return t;throw"Invalid zone letter: "+A}function YA(A,t,e){if(!(this instanceof YA))return new YA(A,t,e);if(Array.isArray(A))this.x=A[0],this.y=A[1],this.z=A[2]||0;else if("object"==typeof A)this.x=A.x,this.y=A.y,this.z=A.z||0;else if("string"==typeof A&&void 0===t){var i=A.split(",");this.x=parseFloat(i[0],10),this.y=parseFloat(i[1],10),this.z=parseFloat(i[2],10)||0}else this.x=A,this.y=t,this.z=e||0;console.warn("proj4.Point will be removed in version 3, use proj4.toPoint")}YA.fromMGRS=function(A){return new YA(PA(A))},YA.prototype.toMGRS=function(A){return OA([this.x,this.y],A)};const VA=YA;var WA=1,XA=.25,ZA=.046875,$A=.01953125,At=.01068115234375,tt=.75,et=.46875,it=.013020833333333334,st=.007120768229166667,at=.3645833333333333,nt=.005696614583333333,ot=.3076171875;function rt(A){var t=[];t[0]=WA-A*(XA+A*(ZA+A*($A+A*At))),t[1]=A*(tt-A*(ZA+A*($A+A*At)));var e=A*A;return t[2]=e*(et-A*(it+A*st)),e*=A,t[3]=e*(at-A*nt),t[4]=e*A*ot,t}function lt(A,t,e,i){return e*=t,t*=t,i[0]*A-e*(i[1]+t*(i[2]+t*(i[3]+t*i[4])))}var ht=20;function gt(A,t,e){for(var i=1/(1-t),s=A,a=ht;a;--a){var n=Math.sin(s),o=1-t*n*n;if(s-=o=(lt(s,n,Math.cos(s),e)-A)*(o*Math.sqrt(o))*i,Math.abs(o)<d)return s}return s}const ct={init:function(){this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.es&&(this.en=rt(this.es),this.ml0=lt(this.lat0,Math.sin(this.lat0),Math.cos(this.lat0),this.en))},forward:function(A){var t,e,i,s=A.x,a=A.y,n=K(s-this.long0),o=Math.sin(a),r=Math.cos(a);if(this.es){var l=r*n,h=Math.pow(l,2),g=this.ep2*Math.pow(r,2),c=Math.pow(g,2),f=Math.abs(r)>d?Math.tan(a):0,u=Math.pow(f,2),I=Math.pow(u,2);t=1-this.es*Math.pow(o,2),l/=Math.sqrt(t);var p=lt(a,o,r,this.en);e=this.a*(this.k0*l*(1+h/6*(1-u+g+h/20*(5-18*u+I+14*g-58*u*g+h/42*(61+179*I-I*u-479*u)))))+this.x0,i=this.a*(this.k0*(p-this.ml0+o*n*l/2*(1+h/12*(5-u+9*g+4*c+h/30*(61+I-58*u+270*g-330*u*g+h/56*(1385+543*I-I*u-3111*u))))))+this.y0}else{var _=r*Math.sin(n);if(Math.abs(Math.abs(_)-1)<d)return 93;if(e=.5*this.a*this.k0*Math.log((1+_)/(1-_))+this.x0,i=r*Math.cos(n)/Math.sqrt(1-Math.pow(_,2)),(_=Math.abs(i))>=1){if(_-1>d)return 93;i=0}else i=Math.acos(i);a<0&&(i=-i),i=this.a*this.k0*(i-this.lat0)+this.y0}return A.x=e,A.y=i,A},inverse:function(A){var t,e,i,s,a=(A.x-this.x0)*(1/this.a),n=(A.y-this.y0)*(1/this.a);if(this.es)if(e=gt(t=this.ml0+n/this.k0,this.es,this.en),Math.abs(e)<g){var o=Math.sin(e),r=Math.cos(e),l=Math.abs(r)>d?Math.tan(e):0,h=this.ep2*Math.pow(r,2),c=Math.pow(h,2),f=Math.pow(l,2),u=Math.pow(f,2);t=1-this.es*Math.pow(o,2);var I=a*Math.sqrt(t)/this.k0,p=Math.pow(I,2);i=e-(t*=l)*p/(1-this.es)*.5*(1-p/12*(5+3*f-9*h*f+h-4*c-p/30*(61+90*f-252*h*f+45*u+46*h-p/56*(1385+3633*f+4095*u+1574*u*f)))),s=K(this.long0+I*(1-p/6*(1+2*f+h-p/20*(5+28*f+24*u+8*h*f+6*h-p/42*(61+662*f+1320*u+720*u*f))))/r)}else i=g*j(n),s=0;else{var _=Math.exp(a/this.k0),C=.5*(_-1/_),B=this.lat0+n/this.k0,w=Math.cos(B);t=Math.sqrt((1-Math.pow(w,2))/(1+Math.pow(C,2))),i=Math.asin(t),n<0&&(i=-i),s=0===C&&0===w?0:K(Math.atan2(C,w)+this.long0)}return A.x=s,A.y=i,A},names:["Fast_Transverse_Mercator","Fast Transverse Mercator"]};function ft(A){var t=Math.exp(A);return t=(t-1/t)/2}function ut(A,t){A=Math.abs(A),t=Math.abs(t);var e=Math.max(A,t),i=Math.min(A,t)/(e||1);return e*Math.sqrt(1+Math.pow(i,2))}function dt(A){var t=Math.abs(A);return t=function(A){var t=1+A,e=t-1;return 0===e?A:A*Math.log(t)/e}(t*(1+t/(ut(1,t)+1))),A<0?-t:t}function It(A,t){for(var e,i=2*Math.cos(2*t),s=A.length-1,a=A[s],n=0;--s>=0;)e=i*a-n+A[s],n=a,a=e;return t+e*Math.sin(2*t)}function pt(A,t,e){for(var i,s,a=Math.sin(t),n=Math.cos(t),o=ft(e),r=function(A){var t=Math.exp(A);return(t+1/t)/2}(e),l=2*n*r,h=-2*a*o,g=A.length-1,c=A[g],f=0,u=0,d=0;--g>=0;)i=u,s=f,c=l*(u=c)-i-h*(f=d)+A[g],d=h*u-s+l*f;return[(l=a*r)*c-(h=n*o)*d,l*d+h*c]}const _t={init:function(){if(!this.approx&&(isNaN(this.es)||this.es<=0))throw new Error(\'Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION["Fast_Transverse_Mercator"] in the WKT.\');this.approx&&(ct.init.apply(this),this.forward=ct.forward,this.inverse=ct.inverse),this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.cgb=[],this.cbg=[],this.utg=[],this.gtu=[];var A=this.es/(1+Math.sqrt(1-this.es)),t=A/(2-A),e=t;this.cgb[0]=t*(2+t*(-2/3+t*(t*(116/45+t*(26/45+t*(-2854/675)))-2))),this.cbg[0]=t*(t*(2/3+t*(4/3+t*(-82/45+t*(32/45+t*(4642/4725)))))-2),e*=t,this.cgb[1]=e*(7/3+t*(t*(-227/45+t*(2704/315+t*(2323/945)))-1.6)),this.cbg[1]=e*(5/3+t*(-16/15+t*(-13/9+t*(904/315+t*(-1522/945))))),e*=t,this.cgb[2]=e*(56/15+t*(-136/35+t*(-1262/105+t*(73814/2835)))),this.cbg[2]=e*(-26/15+t*(34/21+t*(1.6+t*(-12686/2835)))),e*=t,this.cgb[3]=e*(4279/630+t*(-332/35+t*(-399572/14175))),this.cbg[3]=e*(1237/630+t*(t*(-24832/14175)-2.4)),e*=t,this.cgb[4]=e*(4174/315+t*(-144838/6237)),this.cbg[4]=e*(-734/315+t*(109598/31185)),e*=t,this.cgb[5]=e*(601676/22275),this.cbg[5]=e*(444337/155925),e=Math.pow(t,2),this.Qn=this.k0/(1+t)*(1+e*(1/4+e*(1/64+e/256))),this.utg[0]=t*(t*(2/3+t*(-37/96+t*(1/360+t*(81/512+t*(-96199/604800)))))-.5),this.gtu[0]=t*(.5+t*(-2/3+t*(5/16+t*(41/180+t*(-127/288+t*(7891/37800)))))),this.utg[1]=e*(-1/48+t*(-1/15+t*(437/1440+t*(-46/105+t*(1118711/3870720))))),this.gtu[1]=e*(13/48+t*(t*(557/1440+t*(281/630+t*(-1983433/1935360)))-.6)),e*=t,this.utg[2]=e*(-17/480+t*(37/840+t*(209/4480+t*(-5569/90720)))),this.gtu[2]=e*(61/240+t*(-103/140+t*(15061/26880+t*(167603/181440)))),e*=t,this.utg[3]=e*(-4397/161280+t*(11/504+t*(830251/7257600))),this.gtu[3]=e*(49561/161280+t*(-179/168+t*(6601661/7257600))),e*=t,this.utg[4]=e*(-4583/161280+t*(108847/3991680)),this.gtu[4]=e*(34729/80640+t*(-3418889/1995840)),e*=t,this.utg[5]=e*(-20648693/638668800),this.gtu[5]=.6650675310896665*e;var i=It(this.cbg,this.lat0);this.Zb=-this.Qn*(i+function(A,t){for(var e,i=2*Math.cos(t),s=A.length-1,a=A[s],n=0;--s>=0;)e=i*a-n+A[s],n=a,a=e;return Math.sin(t)*e}(this.gtu,2*i))},forward:function(A){var t=K(A.x-this.long0),e=A.y;e=It(this.cbg,e);var i=Math.sin(e),s=Math.cos(e),a=Math.sin(t),n=Math.cos(t);e=Math.atan2(i,n*s),t=Math.atan2(a*s,ut(i,s*n)),t=dt(Math.tan(t));var o,r,l=pt(this.gtu,2*e,2*t);return e+=l[0],t+=l[1],Math.abs(t)<=2.623395162778?(o=this.a*(this.Qn*t)+this.x0,r=this.a*(this.Qn*e+this.Zb)+this.y0):(o=1/0,r=1/0),A.x=o,A.y=r,A},inverse:function(A){var t,e,i=(A.x-this.x0)*(1/this.a),s=(A.y-this.y0)*(1/this.a);if(s=(s-this.Zb)/this.Qn,i/=this.Qn,Math.abs(i)<=2.623395162778){var a=pt(this.utg,2*s,2*i);s+=a[0],i+=a[1],i=Math.atan(ft(i));var n=Math.sin(s),o=Math.cos(s),r=Math.sin(i),l=Math.cos(i);s=Math.atan2(n*l,ut(r,l*o)),t=K((i=Math.atan2(r,l*o))+this.long0),e=It(this.cgb,s)}else t=1/0,e=1/0;return A.x=t,A.y=e,A},names:["Extended_Transverse_Mercator","Extended Transverse Mercator","etmerc","Transverse_Mercator","Transverse Mercator","Gauss Kruger","Gauss_Kruger","tmerc"]};const Ct={init:function(){var A=function(A,t){if(void 0===A){if((A=Math.floor(30*(K(t)+Math.PI)/Math.PI)+1)<0)return 0;if(A>60)return 60}return A}(this.zone,this.long0);if(void 0===A)throw new Error("unknown utm zone");this.lat0=0,this.long0=(6*Math.abs(A)-183)*I,this.x0=5e5,this.y0=this.utmSouth?1e7:0,this.k0=.9996,_t.init.apply(this),this.forward=_t.forward,this.inverse=_t.inverse},names:["Universal Transverse Mercator System","utm"],dependsOn:"etmerc"};function Bt(A,t){return Math.pow((1-A)/(1+A),t)}const wt={init:function(){var A=Math.sin(this.lat0),t=Math.cos(this.lat0);t*=t,this.rc=Math.sqrt(1-this.es)/(1-this.es*A*A),this.C=Math.sqrt(1+this.es*t*t/(1-this.es)),this.phic0=Math.asin(A/this.C),this.ratexp=.5*this.C*this.e,this.K=Math.tan(.5*this.phic0+_)/(Math.pow(Math.tan(.5*this.lat0+_),this.C)*Bt(this.e*A,this.ratexp))},forward:function(A){var t=A.x,e=A.y;return A.y=2*Math.atan(this.K*Math.pow(Math.tan(.5*e+_),this.C)*Bt(this.e*Math.sin(e),this.ratexp))-g,A.x=this.C*t,A},inverse:function(A){for(var t=A.x/this.C,e=A.y,i=Math.pow(Math.tan(.5*e+_)/this.K,1/this.C),s=20;s>0&&(e=2*Math.atan(i*Bt(this.e*Math.sin(A.y),-.5*this.e))-g,!(Math.abs(e-A.y)<1e-14));--s)A.y=e;return s?(A.x=t,A.y=e,A):null},names:["gauss"]};const Et={init:function(){wt.init.apply(this),this.rc&&(this.sinc0=Math.sin(this.phic0),this.cosc0=Math.cos(this.phic0),this.R2=2*this.rc,this.title||(this.title="Oblique Stereographic Alternative"))},forward:function(A){var t,e,i,s;return A.x=K(A.x-this.long0),wt.forward.apply(this,[A]),t=Math.sin(A.y),e=Math.cos(A.y),i=Math.cos(A.x),s=this.k0*this.R2/(1+this.sinc0*t+this.cosc0*e*i),A.x=s*e*Math.sin(A.x),A.y=s*(this.cosc0*t-this.sinc0*e*i),A.x=this.a*A.x+this.x0,A.y=this.a*A.y+this.y0,A},inverse:function(A){var t,e,i,s,a;if(A.x=(A.x-this.x0)/this.a,A.y=(A.y-this.y0)/this.a,A.x/=this.k0,A.y/=this.k0,a=ut(A.x,A.y)){var n=2*Math.atan2(a,this.R2);t=Math.sin(n),e=Math.cos(n),s=Math.asin(e*this.sinc0+A.y*t*this.cosc0/a),i=Math.atan2(A.x*t,a*this.cosc0*e-A.y*this.sinc0*t)}else s=this.phic0,i=0;return A.x=i,A.y=s,wt.inverse.apply(this,[A]),A.x=K(A.x+this.long0),A},names:["Stereographic_North_Pole","Oblique_Stereographic","sterea","Oblique Stereographic Alternative","Double_Stereographic"]};const yt={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.coslat0=Math.cos(this.lat0),this.sinlat0=Math.sin(this.lat0),this.sphere?1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=d&&(this.k0=.5*(1+j(this.lat0)*Math.sin(this.lat_ts))):(Math.abs(this.coslat0)<=d&&(this.lat0>0?this.con=1:this.con=-1),this.cons=Math.sqrt(Math.pow(1+this.e,1+this.e)*Math.pow(1-this.e,1-this.e)),1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=d&&Math.abs(Math.cos(this.lat_ts))>d&&(this.k0=.5*this.cons*z(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))/Y(this.e,this.con*this.lat_ts,this.con*Math.sin(this.lat_ts))),this.ms1=z(this.e,this.sinlat0,this.coslat0),this.X0=2*Math.atan(this.ssfn_(this.lat0,this.sinlat0,this.e))-g,this.cosX0=Math.cos(this.X0),this.sinX0=Math.sin(this.X0))},forward:function(A){var t,e,i,s,a,n,o=A.x,r=A.y,l=Math.sin(r),h=Math.cos(r),c=K(o-this.long0);return Math.abs(Math.abs(o-this.long0)-Math.PI)<=d&&Math.abs(r+this.lat0)<=d?(A.x=NaN,A.y=NaN,A):this.sphere?(t=2*this.k0/(1+this.sinlat0*l+this.coslat0*h*Math.cos(c)),A.x=this.a*t*h*Math.sin(c)+this.x0,A.y=this.a*t*(this.coslat0*l-this.sinlat0*h*Math.cos(c))+this.y0,A):(e=2*Math.atan(this.ssfn_(r,l,this.e))-g,s=Math.cos(e),i=Math.sin(e),Math.abs(this.coslat0)<=d?(a=Y(this.e,r*this.con,this.con*l),n=2*this.a*this.k0*a/this.cons,A.x=this.x0+n*Math.sin(o-this.long0),A.y=this.y0-this.con*n*Math.cos(o-this.long0),A):(Math.abs(this.sinlat0)<d?(t=2*this.a*this.k0/(1+s*Math.cos(c)),A.y=t*i):(t=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*i+this.cosX0*s*Math.cos(c))),A.y=t*(this.cosX0*i-this.sinX0*s*Math.cos(c))+this.y0),A.x=t*s*Math.sin(c)+this.x0,A))},inverse:function(A){var t,e,i,s,a;A.x-=this.x0,A.y-=this.y0;var n=Math.sqrt(A.x*A.x+A.y*A.y);if(this.sphere){var o=2*Math.atan(n/(2*this.a*this.k0));return t=this.long0,e=this.lat0,n<=d?(A.x=t,A.y=e,A):(e=Math.asin(Math.cos(o)*this.sinlat0+A.y*Math.sin(o)*this.coslat0/n),t=Math.abs(this.coslat0)<d?this.lat0>0?K(this.long0+Math.atan2(A.x,-1*A.y)):K(this.long0+Math.atan2(A.x,A.y)):K(this.long0+Math.atan2(A.x*Math.sin(o),n*this.coslat0*Math.cos(o)-A.y*this.sinlat0*Math.sin(o))),A.x=t,A.y=e,A)}if(Math.abs(this.coslat0)<=d){if(n<=d)return e=this.lat0,t=this.long0,A.x=t,A.y=e,A;A.x*=this.con,A.y*=this.con,i=n*this.cons/(2*this.a*this.k0),e=this.con*V(this.e,i),t=this.con*K(this.con*this.long0+Math.atan2(A.x,-1*A.y))}else s=2*Math.atan(n*this.cosX0/(2*this.a*this.k0*this.ms1)),t=this.long0,n<=d?a=this.X0:(a=Math.asin(Math.cos(s)*this.sinX0+A.y*Math.sin(s)*this.cosX0/n),t=K(this.long0+Math.atan2(A.x*Math.sin(s),n*this.cosX0*Math.cos(s)-A.y*this.sinX0*Math.sin(s)))),e=-1*V(this.e,Math.tan(.5*(g+a)));return A.x=t,A.y=e,A},names:["stere","Stereographic_South_Pole","Polar Stereographic (variant B)","Polar_Stereographic"],ssfn_:function(A,t,e){return t*=e,Math.tan(.5*(g+A))*Math.pow((1-t)/(1+t),.5*e)}};const Qt={init:function(){var A=this.lat0;this.lambda0=this.long0;var t=Math.sin(A),e=this.a,i=1/this.rf,s=2*i-Math.pow(i,2),a=this.e=Math.sqrt(s);this.R=this.k0*e*Math.sqrt(1-s)/(1-s*Math.pow(t,2)),this.alpha=Math.sqrt(1+s/(1-s)*Math.pow(Math.cos(A),4)),this.b0=Math.asin(t/this.alpha);var n=Math.log(Math.tan(Math.PI/4+this.b0/2)),o=Math.log(Math.tan(Math.PI/4+A/2)),r=Math.log((1+a*t)/(1-a*t));this.K=n-this.alpha*o+this.alpha*a/2*r},forward:function(A){var t=Math.log(Math.tan(Math.PI/4-A.y/2)),e=this.e/2*Math.log((1+this.e*Math.sin(A.y))/(1-this.e*Math.sin(A.y))),i=-this.alpha*(t+e)+this.K,s=2*(Math.atan(Math.exp(i))-Math.PI/4),a=this.alpha*(A.x-this.lambda0),n=Math.atan(Math.sin(a)/(Math.sin(this.b0)*Math.tan(s)+Math.cos(this.b0)*Math.cos(a))),o=Math.asin(Math.cos(this.b0)*Math.sin(s)-Math.sin(this.b0)*Math.cos(s)*Math.cos(a));return A.y=this.R/2*Math.log((1+Math.sin(o))/(1-Math.sin(o)))+this.y0,A.x=this.R*n+this.x0,A},inverse:function(A){for(var t=A.x-this.x0,e=A.y-this.y0,i=t/this.R,s=2*(Math.atan(Math.exp(e/this.R))-Math.PI/4),a=Math.asin(Math.cos(this.b0)*Math.sin(s)+Math.sin(this.b0)*Math.cos(s)*Math.cos(i)),n=Math.atan(Math.sin(i)/(Math.cos(this.b0)*Math.cos(i)-Math.sin(this.b0)*Math.tan(s))),o=this.lambda0+n/this.alpha,r=0,l=a,h=-1e3,g=0;Math.abs(l-h)>1e-7;){if(++g>20)return;r=1/this.alpha*(Math.log(Math.tan(Math.PI/4+a/2))-this.K)+this.e*Math.log(Math.tan(Math.PI/4+Math.asin(this.e*Math.sin(l))/2)),h=l,l=2*Math.atan(Math.exp(r))-Math.PI/2}return A.x=o,A.y=l,A},names:["somerc"]};var mt=1e-7;const kt={init:function(){var A,t,e,i,s,a,n,o,r,l,h,c,f,u=0,p=0,B=0,w=0,E=0,y=0,Q=0;this.no_off=(f="object"==typeof(c=this).PROJECTION?Object.keys(c.PROJECTION)[0]:c.PROJECTION,"no_uoff"in c||"no_off"in c||-1!==["Hotine_Oblique_Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin"].indexOf(f)),this.no_rot="no_rot"in this;var m=!1;"alpha"in this&&(m=!0);var k=!1;if("rectified_grid_angle"in this&&(k=!0),m&&(Q=this.alpha),k&&(u=this.rectified_grid_angle*I),m||k)p=this.longc;else if(B=this.long1,E=this.lat1,w=this.long2,y=this.lat2,Math.abs(E-y)<=mt||(A=Math.abs(E))<=mt||Math.abs(A-g)<=mt||Math.abs(Math.abs(this.lat0)-g)<=mt||Math.abs(Math.abs(y)-g)<=mt)throw new Error;var x=1-this.es;t=Math.sqrt(x),Math.abs(this.lat0)>d?(o=Math.sin(this.lat0),e=Math.cos(this.lat0),A=1-this.es*o*o,this.B=e*e,this.B=Math.sqrt(1+this.es*this.B*this.B/x),this.A=this.B*this.k0*t/A,(s=(i=this.B*t/(e*Math.sqrt(A)))*i-1)<=0?s=0:(s=Math.sqrt(s),this.lat0<0&&(s=-s)),this.E=s+=i,this.E*=Math.pow(Y(this.e,this.lat0,o),this.B)):(this.B=1/t,this.A=this.k0,this.E=i=s=1),m||k?(m?(h=Math.asin(Math.sin(Q)/i),k||(u=Q)):(h=u,Q=Math.asin(i*Math.sin(h))),this.lam0=p-Math.asin(.5*(s-1/s)*Math.tan(h))/this.B):(a=Math.pow(Y(this.e,E,Math.sin(E)),this.B),n=Math.pow(Y(this.e,y,Math.sin(y)),this.B),s=this.E/a,r=(n-a)/(n+a),l=((l=this.E*this.E)-n*a)/(l+n*a),(A=B-w)<-Math.pi?w-=C:A>Math.pi&&(w+=C),this.lam0=K(.5*(B+w)-Math.atan(l*Math.tan(.5*this.B*(B-w))/r)/this.B),h=Math.atan(2*Math.sin(this.B*K(B-this.lam0))/(s-1/s)),u=Q=Math.asin(i*Math.sin(h))),this.singam=Math.sin(h),this.cosgam=Math.cos(h),this.sinrot=Math.sin(u),this.cosrot=Math.cos(u),this.rB=1/this.B,this.ArB=this.A*this.rB,this.BrA=1/this.ArB,this.A,this.B,this.no_off?this.u_0=0:(this.u_0=Math.abs(this.ArB*Math.atan(Math.sqrt(i*i-1)/Math.cos(Q))),this.lat0<0&&(this.u_0=-this.u_0)),s=.5*h,this.v_pole_n=this.ArB*Math.log(Math.tan(_-s)),this.v_pole_s=this.ArB*Math.log(Math.tan(_+s))},forward:function(A){var t,e,i,s,a,n,o,r,l={};if(A.x=A.x-this.lam0,Math.abs(Math.abs(A.y)-g)>d){if(t=.5*((a=this.E/Math.pow(Y(this.e,A.y,Math.sin(A.y)),this.B))-(n=1/a)),e=.5*(a+n),s=Math.sin(this.B*A.x),i=(t*this.singam-s*this.cosgam)/e,Math.abs(Math.abs(i)-1)<d)throw new Error;r=.5*this.ArB*Math.log((1-i)/(1+i)),n=Math.cos(this.B*A.x),o=Math.abs(n)<mt?this.A*A.x:this.ArB*Math.atan2(t*this.cosgam+s*this.singam,n)}else r=A.y>0?this.v_pole_n:this.v_pole_s,o=this.ArB*A.y;return this.no_rot?(l.x=o,l.y=r):(o-=this.u_0,l.x=r*this.cosrot+o*this.sinrot,l.y=o*this.cosrot-r*this.sinrot),l.x=this.a*l.x+this.x0,l.y=this.a*l.y+this.y0,l},inverse:function(A){var t,e,i,s,a,n,o,r={};if(A.x=(A.x-this.x0)*(1/this.a),A.y=(A.y-this.y0)*(1/this.a),this.no_rot?(e=A.y,t=A.x):(e=A.x*this.cosrot-A.y*this.sinrot,t=A.y*this.cosrot+A.x*this.sinrot+this.u_0),s=.5*((i=Math.exp(-this.BrA*e))-1/i),a=.5*(i+1/i),o=((n=Math.sin(this.BrA*t))*this.cosgam+s*this.singam)/a,Math.abs(Math.abs(o)-1)<d)r.x=0,r.y=o<0?-g:g;else{if(r.y=this.E/Math.sqrt((1+o)/(1-o)),r.y=V(this.e,Math.pow(r.y,1/this.B)),r.y===1/0)throw new Error;r.x=-this.rB*Math.atan2(s*this.cosgam-n*this.singam,Math.cos(this.BrA*t))}return r.x+=this.lam0,r},names:["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Two_Point_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","Oblique_Mercator","omerc"]};const xt={init:function(){if(this.lat2||(this.lat2=this.lat1),this.k0||(this.k0=1),this.x0=this.x0||0,this.y0=this.y0||0,!(Math.abs(this.lat1+this.lat2)<d)){var A=this.b/this.a;this.e=Math.sqrt(1-A*A);var t=Math.sin(this.lat1),e=Math.cos(this.lat1),i=z(this.e,t,e),s=Y(this.e,this.lat1,t),a=Math.sin(this.lat2),n=Math.cos(this.lat2),o=z(this.e,a,n),r=Y(this.e,this.lat2,a),l=Y(this.e,this.lat0,Math.sin(this.lat0));Math.abs(this.lat1-this.lat2)>d?this.ns=Math.log(i/o)/Math.log(s/r):this.ns=t,isNaN(this.ns)&&(this.ns=t),this.f0=i/(this.ns*Math.pow(s,this.ns)),this.rh=this.a*this.f0*Math.pow(l,this.ns),this.title||(this.title="Lambert Conformal Conic")}},forward:function(A){var t=A.x,e=A.y;Math.abs(2*Math.abs(e)-Math.PI)<=d&&(e=j(e)*(g-2*d));var i,s,a=Math.abs(Math.abs(e)-g);if(a>d)i=Y(this.e,e,Math.sin(e)),s=this.a*this.f0*Math.pow(i,this.ns);else{if((a=e*this.ns)<=0)return null;s=0}var n=this.ns*K(t-this.long0);return A.x=this.k0*(s*Math.sin(n))+this.x0,A.y=this.k0*(this.rh-s*Math.cos(n))+this.y0,A},inverse:function(A){var t,e,i,s,a,n=(A.x-this.x0)/this.k0,o=this.rh-(A.y-this.y0)/this.k0;this.ns>0?(t=Math.sqrt(n*n+o*o),e=1):(t=-Math.sqrt(n*n+o*o),e=-1);var r=0;if(0!==t&&(r=Math.atan2(e*n,e*o)),0!==t||this.ns>0){if(e=1/this.ns,i=Math.pow(t/(this.a*this.f0),e),-9999===(s=V(this.e,i)))return null}else s=-g;return a=K(r/this.ns+this.long0),A.x=a,A.y=s,A},names:["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_1SP","Lambert_Conformal_Conic_2SP","lcc","Lambert Conic Conformal (1SP)","Lambert Conic Conformal (2SP)"]};const Mt={init:function(){this.a=6377397.155,this.es=.006674372230614,this.e=Math.sqrt(this.es),this.lat0||(this.lat0=.863937979737193),this.long0||(this.long0=.4334234309119251),this.k0||(this.k0=.9999),this.s45=.785398163397448,this.s90=2*this.s45,this.fi0=this.lat0,this.e2=this.es,this.e=Math.sqrt(this.e2),this.alfa=Math.sqrt(1+this.e2*Math.pow(Math.cos(this.fi0),4)/(1-this.e2)),this.uq=1.04216856380474,this.u0=Math.asin(Math.sin(this.fi0)/this.alfa),this.g=Math.pow((1+this.e*Math.sin(this.fi0))/(1-this.e*Math.sin(this.fi0)),this.alfa*this.e/2),this.k=Math.tan(this.u0/2+this.s45)/Math.pow(Math.tan(this.fi0/2+this.s45),this.alfa)*this.g,this.k1=this.k0,this.n0=this.a*Math.sqrt(1-this.e2)/(1-this.e2*Math.pow(Math.sin(this.fi0),2)),this.s0=1.37008346281555,this.n=Math.sin(this.s0),this.ro0=this.k1*this.n0/Math.tan(this.s0),this.ad=this.s90-this.uq},forward:function(A){var t,e,i,s,a,n,o,r=A.x,l=A.y,h=K(r-this.long0);return t=Math.pow((1+this.e*Math.sin(l))/(1-this.e*Math.sin(l)),this.alfa*this.e/2),e=2*(Math.atan(this.k*Math.pow(Math.tan(l/2+this.s45),this.alfa)/t)-this.s45),i=-h*this.alfa,s=Math.asin(Math.cos(this.ad)*Math.sin(e)+Math.sin(this.ad)*Math.cos(e)*Math.cos(i)),a=Math.asin(Math.cos(e)*Math.sin(i)/Math.cos(s)),n=this.n*a,o=this.ro0*Math.pow(Math.tan(this.s0/2+this.s45),this.n)/Math.pow(Math.tan(s/2+this.s45),this.n),A.y=o*Math.cos(n)/1,A.x=o*Math.sin(n)/1,this.czech||(A.y*=-1,A.x*=-1),A},inverse:function(A){var t,e,i,s,a,n,o,r=A.x;A.x=A.y,A.y=r,this.czech||(A.y*=-1,A.x*=-1),a=Math.sqrt(A.x*A.x+A.y*A.y),s=Math.atan2(A.y,A.x)/Math.sin(this.s0),i=2*(Math.atan(Math.pow(this.ro0/a,1/this.n)*Math.tan(this.s0/2+this.s45))-this.s45),t=Math.asin(Math.cos(this.ad)*Math.sin(i)-Math.sin(this.ad)*Math.cos(i)*Math.cos(s)),e=Math.asin(Math.cos(i)*Math.sin(s)/Math.cos(t)),A.x=this.long0-e/this.alfa,n=t,o=0;var l=0;do{A.y=2*(Math.atan(Math.pow(this.k,-1/this.alfa)*Math.pow(Math.tan(t/2+this.s45),1/this.alfa)*Math.pow((1+this.e*Math.sin(n))/(1-this.e*Math.sin(n)),this.e/2))-this.s45),Math.abs(n-A.y)<1e-10&&(o=1),n=A.y,l+=1}while(0===o&&l<15);return l>=15?null:A},names:["Krovak","krovak"]};function bt(A,t,e,i,s){return A*s-t*Math.sin(2*s)+e*Math.sin(4*s)-i*Math.sin(6*s)}function Dt(A){return 1-.25*A*(1+A/16*(3+1.25*A))}function vt(A){return.375*A*(1+.25*A*(1+.46875*A))}function St(A){return.05859375*A*A*(1+.75*A)}function Gt(A){return A*A*A*(35/3072)}function Nt(A,t,e){var i=t*e;return A/Math.sqrt(1-i*i)}function Rt(A){return Math.abs(A)<g?A:A-j(A)*Math.PI}function Ft(A,t,e,i,s){var a,n;a=A/t;for(var o=0;o<15;o++)if(a+=n=(A-(t*a-e*Math.sin(2*a)+i*Math.sin(4*a)-s*Math.sin(6*a)))/(t-2*e*Math.cos(2*a)+4*i*Math.cos(4*a)-6*s*Math.cos(6*a)),Math.abs(n)<=1e-10)return a;return NaN}const Lt={init:function(){this.sphere||(this.e0=Dt(this.es),this.e1=vt(this.es),this.e2=St(this.es),this.e3=Gt(this.es),this.ml0=this.a*bt(this.e0,this.e1,this.e2,this.e3,this.lat0))},forward:function(A){var t,e,i=A.x,s=A.y;if(i=K(i-this.long0),this.sphere)t=this.a*Math.asin(Math.cos(s)*Math.sin(i)),e=this.a*(Math.atan2(Math.tan(s),Math.cos(i))-this.lat0);else{var a=Math.sin(s),n=Math.cos(s),o=Nt(this.a,this.e,a),r=Math.tan(s)*Math.tan(s),l=i*Math.cos(s),h=l*l,g=this.es*n*n/(1-this.es);t=o*l*(1-h*r*(1/6-(8-r+8*g)*h/120)),e=this.a*bt(this.e0,this.e1,this.e2,this.e3,s)-this.ml0+o*a/n*h*(.5+(5-r+6*g)*h/24)}return A.x=t+this.x0,A.y=e+this.y0,A},inverse:function(A){A.x-=this.x0,A.y-=this.y0;var t,e,i=A.x/this.a,s=A.y/this.a;if(this.sphere){var a=s+this.lat0;t=Math.asin(Math.sin(a)*Math.cos(i)),e=Math.atan2(Math.tan(i),Math.cos(a))}else{var n=Ft(this.ml0/this.a+s,this.e0,this.e1,this.e2,this.e3);if(Math.abs(Math.abs(n)-g)<=d)return A.x=this.long0,A.y=g,s<0&&(A.y*=-1),A;var o=Nt(this.a,this.e,Math.sin(n)),r=o*o*o/this.a/this.a*(1-this.es),l=Math.pow(Math.tan(n),2),h=i*this.a/o,c=h*h;t=n-o*Math.tan(n)/r*h*h*(.5-(1+3*l)*h*h/24),e=h*(1-c*(l/3+(1+3*l)*l*c/15))/Math.cos(n)}return A.x=K(e+this.long0),A.y=Rt(t),A},names:["Cassini","Cassini_Soldner","cass"]};function Ut(A,t){var e;return A>1e-7?(1-A*A)*(t/(1-(e=A*t)*e)-.5/A*Math.log((1-e)/(1+e))):2*t}var Ot=.3333333333333333,Pt=.17222222222222222,Tt=.10257936507936508,Ht=.06388888888888888,Jt=.0664021164021164,qt=.016415012942191543;const zt={init:function(){var A,t=Math.abs(this.lat0);if(Math.abs(t-g)<d?this.mode=this.lat0<0?this.S_POLE:this.N_POLE:Math.abs(t)<d?this.mode=this.EQUIT:this.mode=this.OBLIQ,this.es>0)switch(this.qp=Ut(this.e,1),this.mmf=.5/(1-this.es),this.apa=function(A){var t,e=[];return e[0]=A*Ot,t=A*A,e[0]+=t*Pt,e[1]=t*Ht,t*=A,e[0]+=t*Tt,e[1]+=t*Jt,e[2]=t*qt,e}(this.es),this.mode){case this.N_POLE:case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=Math.sqrt(.5*this.qp),this.dd=1/this.rq,this.xmf=1,this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=Math.sqrt(.5*this.qp),A=Math.sin(this.lat0),this.sinb1=Ut(this.e,A)/this.qp,this.cosb1=Math.sqrt(1-this.sinb1*this.sinb1),this.dd=Math.cos(this.lat0)/(Math.sqrt(1-this.es*A*A)*this.rq*this.cosb1),this.ymf=(this.xmf=this.rq)/this.dd,this.xmf*=this.dd}else this.mode===this.OBLIQ&&(this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0))},forward:function(A){var t,e,i,s,a,n,o,r,l,h,c=A.x,f=A.y;if(c=K(c-this.long0),this.sphere){if(a=Math.sin(f),h=Math.cos(f),i=Math.cos(c),this.mode===this.OBLIQ||this.mode===this.EQUIT){if((e=this.mode===this.EQUIT?1+h*i:1+this.sinph0*a+this.cosph0*h*i)<=d)return null;t=(e=Math.sqrt(2/e))*h*Math.sin(c),e*=this.mode===this.EQUIT?a:this.cosph0*a-this.sinph0*h*i}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(i=-i),Math.abs(f+this.lat0)<d)return null;e=_-.5*f,t=(e=2*(this.mode===this.S_POLE?Math.cos(e):Math.sin(e)))*Math.sin(c),e*=i}}else{switch(o=0,r=0,l=0,i=Math.cos(c),s=Math.sin(c),a=Math.sin(f),n=Ut(this.e,a),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(o=n/this.qp,r=Math.sqrt(1-o*o)),this.mode){case this.OBLIQ:l=1+this.sinb1*o+this.cosb1*r*i;break;case this.EQUIT:l=1+r*i;break;case this.N_POLE:l=g+f,n=this.qp-n;break;case this.S_POLE:l=f-g,n=this.qp+n}if(Math.abs(l)<d)return null;switch(this.mode){case this.OBLIQ:case this.EQUIT:l=Math.sqrt(2/l),e=this.mode===this.OBLIQ?this.ymf*l*(this.cosb1*o-this.sinb1*r*i):(l=Math.sqrt(2/(1+r*i)))*o*this.ymf,t=this.xmf*l*r*s;break;case this.N_POLE:case this.S_POLE:n>=0?(t=(l=Math.sqrt(n))*s,e=i*(this.mode===this.S_POLE?l:-l)):t=e=0}}return A.x=this.a*t+this.x0,A.y=this.a*e+this.y0,A},inverse:function(A){A.x-=this.x0,A.y-=this.y0;var t,e,i,s,a,n,o,r,l,h,c=A.x/this.a,f=A.y/this.a;if(this.sphere){var u,I=0,p=0;if((e=.5*(u=Math.sqrt(c*c+f*f)))>1)return null;switch(e=2*Math.asin(e),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(p=Math.sin(e),I=Math.cos(e)),this.mode){case this.EQUIT:e=Math.abs(u)<=d?0:Math.asin(f*p/u),c*=p,f=I*u;break;case this.OBLIQ:e=Math.abs(u)<=d?this.lat0:Math.asin(I*this.sinph0+f*p*this.cosph0/u),c*=p*this.cosph0,f=(I-Math.sin(e)*this.sinph0)*u;break;case this.N_POLE:f=-f,e=g-e;break;case this.S_POLE:e-=g}t=0!==f||this.mode!==this.EQUIT&&this.mode!==this.OBLIQ?Math.atan2(c,f):0}else{if(o=0,this.mode===this.OBLIQ||this.mode===this.EQUIT){if(c/=this.dd,f*=this.dd,(n=Math.sqrt(c*c+f*f))<d)return A.x=this.long0,A.y=this.lat0,A;s=2*Math.asin(.5*n/this.rq),i=Math.cos(s),c*=s=Math.sin(s),this.mode===this.OBLIQ?(o=i*this.sinb1+f*s*this.cosb1/n,a=this.qp*o,f=n*this.cosb1*i-f*this.sinb1*s):(o=f*s/n,a=this.qp*o,f=n*i)}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(f=-f),!(a=c*c+f*f))return A.x=this.long0,A.y=this.lat0,A;o=1-a/this.qp,this.mode===this.S_POLE&&(o=-o)}t=Math.atan2(c,f),r=Math.asin(o),l=this.apa,h=r+r,e=r+l[0]*Math.sin(h)+l[1]*Math.sin(h+h)+l[2]*Math.sin(h+h+h)}return A.x=K(this.long0+t),A.y=e,A},names:["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"],S_POLE:1,N_POLE:2,EQUIT:3,OBLIQ:4};function jt(A){return Math.abs(A)>1&&(A=A>1?1:-1),Math.asin(A)}const Kt={init:function(){Math.abs(this.lat1+this.lat2)<d||(this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e3=Math.sqrt(this.es),this.sin_po=Math.sin(this.lat1),this.cos_po=Math.cos(this.lat1),this.t1=this.sin_po,this.con=this.sin_po,this.ms1=z(this.e3,this.sin_po,this.cos_po),this.qs1=Ut(this.e3,this.sin_po),this.sin_po=Math.sin(this.lat2),this.cos_po=Math.cos(this.lat2),this.t2=this.sin_po,this.ms2=z(this.e3,this.sin_po,this.cos_po),this.qs2=Ut(this.e3,this.sin_po),this.sin_po=Math.sin(this.lat0),this.cos_po=Math.cos(this.lat0),this.t3=this.sin_po,this.qs0=Ut(this.e3,this.sin_po),Math.abs(this.lat1-this.lat2)>d?this.ns0=(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1):this.ns0=this.con,this.c=this.ms1*this.ms1+this.ns0*this.qs1,this.rh=this.a*Math.sqrt(this.c-this.ns0*this.qs0)/this.ns0)},forward:function(A){var t=A.x,e=A.y;this.sin_phi=Math.sin(e),this.cos_phi=Math.cos(e);var i=Ut(this.e3,this.sin_phi),s=this.a*Math.sqrt(this.c-this.ns0*i)/this.ns0,a=this.ns0*K(t-this.long0),n=s*Math.sin(a)+this.x0,o=this.rh-s*Math.cos(a)+this.y0;return A.x=n,A.y=o,A},inverse:function(A){var t,e,i,s,a,n;return A.x-=this.x0,A.y=this.rh-A.y+this.y0,this.ns0>=0?(t=Math.sqrt(A.x*A.x+A.y*A.y),i=1):(t=-Math.sqrt(A.x*A.x+A.y*A.y),i=-1),s=0,0!==t&&(s=Math.atan2(i*A.x,i*A.y)),i=t*this.ns0/this.a,this.sphere?n=Math.asin((this.c-i*i)/(2*this.ns0)):(e=(this.c-i*i)/this.ns0,n=this.phi1z(this.e3,e)),a=K(s/this.ns0+this.long0),A.x=a,A.y=n,A},names:["Albers_Conic_Equal_Area","Albers","aea"],phi1z:function(A,t){var e,i,s,a,n=jt(.5*t);if(A<d)return n;for(var o=A*A,r=1;r<=25;r++)if(n+=a=.5*(s=1-(i=A*(e=Math.sin(n)))*i)*s/Math.cos(n)*(t/(1-o)-e/s+.5/A*Math.log((1-i)/(1+i))),Math.abs(a)<=1e-7)return n;return null}};const Yt={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0),this.infinity_dist=1e3*this.a,this.rc=1},forward:function(A){var t,e,i,s,a,n,o,r=A.x,l=A.y;return i=K(r-this.long0),t=Math.sin(l),e=Math.cos(l),s=Math.cos(i),1,(a=this.sin_p14*t+this.cos_p14*e*s)>0||Math.abs(a)<=d?(n=this.x0+1*this.a*e*Math.sin(i)/a,o=this.y0+1*this.a*(this.cos_p14*t-this.sin_p14*e*s)/a):(n=this.x0+this.infinity_dist*e*Math.sin(i),o=this.y0+this.infinity_dist*(this.cos_p14*t-this.sin_p14*e*s)),A.x=n,A.y=o,A},inverse:function(A){var t,e,i,s,a,n;return A.x=(A.x-this.x0)/this.a,A.y=(A.y-this.y0)/this.a,A.x/=this.k0,A.y/=this.k0,(t=Math.sqrt(A.x*A.x+A.y*A.y))?(s=Math.atan2(t,this.rc),e=Math.sin(s),n=jt((i=Math.cos(s))*this.sin_p14+A.y*e*this.cos_p14/t),a=Math.atan2(A.x*e,t*this.cos_p14*i-A.y*this.sin_p14*e),a=K(this.long0+a)):(n=this.phic0,a=0),A.x=a,A.y=n,A},names:["gnom"]};const Vt={init:function(){this.sphere||(this.k0=z(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)))},forward:function(A){var t,e,i=A.x,s=A.y,a=K(i-this.long0);if(this.sphere)t=this.x0+this.a*a*Math.cos(this.lat_ts),e=this.y0+this.a*Math.sin(s)/Math.cos(this.lat_ts);else{var n=Ut(this.e,Math.sin(s));t=this.x0+this.a*this.k0*a,e=this.y0+this.a*n*.5/this.k0}return A.x=t,A.y=e,A},inverse:function(A){var t,e;return A.x-=this.x0,A.y-=this.y0,this.sphere?(t=K(this.long0+A.x/this.a/Math.cos(this.lat_ts)),e=Math.asin(A.y/this.a*Math.cos(this.lat_ts))):(e=function(A,t){var e=1-(1-A*A)/(2*A)*Math.log((1-A)/(1+A));if(Math.abs(Math.abs(t)-e)<1e-6)return t<0?-1*g:g;for(var i,s,a,n,o=Math.asin(.5*t),r=0;r<30;r++)if(s=Math.sin(o),a=Math.cos(o),n=A*s,o+=i=Math.pow(1-n*n,2)/(2*a)*(t/(1-A*A)-s/(1-n*n)+.5/A*Math.log((1-n)/(1+n))),Math.abs(i)<=1e-10)return o;return NaN}(this.e,2*A.y*this.k0/this.a),t=K(this.long0+A.x/(this.a*this.k0))),A.x=t,A.y=e,A},names:["cea"]};const Wt={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Equidistant Cylindrical (Plate Carre)",this.rc=Math.cos(this.lat_ts)},forward:function(A){var t=A.x,e=A.y,i=K(t-this.long0),s=Rt(e-this.lat0);return A.x=this.x0+this.a*i*this.rc,A.y=this.y0+this.a*s,A},inverse:function(A){var t=A.x,e=A.y;return A.x=K(this.long0+(t-this.x0)/(this.a*this.rc)),A.y=Rt(this.lat0+(e-this.y0)/this.a),A},names:["Equirectangular","Equidistant_Cylindrical","eqc"]};const Xt={init:function(){this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Dt(this.es),this.e1=vt(this.es),this.e2=St(this.es),this.e3=Gt(this.es),this.ml0=this.a*bt(this.e0,this.e1,this.e2,this.e3,this.lat0)},forward:function(A){var t,e,i,s=A.x,a=A.y,n=K(s-this.long0);if(i=n*Math.sin(a),this.sphere)Math.abs(a)<=d?(t=this.a*n,e=-1*this.a*this.lat0):(t=this.a*Math.sin(i)/Math.tan(a),e=this.a*(Rt(a-this.lat0)+(1-Math.cos(i))/Math.tan(a)));else if(Math.abs(a)<=d)t=this.a*n,e=-1*this.ml0;else{var o=Nt(this.a,this.e,Math.sin(a))/Math.tan(a);t=o*Math.sin(i),e=this.a*bt(this.e0,this.e1,this.e2,this.e3,a)-this.ml0+o*(1-Math.cos(i))}return A.x=t+this.x0,A.y=e+this.y0,A},inverse:function(A){var t,e,i,s,a,n,o,r,l;if(i=A.x-this.x0,s=A.y-this.y0,this.sphere)if(Math.abs(s+this.a*this.lat0)<=d)t=K(i/this.a+this.long0),e=0;else{var h;for(n=this.lat0+s/this.a,o=i*i/this.a/this.a+n*n,r=n,a=20;a;--a)if(r+=l=-1*(n*(r*(h=Math.tan(r))+1)-r-.5*(r*r+o)*h)/((r-n)/h-1),Math.abs(l)<=d){e=r;break}t=K(this.long0+Math.asin(i*Math.tan(r)/this.a)/Math.sin(e))}else if(Math.abs(s+this.ml0)<=d)e=0,t=K(this.long0+i/this.a);else{var g,c,f,u,I;for(n=(this.ml0+s)/this.a,o=i*i/this.a/this.a+n*n,r=n,a=20;a;--a)if(I=this.e*Math.sin(r),g=Math.sqrt(1-I*I)*Math.tan(r),c=this.a*bt(this.e0,this.e1,this.e2,this.e3,r),f=this.e0-2*this.e1*Math.cos(2*r)+4*this.e2*Math.cos(4*r)-6*this.e3*Math.cos(6*r),r-=l=(n*(g*(u=c/this.a)+1)-u-.5*g*(u*u+o))/(this.es*Math.sin(2*r)*(u*u+o-2*n*u)/(4*g)+(n-u)*(g*f-2/Math.sin(2*r))-f),Math.abs(l)<=d){e=r;break}g=Math.sqrt(1-this.es*Math.pow(Math.sin(e),2))*Math.tan(e),t=K(this.long0+Math.asin(i*g/this.a)/Math.sin(e))}return A.x=t,A.y=e,A},names:["Polyconic","poly"]};const Zt={init:function(){this.A=[],this.A[1]=.6399175073,this.A[2]=-.1358797613,this.A[3]=.063294409,this.A[4]=-.02526853,this.A[5]=.0117879,this.A[6]=-.0055161,this.A[7]=.0026906,this.A[8]=-.001333,this.A[9]=67e-5,this.A[10]=-34e-5,this.B_re=[],this.B_im=[],this.B_re[1]=.7557853228,this.B_im[1]=0,this.B_re[2]=.249204646,this.B_im[2]=.003371507,this.B_re[3]=-.001541739,this.B_im[3]=.04105856,this.B_re[4]=-.10162907,this.B_im[4]=.01727609,this.B_re[5]=-.26623489,this.B_im[5]=-.36249218,this.B_re[6]=-.6870983,this.B_im[6]=-1.1651967,this.C_re=[],this.C_im=[],this.C_re[1]=1.3231270439,this.C_im[1]=0,this.C_re[2]=-.577245789,this.C_im[2]=-.007809598,this.C_re[3]=.508307513,this.C_im[3]=-.112208952,this.C_re[4]=-.15094762,this.C_im[4]=.18200602,this.C_re[5]=1.01418179,this.C_im[5]=1.64497696,this.C_re[6]=1.9660549,this.C_im[6]=2.5127645,this.D=[],this.D[1]=1.5627014243,this.D[2]=.5185406398,this.D[3]=-.03333098,this.D[4]=-.1052906,this.D[5]=-.0368594,this.D[6]=.007317,this.D[7]=.0122,this.D[8]=.00394,this.D[9]=-.0013},forward:function(A){var t,e=A.x,i=A.y-this.lat0,s=e-this.long0,a=i/h*1e-5,n=s,o=1,r=0;for(t=1;t<=10;t++)o*=a,r+=this.A[t]*o;var l,g=r,c=n,f=1,u=0,d=0,I=0;for(t=1;t<=6;t++)l=u*g+f*c,f=f*g-u*c,u=l,d=d+this.B_re[t]*f-this.B_im[t]*u,I=I+this.B_im[t]*f+this.B_re[t]*u;return A.x=I*this.a+this.x0,A.y=d*this.a+this.y0,A},inverse:function(A){var t,e,i=A.x,s=A.y,a=i-this.x0,n=(s-this.y0)/this.a,o=a/this.a,r=1,l=0,g=0,c=0;for(t=1;t<=6;t++)e=l*n+r*o,r=r*n-l*o,l=e,g=g+this.C_re[t]*r-this.C_im[t]*l,c=c+this.C_im[t]*r+this.C_re[t]*l;for(var f=0;f<this.iterations;f++){var u,d=g,I=c,p=n,_=o;for(t=2;t<=6;t++)u=I*g+d*c,d=d*g-I*c,I=u,p+=(t-1)*(this.B_re[t]*d-this.B_im[t]*I),_+=(t-1)*(this.B_im[t]*d+this.B_re[t]*I);d=1,I=0;var C=this.B_re[1],B=this.B_im[1];for(t=2;t<=6;t++)u=I*g+d*c,d=d*g-I*c,I=u,C+=t*(this.B_re[t]*d-this.B_im[t]*I),B+=t*(this.B_im[t]*d+this.B_re[t]*I);var w=C*C+B*B;g=(p*C+_*B)/w,c=(_*C-p*B)/w}var E=g,y=c,Q=1,m=0;for(t=1;t<=9;t++)Q*=E,m+=this.D[t]*Q;var k=this.lat0+m*h*1e5,x=this.long0+y;return A.x=x,A.y=k,A},names:["New_Zealand_Map_Grid","nzmg"]};const $t={init:function(){},forward:function(A){var t=A.x,e=A.y,i=K(t-this.long0),s=this.x0+this.a*i,a=this.y0+this.a*Math.log(Math.tan(Math.PI/4+e/2.5))*1.25;return A.x=s,A.y=a,A},inverse:function(A){A.x-=this.x0,A.y-=this.y0;var t=K(this.long0+A.x/this.a),e=2.5*(Math.atan(Math.exp(.8*A.y/this.a))-Math.PI/4);return A.x=t,A.y=e,A},names:["Miller_Cylindrical","mill"]};const Ae={init:function(){this.sphere?(this.n=1,this.m=0,this.es=0,this.C_y=Math.sqrt((this.m+1)/this.n),this.C_x=this.C_y/(this.m+1)):this.en=rt(this.es)},forward:function(A){var t,e,i=A.x,s=A.y;if(i=K(i-this.long0),this.sphere){if(this.m)for(var a=this.n*Math.sin(s),n=20;n;--n){var o=(this.m*s+Math.sin(s)-a)/(this.m+Math.cos(s));if(s-=o,Math.abs(o)<d)break}else s=1!==this.n?Math.asin(this.n*Math.sin(s)):s;t=this.a*this.C_x*i*(this.m+Math.cos(s)),e=this.a*this.C_y*s}else{var r=Math.sin(s),l=Math.cos(s);e=this.a*lt(s,r,l,this.en),t=this.a*i*l/Math.sqrt(1-this.es*r*r)}return A.x=t,A.y=e,A},inverse:function(A){var t,e,i;return A.x-=this.x0,e=A.x/this.a,A.y-=this.y0,t=A.y/this.a,this.sphere?(t/=this.C_y,e/=this.C_x*(this.m+Math.cos(t)),this.m?t=jt((this.m*t+Math.sin(t))/this.n):1!==this.n&&(t=jt(Math.sin(t)/this.n)),e=K(e+this.long0),t=Rt(t)):(t=gt(A.y/this.a,this.es,this.en),(i=Math.abs(t))<g?(i=Math.sin(t),e=K(this.long0+A.x*Math.sqrt(1-this.es*i*i)/(this.a*Math.cos(t)))):i-d<g&&(e=this.long0)),A.x=e,A.y=t,A},names:["Sinusoidal","sinu"]};const te={init:function(){},forward:function(A){for(var t=A.x,e=A.y,i=K(t-this.long0),s=e,a=Math.PI*Math.sin(e);;){var n=-(s+Math.sin(s)-a)/(1+Math.cos(s));if(s+=n,Math.abs(n)<d)break}s/=2,Math.PI/2-Math.abs(e)<d&&(i=0);var o=.900316316158*this.a*i*Math.cos(s)+this.x0,r=1.4142135623731*this.a*Math.sin(s)+this.y0;return A.x=o,A.y=r,A},inverse:function(A){var t,e;A.x-=this.x0,A.y-=this.y0,e=A.y/(1.4142135623731*this.a),Math.abs(e)>.999999999999&&(e=.999999999999),t=Math.asin(e);var i=K(this.long0+A.x/(.900316316158*this.a*Math.cos(t)));i<-Math.PI&&(i=-Math.PI),i>Math.PI&&(i=Math.PI),e=(2*t+Math.sin(2*t))/Math.PI,Math.abs(e)>1&&(e=1);var s=Math.asin(e);return A.x=i,A.y=s,A},names:["Mollweide","moll"]};const ee={init:function(){Math.abs(this.lat1+this.lat2)<d||(this.lat2=this.lat2||this.lat1,this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Dt(this.es),this.e1=vt(this.es),this.e2=St(this.es),this.e3=Gt(this.es),this.sinphi=Math.sin(this.lat1),this.cosphi=Math.cos(this.lat1),this.ms1=z(this.e,this.sinphi,this.cosphi),this.ml1=bt(this.e0,this.e1,this.e2,this.e3,this.lat1),Math.abs(this.lat1-this.lat2)<d?this.ns=this.sinphi:(this.sinphi=Math.sin(this.lat2),this.cosphi=Math.cos(this.lat2),this.ms2=z(this.e,this.sinphi,this.cosphi),this.ml2=bt(this.e0,this.e1,this.e2,this.e3,this.lat2),this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)),this.g=this.ml1+this.ms1/this.ns,this.ml0=bt(this.e0,this.e1,this.e2,this.e3,this.lat0),this.rh=this.a*(this.g-this.ml0))},forward:function(A){var t,e=A.x,i=A.y;if(this.sphere)t=this.a*(this.g-i);else{var s=bt(this.e0,this.e1,this.e2,this.e3,i);t=this.a*(this.g-s)}var a=this.ns*K(e-this.long0),n=this.x0+t*Math.sin(a),o=this.y0+this.rh-t*Math.cos(a);return A.x=n,A.y=o,A},inverse:function(A){var t,e,i,s;A.x-=this.x0,A.y=this.rh-A.y+this.y0,this.ns>=0?(e=Math.sqrt(A.x*A.x+A.y*A.y),t=1):(e=-Math.sqrt(A.x*A.x+A.y*A.y),t=-1);var a=0;return 0!==e&&(a=Math.atan2(t*A.x,t*A.y)),this.sphere?(s=K(this.long0+a/this.ns),i=Rt(this.g-e/this.a),A.x=s,A.y=i,A):(i=Ft(this.g-e/this.a,this.e0,this.e1,this.e2,this.e3),s=K(this.long0+a/this.ns),A.x=s,A.y=i,A)},names:["Equidistant_Conic","eqdc"]};const ie={init:function(){this.R=this.a},forward:function(A){var t,e,i=A.x,s=A.y,a=K(i-this.long0);Math.abs(s)<=d&&(t=this.x0+this.R*a,e=this.y0);var n=jt(2*Math.abs(s/Math.PI));(Math.abs(a)<=d||Math.abs(Math.abs(s)-g)<=d)&&(t=this.x0,e=s>=0?this.y0+Math.PI*this.R*Math.tan(.5*n):this.y0+Math.PI*this.R*-Math.tan(.5*n));var o=.5*Math.abs(Math.PI/a-a/Math.PI),r=o*o,l=Math.sin(n),h=Math.cos(n),c=h/(l+h-1),f=c*c,u=c*(2/l-1),I=u*u,p=Math.PI*this.R*(o*(c-I)+Math.sqrt(r*(c-I)*(c-I)-(I+r)*(f-I)))/(I+r);a<0&&(p=-p),t=this.x0+p;var _=r+c;return p=Math.PI*this.R*(u*_-o*Math.sqrt((I+r)*(r+1)-_*_))/(I+r),e=s>=0?this.y0+p:this.y0-p,A.x=t,A.y=e,A},inverse:function(A){var t,e,i,s,a,n,o,r,l,h,g,c;return A.x-=this.x0,A.y-=this.y0,g=Math.PI*this.R,a=(i=A.x/g)*i+(s=A.y/g)*s,g=3*(s*s/(r=-2*(n=-Math.abs(s)*(1+a))+1+2*s*s+a*a)+(2*(o=n-2*s*s+i*i)*o*o/r/r/r-9*n*o/r/r)/27)/(l=(n-o*o/3/r)/r)/(h=2*Math.sqrt(-l/3)),Math.abs(g)>1&&(g=g>=0?1:-1),c=Math.acos(g)/3,e=A.y>=0?(-h*Math.cos(c+Math.PI/3)-o/3/r)*Math.PI:-(-h*Math.cos(c+Math.PI/3)-o/3/r)*Math.PI,t=Math.abs(i)<d?this.long0:K(this.long0+Math.PI*(a-1+Math.sqrt(1+2*(i*i-s*s)+a*a))/2/i),A.x=t,A.y=e,A},names:["Van_der_Grinten_I","VanDerGrinten","vandg"]};const se={init:function(){this.sin_p12=Math.sin(this.lat0),this.cos_p12=Math.cos(this.lat0)},forward:function(A){var t,e,i,s,a,n,o,r,l,h,c,f,u,I,p,_,C,B,w,E,y,Q,m=A.x,k=A.y,x=Math.sin(A.y),M=Math.cos(A.y),b=K(m-this.long0);return this.sphere?Math.abs(this.sin_p12-1)<=d?(A.x=this.x0+this.a*(g-k)*Math.sin(b),A.y=this.y0-this.a*(g-k)*Math.cos(b),A):Math.abs(this.sin_p12+1)<=d?(A.x=this.x0+this.a*(g+k)*Math.sin(b),A.y=this.y0+this.a*(g+k)*Math.cos(b),A):(B=this.sin_p12*x+this.cos_p12*M*Math.cos(b),C=(_=Math.acos(B))?_/Math.sin(_):1,A.x=this.x0+this.a*C*M*Math.sin(b),A.y=this.y0+this.a*C*(this.cos_p12*x-this.sin_p12*M*Math.cos(b)),A):(t=Dt(this.es),e=vt(this.es),i=St(this.es),s=Gt(this.es),Math.abs(this.sin_p12-1)<=d?(a=this.a*bt(t,e,i,s,g),n=this.a*bt(t,e,i,s,k),A.x=this.x0+(a-n)*Math.sin(b),A.y=this.y0-(a-n)*Math.cos(b),A):Math.abs(this.sin_p12+1)<=d?(a=this.a*bt(t,e,i,s,g),n=this.a*bt(t,e,i,s,k),A.x=this.x0+(a+n)*Math.sin(b),A.y=this.y0+(a+n)*Math.cos(b),A):(o=x/M,r=Nt(this.a,this.e,this.sin_p12),l=Nt(this.a,this.e,x),h=Math.atan((1-this.es)*o+this.es*r*this.sin_p12/(l*M)),w=0===(c=Math.atan2(Math.sin(b),this.cos_p12*Math.tan(h)-this.sin_p12*Math.cos(b)))?Math.asin(this.cos_p12*Math.sin(h)-this.sin_p12*Math.cos(h)):Math.abs(Math.abs(c)-Math.PI)<=d?-Math.asin(this.cos_p12*Math.sin(h)-this.sin_p12*Math.cos(h)):Math.asin(Math.sin(b)*Math.cos(h)/Math.sin(c)),f=this.e*this.sin_p12/Math.sqrt(1-this.es),_=r*w*(1-(E=w*w)*(p=(u=this.e*this.cos_p12*Math.cos(c)/Math.sqrt(1-this.es))*u)*(1-p)/6+(y=E*w)/8*(I=f*u)*(1-2*p)+(Q=y*w)/120*(p*(4-7*p)-3*f*f*(1-7*p))-Q*w/48*I),A.x=this.x0+_*Math.sin(c),A.y=this.y0+_*Math.cos(c),A))},inverse:function(A){var t,e,i,s,a,n,o,r,l,h,c,f,u,I,p,_,C,B,w,E,y,Q,m;if(A.x-=this.x0,A.y-=this.y0,this.sphere){if((t=Math.sqrt(A.x*A.x+A.y*A.y))>2*g*this.a)return;return e=t/this.a,i=Math.sin(e),s=Math.cos(e),a=this.long0,Math.abs(t)<=d?n=this.lat0:(n=jt(s*this.sin_p12+A.y*i*this.cos_p12/t),o=Math.abs(this.lat0)-g,a=Math.abs(o)<=d?this.lat0>=0?K(this.long0+Math.atan2(A.x,-A.y)):K(this.long0-Math.atan2(-A.x,A.y)):K(this.long0+Math.atan2(A.x*i,t*this.cos_p12*s-A.y*this.sin_p12*i))),A.x=a,A.y=n,A}return r=Dt(this.es),l=vt(this.es),h=St(this.es),c=Gt(this.es),Math.abs(this.sin_p12-1)<=d?(n=Ft(((f=this.a*bt(r,l,h,c,g))-(t=Math.sqrt(A.x*A.x+A.y*A.y)))/this.a,r,l,h,c),a=K(this.long0+Math.atan2(A.x,-1*A.y)),A.x=a,A.y=n,A):Math.abs(this.sin_p12+1)<=d?(f=this.a*bt(r,l,h,c,g),n=Ft(((t=Math.sqrt(A.x*A.x+A.y*A.y))-f)/this.a,r,l,h,c),a=K(this.long0+Math.atan2(A.x,A.y)),A.x=a,A.y=n,A):(t=Math.sqrt(A.x*A.x+A.y*A.y),p=Math.atan2(A.x,A.y),u=Nt(this.a,this.e,this.sin_p12),_=Math.cos(p),B=-(C=this.e*this.cos_p12*_)*C/(1-this.es),w=3*this.es*(1-B)*this.sin_p12*this.cos_p12*_/(1-this.es),Q=1-B*(y=(E=t/u)-B*(1+B)*Math.pow(E,3)/6-w*(1+3*B)*Math.pow(E,4)/24)*y/2-E*y*y*y/6,I=Math.asin(this.sin_p12*Math.cos(y)+this.cos_p12*Math.sin(y)*_),a=K(this.long0+Math.asin(Math.sin(p)*Math.sin(y)/Math.cos(I))),m=Math.sin(I),n=Math.atan2((m-this.es*Q*this.sin_p12)*Math.tan(I),m*(1-this.es)),A.x=a,A.y=n,A)},names:["Azimuthal_Equidistant","aeqd"]};const ae={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0)},forward:function(A){var t,e,i,s,a,n,o,r=A.x,l=A.y;return i=K(r-this.long0),t=Math.sin(l),e=Math.cos(l),s=Math.cos(i),1,((a=this.sin_p14*t+this.cos_p14*e*s)>0||Math.abs(a)<=d)&&(n=1*this.a*e*Math.sin(i),o=this.y0+1*this.a*(this.cos_p14*t-this.sin_p14*e*s)),A.x=n,A.y=o,A},inverse:function(A){var t,e,i,s,a,n,o;return A.x-=this.x0,A.y-=this.y0,e=jt((t=Math.sqrt(A.x*A.x+A.y*A.y))/this.a),i=Math.sin(e),s=Math.cos(e),n=this.long0,Math.abs(t)<=d?(o=this.lat0,A.x=n,A.y=o,A):(o=jt(s*this.sin_p14+A.y*i*this.cos_p14/t),a=Math.abs(this.lat0)-g,Math.abs(a)<=d?(n=this.lat0>=0?K(this.long0+Math.atan2(A.x,-A.y)):K(this.long0-Math.atan2(-A.x,A.y)),A.x=n,A.y=o,A):(n=K(this.long0+Math.atan2(A.x*i,t*this.cos_p14*s-A.y*this.sin_p14*i)),A.x=n,A.y=o,A))},names:["ortho"]};var ne=1,oe=2,re=3,le=4,he=5,ge=6,ce={AREA_0:1,AREA_1:2,AREA_2:3,AREA_3:4};function fe(A,t,e,i){var s;return A<d?(i.value=ce.AREA_0,s=0):(s=Math.atan2(t,e),Math.abs(s)<=_?i.value=ce.AREA_0:s>_&&s<=g+_?(i.value=ce.AREA_1,s-=g):s>g+_||s<=-(g+_)?(i.value=ce.AREA_2,s=s>=0?s-B:s+B):(i.value=ce.AREA_3,s+=g)),s}function ue(A,t){var e=A+t;return e<-B?e+=C:e>+B&&(e-=C),e}const de={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Quadrilateralized Spherical Cube",this.lat0>=g-_/2?this.face=he:this.lat0<=-(g-_/2)?this.face=ge:Math.abs(this.long0)<=_?this.face=ne:Math.abs(this.long0)<=g+_?this.face=this.long0>0?oe:le:this.face=re,0!==this.es&&(this.one_minus_f=1-(this.a-this.b)/this.a,this.one_minus_f_squared=this.one_minus_f*this.one_minus_f)},forward:function(A){var t,e,i,s,a,n,o={x:0,y:0},r={value:0};if(A.x-=this.long0,t=0!==this.es?Math.atan(this.one_minus_f_squared*Math.tan(A.y)):A.y,e=A.x,this.face===he)s=g-t,e>=_&&e<=g+_?(r.value=ce.AREA_0,i=e-g):e>g+_||e<=-(g+_)?(r.value=ce.AREA_1,i=e>0?e-B:e+B):e>-(g+_)&&e<=-_?(r.value=ce.AREA_2,i=e+g):(r.value=ce.AREA_3,i=e);else if(this.face===ge)s=g+t,e>=_&&e<=g+_?(r.value=ce.AREA_0,i=-e+g):e<_&&e>=-_?(r.value=ce.AREA_1,i=-e):e<-_&&e>=-(g+_)?(r.value=ce.AREA_2,i=-e-g):(r.value=ce.AREA_3,i=e>0?-e+B:-e-B);else{var l,h,c,f,u,d;this.face===oe?e=ue(e,+g):this.face===re?e=ue(e,+B):this.face===le&&(e=ue(e,-g)),f=Math.sin(t),u=Math.cos(t),d=Math.sin(e),l=u*Math.cos(e),h=u*d,c=f,this.face===ne?i=fe(s=Math.acos(l),c,h,r):this.face===oe?i=fe(s=Math.acos(h),c,-l,r):this.face===re?i=fe(s=Math.acos(-l),c,-h,r):this.face===le?i=fe(s=Math.acos(-h),c,l,r):(s=i=0,r.value=ce.AREA_0)}return n=Math.atan(12/B*(i+Math.acos(Math.sin(i)*Math.cos(_))-g)),a=Math.sqrt((1-Math.cos(s))/(Math.cos(n)*Math.cos(n))/(1-Math.cos(Math.atan(1/Math.cos(i))))),r.value===ce.AREA_1?n+=g:r.value===ce.AREA_2?n+=B:r.value===ce.AREA_3&&(n+=1.5*B),o.x=a*Math.cos(n),o.y=a*Math.sin(n),o.x=o.x*this.a+this.x0,o.y=o.y*this.a+this.y0,A.x=o.x,A.y=o.y,A},inverse:function(A){var t,e,i,s,a,n,o,r,l,h,c,f,u={lam:0,phi:0},d={value:0};if(A.x=(A.x-this.x0)/this.a,A.y=(A.y-this.y0)/this.a,e=Math.atan(Math.sqrt(A.x*A.x+A.y*A.y)),t=Math.atan2(A.y,A.x),A.x>=0&&A.x>=Math.abs(A.y)?d.value=ce.AREA_0:A.y>=0&&A.y>=Math.abs(A.x)?(d.value=ce.AREA_1,t-=g):A.x<0&&-A.x>=Math.abs(A.y)?(d.value=ce.AREA_2,t=t<0?t+B:t-B):(d.value=ce.AREA_3,t+=g),l=B/12*Math.tan(t),a=Math.sin(l)/(Math.cos(l)-1/Math.sqrt(2)),n=Math.atan(a),(o=1-(i=Math.cos(t))*i*(s=Math.tan(e))*s*(1-Math.cos(Math.atan(1/Math.cos(n)))))<-1?o=-1:o>1&&(o=1),this.face===he)r=Math.acos(o),u.phi=g-r,d.value===ce.AREA_0?u.lam=n+g:d.value===ce.AREA_1?u.lam=n<0?n+B:n-B:d.value===ce.AREA_2?u.lam=n-g:u.lam=n;else if(this.face===ge)r=Math.acos(o),u.phi=r-g,d.value===ce.AREA_0?u.lam=-n+g:d.value===ce.AREA_1?u.lam=-n:d.value===ce.AREA_2?u.lam=-n-g:u.lam=n<0?-n-B:-n+B;else{var I,p,_;l=(I=o)*I,p=(l+=(_=l>=1?0:Math.sqrt(1-l)*Math.sin(n))*_)>=1?0:Math.sqrt(1-l),d.value===ce.AREA_1?(l=p,p=-_,_=l):d.value===ce.AREA_2?(p=-p,_=-_):d.value===ce.AREA_3&&(l=p,p=_,_=-l),this.face===oe?(l=I,I=-p,p=l):this.face===re?(I=-I,p=-p):this.face===le&&(l=I,I=p,p=-l),u.phi=Math.acos(-_)-g,u.lam=Math.atan2(p,I),this.face===oe?u.lam=ue(u.lam,-g):this.face===re?u.lam=ue(u.lam,-B):this.face===le&&(u.lam=ue(u.lam,+g))}return 0!==this.es&&(h=u.phi<0?1:0,c=Math.tan(u.phi),f=this.b/Math.sqrt(c*c+this.one_minus_f_squared),u.phi=Math.atan(Math.sqrt(this.a*this.a-f*f)/(this.one_minus_f*f)),h&&(u.phi=-u.phi)),u.lam+=this.long0,A.x=u.lam,A.y=u.phi,A},names:["Quadrilateralized Spherical Cube","Quadrilateralized_Spherical_Cube","qsc"]};var Ie=[[1,22199e-21,-715515e-10,31103e-10],[.9986,-482243e-9,-24897e-9,-13309e-10],[.9954,-83103e-8,-448605e-10,-9.86701e-7],[.99,-.00135364,-59661e-9,36777e-10],[.9822,-.00167442,-449547e-11,-572411e-11],[.973,-.00214868,-903571e-10,1.8736e-8],[.96,-.00305085,-900761e-10,164917e-11],[.9427,-.00382792,-653386e-10,-26154e-10],[.9216,-.00467746,-10457e-8,481243e-11],[.8962,-.00536223,-323831e-10,-543432e-11],[.8679,-.00609363,-113898e-9,332484e-11],[.835,-.00698325,-640253e-10,9.34959e-7],[.7986,-.00755338,-500009e-10,9.35324e-7],[.7597,-.00798324,-35971e-9,-227626e-11],[.7186,-.00851367,-701149e-10,-86303e-10],[.6732,-.00986209,-199569e-9,191974e-10],[.6213,-.010418,883923e-10,624051e-11],[.5722,-.00906601,182e-6,624051e-11],[.5322,-.00677797,275608e-9,624051e-11]],pe=[[-520417e-23,.0124,121431e-23,-845284e-16],[.062,.0124,-1.26793e-9,4.22642e-10],[.124,.0124,5.07171e-9,-1.60604e-9],[.186,.0123999,-1.90189e-8,6.00152e-9],[.248,.0124002,7.10039e-8,-2.24e-8],[.31,.0123992,-2.64997e-7,8.35986e-8],[.372,.0124029,9.88983e-7,-3.11994e-7],[.434,.0123893,-369093e-11,-4.35621e-7],[.4958,.0123198,-102252e-10,-3.45523e-7],[.5571,.0121916,-154081e-10,-5.82288e-7],[.6176,.0119938,-241424e-10,-5.25327e-7],[.6769,.011713,-320223e-10,-5.16405e-7],[.7346,.0113541,-397684e-10,-6.09052e-7],[.7903,.0109107,-489042e-10,-104739e-11],[.8435,.0103431,-64615e-9,-1.40374e-9],[.8936,.00969686,-64636e-9,-8547e-9],[.9394,.00840947,-192841e-9,-42106e-10],[.9761,.00616527,-256e-6,-42106e-10],[1,.00328947,-319159e-9,-42106e-10]],_e=.8487,Ce=1.3523,Be=p/5,we=1/Be,Ee=18,ye=function(A,t){return A[0]+t*(A[1]+t*(A[2]+t*A[3]))};const Qe={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.long0=this.long0||0,this.es=0,this.title=this.title||"Robinson"},forward:function(A){var t=K(A.x-this.long0),e=Math.abs(A.y),i=Math.floor(e*Be);i<0?i=0:i>=Ee&&(i=17);var s={x:ye(Ie[i],e=p*(e-we*i))*t,y:ye(pe[i],e)};return A.y<0&&(s.y=-s.y),s.x=s.x*this.a*_e+this.x0,s.y=s.y*this.a*Ce+this.y0,s},inverse:function(A){var t={x:(A.x-this.x0)/(this.a*_e),y:Math.abs(A.y-this.y0)/(this.a*Ce)};if(t.y>=1)t.x/=Ie[18][0],t.y=A.y<0?-g:g;else{var e=Math.floor(t.y*Ee);for(e<0?e=0:e>=Ee&&(e=17);;)if(pe[e][0]>t.y)--e;else{if(!(pe[e+1][0]<=t.y))break;++e}var i=pe[e],s=5*(t.y-i[0])/(pe[e+1][0]-i[0]);s=function(A,t,e,i){for(var s=t;i;--i){var a=A(s);if(s-=a,Math.abs(a)<e)break}return s}((function(A){return(ye(i,A)-t.y)/function(A,t){return A[1]+t*(2*A[2]+3*t*A[3])}(i,A)}),s,d,100),t.x/=ye(Ie[e],s),t.y=(5*e+s)*I,A.y<0&&(t.y=-t.y)}return t.x=K(t.x+this.long0),t},names:["Robinson","robin"]};const me={init:function(){this.name="geocent"},forward:function(A){return dA(A,this.es,this.a)},inverse:function(A){return IA(A,this.es,this.a,this.b)},names:["Geocentric","geocentric","geocent","Geocent"]};var ke=0,xe=1,Me=2,be=3,De={h:{def:1e5,num:!0},azi:{def:0,num:!0,degrees:!0},tilt:{def:0,num:!0,degrees:!0},long0:{def:0,num:!0},lat0:{def:0,num:!0}};const ve={init:function(){if(Object.keys(De).forEach(function(A){if(void 0===this[A])this[A]=De[A].def;else{if(De[A].num&&isNaN(this[A]))throw new Error("Invalid parameter value, must be numeric "+A+" = "+this[A]);De[A].num&&(this[A]=parseFloat(this[A]))}De[A].degrees&&(this[A]=this[A]*I)}.bind(this)),Math.abs(Math.abs(this.lat0)-g)<d?this.mode=this.lat0<0?xe:ke:Math.abs(this.lat0)<d?this.mode=Me:(this.mode=be,this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0)),this.pn1=this.h/this.a,this.pn1<=0||this.pn1>1e10)throw new Error("Invalid height");this.p=1+this.pn1,this.rp=1/this.p,this.h1=1/this.pn1,this.pfact=(this.p+1)*this.h1,this.es=0;var A=this.tilt,t=this.azi;this.cg=Math.cos(t),this.sg=Math.sin(t),this.cw=Math.cos(A),this.sw=Math.sin(A)},forward:function(A){A.x-=this.long0;var t,e,i,s,a=Math.sin(A.y),n=Math.cos(A.y),o=Math.cos(A.x);switch(this.mode){case be:e=this.sinph0*a+this.cosph0*n*o;break;case Me:e=n*o;break;case xe:e=-a;break;case ke:e=a}switch(t=(e=this.pn1/(this.p-e))*n*Math.sin(A.x),this.mode){case be:e*=this.cosph0*a-this.sinph0*n*o;break;case Me:e*=a;break;case ke:e*=-n*o;break;case xe:e*=n*o}return s=1/((i=e*this.cg+t*this.sg)*this.sw*this.h1+this.cw),t=(t*this.cg-e*this.sg)*this.cw*s,e=i*s,A.x=t*this.a,A.y=e*this.a,A},inverse:function(A){A.x/=this.a,A.y/=this.a;var t,e,i,s={x:A.x,y:A.y};i=1/(this.pn1-A.y*this.sw),t=this.pn1*A.x*i,e=this.pn1*A.y*this.cw*i,A.x=t*this.cg+e*this.sg,A.y=e*this.cg-t*this.sg;var a=ut(A.x,A.y);if(Math.abs(a)<d)s.x=0,s.y=A.y;else{var n,o;switch(o=1-a*a*this.pfact,o=(this.p-Math.sqrt(o))/(this.pn1/a+a/this.pn1),n=Math.sqrt(1-o*o),this.mode){case be:s.y=Math.asin(n*this.sinph0+A.y*o*this.cosph0/a),A.y=(n-this.sinph0*Math.sin(s.y))*a,A.x*=o*this.cosph0;break;case Me:s.y=Math.asin(A.y*o/a),A.y=n*a,A.x*=o;break;case ke:s.y=Math.asin(n),A.y=-A.y;break;case xe:s.y=-Math.asin(n)}s.x=Math.atan2(A.x,A.y)}return A.x=s.x+this.long0,A.y=s.y,A},names:["Tilted_Perspective","tpers"]};const Se={init:function(){if(this.flip_axis="x"===this.sweep?1:0,this.h=Number(this.h),this.radius_g_1=this.h/this.a,this.radius_g_1<=0||this.radius_g_1>1e10)throw new Error;if(this.radius_g=1+this.radius_g_1,this.C=this.radius_g*this.radius_g-1,0!==this.es){var A=1-this.es,t=1/A;this.radius_p=Math.sqrt(A),this.radius_p2=A,this.radius_p_inv2=t,this.shape="ellipse"}else this.radius_p=1,this.radius_p2=1,this.radius_p_inv2=1,this.shape="sphere";this.title||(this.title="Geostationary Satellite View")},forward:function(A){var t,e,i,s,a=A.x,n=A.y;if(a-=this.long0,"ellipse"===this.shape){n=Math.atan(this.radius_p2*Math.tan(n));var o=this.radius_p/ut(this.radius_p*Math.cos(n),Math.sin(n));if(e=o*Math.cos(a)*Math.cos(n),i=o*Math.sin(a)*Math.cos(n),s=o*Math.sin(n),(this.radius_g-e)*e-i*i-s*s*this.radius_p_inv2<0)return A.x=Number.NaN,A.y=Number.NaN,A;t=this.radius_g-e,this.flip_axis?(A.x=this.radius_g_1*Math.atan(i/ut(s,t)),A.y=this.radius_g_1*Math.atan(s/t)):(A.x=this.radius_g_1*Math.atan(i/t),A.y=this.radius_g_1*Math.atan(s/ut(i,t)))}else"sphere"===this.shape&&(t=Math.cos(n),e=Math.cos(a)*t,i=Math.sin(a)*t,s=Math.sin(n),t=this.radius_g-e,this.flip_axis?(A.x=this.radius_g_1*Math.atan(i/ut(s,t)),A.y=this.radius_g_1*Math.atan(s/t)):(A.x=this.radius_g_1*Math.atan(i/t),A.y=this.radius_g_1*Math.atan(s/ut(i,t))));return A.x=A.x*this.a,A.y=A.y*this.a,A},inverse:function(A){var t,e,i,s,a=-1,n=0,o=0;if(A.x=A.x/this.a,A.y=A.y/this.a,"ellipse"===this.shape){this.flip_axis?(o=Math.tan(A.y/this.radius_g_1),n=Math.tan(A.x/this.radius_g_1)*ut(1,o)):(n=Math.tan(A.x/this.radius_g_1),o=Math.tan(A.y/this.radius_g_1)*ut(1,n));var r=o/this.radius_p;if(t=n*n+r*r+a*a,(i=(e=2*this.radius_g*a)*e-4*t*this.C)<0)return A.x=Number.NaN,A.y=Number.NaN,A;s=(-e-Math.sqrt(i))/(2*t),a=this.radius_g+s*a,n*=s,o*=s,A.x=Math.atan2(n,a),A.y=Math.atan(o*Math.cos(A.x)/a),A.y=Math.atan(this.radius_p_inv2*Math.tan(A.y))}else if("sphere"===this.shape){if(this.flip_axis?(o=Math.tan(A.y/this.radius_g_1),n=Math.tan(A.x/this.radius_g_1)*Math.sqrt(1+o*o)):(n=Math.tan(A.x/this.radius_g_1),o=Math.tan(A.y/this.radius_g_1)*Math.sqrt(1+n*n)),t=n*n+o*o+a*a,(i=(e=2*this.radius_g*a)*e-4*t*this.C)<0)return A.x=Number.NaN,A.y=Number.NaN,A;s=(-e-Math.sqrt(i))/(2*t),a=this.radius_g+s*a,n*=s,o*=s,A.x=Math.atan2(n,a),A.y=Math.atan(o*Math.cos(A.x)/a)}return A.x=A.x+this.long0,A},names:["Geostationary Satellite View","Geostationary_Satellite","geos"]};bA.defaultDatum="WGS84",bA.Proj=uA,bA.WGS84=new bA.Proj("WGS84"),bA.Point=VA,bA.toPoint=yA,bA.defs=P,bA.nadgrid=function(A,t){var e=new DataView(t),i=function(A){var t=A.getInt32(8,!1);if(11===t)return!1;t=A.getInt32(8,!0),11!==t&&console.warn("Failed to detect nadgrid endian-ness, defaulting to little-endian");return!0}(e),s=function(A,t){return{nFields:A.getInt32(8,t),nSubgridFields:A.getInt32(24,t),nSubgrids:A.getInt32(40,t),shiftType:lA(A,56,64).trim(),fromSemiMajorAxis:A.getFloat64(120,t),fromSemiMinorAxis:A.getFloat64(136,t),toSemiMajorAxis:A.getFloat64(152,t),toSemiMinorAxis:A.getFloat64(168,t)}}(e,i),a=function(A,t,e){for(var i=176,s=[],a=0;a<t.nSubgrids;a++){var n=gA(A,i,e),o=cA(A,i,n,e),r=Math.round(1+(n.upperLongitude-n.lowerLongitude)/n.longitudeInterval),l=Math.round(1+(n.upperLatitude-n.lowerLatitude)/n.latitudeInterval);s.push({ll:[rA(n.lowerLongitude),rA(n.lowerLatitude)],del:[rA(n.longitudeInterval),rA(n.latitudeInterval)],lim:[r,l],count:n.gridNodeCount,cvs:hA(o)}),i+=176+16*n.gridNodeCount}return s}(e,s,i),n={header:s,subgrids:a};return nA[A]=n,n},bA.transform=mA,bA.mgrs=UA,bA.version="__VERSION__",function(A){A.Proj.projections.add(ct),A.Proj.projections.add(_t),A.Proj.projections.add(Ct),A.Proj.projections.add(Et),A.Proj.projections.add(yt),A.Proj.projections.add(Qt),A.Proj.projections.add(kt),A.Proj.projections.add(xt),A.Proj.projections.add(Mt),A.Proj.projections.add(Lt),A.Proj.projections.add(zt),A.Proj.projections.add(Kt),A.Proj.projections.add(Yt),A.Proj.projections.add(Vt),A.Proj.projections.add(Wt),A.Proj.projections.add(Xt),A.Proj.projections.add(Zt),A.Proj.projections.add($t),A.Proj.projections.add(Ae),A.Proj.projections.add(te),A.Proj.projections.add(ee),A.Proj.projections.add(ie),A.Proj.projections.add(se),A.Proj.projections.add(ae),A.Proj.projections.add(de),A.Proj.projections.add(Qe),A.Proj.projections.add(me),A.Proj.projections.add(ve),A.Proj.projections.add(Se)}(bA);const Ge=bA},5209:A=>{const t=" +no_defs",e=" +towgs84=0,0,0,0,0,0,0",i=" +ellps=GRS80",s="+proj=tmerc",a=" +units=m",n=" +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12",o=" +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22",r="+proj=lcc",l="+proj=utm",h=" +units=us-ft",g="+proj=longlat",c=" +lat_0=0",f=" +ellps=krass",u=" +y_0=0",d=" +x_0=500000",I=" +towgs84=0,0,4.5,0,0,0.554,0.2263",p=" +towgs84=0,0,1.9,0,0,0.814,-0.38",_=" +ellps=intl",C=" +datum=WGS84",B=" +ellps=WGS72",w=" +towgs84=15.8,-154.4,-82.3,0,0,0,0",E=" +k=0.9999",y=" +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",Q=" +datum=NAD27",m=" +ellps=bessel",k=" +x_0=609601.2192024384",x=" +x_0=600000",M=" +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84",b=" +ellps=clrk80",D=" +b=6356755.288157528",v=" +x_0=152400.3048006096",S=" +lat_0=36.66666666666666",G=" +towgs84=-146.414,507.337,680.507,0,0,0,0",N=" +x_0=200000",R=" +ellps=clrk66",F=" +ellps=WGS84",L=" +x_0=500000.001016002",U=" +x_0=240000",O=" +lat_0=-90",P=" +towgs84=-87,-98,-121,0,0,0,0",T=" +south",H=" +lat_0=41.66666666666666",J=" +y_0=36000",q=" +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29",z=" +x_0=0",j=" +units=ft",K=" +x_0=400000",Y=" +towgs84=-115.854,-99.0583,-152.462,0,0,0,0",V=" +towgs84=-208.406,-109.878,-2.5764,0,0,0,0",W=" +ellps=aust_SA",X=" +lat_0=39.33333333333334",Z=" +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232",$=" +lat_0=37.66666666666666",AA=" +lat_0=36.33333333333334",tA=" +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7",eA=" +y_0=500000.0001016001",iA=" +x_0=200000.0001016002",sA=" +x_0=500000.0001016001",aA=" +x_0=500000.00001016",nA=" +y_0=1000000",oA=" +x_0=300000",rA=" +lon_0=-120.5",lA=" +lat_0=43.66666666666666",hA=" +lat_0=43.83333333333334",gA=" +lat_1=-68.66666666666667",cA=" +lat_2=-71.33333333333333",fA=" +k=0.999966667",uA=" +k=0.9996",dA=" +lat_0=38.33333333333334",IA=" +lat_1=73.66666666666667",pA=" +lat_2=70.33333333333333",_A=" +lat_0=72.02500919444445",CA=" +a=6378249.2",BA=" +x_0=1500000",wA=" +lat_ts=-80.23861111111111",EA=" +towgs84=-288,175,-376,0,0,0,0",yA=" +lat_1=41.78333333333333",QA=" +lat_2=-75.33333333333333",mA=" +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21",kA=" +x_0=304800",xA=" +x_0=2000000.0001016",MA=" +k=0.9999375",bA=" +y_0=500000",DA=" +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547",vA=" +lon_0=-100.3333333333333",SA=" +lat_1=-72.66666666666667",GA=" +lat_1=-76.66666666666667",NA=" +lat_2=-79.33333333333333",RA=" +y_0=10000000",FA=" +towgs84=-57,1,-41,0,0,0,0",LA=" +k=0.999941177",UA=" +x_0=800000.0000101599",OA=" +y_0=99999.99998983997",PA=" +lat_1=38.43333333333333",TA=" +lat_0=24.33333333333333",HA=" +towgs84=26,-121,-78,0,0,0,0",JA=" +a=6378140",qA=" +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496",zA=" +x_0=399999.99998984",jA=" +towgs84=-24,-15,5,0,0,0,0",KA=" +towgs84=682,-203,480,0,0,0,0",YA=" +towgs84=-136,-108,-292,0,0,0,0",VA=" +b=6356075.41314024",WA=" +lat_1=37.96666666666667",XA=" +lat_0=38.83333333333334",ZA=" +lat_0=40.16666666666666",$A=" +lat_0=34.33333333333334",At=" +lat_0=42.83333333333334",tt=" +lon_0=-84.36666666666666",et=" +x_0=300000.0000000001",it=" +k=0.999933333",st=" +lat_1=48.73333333333333",at=" +lon_0=-111.5",nt=" +k=0.9999473679999999",ot=" +towgs84=-67.35,3.88,-38.22,0,0,0,0",rt=" +lat_2=73.66666666666667",lt=" +lat_0=75.36440330555556",ht=" +b=6356515",gt=" +towgs84=25,-141,-78.5,-0,0.35,0.736,0",ct="+proj=stere",ft=" +lat_1=-64.66666666666667",ut=" +lat_2=-67.33333333333333",dt=" +b=6356514.966398753",It=" +towgs84=295,736,257,0,0,0,0",pt=" +x_0=100000",_t=" +towgs84=-11,851,5,0,0,0,0",Ct=" +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0",Bt=" +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06",wt=" +lat_0=39.66666666666666",Et=" +x_0=1000000",yt=" +lon_0=-105.5",Qt=" +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15",mt=" +a=6378249.145",kt=" +x_0=2000000",xt=" +lat_0=45.66666666666666",Mt=" +lat_1=80.33333333333333",bt=" +lat_0=78.70733752777778",Dt=" +b=6356774.50408554",vt=" +lon_0=-91.33333333333333",St=" +lon_0=-123.3333333333333",Gt=" +towgs84=-168,-60,320,0,0,0,0",Nt=" +lat_0=31",Rt=" +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093",Ft=" +x_0=150000",Lt=" +x_0=3500000",Ut=" +towgs84=213.11,9.37,-74.95,0,0,0,0",Ot=" +lat_1=43.66666666666666",Pt=" +lat_0=40.33333333333334",Tt=" +towgs84=-148,136,90,0,0,0,0",Ht=" +towgs84=616,97,-251,0,0,0,0",Jt=" +lon_0=-90",qt=" +x_0=250000",zt=" +x_0=914401.8288036576",jt=" +lon_0=-90.33333333333333",Kt=" +a=6377276.345",Yt=" +b=6356103.038993155",Vt=" +lat_0=40.5",Wt=" +towgs84=-134,-48,149,0,0,0,0",Xt=" +towgs84=25,-141,-78.5,0,0.35,0.736,0",Zt=" +lat_1=27.83333333333333",$t=" +lat_2=26.16666666666667",Ae=" +lat_2=40.71666666666667",te=" +lat_2=39.01666666666667",ee=" +lat_2=37.21666666666667",ie=" +lat_1=70.33333333333333",se=" +lat_0=68.68747555555557",ae=" +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68",ne=" +y_0=304800.6096012192",oe=" +x_0=699999.9998983998",re=" +y_0=999999.9998983998",le=" +y_0=800000",he=" +k=0.99995",ge=" +lat_0=34.75",ce=" +lon_0=-81",fe=" +lon_0=-100",ue=" +b=6356098.145120132",de="+proj=omerc",Ie=" +lon_0=-98.5",pe=" +towgs84=-103.746,-9.614,-255.95,0,0,0,0",_e=" +x_0=800000",Ce=" +lat_0=37.83333333333334",Be=" +lat_2=44.33333333333334",we=" +lat_2=42.33333333333334",Ee=" +lat_0=29.66666666666667",ye=" +lat_0=25.66666666666667",Qe=" +lat_0=35.83333333333334",me=" +lat_1=83.66666666666667",ke=" +lat_2=80.33333333333333",xe=" +lat_0=82.05842488888888",Me=" +lat_0=38",be=" +x_0=2500000",De=" +towgs84=-377,681,-50,0,0,0,0",ve="+proj=cass",Se=" +y_0=2000000",Ge=" +towgs84=-143,-236,7,0,0,0,0",Ne=" +lon_0=-110.1666666666667",Re=" +lon_0=-111.9166666666667",Fe=" +lon_0=-75.41666666666667",Le=" +lon_0=-82.16666666666667",Ue=" +lon_0=-84.16666666666667",Oe=" +lon_0=-112.1666666666667",Pe=" +lon_0=-88.83333333333333",Te=" +lon_0=-104.3333333333333",He=" +lon_0=-107.8333333333333",Je=" +lon_0=-76.58333333333333",qe=" +lon_0=-78.58333333333333",ze=" +lon_0=-120.8333333333333",je=" +lon_0=-88.33333333333333",Ke=" +lon_0=-90.16666666666667",Ye=" +lon_0=-85.66666666666667",Ve=" +lon_0=-87.08333333333333",We=" +lon_0=-70.16666666666667",Xe=" +lon_0=-93.09999999999999",Ze=" +lon_0=-115.5833333333333",$e=" +lon_0=-116.6666666666667",Ai=" +lon_0=-118.5833333333333",ti=" +lon_0=-71.66666666666667",ei=" +lon_0=-105.1666666666667",ii=" +lon_0=-107.3333333333333",si=" +lon_0=-110.0833333333333",ai=" +lat_0=37.5",ni=" +y_0=700000",oi=" +towgs84=-242.2,-144.9,370.3,0,0,0,0",ri=" +x_0=4500000",li=" +y_0=1500000",hi=" +x_0=599999.9999976",gi=" +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1",ci="+proj=aea",fi=" +y_0=-2500000",ui=" +lat_2=38.96666666666667",di=" +lat_1=41.66666666666666",Ii=" +lat_1=39.83333333333334",pi=" +lat_2=38.33333333333334",_i=" +lat_2=37.06666666666667",Ci=" +lat_0=35.33333333333334",Bi=" +lat_1=35.46666666666667",wi=" +lat_2=34.03333333333333",Ei=" +lat_1=33.88333333333333",yi=" +lat_2=32.78333333333333",Qi=" +lat_0=32.16666666666666",mi=" +lat_2=37.23333333333333",ki=" +lat_1=41.86666666666667",xi=" +lat_0=40.83333333333334",Mi=" +lat_2=29.58333333333333",bi=" +lat_2=41.71666666666667",Di=" +lat_1=41.03333333333333",vi=" +lat_2=40.66666666666666",Si=" +lat_1=36.76666666666667",Gi=" +lat_0=33.33333333333334",Ni=" +lat_1=40.96666666666667",Ri=" +lat_2=39.93333333333333",Fi=" +lat_0=31.83333333333333",Li=" +lat_0=31.66666666666667",Ui=" +lat_0=27.83333333333333",Oi=" +lat_2=36.76666666666667",Pi=" +lat_0=45.33333333333334",Ti=" +lat_0=45.16666666666666",Hi=" +lat_1=36.23333333333333",Ji=" +lat_2=34.93333333333333",qi=" +lat_1=34.76666666666667",zi=" +lat_0=32.66666666666666",ji=" +lat_1=43.26666666666667",Ki=" +lat_2=42.06666666666667",Yi=" +lat_2=40.61666666666667",Vi=" +lat_1=39.78333333333333",Wi=" +lat_2=38.71666666666667",Xi=" +lat_1=38.56666666666667",Zi=" +lat_2=37.26666666666667",$i=" +lat_0=41.08333333333334",As=" +lat_0=42.33333333333334",ts=" +y_0=100000",es=" +b=6356173.508712696",is=" +y_0=5500000",ss=" +lon_0=105",as=" +y_0=-5000000",ns=" +k=0.9995000000000001",os=" +k=0.9999749999999999",rs=" +towgs84=-160,-6,-302,0,0,0,0",ls=" +towgs84=307,304,-318,0,0,0,0",hs=" +lon_0=-82.5",gs=" +towgs84=70.995,-335.916,262.898,0,0,0,0",cs=" +towgs84=-304.046,-60.576,103.64,0,0,0,0",fs=" +x_0=700000",us=" +x_0=213360",ds=" +lon_0=-85.75",Is=" +lon_0=-100.5",ps=" +lon_0=-77.75",_s=" +x_0=999999.9999898402",Cs=" +towgs84=-151.99,287.04,-147.45,0,0,0,0",Bs=" +lon_0=129",ws=" +a=6378293.645208759",Es=" +b=6356617.987679838",ys=" +x_0=5500000",Qs=" +lat_1=40.78333333333333",ms=" +lat_2=39.71666666666667",ks=" +lat_1=37.93333333333333",xs=" +lat_2=36.73333333333333",Ms=" +lat_1=42.68333333333333",bs=" +lat_1=41.48333333333333",Ds=" +lat_2=41.28333333333333",vs=" +lat_1=47.08333333333334",Ss=" +lat_2=45.48333333333333",Gs=" +lat_0=44.78333333333333",Ns=" +lat_2=44.18333333333333",Rs=" +lat_0=43.31666666666667",Fs=" +lat_1=36.16666666666666",Ls=" +lat_2=34.33333333333334",Us=" +lat_2=47.43333333333333",Os=" +lat_1=47.48333333333333",Ps=" +lat_2=46.18333333333333",Ts=" +lat_2=35.56666666666667",Hs=" +lat_1=35.23333333333333",Js=" +lat_2=33.93333333333333",qs=" +lat_2=40.88333333333333",zs=" +lat_1=34.83333333333334",js=" +lat_1=36.41666666666666",Ks=" +lat_1=36.18333333333333",Ys=" +lat_1=33.96666666666667",Vs=" +lat_2=32.13333333333333",Ws=" +lat_1=31.88333333333333",Xs=" +lat_2=30.11666666666667",Zs=" +lat_1=30.28333333333333",$s=" +lat_2=28.38333333333333",Aa=" +lat_2=38.03333333333333",ta=" +lat_1=47.33333333333334",ea=" +lat_2=45.83333333333334",ia=" +lat_1=46.76666666666667",sa=" +lat_2=45.56666666666667",aa=" +lat_1=44.06666666666667",na=" +lat_2=42.73333333333333",oa=" +lat_1=32.66666666666666",ra=" +lat_2=31.16666666666667",la=" +lat_1=48.63333333333333",ha=" +lat_2=47.03333333333333",ga=" +lat_2=45.61666666666667",ca=" +lat_1=45.21666666666667",fa=" +lat_2=43.78333333333333",ua=" +lat_0=39.83333333333334",da=" +lat_2=40.43333333333333",Ia=" +lat_1=40.03333333333333",pa=" +lat_2=38.73333333333333",_a=" +lat_1=45.68333333333333",Ca=" +lat_2=44.41666666666666",Ba=" +lat_2=42.83333333333334",wa=" +lat_1=38.88333333333333",Ea=" +lat_2=37.48333333333333",ya=" +lat_1=37.08333333333334",Qa=" +lat_2=38.66666666666666",ma=" +lat_0=58",ka=" +lon_0=-98",xa=" +lon_0=117",Ma=" +lon_0=135",ba=" +lat_0=41.5",Da=" +lat_0=42.5",va=" +y_0=3000000",Sa=" +lon_0=123",Ga=" +lat_0=40",Na=" +lat_0=54",Ra=" +towgs84=-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188",Fa=" +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725",La=" +x_0=914401.8289",Ua=" +y_0=304800.6096",Oa=" +lon_0=111",Pa=" +k_0=0.99878641",Ta=" +lon_0=-66.43333333333334",Ha=" +towgs84=61,-285,-181,0,0,0,0",Ja=" +towgs84=-133,-77,-51,0,0,0,0",qa=" +towgs84=-679,669,-48,0,0,0,0",za=" +lon_0=-71.5",ja=" +lon_0=-78.5",Ka=" +lon_0=-93.5",Ya=" +lat_0=41.75",Va=" +y_0=249999.9998983998",Wa=" +y_0=999999.9999898402",Xa=" +to_meter=1.0000135965",Za=" +a=6377304.063",$a=" +lat_0=36",An=" +towgs84=-79.9,-158,-168.9,0,0,0,0",tn=" +towgs84=-50.9,-347.6,-231,0,0,0,0",en=" +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747",sn=" +towgs84=283,682,231,0,0,0,0",an=" +towgs84=-206,172,-6,0,0,0,0",nn=" +towgs84=-92,-93,122,0,0,0,0",on=" +to_meter=0.9143985307444408",rn="+proj=sterea",ln=" +lat_0=21.16666666666667",hn=" +lat_1=18.43333333333333",gn=" +lat_2=18.03333333333333",cn=" +lat_0=17.83333333333333",fn=" +gamma=323.1301023611111",un=" +lon_0=-79.5",dn=" +y_0=4500000",In=" +x_0=31500000",pn=" +x_0=500000.0001504",_n=" +b=6356514.96582849",Cn=" +towgs84=674.4,15.1,405.3,0,0,0,0",Bn=" +towgs84=-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.7101",wn=" +towgs84=589,76,480,0,0,0,0",En=" +towgs84=-263,6,431,0,0,0,0",yn=" +lon_0=15",Qn=" +axis=wsu",mn=" +lon_0=21",kn=" +lat_0=30",xn=" +ellps=helmert",Mn=" +a=6377299.151",bn=" +lon_0=-74.5",Dn=" +b=6356750.304921594",vn=" +y_0=2000000.0001016",Sn=" +x_0=3500000.0001016",Gn=" +y_0=399999.99998984",Nn=" +x_0=200000.00001016",Rn=" +b=6356098.359005156",Fn=" +x_0=14500000",Ln=" +x_0=29500000",Un=" +towgs84=-117,-132,-164,0,0,0,0",On=" +zone=20",Pn=" +lon_0=-122",Tn=" +ellps=bess_nam",Hn=" +lon_0=-86.15000000000001",Jn=" +towgs84=-189,-242,-91,0,0,0,0",qn=" +towgs84=-265,120,-358,0,0,0,0",zn=" +towgs84=-73.472,-51.66,-112.482,0.953,4.6,-2.368,0.586",jn=" +towgs84=-17.51,-108.32,-62.39,0,0,0,0",Kn=" +towgs84=-10.18,-350.43,291.37,0,0,0,0",Yn=" +towgs84=-190.421,8.532,238.69,0,0,0,0",Vn=" +lon_0=-68.5",Wn=" +a=6377299.36559538",Xn=" +x_0=79999.99999968",Zn=" +x_0=50000.00001504",$n=" +lon_0=0",Ao=" +lon_0=27",to=" +lon_0=75",eo=" +lon_0=81",io=" +lon_0=93",so=" +lon_0=99",ao=" +x_0=900000",no=" +x_0=13500000",oo=" +x_0=20500000",ro=" +x_0=22500000",lo=" +towgs84=-166,-15,204,0,0,0,0",ho=" +towgs84=-130,110,-13,0,0,0,0",go=" +towgs84=-587.8,519.75,145.76,0,0,0,0",co=" +lat_2=83.66666666666667",fo=" +lat_0=85.43711833333333",uo=" +towgs84=-273.5,110.6,-357.9,0,0,0,0",Io=" +lon_0=87",po="+proj=laea",_o=" +towgs84=-403,684,41,0,0,0,0",Co=" +lon_0=-92.5",Bo=" +y_0=6000000",wo=" +zone=19",Eo=" +lat_0=29.5",yo=" +y_0=300000",Qo=" +lat_2=45.5",mo=" +k=0.999909091",ko=" +a=6377492.018",xo=" +b=6356751.689189189",Mo=" +b=6356100.230165384",bo=" +lon_0=90",Do=" +lat_0=90",vo=" +x_0=18500000",So=" +x_0=19500000",Go=" +x_0=15500000",No=" +x_0=16500000",Ro=" +x_0=21500000",Fo=" +x_0=23500000",Lo=" +x_0=25500000",Uo=" +x_0=26500000",Oo=" +x_0=27500000",Po=" +x_0=28500000",To=" +zone=18",Ho=" +zone=21",Jo=" +towgs84=-124.76,53,466.79,0,0,0,0",qo=" +lon_0=-92",zo=" +lon_0=33",jo=" +lon_0=12",Ko=" +lon_0=24",Yo=" +lat_2=77",Vo=" +y_0=200000",Wo=" +lon_0=-70.5",Xo=" +x_0=7500000",Zo=" +y_0=3500000",$o=" +towgs84=31,146,47,0,0,0,0",Ar=" +lat_0=45",tr=" +lat_0=26",er=" +a=6378160",ir=" +lon_0=-109.5",sr=" +x_0=30500000",ar=" +x_0=32500000",nr=" +lon_0=-85.83333333333333",or=" +lon_0=-118.3333333333333",rr=" +y_0=0.003048006096012192",lr=" +lat_0=30.5",hr=" +lat_0=44",gr=" +lon_0=30",cr=" +lat_0=47",fr=" +lat_1=77",ur=" +lat_0=36.16666666666666",dr=" +lat_0=4.596200416666666",Ir=" +gamma=53.13010236111111",pr=" +lon_0=13.33333333333333",_r=" +lat_0=81.31722600000001",Cr=" +lat_0=73.15574086111111",Br=" +lat_0=65.10127088888888",wr=" +zone=17",Er=" +lon_0=132",yr=" +lon_0=114",Qr=" +towgs84=-143,-90,-294,0,0,0,0",mr=" +zone=22",kr=" +lat_0=41",xr=" +lat_0=46.5",Mr=" +lon_0=-118",br=" +y_0=400000",Dr=" +x_0=17500000",vr=" +x_0=33500000",Sr=" +lon_0=-113.75",Gr=" +lon_0=-116.25",Nr=" +lon_0=-115.75",Rr=" +lon_0=-106.25",Fr=" +k=0.999916667",Lr=" +k=0.999964286",Ur=" +lon_0=-108.75",Or=" +towgs84=-73,-247,227,0,0,0,0",Pr=" +towgs84=265.025,384.929,-194.046,0,0,0,0",Tr=" +k=0.99998",Hr=" +lat_1=40.65",Jr=" +lat_1=38.35",qr=" +y_0=2500000",zr=" +y_0=6500000",jr=" +x_0=39999.99999984",Kr=" +towgs84=-61.702,284.488,472.052,0,0,0,0",Yr=" +towgs84=-223.237,110.193,36.649,0,0,0,0",Vr=" +zone=39",Wr=" +zone=32",Xr=" +towgs84=-125,53,467,0,0,0,0",Zr=" +towgs84=198,881,317,0,0,0,0",$r=" +towgs84=214,804,268,0,0,0,0",Al=" +towgs84=217,823,299,0,0,0,0",tl=" +lon_0=45",el=" +lat_1=43",il="+proj=merc",sl=" +x_0=99999.99998983997",al=" +x_0=99999.99999960001",nl=" +x_0=2743195.592233322",ol=" +y_0=914398.5307444407",rl=" +zone=38",ll=" +zone=28",hl=" +lon_0=-114",gl=" +lat_1=45.5",cl=" +towgs84=-73,46,-86,0,0,0,0",fl=" +towgs84=11,72,-101,0,0,0,0",ul=" +towgs84=287.58,177.78,-135.41,0,0,0,0",dl=" +towgs84=-162.619,-276.959,-161.764,0.067753,-2.24365,-1.15883,-1.09425",Il=" +lon_0=-87",pl=" +lon_0=-99",_l=" +lon_0=102",Cl=" +lon_0=126",Bl=" +k=0.99999",wl=" +x_0=50000",El=" +lat_2=40",yl=" +lon_0=-84.25",Ql=" +x_0=11500000",ml=" +lon_0=-72.75",kl=" +lon_0=-101.5",xl=" +lon_0=-94.25",Ml=" +x_0=6500000",bl=" +y_0=5000000",Dl=" +x_0=1700000",vl=" +towgs84=31.95,300.99,419.19,0,0,0,0",Sl=" +towgs84=-189.681,18.3463,-42.7695,-0.33746,-3.09264,2.53861,0.4598",Gl=" +towgs84=-119.425,-303.659,-11.0006,1.1643,0.174458,1.09626,3.65706",Nl=" +towgs84=982.609,552.753,-540.873,6.68163,-31.6115,-19.8482,16.805",Rl=" +zone=29",Fl=" +lon_0=9",Ll=" +zone=33",Ul=" +zone=37",Ol=" +no_uoff",Pl=" +lon_0=120",Tl=" +lon_0=177",Hl=" +lon_0=-177",Jl=" +lon_0=-158",ql=" +y_0=250000",zl=" +lon_0=-111",jl=" +x_0=2500000.0001424",Kl=" +x_0=1500000.0001464",Yl=" +lon_0=-71.60561777777777",Vl=" +lon_0=-156.6666666666667",Wl=" +lon_0=-160.1666666666667",Xl=" +lat_0=0.1166666666666667",Zl=" +towgs84=0,0,0,-0,-0,-0,0",$l=" +lon_0=-117.8333333333333",Ah=" +lon_0=-123.1666666666667",th=" +lon_0=-122.3333333333333",eh=" +lon_0=-119.1666666666667",ih=" +lon_0=-123.0833333333333",sh=" +lon_0=-85.84999999999999",ah=" +lon_0=-87.09999999999999",nh=" +lon_0=-86.90000000000001",oh=" +lon_0=-89.24166666666667",rh=" +lon_0=-92.63333333333334",lh=" +towgs84=347.103,1078.12,2623.92,-33.8875,70.6773,-9.3943,186.074",hh=" +towgs84=8.846,-4.394,-1.122,-0.00237,-0.146528,0.130428,0.783926",gh=" +towgs84=-480.26,-438.32,-643.429,16.3119,20.1721,-4.0349,-111.7",ch=" +towgs84=-0.293,766.95,87.713,0.195704,1.69507,3.47302,-0.039338",fh=" +towgs84=221.525,152.948,176.768,-2.3847,-1.3896,-0.877,11.4741",uh=" +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773",dh=" +zone=35",Ih=" +lat_0=46.95240555555556",ph=" +alpha=30.28813972222222",_h=" +lat_1=10.16666666666667",Ch=" +lat_0=10.16666666666667",Bh=" +lat_0=18.83333333333333",wh=" +lat_0=20.33333333333333",Eh=" +lat_0=21.83333333333333",yh=" +lat_0=21.66666666666667",Qh=" +lat_0=45.30916666666666",mh=" +lat_1=49.83333333333334",kh=" +lat_2=51.16666666666666",xh=" +lonc=-133.6666666666667",Mh=" +alpha=323.1301023611111",bh=" +lat_1=53.83333333333334",Dh=" +lat_2=51.83333333333334",vh=" +lat_1=44.66666666666666",Sh=" +lat_0=44.66666666666666",Gh=" +lat_1=45.66666666666666",Nh=" +lat_0=45.91666666666666",Rh=" +lat_0=45.08333333333334",Fh=" +lat_0=44.33333333333334",Lh=" +lat_0=44.08333333333334",Uh=" +lat_1=48.33333333333334",Oh=" +lat_0=48.33333333333334",Ph=" +lat_0=31.73409694444445",Th=" +lon_0=35.21208055555556",Hh=" +lat_0=44.03611111111111",Jh=" +lat_0=4.599047222222222",qh=" +lat_0=40.66666666666666",zh=" +lat_1=49",jh=" +lon_0=39",Kh=" +lat_1=37.25",Yh=" +lat_1=39.75",Vh=" +lat_2=38.45",Wh=" +lat_1=30.75",Xh=" +lon_0=-84.5",Zh=" +lat_0=33.75",$h=" +x_0=4000000",Ag=" +y_0=4000000",tg=" +lon_0=-72.5",eg=" +x_0=5000000",ig=" +x_0=10500000",sg=" +x_0=12500000",ag=" +x_0=24500000",ng=" +k=0.99999375",og=" +x_0=399999.9999984",rg=" +lon_0=-77",lg=" +lon_0=108",hg=" +lon_0=171",gg=" +towgs84=-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925",cg=" +lon_0=-171",fg=" +lat_0=32.5",ug=" +lon_0=-117",dg=" +k=1.000015",Ig=" +k=1.000034",pg=" +k=1.000031",_g=" +k=1.000026",Cg=" +ellps=evrstSS",Bg=" +a=6377301.243",wg=" +towgs84=410.721,55.049,80.746,2.5779,2.3514,0.6664,17.3311",Eg=" +towgs84=72.438,345.918,79.486,1.6045,0.8823,0.5565,1.3746",yg=" +pm=ferro",Qg=" +lon_0=78",mg=" +lon_0=10",kg=" +pm=paris",xg=" +towgs84=0.055,-0.541,-0.185,0.0183,-0.0003,-0.007,-0.014",Mg=" +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489",bg=" +towgs84=8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081",Dg=" +towgs84=572.213,85.334,461.94,4.9732,1.529,5.2484,3.5378",vg=" +zone=58",Sg=" +zone=23",Gg=" +x_0=304800.6096012192",Ng=" +y_0=152400.3048006096",Rg=" +x_0=800000.0001016001",Fg=" +x_0=399999.9998983998",Lg=" +x_0=7999999.999968001",Ug=" +x_0=5999999.999976001",Og=" +x_0=830000.0001016001",Pg=" +x_0=249999.9998983998",Tg=" +x_0=350000.0001016001",Hg=" +to_meter=0.3047972654",Jg=" +x_0=99999.99989839978",qg=" +y_0=8000000.000010163",zg=" +x_0=699999.9999898402",jg=" +lon_0=-69",Kg=" +lon_0=-86",Yg=" +towgs84=-3.2,-5.7,2.8,0,0,0,0",Vg=" +x_0=8500000",Wg=" +x_0=9500000",Xg=" +lat_1=39.45",Zg=" +lat_0=44.25",$g=" +lat_1=41.95",Ac=" +lat_2=35.25",tc=" +lat_2=34.65",ec=" +lat_2=44.25",ic=" +lat_1=47.05",sc=" +lat_1=40.25",ac=" +k_0=1.00012",nc=" +lat_0=40.25",oc=" +zone=40",rc=" +zone=36",lc=" +zone=51",hc=" +zone=48",gc=" +zone=49",cc=" +lon_0=96",fc=" +y_0=750000",uc=" +lat_0=36.5",dc=" +lon_0=-119",Ic=" +lat_0=33.5",pc=" +lat_2=41.2",_c=" +k=0.999995",Cc=" +lat_2=33.3",Bc=" +lat_0=38.5",wc=" +lon_0=-154",Ec=" +lon_0=-120",yc=" +x_0=34500000",Qc=" +x_0=35500000",mc=" +x_0=36500000",kc=" +x_0=37500000",xc=" +x_0=38500000",Mc=" +x_0=39500000",bc=" +x_0=40500000",Dc=" +x_0=41500000",vc=" +x_0=43500000",Sc=" +x_0=45500000",Gc=" +y_0=3999999.99998984",Nc=" +y_0=2000000.00001016",Rc=" +towgs84=164,138,-189,0,0,0,0",Fc=" +towgs84=-186,230,110,0,0,0,0",Lc=" +towgs84=-199,32,322,0,0,0,0",Uc=" +to_meter=0.3047997101815088",Oc=" +towgs84=-76,-138,67,0,0,0,0",Pc=" +towgs84=-43,-163,45,0,0,0,0",Tc=" +towgs84=-346,-1,224,0,0,0,0",Hc=" +towgs84=210,814,289,0,0,0,0",Jc=" +towgs84=-74,-130,42,0,0,0,0",qc=" +zone=15",zc=" +zone=16",jc=" +zone=34",Kc=" +zone=50",Yc=" +zone=52",Vc=" +lon_0=-62",Wc=" +lon_0=-84",Xc=" +lon_0=-79",Zc=" +lon_0=131",$c=" +lon_0=153",Af=" +lon_0=165",tf=" +lon_0=-94",ef=" +lon_0=-54",sf=" +a=6378300.789",af=" +b=6356566.435",nf=" +y_0=3999999.9998984",of=" +y_0=5000000.0001016",rf=" +x_0=150000.00001464",lf=" +lat_2=46",hf=" +lon_0=84",gf=" +lat_0=43",cf=" +k_0=0.999625769",ff=" +towgs84=51,391,-36,0,0,0,0",uf=" +towgs84=-83,37,124,0,0,0,0",df=" +towgs84=-355,21,72,0,0,0,0",If=" +towgs84=-23,259,-9,0,0,0,0",pf=" +towgs84=174.05,-25.49,112.57,-0,-0,0.554,0.2263",_f=" +zone=59",Cf=" +zone=25",Bf=" +zone=11",wf=" +zone=12",Ef=" +zone=13",yf=" +zone=54",Qf=" +zone=14",mf=" +zone=24",kf=" +zone=47",xf=" +lat_2=38.3",Mf=" +lat_1=45.7",bf=" +lat_2=42.1",Df=" +x_0=165000",vf=" +lat_2=32.5",Sf=" +x_0=609600",Gf=" +lat_1=39.2",Nf=" +lat_2=47.5",Rf=" +lat_1=30.7",Ff=" +lat_2=29.3",Lf=" +lat_0=28.5",Uf=" +lat_1=41.7",Of=" +lat_1=44.4",Pf=" +lat_1=27.5",Tf=" +lon_0=-150",Hf=" +lat_0=44.5",Jf=" +k=1.000027",qf=" +k=1.000038",zf=" +k=1.000036",jf=" +lon_0=-87.5",Kf=" +x_0=3999999.999984",Yf=" +x_0=199999.9999992",Vf=" +towgs84=16,196,93,0,0,0,0",Wf=" +towgs84=-88,4,101,0,0,0,0",Xf=" +lat_0=18",Zf=" +lat_2=67",$f=" +lon_0=-96",Au=" +x_0=80000",tu=" +lon_0=-82",eu=" +lon_0=-74",iu=" +lon_0=147",su=" +lon_0=150",au=" +x_0=40000",nu=" +k=1.00002",ou=" +x_0=42500000",ru=" +x_0=44500000",lu=" +lon_0=-85.05",hu=" +ellps=mod_airy",gu=" +lat_0=0.1333333333333333",cu=" +lat_1=-60.66666666666666",fu=" +lat_2=-63.33333333333334",uu=" +lon_0=-91.91666666666667",du=" +y_0=0.003352806705613411",Iu=" +zone=30",pu=" +lon_0=3",_u=" +zone=26",Cu=" +zone=53",Bu=" +lat_0=31.73439361111111",wu=" +lon_0=35.20451694444445",Eu=" +lon_0=7.439583333333333",yu=" +lon_0=132.1666666666667",Qu=" +lon_0=134.3333333333333",mu=" +lon_0=137.1666666666667",ku=" +lon_0=139.8333333333333",xu=" +lon_0=140.8333333333333",Mu=" +lon_0=3.192280555555556",bu=" +lat_1=49.50000000000001",Du=" +lat_0=49.50000000000001",vu=" +alpha=53.31582047222222",Su=" +lon_0=10.33333333333333",Gu=" +lon_0=16.33333333333333",Nu=" +towgs84=-502.862,-247.438,312.724,0,0,0,0",Ru=" +towgs84=-381.788,-57.501,-256.673,0,0,0,0",Fu=" +towgs84=-43.685,-179.785,-267.721,0,0,0,0",Lu=" +zone=60",Uu=" +zone=55",Ou=" +lon_0=36",Pu=" +lon_0=42",Tu=" +lat_1=46",Hu=" +lat_1=44",Ju=" +lat_0=42",qu=" +lon_0=51",zu=" +lat_0=33",ju=" +lat_0=52",Ku=" +ellps=airy",Yu=" +pm=jakarta",Vu=" +x_0=2743195.5",Wu=" +y_0=-4354009.816",Xu=" +k_0=0.9987864078000001",Zu=" +towgs84=-106.226,166.366,-37.893,0,0,0,0",$u=" +towgs84=508.088,-191.042,565.223,0,0,0,0",Ad=" +k=0.99996",td=" +a=6378135",ed=" +lon_0=-66",id=" +lon_0=141",sd=" +lon_0=159",ad=" +k=0.99984",nd=" +lat_0=-22",od=" +lon_0=127.5",rd=" +x_0=6000000",ld=" +x_0=3900000",hd=" +y_0=1300000",gd=" +lat_0=44.75",cd=" +lat_0=37.75",fd=" +lat_0=40.55",ud=" +lon_0=-87.3",dd=" +lon_0=-86.5",Id=" +towgs84=195.671,332.517,274.607,0,0,0,0",pd=" +towgs84=-204.619,140.176,55.226,0,0,0,0",_d="+proj=somerc",Cd=" +y_0=30480.06096012192",Bd=" +y_0=999999.9999960001",wd=" +x_0=182880.3657607315",Ed=" +towgs84=674.374,15.056,405.346,0,0,0,0",yd=" +towgs84=-133.63,-157.5,-158.62,0,0,0,0",Qd=" +towgs84=-0.465,372.095,171.736,0,0,0,0",md=" +towgs84=-56.263,16.136,-22.856,0,0,0,0",kd=" +towgs84=-241.54,-163.64,396.06,0,0,0,0",xd=" +zone=31",Md=" +zone=10",bd=" +zone=46",Dd=" +x_0=304800.6096",vd=" +y_0=152400.3048",Sd=" +alpha=337.25556",Gd=" +x_0=2546731.496",Nd=" +gamma=337.25556",Rd=" +k_0=0.999625544",Fd=" +towgs84=335.47,222.58,-230.94,0,0,0,0",Ld=" +towgs84=217.037,86.959,23.956,0,0,0,0",Ud=" +towgs84=-128.16,-282.42,21.93,0,0,0,0",Od=" +towgs84=103.25,-100.4,-307.19,0,0,0,0",Pd=" +lon_0=31",Td=" +lon_0=18",Hd=" +lat_2=36",Jd=" +lat_0=29",qd=" +lat_0=35",zd=" +lat_0=34",jd=" +lon_0=63",Kd=" +lat_0=37",Yd=" +lat_2=65",Vd=" +y_0=-4000000",Wd=" +y_0=914398.5",Xd=" +towgs84=-199.87,74.79,246.62,0,0,0,0",Zd=" +towgs84=-11.64,-348.6,291.98,0,0,0,0",$d=" +towgs84=-254.1,-5.36,-100.29,0,0,0,0",AI=" +towgs84=-206.1,-174.7,-87.7,0,0,0,0",tI=" +towgs84=-770.1,158.4,-498.2,0,0,0,0",eI=" +towgs84=-146.21,112.63,4.05,0,0,0,0",iI=" +towgs84=-294.7,-200.1,525.5,0,0,0,0",sI=" +lat_0=4",aI=" +a=6378300",nI=" +lon_0=-63",oI=" +lon_0=162",rI=" +lat_ts=90",lI=" +y_0=600000",hI=" +x_0=350000",gI=" +y_0=900000",cI=" +lat_1=32.5",fI=" +lon_0=-147",uI=" +k=1.000043",dI=" +lat_0=48.5",II=" +lat_0=40.9",pI=" +k=1.000028",_I=" +k=1.000025",CI=" +x_0=170251.555",BI=" +b=6356657.142669561",wI=" +b=6356094.667915204",EI=" +b=6355862.933255573",yI=" +a=6378249.144808011",QI=" +b=6356514.966204134",mI=" +towgs84=-70.9,-151.8,-41.4,0,0,0,0",kI=" +towgs84=52.17,-71.82,-14.9,0,0,0,0",xI=" +towgs84=283.7,735.9,261.1,0,0,0,0",MI=" +zone=5",bI=" +zone=7",DI=" +lon_0=19",vI=" +lon_0=25",SI=" +lat_2=45",GI=" +lon_0=57",NI=" +lon_0=69",RI=" +lat_2=39",FI=" +lat_2=35",LI=" +lon_0=28",UI=" +lon_0=-61.5",OI=" +lon_0=-64.5",PI=" +lon_0=-90.5",TI=" +lon_0=-94.5",HI=" +y_0=2800000",JI=" +x_0=4321000",qI=" +y_0=3210000",zI=" +y_0=14743.5",jI=" +y_0=1999999.999992",KI=" +y_0=2999999.999988",YI=" +y_0=50000.00001504",VI=" +zone=41",WI=" +zone=42",XI=" +k=0.994",ZI=" +zone=56",$I=" +lon_0=-67.875",Ap=" +lon_0=-70.375",tp=" +x_0=609601.22",ep=" +b=6356889.449",ip=" +lon_0=-69.125",sp=" +lon_0=-121.75",ap=" +lon_0=-121.25",np=" +lon_0=-119.75",op=" +lon_0=-122.75",rp=" +zone=6",lp="+proj=krovak",hp=" +towgs84=-637,-549,-203,0,0,0,0",gp=" +towgs84=-20.8,11.3,2.4,0,0,0,0",cp=" +lon_0=-93",fp=" +lon_0=127",up=" +lon_0=125",dp=" +k=0.99975",Ip=" +lon_0=136",pp=" +lon_0=138",_p=" +lon_0=180",Cp=" +y_0=50000",Bp=" +lon_0=-85",wp=" +k=1.00016",Ep=" +lon_0=2.7",yp=" +towgs84=27.5,14,186.4,0,0,0,0",Qp=" +towgs84=-499,-249,314,0,0,0,0",mp=" +towgs84=-467,-16,-300,0,0,0,0",kp=" +towgs84=-382,-59,-262,0,0,0,0",xp=" +towgs84=253,-132,-127,0,0,0,0",Mp=" +towgs84=-963,510,-359,0,0,0,0",bp=" +towgs84=94,-948,-1262,0,0,0,0",Dp=" +zone=1",vp=" +zone=27",Sp=" +zone=57",Gp=" +pm=oslo",Np=" +zone=43",Rp=" +lon_0=23",Fp=" +lon_0=48",Lp=" +lon_0=54",Up=" +lat_0=49.5",Op=" +k=0.999912",Pp=" +lon_0=-174",Tp=" +lon_0=-168",Hp=" +lon_0=-170",Jp=" +lon_0=-165",qp=" +lat_2=40.5",zp=" +lon_0=-115",jp=" +lat_1=29.5",Kp=" +k=1.000045",Yp=" +lat_1=39.5",Vp=" +lat_1=33.3",Wp=" +lat_0=33.3",Xp=" +lon_0=-155.5",Zp=" +lon_0=-159.5",$p=" +y_0=-4480000",A_=" +lon_0=-176.5",t_=" +lon_0=-89.75",e_=" +k_0=1.000008",i_=" +lonc=-124.05",s_=" +k_0=1.000002",a_=" +lon_0=-122.5",n_=" +lon_0=-98.25",o_=" +lon_0=-112.5",r_=" +lon_0=-84.95",l_=" +lon_0=-86.95",h_=" +lon_0=-85.45",g_=" +lon_0=-87.45",c_=" +lon_0=-87.55",f_=" +towgs84=-149,128,296,0,0,0,0",u_=" +towgs84=-425,-169,81,0,0,0,0",d_=" +towgs84=-104,167,-38,0,0,0,0",I_=" +towgs84=-106,-87,188,0,0,0,0",p_=" +towgs84=-289,-124,60,0,0,0,0",__=" +towgs84=137,248,-430,0,0,0,0",C_=" +towgs84=-13,-348,292,0,0,0,0",B_=" +towgs84=-115,118,426,0,0,0,0",w_=" +towgs84=0,-0.15,0.68,0,0,0,0",E_=" +towgs84=145,-187,103,0,0,0,0",y_=" +towgs84=-134,229,-29,0,0,0,0",Q_=" +towgs84=70,207,389.5,0,0,0,0",m_=" +towgs84=-148,51,-291,0,0,0,0",k_=" +towgs84=-255,-15,71,0,0,0,0",x_=" +towgs84=725,685,536,0,0,0,0",M_=" +towgs84=72,213.7,93,0,0,0,0",b_=" +towgs84=174,359,365,0,0,0,0",D_=" +towgs84=-173,253,27,0,0,0,0",v_=" +towgs84=-203,141,53,0,0,0,0",S_=" +towgs84=186,482,151,0,0,0,0",G_=" +towgs84=162,117,154,0,0,0,0",N_=" +towgs84=-73,213,296,0,0,0,0",R_=" +towgs84=-130,29,364,0,0,0,0",F_=" +towgs84=-10,375,165,0,0,0,0",L_=" +towgs84=175,-38,113,0,0,0,0",U_=" +to_meter=0.9143984146160287",O_=" +zone=2",P_=" +zone=8",T_=" +zone=9",H_=" +zone=4",J_=" +towgs84=30,430,368,0,0,0,0",q_=" +towgs84=185,165,42,0,0,0,0",z_=" +towgs84=-97,787,86,0,0,0,0",j_=" +towgs84=639,405,60,0,0,0,0",K_=" +zone=44",Y_=" +zone=45",V_=" +lon_0=-58.5",W_=" +lon_0=-67.5",X_=" +lon_0=-73.5",Z_=" +lon_0=-76.5",$_=" +y_0=1200000",AC=" +lon_0=133.5",tC=" +x_0=8000000",eC=" +y_0=8000000",iC=" +k=0.9998335",sC=" +lon_0=-85.5",aC=" +x_0=7000000",nC=" +lat_0=43.75",oC=" +lat_0=43.25",rC=" +lat_0=45.25",lC=" +lon_0=-86.3",hC=" +lat_0=38.15",gC=" +lat_0=39.15",cC=" +lat_0=41.25",fC=" +lat_0=40.65",uC=" +lat_0=39.25",dC=" +lat_0=40.35",IC=" +lon_0=-85.8",pC=" +towgs84=9,183,236,0,0,0,0",_C=" +towgs84=-48,55,52,0,0,0,0",CC=" +towgs84=84,274,65,0,0,0,0",BC=" +lon_0=17",wC=" +lat_1=60",EC=" +k=0.9998",yC=" +lon_0=66",QC=" +lon_0=20",mC=" +lon_0=26",kC=" +lat_0=51",xC=" +lat_1=87",MC=" +lat_1=26",bC=" +lon_0=144",DC=" +lon_0=168",vC=" +lon_0=174",SC=" +lon_0=-72",GC=" +lon_0=-75",NC=" +lon_0=-60",RC=" +lon_0=-39",FC="+proj=poly",LC=" +x_0=219529.584",UC=" +a=6378306.3696",OC=" +lon_0=-61.33333333333334",PC=" +lon_0=-91.86666666666666",TC=" +lon_0=-8.131906111111112",HC=" +lon_0=-83.66666666666667",JC=" +lon_0=-108.4166666666667",qC=" +lon_0=-108.3333333333333",zC=" +lon_0=-85.40000000000001",jC=" +lon_0=-86.65000000000001",KC=" +lon_0=-86.40000000000001",YC=" +lon_0=-85.59999999999999",VC=" +lon_0=-87.15000000000001",WC=" +lon_0=-86.59999999999999",XC=" +lon_0=-84.90000000000001",ZC=" +lon_0=-85.65000000000001",$C=" +lon_0=-87.65000000000001",AB=" +lon_0=-85.34999999999999",tB=" +lon_0=-87.40000000000001",eB=" +lon_0=-87.34999999999999",iB=" +lon_0=-85.90000000000001",sB=" +lon_0=-90.62222222222222",aB=" +lon_0=-91.84999999999999",nB=" +lon_0=-91.15277777777779",oB=" +lon_0=-91.79722222222222",rB=" +lon_0=-92.45777777777778",lB=" +lon_0=-91.29444444444444",hB=" +lon_0=-90.70833333333334",gB=" +lon_0=-89.39444444444445",cB=" +lon_0=-89.42222222222223",fB=" +lon_0=-88.77500000000001",uB=" +lon_0=-87.27222222222223",dB=" +lon_0=-91.89444444444445",IB=" +lon_0=-91.28888888888889",pB=" +lon_0=-88.14166666666668",_B=" +lon_0=-88.63333333333334",CB=" +lon_0=-89.83888888888889",BB=" +lon_0=-90.16111111111111",wB=" +lon_0=-90.25555555555556",EB=" +lon_0=-90.84429651944444",yB=" +lon_0=-87.89444444444445",QB=" +lon_0=-91.31666666666666",mB=" +lon_0=-89.03333333333333",kB=" +lon_0=-89.73333333333333",xB=" +lon_0=-87.71111111111111",MB=" +lon_0=-88.41666666666667",bB=" +lon_0=-90.64166666666668",DB=" +lon_0=-87.90833333333335",vB=" +lon_0=-89.54444444444444",SB=" +lon_0=-92.22777777777777",GB=" +lon_0=-90.48888888888889",NB=" +lon_0=-90.43055555555556",RB=" +lon_0=-89.07222222222222",FB=" +lon_0=-91.06666666666666",LB=" +lon_0=-89.90000000000001",UB=" +lon_0=-91.11666666666666",OB=" +lon_0=-88.60555555555555",PB=" +lon_0=-90.48333333333333",TB=" +lon_0=-91.36666666666666",HB=" +lon_0=-90.78333333333333",JB=" +lon_0=-89.48888888888889",qB=" +lon_0=-88.54166666666667",zB=" +lon_0=-91.78333333333333",jB=" +lon_0=-88.06388888888888",KB=" +lon_0=-88.22499999999999",YB=" +lon_0=-88.81666666666666",VB=" +y_0=0.004876809753619507",WB=" +y_0=0.008534417068834137",XB=" +y_0=0.003962407924815849",ZB=" +y_0=0.005791211582423164",$B=" +lon_0=-55.68333333333333",Aw=" +to_meter=0.201166195164",tw=" +lat_0=4.666666666666667",ew=" +lat_0=6.666666666666667",iw=" +lon_0=6.166666666666667",sw=" +lat_0=10.44166666666667",aw=" +lat_0=22.31213333333334",nw=" +lon_0=114.1785555555556",ow=" +lon_0=51.21666666666667",rw=" +lon_0=11.30827777777778",lw=" +lon_0=13.55827777777778",hw=" +lon_0=15.80827777777778",gw=" +lon_0=18.05827777777778",cw=" +lon_0=20.30827777777778",fw=" +lon_0=22.55827777777778",uw=" +lat_1=27.41666666666667",dw=" +lat_2=34.91666666666666",Iw=" +lat_0=31.16666666666667",pw=" +lat_1=59.33333333333334",_w=" +lat_0=57.51755393055556",Cw=" +lon_0=4.359215833333333",Bw=" +lat_1=61.66666666666666",ww=" +lat_0=29.02626833333333",Ew=" +lat_1=48.66666666666666",yw=" +lat_2=53.66666666666666",Qw=" +lon_0=127.0028902777778",mw=" +lon_0=89.84999999999999",kw=" +lon_0=91.56666666666666",xw=" +lon_0=24.83333333333333",Mw=" +lat_2=63.66666666666666",bw=" +lat_0=65.35103930555555",Dw=" +lat_1=63.66666666666666",vw=" +lat_2=60.33333333333334",Sw=" +lat_0=62.01530688888889",Gw=" +lat_1=45.78333333333333",Nw=" +lat_0=45.78333333333333",Rw=" +lat_0=42.66666666666666",Fw=" +lat_0=43.36666666666667",Lw=" +lat_0=45.70611111111111",Uw=" +lat_0=45.13333333333333",Ow=" +lat_1=46.66964837722222",Pw=" +lat_0=46.66964837722222",Tw=" +lat_0=43.48138888888889",Hw=" +lat_1=45.89871486583333",Jw=" +lat_0=45.89871486583333",qw=" +lat_0=42.71944444444445",zw=" +lat_1=44.97785689861112",jw=" +lat_0=44.97785689861112",Kw=" +lat_1=43.46254664583333",Yw=" +lat_0=43.46254664583333",Vw=" +lon_0=-90.9388888888889",Ww=" +lat_0=41.47222222222222",Xw=" +lat_0=45.88333333333333",Zw=" +lat_0=44.40833333333333",$w=" +lat_1=44.87228112638889",AE=" +lat_0=44.87228112638889",tE=" +lat_0=45.43888888888888",eE=" +lat_0=44.00555555555555",iE=" +lat_0=41.41111111111111",sE=" +lat_1=42.63756227694444",aE=" +lat_0=42.63756227694444",nE=" +lat_1=43.80700011777778",oE=" +lat_0=43.80700011777778",rE=" +lat_0=42.53888888888888",lE=" +lat_0=45.43333333333333",hE=" +lat_0=44.25333512777778",gE=" +lat_0=42.21666666666667",cE=" +lat_0=43.26666666666667",fE=" +lat_0=43.45111111111111",uE=" +lat_1=45.15423710527778",dE=" +lat_0=45.15423710527778",IE=" +lat_0=44.84444444444445",pE=" +lat_1=44.90090442361111",_E=" +lat_0=44.90090442361111",CE=" +lat_0=44.69166666666666",BE=" +lat_0=44.71666666666667",wE=" +lat_1=44.00007392861111",EE=" +lat_0=44.00007392861111",yE=" +lat_0=44.39722222222222",QE=" +lat_1=45.70422377027778",mE=" +lat_0=45.70422377027778",kE=" +lat_1=44.63614887194444",xE=" +lat_0=44.63614887194444",ME=" +lat_0=44.66111111111111",bE=" +lat_1=44.41682397527777",DE=" +lat_0=44.41682397527777",vE=" +lat_0=44.55555555555555",SE=" +lat_0=41.94444444444444",GE=" +lat_0=43.91944444444444",NE=" +lat_0=42.81944444444445",RE=" +lat_1=45.90009913138888",FE=" +lat_0=45.90009913138888",LE=" +lat_1=45.17782208583333",UE=" +lat_0=45.17782208583333",OE=" +lat_0=43.16111111111111",PE=" +lat_1=43.57503293972223",TE=" +lat_0=43.57503293972223",HE=" +lat_1=46.07784409055556",JE=" +lat_0=46.07784409055556",qE=" +lat_1=42.66946209694444",zE=" +lat_0=42.66946209694444",jE=" +lat_1=45.96121983333334",KE=" +lat_0=45.96121983333334",YE=" +lat_0=42.91805555555555",VE=" +lat_0=42.56944444444445",WE=" +lat_0=43.42027777777778",XE=" +lat_1=44.11394404583334",ZE=" +lat_0=44.11394404583334",$E=" +lat_1=44.36259546944444",Ay=" +lat_0=44.36259546944444",ty=" +lat_1=44.10000000000001",ey=" +lat_0=44.10000000000001",iy=" +lat_1=42.16500000000001",sy=" +lat_0=42.16500000000001",ay=" +lat_0=52.15616055555555",ny=" +lat_2=48.73333333333333",oy=" +zone=3",ry=" +lat_0=53.5",ly=" +k=0.999923",hy=" +x_0=850000",gy=" +x_0=830000",cy=" +lon_0=16.5",fy=" +x_0=520000",uy=" +lat_2=31.5",dy=" +lon_0=10.5",Iy=" +lat_1=44.5",py=" +lon_0=-153",_y=" +lon_0=-135",Cy=" +x_0=750000",By=" +lat_0=43.5",wy=" +lon_0=-142",Ey=" +lon_0=-146",yy=" +lon_0=-162",Qy=" +lon_0=-166",my=" +lon_0=-176",ky=" +lat_2=39.5",xy=" +lon_0=-129",My=" +k_0=1.0002",by=" +k=1.000023",Dy=" +lon_0=-121",vy=" +k=1.000175",Sy=" +lat_0=45.5",Gy=" +k=1.000155",Ny=" +lat_2=37.5",Ry=" +lat_1=48.5",Fy=" +k=1.000029",Ly=" +lat_0=39.6",Uy=" +k=1.000013",Oy=" +k=1.000022",Py=" +lat_0=40.7",Ty=" +lat_0=39.3",Hy=" +lat_0=37.8",Jy=" +lat_0=38.9",qy=" +lon_0=-5.4",zy=" +y_0=626907.39",jy=" +b=6356571.996",Ky=" +a=6377295.664",Yy=" +lon_0=5.38763888888889",Vy=" +y_0=-4600000.00001208",Wy=" +y_0=1889763.779527559",Xy=" +y_0=99999.99999960001",Zy=" +x_0=120091.4401828804",$y=" +lon_0=72",AQ=" +lat_0=50",tQ=" +lat_1=50",eQ=" +lat_1=35",iQ=" +lon_0=22",sQ=" +lat_1=34",aQ=" +lonc=115",nQ=" +lat_0=-9",oQ=" +lat_0=23",rQ=" +lat_1=85",lQ=" +lat_2=69",hQ=" +lat_1=69",gQ=" +lat_2=61",cQ=" +lon_0=34",fQ=" +lon_0=140.25",uQ=" +lon_0=142.25",dQ=" +lon_0=144.25",IQ=" +x_0=47500000",pQ=" +y_0=-3000000",_Q=" +pm=2.337208333333333",CQ=" +x_0=7000000.00000248",BQ=" +lon_0=6",wQ=" +k=0.997",EQ=" +lon_0=106",yQ=" +lon_0=154",QQ=" +lon_0=156",mQ=" +lat_2=-36",kQ=" +lon_0=119",xQ=" +lon_0=121",MQ=" +lon_0=166",bQ=" +a=6371228",DQ=" +b=6371228",vQ=" +a=6378273",SQ=" +lat_0=-44",GQ=" +pm=lisbon",NQ=" +lon_0=-57",RQ=" +lon_0=-56",FQ=" +k=1.00007",LQ=" +lonc=-123",UQ=" +alpha=295",OQ=" +gamma=295",PQ=" +k=1.00011",TQ=" +k=1.00005",HQ=" +k=1.00013",JQ=" +x_0=30000",qQ=" +k=1.00001",zQ=" +k=1.00003",jQ=" +y_0=130000.00001472",KQ=" +x_0=119999.99999952",YQ=" +y_0=-2999999.999988",VQ=" +x_0=-299999.9999988",WQ=" +lat_1=43.0695160375",XQ=" +lat_0=43.0695160375",ZQ=" +lat_1=43.3223129275",$Q=" +lat_0=43.3223129275",Am=" +k=1.0000067",tm=" +a=6378298.3",em=" +lon_0=-66.5",im=" +lon_0=129.5",sm=" +lon_0=138.5",am=" +x_0=2300000",nm=" +x_0=3300000",om=" +x_0=4300000",rm=" +y_0=7500000",lm=" +lonc=102.25",hm=" +y_0=1166200",gm=" +x_0=3000000",cm=" +lat_1=46.25",fm=" +ellps=WGS66",um=" +ellps=GRS67",dm=" +lat_1=34.65",Im=" +y_0=59999.99999976",pm=" +y_0=30000.00001512",_m=" +x_0=59999.99999976",Cm=" +x_0=30000.00001512",Bm=" +lat_1=43.200055605",wm=" +lat_0=43.200055605",Em=" +y_0=65379.0134283",ym=" +alpha=323.0257905",Qm=" +alpha=53.31580995",mm=" +x_0=10000.0000152";A.exports=[2e3,s+c+Vc+ns+K+u+b+a+t,1,s+c+Vc+ns+K+u+b+k_+a+t,1,s+c+Vc+ns+K+u+b+x_+a+t,1,s+c+Vc+ns+K+u+b+M_+a+t,1,s+c+Vc+ns+K+u+b+b_+a+t,1,s+c+Vc+ns+K+u+b+pC+a+t,1,s+c+Vc+ns+K+u+b+f_+a+t,1,s+c+Vc+ns+K+u+b+Id+a+t,2,s+c+V_+E+kA+u+R+a+t,1,s+c+UI+E+kA+u+R+a+t,1,s+c+OI+E+kA+u+R+a+t,1,s+c+W_+E+kA+u+R+a+t,1,s+c+Wo+E+kA+u+R+a+t,1,s+c+X_+E+kA+u+R+a+t,1,s+c+Z_+E+kA+u+R+a+t,1,s+c+un+E+kA+u+R+a+t,1,s+c+X_+E+kA+u+R+a+t,1,s+c+Z_+E+kA+u+R+a+t,1,s+c+un+E+kA+u+R+a+t,1,s+c+hs+E+kA+u+R+a+t,1,s+c+ce+E+kA+u+R+a+t,1,s+c+Wc+E+kA+u+R+a+t,1,s+c+Il+E+kA+u+R+a+t,1,s+c+Jt+E+kA+u+R+a+t,1,s+c+cp+E+kA+u+R+a+t,1,s+c+$f+E+kA+u+R+a+t,1,l+qc+R+a+t,1,l+zc+R+a+t,1,l+wr+R+a+t,1,l+To+R+a+t,1,l+wr+R+a+t,1,l+To+R+a+t,1,l+wo+R+a+t,1,l+On+R+a+t,1,l+Ho+R+a+t,4,s+Bu+wu+Am+LC+zy+i+_C+a+t,1,l+Iu+b+Xr+a+t,1,l+Iu+b+Jo+a+t,1,l+Rl+b+Xr+a+t,1,l+Rl+b+Jo+a+t,1,s+c+ss+" +k=1"+vo+u+f+jn+a+t,1,s+c+Oa+" +k=1"+So+u+f+jn+a+t,1,s+c+yn+" +k=1"+z+u+Qn+F+e+a+t,1,s+c+BC+" +k=1"+z+u+Qn+F+e+a+t,1,s+c+DI+" +k=1"+z+u+Qn+F+e+a+t,1,s+c+mn+" +k=1"+z+u+Qn+F+e+a+t,1,s+c+Rp+" +k=1"+z+u+Qn+F+e+a+t,1,s+c+vI+" +k=1"+z+u+Qn+F+e+a+t,1,s+c+Ao+" +k=1"+z+u+Qn+F+e+a+t,1,s+c+" +lon_0=29 +k=1"+z+u+Qn+F+e+a+t,1,s+c+Pd+" +k=1"+z+u+Qn+F+e+a+t,1,s+c+zo+" +k=1"+z+u+Qn+F+e+a+t,1,_d+Ih+Eu+" +k_0=1 +x_0=2600000"+$_+m+Ed+a+t,1,de+" +lat_0=27.51882880555555 +lonc=52.60353916666667 +alpha=0.5716611944444444 +k=0.999895934 +x_0=658377.437 +y_0=3044969.194 +gamma=0.5716611944444444"+_+yd+a+t,1,l+rl+_+Un+a+t,1,l+Vr+_+Un+a+t,1,l+oc+_+Un+a+t,1,l+VI+_+Un+a+t,1,r+" +lat_1=40"+Ga+$n+" +k_0=0.9988085293"+x+lI+tm+BI+" +pm=madrid"+a+t,3,lp+Up+" +lon_0=42.5"+ph+E+z+u+m+wn+yg+a+t,1,ve+" +lat_0=11.25217861111111 +lon_0=-60.68600888888889 +x_0=37718.66159325 +y_0=36209.91512952"+ws+Es+Aw+t,1,l+On+_+Qd+a+t,1,s+c+Fl+E+N+u+_+Y+a+t,1,s+c+" +lon_0=11"+E+N+u+_+Y+a+t,1,s+c+" +lon_0=13"+E+N+u+_+Y+a+t,1,s+c+yn+E+N+u+_+Y+a+t,1,s+c+BC+E+N+u+_+Y+a+t,1,s+c+DI+E+N+u+_+Y+a+t,1,s+c+mn+E+N+u+_+Y+a+t,1,s+c+Rp+E+N+u+_+Y+a+t,1,s+c+vI+E+N+u+_+Y+a+t,1,l+Wr+_+Y+a+t,1,l+Ll+_+Y+a+t,1,l+jc+_+Y+a+t,1,l+dh+_+Y+a+t,1,s+O+jg+" +k=1"+be+u+_+a+t,1,s+O+jg+" +k=1"+be+u+_+yp+a+t,1,s+O+jg+" +k=1"+be+u+_+Vf+a+t,1,l+wo+T+_+Vf+a+t,3,s+c+jo+uA+d+u+_+Y+a+t,1,s+c+" +lon_0=11"+uA+d+u+CA+ht+En+a+t,1,l+rl+F+e+a+t,1,l+Vr+F+e+a+t,3,s+c+EQ+" +k=1"+d+u+f+jn+a+t,1,s+c+EQ+uA+d+u+B+p+a+t,1,l+ll+_+D_+a+t,1,s+Me+Bs+" +k=1"+N+bA+m+a+t,1,s+Me+fp+" +k=1"+N+bA+m+a+t,1,s+Me+up+" +k=1"+N+bA+m+a+t,1,ve+" +lat_0=25.38236111111111 +lon_0=50.76138888888889"+pt+ts+xn+a+t,1,s+c+Ko+uA+d+u+i+Xd+a+t,1,r+_h+Ch+Yl+" +k_0=1"+z+" +y_0=-52684.972"+_+a+t,1,r+_h+Ch+Yl+" +k_0=1"+N+" +y_0=147315.028"+_+a+t,1,r+_h+Ch+Yl+" +k_0=1"+d+" +y_0=447315.028"+_+a+t,1,r+_h+Ch+Yl+" +k_0=1 +x_0=-17044 +y_0=-23139.97"+_+a+t,1,s+" +lat_0=-36.87972222222222 +lon_0=174.7641666666667"+E+K+le+i+e+a+t,1,s+" +lat_0=-37.76111111111111 +lon_0=176.4661111111111 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-38.62444444444444 +lon_0=177.8855555555556 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-39.65083333333333 +lon_0=176.6736111111111 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-39.13555555555556 +lon_0=174.2277777777778 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-39.51222222222222 +lon_0=175.64 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-40.24194444444444 +lon_0=175.4880555555555 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-40.92527777777777 +lon_0=175.6472222222222 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-41.3011111111111 +lon_0=174.7763888888889 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-40.71472222222223 +lon_0=172.6719444444444 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-41.27444444444444 +lon_0=173.2991666666667 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-41.28972222222222 +lon_0=172.1088888888889 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-41.81055555555555 +lon_0=171.5811111111111 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-42.33361111111111 +lon_0=171.5497222222222 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-42.68888888888888 +lon_0=173.01 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-41.54444444444444 +lon_0=173.8019444444444 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-42.88611111111111 +lon_0=170.9797222222222 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-43.11 +lon_0=170.2608333333333 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-43.97777777777778 +lon_0=168.6061111111111 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-43.59055555555556 +lon_0=172.7269444444445 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-43.74861111111111 +lon_0=171.3605555555555 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-44.40194444444445 +lon_0=171.0572222222222 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-44.735 +lon_0=169.4675 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-45.13277777777778 +lon_0=168.3986111111111 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-45.56361111111111 +lon_0=167.7386111111111 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-45.81611111111111 +lon_0=170.6283333333333 +k=1"+K+le+i+e+a+t,1,s+" +lat_0=-45.86138888888889 +lon_0=170.2825"+Ad+K+le+i+e+a+t,1,s+" +lat_0=-46.6 +lon_0=168.3427777777778 +k=1"+K+le+i+e+a+t,1,l+vg+T+i+e+a+t,1,l+_f+T+i+e+a+t,1,l+Lu+T+i+e+a+t,1,s+tw+" +lon_0=-1"+dp+" +x_0=274319.7391633579"+u+aI+xo+Lc+Uc+t,1,s+c+" +lon_0=-1"+uA+d+u+aI+xo+Lc+a+t,1,r+wC+lf+hr+Vn+z+u+R+a+t,16,r+zh+" +lat_2=44"+xr+pu+fs+" +y_0=6600000"+i+e+a+t,3,s+ry+" +lon_0=-8 +k=0.99982"+x+fc+i+e+a+t,1,l+Rl+i+e+a+t,1,s+ew+" +lon_0=-12 +k=1 +x_0=152399.8550907544"+u+aI+xo+Uc+t,1,s+ew+" +lon_0=-12 +k=1 +x_0=243839.7681452071 +y_0=182879.8261089053"+aI+xo+Uc+t,1,l+ll+b+Wf+a+t,1,l+Rl+b+Wf+a+t,1,po+Ar+fe+z+u+" +a=6370997 +b=6370997"+a+t,1,s+c+" +lon_0=-5"+uA+d+u+b+Xr+a+t,1,s+c+" +lon_0=-5"+uA+d+u+b+Jo+a+t,4,s+" +lat_0=49.83333333333334"+iw+" +k=1"+Au+ts+_+Sl+a+t,3,rn+" +lat_0=53.00194444444445 +lon_0=21.50277777777778"+EC+" +x_0=4603000 +y_0=5806000"+f+M+a+t,1,rn+" +lat_0=53.58333333333334 +lon_0=17.00833333333333"+EC+" +x_0=3501000 +y_0=5999000"+f+M+a+t,1,rn+" +lat_0=51.67083333333333 +lon_0=16.67222222222222"+EC+" +x_0=3703000 +y_0=5627000"+f+M+a+t,1,s+c+" +lon_0=18.95833333333333 +k=0.999983 +x_0=237000 +y_0=-4700000"+f+M+a+t,1,s+c+yn+ly+ys+u+i+e+a+t,1,s+c+Td+ly+Ml+u+i+e+a+t,1,s+c+mn+ly+Xo+u+i+e+a+t,1,s+c+Ko+ly+Vg+u+i+e+a+t,1,s+c+DI+" +k=0.9993"+d+" +y_0=-5300000"+i+e+a+t,8,l+Cf+_+u_+a+t,1,l+_u+_+d_+a+t,1,l+_u+_+v_+a+t,3,s+c+" +lon_0=173"+uA+" +x_0=1600000"+RA+i+e+a+t,2,l+O_+T+i+e+a+t,1,s+c+" +lon_0=9.5"+he+N+u+i+e+a+t,1,s+c+jo+he+d+u+i+e+a+t,1,s+c+yn+" +k=1"+ao+u+i+e+a+t,2,rn+xr+em+Op+oA+le+td+Dn+a+t,1,l+To+i+e+a+t,1,l+wo+i+e+a+t,1,l+On+i+e+a+t,1,r+" +lat_1=35.25 +lat_2=36.41666666666666 +lat_0=34.66666666666666"+Kg+k+Cd+Q+h+t,1,r+WA+ui+ai+yl+d+u+i+e+a+t,1,s+c+Ao+" +k=1"+Wg+u+_+P+a+t,1,s+c+gr+" +k=1"+ig+u+_+P+a+t,1,s+c+zo+" +k=1"+Ql+u+_+P+a+t,1,s+c+Ou+" +k=1"+sg+u+_+P+a+t,1,s+c+jh+" +k=1"+no+u+_+P+a+t,1,s+c+Pu+" +k=1"+Fn+u+_+P+a+t,1,s+c+tl+" +k=1"+Go+u+_+P+a+t,1,s+c+gr+uA+d+u+i+e+a+t,2,l+Wr+CA+ht+mI+a+t,1,l+mr+_+Rc+a+t,1,l+Sg+_+Rc+a+t,2,l+wo+td+Dn+a+t,1,l+On+td+Dn+a+t,2,s+Nt+Ne+E+us+u+i+e+j+t,1,s+Nt+Re+E+us+u+i+e+j+t,1,s+Nt+Sr+it+us+u+i+e+j+t,1,r+di+El+X+Pn+xA+eA+i+e+h+t,1,r+Ii+pi+$+Pn+xA+eA+i+e+h+t,1,r+PA+_i+uc+rA+xA+eA+i+e+h+t,1,r+Kh+Hd+Ci+dc+xA+eA+i+e+h+t,1,r+Bi+wi+Ic+Mr+xA+eA+i+e+h+t,1,r+Ei+yi+Qi+Gr+xA+eA+i+e+h+t,1,r+Qs+ms+X+yt+zt+ne+i+e+h+t,1,r+Yh+Vh+Ce+yt+zt+ne+i+e+h+t,1,r+PA+mi+S+yt+zt+ne+i+e+h+t,1,r+ki+pc+xi+ml+Gg+Ng+i+e+h+t,1,s+Me+Fe+_c+iA+u+i+e+h+t,1,s+TA+ce+LA+iA+u+i+e+h+t,1,s+TA+tu+LA+iA+u+i+e+h+t,1,r+Wh+Mi+Jd+Xh+x+u+i+e+h+t,1,s+kn+Le+E+iA+u+i+e+h+t,1,s+kn+Ue+E+oe+u+i+e+h+t,1,s+H+Oe+nt+iA+u+i+e+h+t,1,s+H+hl+nt+sA+u+i+e+h+t,1,s+H+Nr+it+Rg+u+i+e+h+t,3,r+WA+ui+ai+yl+sA+u+i+e+h+t,1,r+ks+xs+AA+ds+sA+eA+i+e+h+t,1,r+Xg+xf+$+rg+Fg+u+i+e+h+t,1,r+Ms+bi+kr+za+iA+fc+i+e+h+t,1,r+bs+Ds+kr+Wo+sA+u+i+e+h+t,1,r+vs+Ss+Gs+Il+Lg+u+i+e+j+t,1,r+Mf+Ns+Rs+tt+Ug+u+i+e+j+t,1,r+Ot+bf+ba+tt+Kf+u+i+e+j+t,1,s+Eo+Pe+he+et+u+i+e+h+t,1,s+Eo+jt+he+oe+u+i+e+h+t,1,r+zh+SI+Zg+ir+hi+u+i+e+j+t,1,s+Nt+Te+mo+Df+u+i+e+h+t,1,s+Nt+Rr+E+sA+u+i+e+h+t,1,s+Nt+He+Fr+Og+u+i+e+h+t,1,s+XA+bn+E+Ft+u+i+e+h+t,1,s+Ga+Je+MA+Pg+u+i+e+h+t,1,s+Ga+qe+MA+Tg+u+i+e+h+t,1,r+Di+vi+ZA+eu+et+u+i+e+h+t,1,r+Fs+Ls+Zh+Xc+k+u+i+e+h+t,1,r+st+Us+cr+Is+hi+u+i+e+j+t,1,r+Os+Ps+xt+Is+hi+u+i+e+j+t,1,r+Si+Ts+qd+ka+x+u+i+e+h+t,1,r+Hs+Js+Gi+ka+x+u+i+e+h+t,1,r+Tu+Be+lA+rA+jl+u+i+e+j+t,1,r+Hu+we+H+rA+Kl+u+i+e+j+t,1,r+$g+qs+ZA+ps+x+u+i+e+h+t,1,r+Ni+Ri+X+ps+x+u+i+e+h+t,1,r+zs+vf+Fi+ce+Sf+u+i+e+j+t,1,r+js+Ac+$A+Kg+x+u+i+e+h+t,1,r+Ks+tc+zd+kl+iA+re+i+e+h+t,1,r+Ys+Vs+Li+Ie+x+vn+i+e+h+t,1,r+Ws+Xs+Ee+vA+oe+va+i+e+h+t,1,r+Zs+$s+Ui+pl+x+nf+i+e+h+t,1,r+Zt+$t+ye+Ie+et+of+i+e+h+t,1,r+yA+Ae+Pt+at+pn+Bd+i+e+j+t,1,r+Hr+te+dA+at+pn+jI+i+e+j+t,1,r+Jr+ee+S+at+pn+KI+i+e+j+t,1,r+Gf+Aa+$+ja+Sn+vn+i+e+h+t,1,r+WA+Oi+AA+ja+Sn+re+i+e+h+t,1,r+st+Nf+cr+ze+sA+u+i+e+h+t,1,r+ta+ea+Pi+rA+sA+u+i+e+h+t,1,r+ia+sa+Ti+Jt+x+u+i+e+h+t,1,r+gl+ec+hA+Jt+x+u+i+e+h+t,1,r+aa+na+Ju+Jt+x+u+i+e+h+t,1,rn+" +lat_0=47.25"+nI+Op+fs+br+td+Dn+a+t,4,s+c+UI+E+ri+u+td+Dn+a+t,1,s+c+OI+E+ys+u+td+Dn+a+t,13,s+c+" +lon_0=109"+uA+d+RA+m+De+a+t,1,s+c+" +lon_0=116"+uA+d+RA+C+a+t,1,s+c+Er+uA+d+RA+C+a+t,1,s+c+BQ+uA+d+u+C+a+t,1,l+Ll+b+a+t,1,l+Ll+b+a+t,1,ve+sw+OC+" +x_0=86501.46392052001"+Em+ws+Es+Kr+Hg+t,1,l+wo+T+_+Tt+a+t,1,l+On+T+_+Tt+a+t,1,r+" +lat_1=9 +lat_2=3 +lat_0=6"+ed+Et+nA+_+EA+a+t,1,r+" +lat_1=17 +lat_2=33 +lat_0=25.08951"+Fp+z+u+_+Ge+a+t,1,s+c+Ao+" +k=1"+d+u+_+P+a+t,1,s+c+gr+" +k=1"+d+u+_+P+a+t,1,s+c+zo+" +k=1"+d+u+_+P+a+t,1,s+c+Ou+" +k=1"+d+u+_+P+a+t,1,s+c+jh+" +k=1"+d+u+_+P+a+t,1,s+c+Pu+" +k=1"+d+u+_+P+a+t,1,s+c+tl+" +k=1"+d+u+_+P+a+t,1,s+aw+nw+" +k=1 +x_0=836694.05 +y_0=819069.8"+_+dl+a+t,1,s+c+to+" +k=1"+no+u+JA+D+a+t,1,s+c+eo+" +k=1"+Fn+u+JA+D+a+t,1,s+c+Io+" +k=1"+Go+u+JA+D+a+t,1,s+c+io+" +k=1"+No+u+JA+D+a+t,1,s+c+so+" +k=1"+Dr+u+JA+D+a+t,1,s+c+ss+" +k=1"+vo+u+JA+D+a+t,1,s+c+Oa+" +k=1"+So+u+JA+D+a+t,1,s+c+xa+" +k=1"+oo+u+JA+D+a+t,1,s+c+Sa+" +k=1"+Ro+u+JA+D+a+t,1,s+c+Bs+" +k=1"+ro+u+JA+D+a+t,1,s+c+Ma+" +k=1"+Fo+u+JA+D+a+t,1,s+c+to+" +k=1"+d+u+JA+D+a+t,1,s+c+eo+" +k=1"+d+u+JA+D+a+t,1,s+c+Io+" +k=1"+d+u+JA+D+a+t,1,s+c+io+" +k=1"+d+u+JA+D+a+t,1,s+c+so+" +k=1"+d+u+JA+D+a+t,1,s+c+ss+" +k=1"+d+u+JA+D+a+t,1,s+c+Oa+" +k=1"+d+u+JA+D+a+t,1,s+c+xa+" +k=1"+d+u+JA+D+a+t,1,s+c+Sa+" +k=1"+d+u+JA+D+a+t,1,s+c+Bs+" +k=1"+d+u+JA+D+a+t,1,s+c+Ma+" +k=1"+d+u+JA+D+a+t,1,s+c+to+" +k=1"+Lo+u+JA+D+a+t,1,s+c+Qg+" +k=1"+Uo+u+JA+D+a+t,1,s+c+eo+" +k=1"+Oo+u+JA+D+a+t,1,s+c+hf+" +k=1"+Po+u+JA+D+a+t,1,s+c+Io+" +k=1"+Ln+u+JA+D+a+t,1,s+c+bo+" +k=1"+sr+u+JA+D+a+t,1,s+c+io+" +k=1"+In+u+JA+D+a+t,1,s+c+cc+" +k=1"+ar+u+JA+D+a+t,1,s+c+so+" +k=1"+vr+u+JA+D+a+t,1,s+c+_l+" +k=1"+yc+u+JA+D+a+t,1,s+c+ss+" +k=1"+Qc+u+JA+D+a+t,1,s+c+lg+" +k=1"+mc+u+JA+D+a+t,1,s+c+Oa+" +k=1"+kc+u+JA+D+a+t,1,s+c+yr+" +k=1"+xc+u+JA+D+a+t,1,s+c+xa+" +k=1"+Mc+u+JA+D+a+t,1,s+c+Pl+" +k=1"+bc+u+JA+D+a+t,1,s+c+Sa+" +k=1"+Dc+u+JA+D+a+t,1,s+c+Cl+" +k=1"+ou+u+JA+D+a+t,1,s+c+Bs+" +k=1"+vc+u+JA+D+a+t,1,s+c+Er+" +k=1"+ru+u+JA+D+a+t,1,s+c+Ma+" +k=1"+Sc+u+JA+D+a+t,1,s+c+to+" +k=1"+d+u+JA+D+a+t,1,s+c+Qg+" +k=1"+d+u+JA+D+a+t,1,s+c+eo+" +k=1"+d+u+JA+D+a+t,1,s+c+hf+" +k=1"+d+u+JA+D+a+t,1,s+c+Io+" +k=1"+d+u+JA+D+a+t,1,s+c+bo+" +k=1"+d+u+JA+D+a+t,1,s+c+io+" +k=1"+d+u+JA+D+a+t,1,s+c+cc+" +k=1"+d+u+JA+D+a+t,1,s+c+so+" +k=1"+d+u+JA+D+a+t,1,s+c+_l+" +k=1"+d+u+JA+D+a+t,1,s+c+ss+" +k=1"+d+u+JA+D+a+t,1,s+c+lg+" +k=1"+d+u+JA+D+a+t,1,s+c+Oa+" +k=1"+d+u+JA+D+a+t,1,s+c+yr+" +k=1"+d+u+JA+D+a+t,1,s+c+xa+" +k=1"+d+u+JA+D+a+t,1,s+c+Pl+" +k=1"+d+u+JA+D+a+t,1,s+c+Sa+" +k=1"+d+u+JA+D+a+t,1,s+c+Cl+" +k=1"+d+u+JA+D+a+t,1,s+c+Bs+" +k=1"+d+u+JA+D+a+t,1,s+c+Er+" +k=1"+d+u+JA+D+a+t,1,s+c+Ma+" +k=1"+d+u+JA+D+a+t,1,s+c+mn+" +k=1"+BA+u+_+qA+a+t,1,s+c+Ko+" +k=1"+be+u+_+qA+a+t,1,s+c+Ao+" +k=1"+Lt+u+_+qA+a+t,1,s+c+gr+" +k=1"+ri+u+_+qA+a+t,1,s+c+tl+" +k=1"+Vg+u+f+Oc+a+t,1,s+c+qu+" +k=1"+Wg+u+f+Oc+a+t,1,s+c+Fl+" +k=1"+Lt+u+f+HA+a+t,1,s+c+jo+" +k=1"+ri+u+f+HA+a+t,1,s+c+yn+" +k=1"+ys+u+f+HA+a+t,2,s+c+to+" +k=1"+Lo+u+f+w+a+t,1,s+c+Qg+" +k=1"+Uo+u+f+w+a+t,1,s+c+eo+" +k=1"+Oo+u+f+w+a+t,1,s+c+hf+" +k=1"+Po+u+f+w+a+t,1,s+c+Io+" +k=1"+Ln+u+f+w+a+t,1,s+c+bo+" +k=1"+sr+u+f+w+a+t,1,s+c+io+" +k=1"+In+u+f+w+a+t,1,s+c+cc+" +k=1"+ar+u+f+w+a+t,1,s+c+so+" +k=1"+vr+u+f+w+a+t,1,s+c+_l+" +k=1"+yc+u+f+w+a+t,1,s+c+ss+" +k=1"+Qc+u+f+w+a+t,1,s+c+lg+" +k=1"+mc+u+f+w+a+t,1,s+c+Oa+" +k=1"+kc+u+f+w+a+t,1,s+c+yr+" +k=1"+xc+u+f+w+a+t,1,s+c+xa+" +k=1"+Mc+u+f+w+a+t,1,s+c+Pl+" +k=1"+bc+u+f+w+a+t,1,s+c+Sa+" +k=1"+Dc+u+f+w+a+t,1,s+c+Cl+" +k=1"+ou+u+f+w+a+t,1,s+c+Bs+" +k=1"+vc+u+f+w+a+t,1,s+c+Er+" +k=1"+ru+u+f+w+a+t,1,s+c+Ma+" +k=1"+Sc+u+f+w+a+t,1,s+c+to+" +k=1"+d+u+f+w+a+t,1,s+c+Qg+" +k=1"+d+u+f+w+a+t,1,s+c+eo+" +k=1"+d+u+f+w+a+t,1,s+c+hf+" +k=1"+d+u+f+w+a+t,1,s+c+Io+" +k=1"+d+u+f+w+a+t,1,s+c+bo+" +k=1"+d+u+f+w+a+t,1,s+c+io+" +k=1"+d+u+f+w+a+t,1,s+c+cc+" +k=1"+d+u+f+w+a+t,1,s+c+so+" +k=1"+d+u+f+w+a+t,1,s+c+_l+" +k=1"+d+u+f+w+a+t,1,s+c+ss+" +k=1"+d+u+f+w+a+t,1,s+c+lg+" +k=1"+d+u+f+w+a+t,1,s+c+Oa+" +k=1"+d+u+f+w+a+t,1,s+c+yr+" +k=1"+d+u+f+w+a+t,1,s+c+xa+" +k=1"+d+u+f+w+a+t,1,s+c+Pl+" +k=1"+d+u+f+w+a+t,1,s+c+Sa+" +k=1"+d+u+f+w+a+t,1,s+c+Cl+" +k=1"+d+u+f+w+a+t,1,s+c+Bs+" +k=1"+d+u+f+w+a+t,1,s+c+Er+" +k=1"+d+u+f+w+a+t,1,s+c+Ma+" +k=1"+d+u+f+w+a+t,1,s+zu+im+E+z+u+i+e+a+t,1,s+zu+Zc+E+z+u+i+e+a+t,1,s+$a+yu+E+z+u+i+e+a+t,1,s+zu+AC+E+z+u+i+e+a+t,1,s+$a+Qu+E+z+u+i+e+a+t,1,s+$a+Ip+E+z+u+i+e+a+t,1,s+$a+mu+E+z+u+i+e+a+t,1,s+$a+sm+E+z+u+i+e+a+t,1,s+$a+ku+E+z+u+i+e+a+t,1,s+Ga+xu+E+z+u+i+e+a+t,1,s+hr+fQ+E+z+u+i+e+a+t,1,s+hr+uQ+E+z+u+i+e+a+t,1,s+hr+dQ+E+z+u+i+e+a+t,1,s+tr+" +lon_0=142"+E+z+u+i+e+a+t,1,s+tr+od+E+z+u+i+e+a+t,1,s+tr+" +lon_0=124"+E+z+u+i+e+a+t,1,s+tr+Zc+E+z+u+i+e+a+t,1,s+" +lat_0=20"+Ip+E+z+u+i+e+a+t,1,s+tr+yQ+E+z+u+i+e+a+t,1,s+c+mn+" +k=1"+ri+u+f+a+t,1,s+c+mn+" +k=1"+d+u+f+o+a+t,1,s+c+Ao+" +k=1"+d+u+f+o+a+t,1,s+c+zo+" +k=1"+d+u+f+o+a+t,1,s+c+jh+" +k=1"+d+u+f+o+a+t,1,s+c+tl+" +k=1"+d+u+f+o+a+t,1,s+c+qu+" +k=1"+d+u+f+o+a+t,1,s+c+GI+" +k=1"+d+u+f+o+a+t,1,s+c+jd+" +k=1"+d+u+f+o+a+t,1,s+c+NI+" +k=1"+d+u+f+o+a+t,1,s+c+to+" +k=1"+d+u+f+o+a+t,1,s+c+eo+" +k=1"+d+u+f+o+a+t,1,s+c+Io+" +k=1"+d+u+f+o+a+t,1,s+c+io+" +k=1"+d+u+f+o+a+t,1,s+c+so+" +k=1"+d+u+f+o+a+t,1,s+c+ss+" +k=1"+d+u+f+o+a+t,1,s+c+Oa+" +k=1"+d+u+f+o+a+t,1,s+c+xa+" +k=1"+d+u+f+o+a+t,1,s+c+Sa+" +k=1"+d+u+f+o+a+t,1,s+c+Bs+" +k=1"+d+u+f+o+a+t,1,s+c+Ma+" +k=1"+d+u+f+o+a+t,1,s+c+id+" +k=1"+d+u+f+o+a+t,1,s+c+iu+" +k=1"+d+u+f+o+a+t,1,s+c+$c+" +k=1"+d+u+f+o+a+t,1,s+c+sd+" +k=1"+d+u+f+o+a+t,1,s+c+Af+" +k=1"+d+u+f+o+a+t,1,s+c+hg+" +k=1"+d+u+f+o+a+t,1,s+c+Tl+" +k=1"+d+u+f+o+a+t,1,s+c+Hl+" +k=1"+d+u+f+o+a+t,1,s+c+cg+" +k=1"+d+u+f+o+a+t,3,s+c+mn+" +k=1"+d+u+f+n+a+t,1,s+c+Ao+" +k=1"+d+u+f+n+a+t,1,s+c+zo+" +k=1"+d+u+f+n+a+t,1,s+c+jh+" +k=1"+d+u+f+n+a+t,1,s+c+tl+" +k=1"+d+u+f+n+a+t,1,s+c+qu+" +k=1"+d+u+f+n+a+t,1,s+c+GI+" +k=1"+d+u+f+n+a+t,1,s+c+jd+" +k=1"+d+u+f+n+a+t,1,s+c+NI+" +k=1"+d+u+f+n+a+t,1,s+c+to+" +k=1"+d+u+f+n+a+t,1,s+c+eo+" +k=1"+d+u+f+n+a+t,1,s+c+Io+" +k=1"+d+u+f+n+a+t,1,s+c+io+" +k=1"+d+u+f+n+a+t,1,s+c+so+" +k=1"+d+u+f+n+a+t,1,s+c+ss+" +k=1"+d+u+f+n+a+t,1,s+c+Oa+" +k=1"+d+u+f+n+a+t,1,s+c+xa+" +k=1"+d+u+f+n+a+t,1,s+c+Sa+" +k=1"+d+u+f+n+a+t,1,s+c+Bs+" +k=1"+d+u+f+n+a+t,1,s+c+Ma+" +k=1"+d+u+f+n+a+t,1,s+c+id+" +k=1"+d+u+f+n+a+t,1,s+c+iu+" +k=1"+d+u+f+n+a+t,1,s+c+$c+" +k=1"+d+u+f+n+a+t,1,s+c+sd+" +k=1"+d+u+f+n+a+t,1,s+c+Af+" +k=1"+d+u+f+n+a+t,1,s+c+hg+" +k=1"+d+u+f+n+a+t,1,s+c+Tl+" +k=1"+d+u+f+n+a+t,1,s+c+Hl+" +k=1"+d+u+f+n+a+t,1,s+c+cg+" +k=1"+d+u+f+n+a+t,1,s+c+mn+" +k=1"+Xo+u+f+n+a+t,1,s+c+Ko+" +k=1"+Vg+u+f+n+a+t,1,s+c+Ao+" +k=1"+Wg+u+f+n+a+t,1,s+c+gr+" +k=1"+ig+u+f+n+a+t,1,s+c+zo+" +k=1"+Ql+u+f+n+a+t,1,s+c+Ou+" +k=1"+sg+u+f+n+a+t,1,s+c+jh+" +k=1"+no+u+f+n+a+t,1,s+c+Pu+" +k=1"+Fn+u+f+n+a+t,1,s+c+tl+" +k=1"+Go+u+f+n+a+t,1,s+c+Fp+" +k=1"+No+u+f+n+a+t,1,s+c+qu+" +k=1"+Dr+u+f+n+a+t,1,s+c+Lp+" +k=1"+vo+u+f+n+a+t,1,s+c+GI+" +k=1"+So+u+f+n+a+t,1,s+c+" +lon_0=60 +k=1"+oo+u+f+n+a+t,1,s+c+jd+" +k=1"+Ro+u+f+n+a+t,1,s+c+yC+" +k=1"+ro+u+f+n+a+t,1,s+c+NI+" +k=1"+Fo+u+f+n+a+t,1,s+c+$y+" +k=1"+ag+u+f+n+a+t,1,s+c+to+" +k=1"+Lo+u+f+n+a+t,1,s+c+Qg+" +k=1"+Uo+u+f+n+a+t,1,s+c+eo+" +k=1"+Oo+u+f+n+a+t,1,s+c+hf+" +k=1"+Po+u+f+n+a+t,1,s+c+Io+" +k=1"+Ln+u+f+n+a+t,1,s+c+bo+" +k=1"+sr+u+f+n+a+t,1,s+c+io+" +k=1"+In+u+f+n+a+t,1,s+c+cc+" +k=1"+ar+u+f+n+a+t,1,s+c+so+" +k=1"+vr+u+f+n+a+t,2,s+c+_l+" +k=1"+yc+u+f+n+a+t,1,s+c+ss+" +k=1"+Qc+u+f+n+a+t,1,s+c+lg+" +k=1"+mc+u+f+n+a+t,1,s+c+Oa+" +k=1"+kc+u+f+n+a+t,1,s+c+yr+" +k=1"+xc+u+f+n+a+t,1,s+c+xa+" +k=1"+Mc+u+f+n+a+t,1,s+c+Pl+" +k=1"+bc+u+f+n+a+t,1,s+c+Sa+" +k=1"+Dc+u+f+n+a+t,1,s+c+Cl+" +k=1"+ou+u+f+n+a+t,1,s+c+Bs+" +k=1"+vc+u+f+n+a+t,1,s+c+Er+" +k=1"+ru+u+f+n+a+t,1,s+c+Ma+" +k=1"+Sc+u+f+n+a+t,1,s+c+pp+" +k=1 +x_0=46500000"+u+f+n+a+t,1,s+c+id+" +k=1"+IQ+u+f+n+a+t,1,s+c+bC+" +k=1 +x_0=48500000"+u+f+n+a+t,1,s+c+iu+" +k=1 +x_0=49500000"+u+f+n+a+t,1,s+c+su+" +k=1 +x_0=50500000"+u+f+n+a+t,1,s+c+$c+" +k=1 +x_0=51500000"+u+f+n+a+t,1,s+c+QQ+" +k=1 +x_0=52500000"+u+f+n+a+t,1,s+c+sd+" +k=1 +x_0=53500000"+u+f+n+a+t,1,s+c+oI+" +k=1 +x_0=54500000"+u+f+n+a+t,1,s+c+Af+" +k=1 +x_0=55500000"+u+f+n+a+t,1,s+c+DC+" +k=1 +x_0=56500000"+u+f+n+a+t,1,s+c+hg+" +k=1 +x_0=57500000"+u+f+n+a+t,1,s+c+vC+" +k=1 +x_0=58500000"+u+f+n+a+t,1,s+c+Tl+" +k=1 +x_0=59500000"+u+f+n+a+t,2,s+c+Hl+" +k=1 +x_0=61500000"+u+f+n+a+t,1,s+c+Pp+" +k=1 +x_0=62500000"+u+f+n+a+t,1,s+c+cg+" +k=1 +x_0=63500000"+u+f+n+a+t,1,s+c+Tp+" +k=1 +x_0=64500000"+u+f+n+a+t,1,s+c+mn+" +k=1"+d+u+f+n+a+t,1,s+c+Ko+" +k=1"+d+u+f+n+a+t,1,s+c+Ao+" +k=1"+d+u+f+n+a+t,1,s+c+gr+" +k=1"+d+u+f+n+a+t,1,s+c+zo+" +k=1"+d+u+f+n+a+t,1,s+c+Ou+" +k=1"+d+u+f+n+a+t,1,s+c+jh+" +k=1"+d+u+f+n+a+t,1,s+c+Pu+" +k=1"+d+u+f+n+a+t,1,s+c+tl+" +k=1"+d+u+f+n+a+t,1,s+c+Fp+" +k=1"+d+u+f+n+a+t,1,s+c+qu+" +k=1"+d+u+f+n+a+t,1,s+c+Lp+" +k=1"+d+u+f+n+a+t,1,s+c+GI+" +k=1"+d+u+f+n+a+t,1,s+c+" +lon_0=60 +k=1"+d+u+f+n+a+t,1,s+c+jd+" +k=1"+d+u+f+n+a+t,1,s+c+yC+" +k=1"+d+u+f+n+a+t,1,s+c+NI+" +k=1"+d+u+f+n+a+t,1,s+c+$y+" +k=1"+d+u+f+n+a+t,2,s+c+to+" +k=1"+d+u+f+n+a+t,1,s+c+Qg+" +k=1"+d+u+f+n+a+t,1,s+c+eo+" +k=1"+d+u+f+n+a+t,1,s+c+hf+" +k=1"+d+u+f+n+a+t,1,s+c+Io+" +k=1"+d+u+f+n+a+t,1,s+c+bo+" +k=1"+d+u+f+n+a+t,1,s+c+io+" +k=1"+d+u+f+n+a+t,1,s+c+cc+" +k=1"+d+u+f+n+a+t,1,s+c+so+" +k=1"+d+u+f+n+a+t,1,s+c+_l+" +k=1"+d+u+f+n+a+t,1,s+c+ss+" +k=1"+d+u+f+n+a+t,1,s+c+lg+" +k=1"+d+u+f+n+a+t,1,s+c+Oa+" +k=1"+d+u+f+n+a+t,1,s+c+yr+" +k=1"+d+u+f+n+a+t,1,s+c+xa+" +k=1"+d+u+f+n+a+t,1,s+c+Pl+" +k=1"+d+u+f+n+a+t,1,s+c+Sa+" +k=1"+d+u+f+n+a+t,1,s+c+Cl+" +k=1"+d+u+f+n+a+t,1,s+c+Bs+" +k=1"+d+u+f+n+a+t,1,s+c+Er+" +k=1"+d+u+f+n+a+t,1,s+c+Ma+" +k=1"+d+u+f+n+a+t,1,s+c+pp+" +k=1"+d+u+f+n+a+t,1,s+c+id+" +k=1"+d+u+f+n+a+t,1,s+c+bC+" +k=1"+d+u+f+n+a+t,1,s+c+iu+" +k=1"+d+u+f+n+a+t,1,s+c+su+" +k=1"+d+u+f+n+a+t,1,s+c+$c+" +k=1"+d+u+f+n+a+t,1,s+c+QQ+" +k=1"+d+u+f+n+a+t,1,s+c+sd+" +k=1"+d+u+f+n+a+t,1,s+c+oI+" +k=1"+d+u+f+n+a+t,1,s+c+Af+" +k=1"+d+u+f+n+a+t,1,s+c+DC+" +k=1"+d+u+f+n+a+t,1,s+c+hg+" +k=1"+d+u+f+n+a+t,1,s+c+vC+" +k=1"+d+u+f+n+a+t,1,s+c+Tl+" +k=1"+d+u+f+n+a+t,1,s+c+_p+" +k=1"+d+u+f+n+a+t,1,s+c+Hl+" +k=1"+d+u+f+n+a+t,1,s+c+Pp+" +k=1"+d+u+f+n+a+t,1,s+c+cg+" +k=1"+d+u+f+n+a+t,1,s+c+Tp+" +k=1"+d+u+f+n+a+t,1,s+c+mn+" +k=1"+Xo+u+f+o+a+t,1,s+c+Ko+" +k=1"+Vg+u+f+o+a+t,1,s+c+Ao+" +k=1"+Wg+u+f+o+a+t,1,s+c+gr+" +k=1"+ig+u+f+o+a+t,1,s+c+zo+" +k=1"+Ql+u+f+o+a+t,1,s+c+Ou+" +k=1"+sg+u+f+o+a+t,1,s+c+jh+" +k=1"+no+u+f+o+a+t,1,s+c+Pu+" +k=1"+Fn+u+f+o+a+t,1,s+c+tl+" +k=1"+Go+u+f+o+a+t,1,s+c+Fp+" +k=1"+No+u+f+o+a+t,1,s+c+qu+" +k=1"+Dr+u+f+o+a+t,1,s+c+Lp+" +k=1"+vo+u+f+o+a+t,1,s+c+GI+" +k=1"+So+u+f+o+a+t,1,s+c+" +lon_0=60 +k=1"+oo+u+f+o+a+t,1,s+c+jd+" +k=1"+Ro+u+f+o+a+t,1,s+c+yC+" +k=1"+ro+u+f+o+a+t,1,s+c+NI+" +k=1"+Fo+u+f+o+a+t,1,s+c+$y+" +k=1"+ag+u+f+o+a+t,1,s+c+to+" +k=1"+Lo+u+f+o+a+t,1,s+c+Qg+" +k=1"+Uo+u+f+o+a+t,1,s+c+eo+" +k=1"+Oo+u+f+o+a+t,1,s+c+hf+" +k=1"+Po+u+f+o+a+t,1,s+c+Io+" +k=1"+Ln+u+f+o+a+t,1,s+c+bo+" +k=1"+sr+u+f+o+a+t,1,s+c+io+" +k=1"+In+u+f+o+a+t,1,s+c+cc+" +k=1"+ar+u+f+o+a+t,1,s+c+so+" +k=1"+vr+u+f+o+a+t,1,s+c+_l+" +k=1"+yc+u+f+o+a+t,1,s+c+ss+" +k=1"+Qc+u+f+o+a+t,1,s+c+lg+" +k=1"+mc+u+f+o+a+t,1,s+c+Oa+" +k=1"+kc+u+f+o+a+t,1,s+c+yr+" +k=1"+xc+u+f+o+a+t,1,s+c+xa+" +k=1"+Mc+u+f+o+a+t,1,s+c+Pl+" +k=1"+bc+u+f+o+a+t,1,s+c+Sa+" +k=1"+Dc+u+f+o+a+t,1,s+c+Cl+" +k=1"+ou+u+f+o+a+t,1,s+c+Bs+" +k=1"+vc+u+f+o+a+t,1,s+c+Er+" +k=1"+ru+u+f+o+a+t,1,s+c+Ma+" +k=1"+Sc+u+f+o+a+t,1,s+c+pp+" +k=1 +x_0=46500000"+u+f+o+a+t,1,s+c+id+" +k=1"+IQ+u+f+o+a+t,1,s+c+bC+" +k=1 +x_0=48500000"+u+f+o+a+t,1,s+c+iu+" +k=1 +x_0=49500000"+u+f+o+a+t,1,s+c+su+" +k=1 +x_0=50500000"+u+f+o+a+t,1,s+c+$c+" +k=1 +x_0=51500000"+u+f+o+a+t,1,s+c+QQ+" +k=1 +x_0=52500000"+u+f+o+a+t,1,s+c+sd+" +k=1 +x_0=53500000"+u+f+o+a+t,1,s+c+oI+" +k=1 +x_0=54500000"+u+f+o+a+t,1,s+c+Af+" +k=1 +x_0=55500000"+u+f+o+a+t,1,s+c+DC+" +k=1 +x_0=56500000"+u+f+o+a+t,1,s+c+hg+" +k=1 +x_0=57500000"+u+f+o+a+t,1,s+c+vC+" +k=1 +x_0=58500000"+u+f+o+a+t,1,s+c+Tl+" +k=1 +x_0=59500000"+u+f+o+a+t,2,s+c+Hl+" +k=1 +x_0=61500000"+u+f+o+a+t,1,s+c+Pp+" +k=1 +x_0=62500000"+u+f+o+a+t,1,s+c+cg+" +k=1 +x_0=63500000"+u+f+o+a+t,1,s+c+Tp+" +k=1 +x_0=64500000"+u+f+o+a+t,1,s+c+mn+" +k=1"+d+u+f+o+a+t,1,s+c+Ko+" +k=1"+d+u+f+o+a+t,1,s+c+Ao+" +k=1"+d+u+f+o+a+t,1,s+c+gr+" +k=1"+d+u+f+o+a+t,1,s+c+zo+" +k=1"+d+u+f+o+a+t,1,s+c+Ou+" +k=1"+d+u+f+o+a+t,1,s+c+jh+" +k=1"+d+u+f+o+a+t,1,s+c+Pu+" +k=1"+d+u+f+o+a+t,1,s+c+tl+" +k=1"+d+u+f+o+a+t,1,s+c+Fp+" +k=1"+d+u+f+o+a+t,1,s+c+qu+" +k=1"+d+u+f+o+a+t,1,s+c+Lp+" +k=1"+d+u+f+o+a+t,1,s+c+GI+" +k=1"+d+u+f+o+a+t,1,s+c+" +lon_0=60 +k=1"+d+u+f+o+a+t,1,s+c+jd+" +k=1"+d+u+f+o+a+t,1,s+c+yC+" +k=1"+d+u+f+o+a+t,1,s+c+NI+" +k=1"+d+u+f+o+a+t,1,s+c+$y+" +k=1"+d+u+f+o+a+t,1,s+c+to+" +k=1"+d+u+f+o+a+t,1,s+c+Qg+" +k=1"+d+u+f+o+a+t,1,s+c+eo+" +k=1"+d+u+f+o+a+t,1,s+c+hf+" +k=1"+d+u+f+o+a+t,1,s+c+Io+" +k=1"+d+u+f+o+a+t,1,s+c+bo+" +k=1"+d+u+f+o+a+t,1,s+c+io+" +k=1"+d+u+f+o+a+t,1,s+c+cc+" +k=1"+d+u+f+o+a+t,1,s+c+so+" +k=1"+d+u+f+o+a+t,1,s+c+_l+" +k=1"+d+u+f+o+a+t,1,s+c+ss+" +k=1"+d+u+f+o+a+t,1,s+c+lg+" +k=1"+d+u+f+o+a+t,1,s+c+Oa+" +k=1"+d+u+f+o+a+t,1,s+c+yr+" +k=1"+d+u+f+o+a+t,1,s+c+xa+" +k=1"+d+u+f+o+a+t,1,s+c+Pl+" +k=1"+d+u+f+o+a+t,1,s+c+Sa+" +k=1"+d+u+f+o+a+t,1,s+c+Cl+" +k=1"+d+u+f+o+a+t,1,s+c+Bs+" +k=1"+d+u+f+o+a+t,1,l+rc+T+R+zn+a+t,1,l+Ul+T+R+zn+a+t,1,s+c+Er+" +k=1"+d+u+f+o+a+t,1,s+c+Ma+" +k=1"+d+u+f+o+a+t,1,s+c+pp+" +k=1"+d+u+f+o+a+t,1,s+c+id+" +k=1"+d+u+f+o+a+t,1,s+c+bC+" +k=1"+d+u+f+o+a+t,1,s+c+iu+" +k=1"+d+u+f+o+a+t,1,s+c+su+" +k=1"+d+u+f+o+a+t,1,s+c+$c+" +k=1"+d+u+f+o+a+t,1,s+c+QQ+" +k=1"+d+u+f+o+a+t,1,s+c+sd+" +k=1"+d+u+f+o+a+t,1,s+c+oI+" +k=1"+d+u+f+o+a+t,1,s+c+Af+" +k=1"+d+u+f+o+a+t,1,s+c+DC+" +k=1"+d+u+f+o+a+t,1,s+c+hg+" +k=1"+d+u+f+o+a+t,1,s+c+vC+" +k=1"+d+u+f+o+a+t,1,s+c+Tl+" +k=1"+d+u+f+o+a+t,1,s+c+_p+" +k=1"+d+u+f+o+a+t,1,s+c+Hl+" +k=1"+d+u+f+o+a+t,1,s+c+Pp+" +k=1"+d+u+f+o+a+t,1,s+c+cg+" +k=1"+d+u+f+o+a+t,1,s+c+Tp+" +k=1"+d+u+f+o+a+t,1,s+lr+nr+Ad+N+u+i+e+a+t,1,s+kn+jf+it+x+u+i+e+a+t,1,s+Nt+Ne+E+us+u+i+e+a+t,1,s+Nt+Re+E+us+u+i+e+a+t,1,s+Nt+Sr+it+us+u+i+e+a+t,1,r+Hi+Ji+$A+qo+K+u+i+e+a+t,1,r+qi+Cc+zi+qo+K+br+i+e+a+t,1,r+di+El+X+Pn+kt+bA+i+e+a+t,1,r+Ii+pi+$+Pn+kt+bA+i+e+a+t,1,r+PA+_i+uc+rA+kt+bA+i+e+a+t,1,r+Kh+Hd+Ci+dc+kt+bA+i+e+a+t,1,r+Bi+wi+Ic+Mr+kt+bA+i+e+a+t,1,r+Ei+yi+Qi+Gr+kt+bA+i+e+a+t,1,r+Qs+ms+X+yt+La+Ua+i+e+a+t,1,r+Yh+Vh+Ce+yt+La+Ua+i+e+a+t,1,r+PA+mi+S+yt+La+Ua+i+e+a+t,1,r+ki+pc+xi+ml+Dd+vd+i+e+a+t,1,s+Me+Fe+_c+N+u+i+e+a+t,1,s+TA+ce+LA+N+u+i+e+a+t,1,s+TA+tu+LA+N+u+i+e+a+t,1,r+Wh+Mi+Jd+Xh+x+u+i+e+a+t,1,s+kn+Le+E+N+u+i+e+a+t,1,s+kn+Ue+E+fs+u+i+e+a+t,1,s+Bh+Xp+fA+d+u+i+e+a+t,1,s+wh+Vl+fA+d+u+i+e+a+t,1,s+ln+Jl+Bl+d+u+i+e+a+t,1,s+Eh+Zp+Bl+d+u+i+e+a+t,1,s+yh+Wl+" +k=1"+d+u+i+e+a+t,1,s+H+Oe+nt+N+u+i+e+a+t,1,s+H+hl+nt+d+u+i+e+a+t,1,s+H+Nr+it+_e+u+i+e+a+t,1,s+S+je+os+oA+u+i+e+a+t,1,s+S+Ke+LA+fs+u+i+e+a+t,1,s+ai+Ye+fA+pt+ql+i+e+a+t,1,s+ai+Ve+fA+ao+ql+i+e+a+t,1,r+ji+Ki+ba+Ka+BA+nA+i+e+a+t,1,r+yA+Yi+Ga+Ka+d+u+i+e+a+t,1,r+Vi+Wi+dA+ka+K+u+i+e+a+t,1,r+Xi+Zi+S+Ie+K+br+i+e+a+t,1,r+WA+ui+ai+yl+d+u+i+e+a+t,1,r+ks+xs+AA+ds+d+bA+i+e+a+t,1,r+oa+ra+lr+Co+Et+u+i+e+a+t,1,r+Rf+Ff+Lf+vt+Et+u+i+e+a+t,1,s+lA+Vn+E+oA+u+i+e+a+t,1,s+At+We+fA+ao+u+i+e+a+t,1,r+Xg+xf+$+rg+K+u+i+e+a+t,1,r+Ms+bi+kr+za+N+fc+i+e+a+t,1,r+bs+Ds+kr+Wo+d+u+i+e+a+t,1,r+vs+Ss+Gs+Il+tC+u+i+e+a+t,1,r+Mf+Ns+Rs+tt+rd+u+i+e+a+t,1,r+Ot+bf+ba+tt+$h+u+i+e+a+t,1,r+la+ha+xr+Xe+_e+ts+i+e+a+t,1,r+ic+ga+Ar+xl+_e+ts+i+e+a+t,1,r+ca+fa+gf+tf+_e+ts+i+e+a+t,1,s+Eo+Pe+he+oA+u+i+e+a+t,1,s+Eo+jt+he+fs+u+i+e+a+t,1,s+Qe+PI+it+qt+u+i+e+a+t,1,s+Qe+Co+it+d+u+i+e+a+t,1,s+ur+TI+LA+hy+u+i+e+a+t,1,r+zh+SI+Zg+ir+x+u+i+e+a+t,1,r+el+El+ua+fe+d+u+i+e+a+t,1,s+ge+Ze+E+N+eC+i+e+a+t,1,s+ge+$e+E+d+Bo+i+e+a+t,1,s+ge+Ai+E+_e+Ag+i+e+a+t,1,s+Da+ti+fA+oA+u+i+e+a+t,1,s+XA+bn+E+Ft+u+i+e+a+t,1,s+Nt+Te+mo+Df+u+i+e+a+t,1,s+Nt+Rr+E+d+u+i+e+a+t,1,s+Nt+He+Fr+gy+u+i+e+a+t,1,s+XA+bn+E+Ft+u+i+e+a+t,1,s+Ga+Je+MA+qt+u+i+e+a+t,1,s+Ga+qe+MA+hI+u+i+e+a+t,1,r+Di+vi+ZA+eu+oA+u+i+e+a+t,1,r+st+Us+cr+Is+x+u+i+e+a+t,1,r+Os+Ps+xt+Is+x+u+i+e+a+t,1,r+Uf+da+wt+hs+x+u+i+e+a+t,1,r+Ia+pa+Me+hs+x+u+i+e+a+t,1,r+Si+Ts+qd+ka+x+u+i+e+a+t,1,r+Hs+Js+Gi+ka+x+u+i+e+a+t,1,r+Tu+Be+lA+rA+be+u+i+e+a+t,1,r+Hu+we+H+rA+BA+u+i+e+a+t,1,s+$i+za+ng+pt+u+i+e+a+t,1,r+_a+Ca+hA+fe+x+u+i+e+a+t,1,r+Of+Ba+As+vA+x+u+i+e+a+t,1,r+js+Ac+$A+Kg+x+u+i+e+a+t,1,r+Ks+tc+zd+kl+N+nA+i+e+a+t,1,r+Ys+Vs+Li+Ie+x+Se+i+e+a+t,1,r+Ws+Xs+Ee+vA+fs+va+i+e+a+t,1,r+Zs+$s+Ui+pl+x+Ag+i+e+a+t,1,r+Zt+$t+ye+Ie+oA+bl+i+e+a+t,1,r+yA+Ae+Pt+at+d+nA+i+e+a+t,1,r+Hr+te+dA+at+d+Se+i+e+a+t,1,r+Jr+ee+S+at+d+va+i+e+a+t,1,s+Da+tg+Lr+d+u+i+e+a+t,1,r+Gf+Aa+$+ja+Lt+Se+i+e+a+t,1,r+WA+Oi+AA+ja+Lt+nA+i+e+a+t,1,r+st+Nf+cr+ze+d+u+i+e+a+t,1,r+ta+ea+Pi+rA+d+u+i+e+a+t,1,r+sc+RI+Bc+un+x+u+i+e+a+t,1,r+wa+Ea+Kd+ce+x+u+i+e+a+t,1,r+ia+sa+Ti+Jt+x+u+i+e+a+t,1,r+gl+ec+hA+Jt+x+u+i+e+a+t,1,r+aa+na+Ju+Jt+x+u+i+e+a+t,1,s+Vt+ei+MA+N+u+i+e+a+t,1,s+Vt+ii+MA+K+ts+i+e+a+t,1,s+Vt+Ur+MA+x+u+i+e+a+t,1,s+Vt+si+MA+_e+ts+i+e+a+t,1,r+hn+gn+cn+Ta+N+Vo+i+e+a+t,1,s+Nt+Ne+E+us+u+i+e+j+t,1,s+Nt+Re+E+us+u+i+e+j+t,1,s+Nt+Sr+it+us+u+i+e+j+t,1,r+di+El+X+Pn+xA+eA+i+e+h+t,1,r+Ii+pi+$+Pn+xA+eA+i+e+h+t,1,r+PA+_i+uc+rA+xA+eA+i+e+h+t,1,r+Kh+Hd+Ci+dc+xA+eA+i+e+h+t,1,r+Bi+wi+Ic+Mr+xA+eA+i+e+h+t,1,r+Ei+yi+Qi+Gr+xA+eA+i+e+h+t,1,r+Qs+ms+X+yt+zt+ne+i+e+h+t,1,r+Yh+Vh+Ce+yt+zt+ne+i+e+h+t,1,r+PA+mi+S+yt+zt+ne+i+e+h+t,1,r+ki+pc+xi+ml+Gg+Ng+i+e+h+t,1,s+Me+Fe+_c+iA+u+i+e+h+t,1,s+TA+ce+LA+iA+u+i+e+h+t,1,s+TA+tu+LA+iA+u+i+e+h+t,1,r+Wh+Mi+Jd+Xh+x+u+i+e+h+t,1,s+kn+Le+E+iA+u+i+e+h+t,1,s+kn+Ue+E+oe+u+i+e+h+t,1,s+H+Oe+nt+iA+u+i+e+h+t,1,s+H+hl+nt+sA+u+i+e+h+t,1,s+H+Nr+it+Rg+u+i+e+h+t,3,r+WA+ui+ai+yl+sA+u+i+e+h+t,1,r+ks+xs+AA+ds+sA+eA+i+e+h+t,1,r+Xg+xf+$+rg+Fg+u+i+e+h+t,1,r+Ms+bi+kr+za+iA+fc+i+e+h+t,1,r+bs+Ds+kr+Wo+sA+u+i+e+h+t,1,r+vs+Ss+Gs+Il+Lg+u+i+e+j+t,1,r+Mf+Ns+Rs+tt+Ug+u+i+e+j+t,1,r+Ot+bf+ba+tt+Kf+u+i+e+j+t,1,s+Eo+Pe+he+et+u+i+e+h+t,1,s+Eo+jt+he+oe+u+i+e+h+t,1,r+zh+SI+Zg+ir+hi+u+i+e+j+t,1,s+Nt+Te+mo+Df+u+i+e+h+t,1,s+Nt+Rr+E+sA+u+i+e+h+t,1,s+Nt+He+Fr+Og+u+i+e+h+t,1,s+XA+bn+E+Ft+u+i+e+h+t,1,s+Ga+Je+MA+Pg+u+i+e+h+t,1,s+Ga+qe+MA+Tg+u+i+e+h+t,1,r+Di+vi+ZA+eu+et+u+i+e+h+t,1,r+st+Us+cr+Is+hi+u+i+e+j+t,1,r+Os+Ps+xt+Is+hi+u+i+e+j+t,1,r+Si+Ts+qd+ka+x+u+i+e+h+t,1,r+Hs+Js+Gi+ka+x+u+i+e+h+t,1,r+Tu+Be+lA+rA+jl+u+i+e+j+t,1,r+Hu+we+H+rA+Kl+u+i+e+j+t,1,r+js+Ac+$A+Kg+x+u+i+e+h+t,1,r+Ks+tc+zd+kl+iA+re+i+e+h+t,1,r+Ys+Vs+Li+Ie+x+vn+i+e+h+t,1,r+Ws+Xs+Ee+vA+oe+va+i+e+h+t,1,r+Zs+$s+Ui+pl+x+nf+i+e+h+t,1,r+Zt+$t+ye+Ie+et+of+i+e+h+t,1,r+yA+Ae+Pt+at+pn+Bd+i+e+j+t,1,r+Hr+te+dA+at+pn+jI+i+e+j+t,1,r+Jr+ee+S+at+pn+KI+i+e+j+t,1,r+Gf+Aa+$+ja+Sn+vn+i+e+h+t,1,r+WA+Oi+AA+ja+Sn+re+i+e+h+t,1,r+st+Nf+cr+ze+sA+u+i+e+h+t,1,r+ta+ea+Pi+rA+sA+u+i+e+h+t,1,r+ia+sa+Ti+Jt+x+u+i+e+h+t,1,r+gl+ec+hA+Jt+x+u+i+e+h+t,1,r+aa+na+Ju+Jt+x+u+i+e+h+t,1,s+c+" +lon_0=13"+uA+d+u+CA+ht+I_+a+t,1,s+" +lat_0=24.45"+ow+Bl+N+yo+_+Gl+a+t,1,l+Kc+T+m+_o+a+t,2,s+Xl+" +lon_0=41.53333333333333 +k=1 +x_0=1300000"+u+f+n+a+t,1,s+Xl+" +lon_0=44.53333333333333 +k=1"+am+u+f+n+a+t,1,s+Xl+" +lon_0=47.53333333333333 +k=1"+nm+u+f+n+a+t,1,s+Xl+" +lon_0=50.53333333333333 +k=1"+om+u+f+n+a+t,1,s+gu+" +lon_0=50.76666666666667 +k=1"+am+u+f+n+a+t,1,s+gu+" +lon_0=53.76666666666667 +k=1"+nm+u+f+n+a+t,1,s+gu+" +lon_0=56.76666666666667 +k=1"+om+u+f+n+a+t,1,l+ll+_+Qp+a+t,1,l+ll+_+p_+a+t,2,s+c+V_+E+kA+u+i+e+a+t,1,s+c+UI+E+kA+u+i+e+a+t,1,s+c+OI+E+kA+u+i+e+a+t,1,s+c+W_+E+kA+u+i+e+a+t,1,s+c+Wo+E+kA+u+i+e+a+t,1,s+c+X_+E+kA+u+i+e+a+t,1,s+c+Z_+E+kA+u+i+e+a+t,1,s+c+un+E+kA+u+i+e+a+t,1,rn+xr+em+Op+be+rm+i+e+a+t,1,rn+" +lat_0=47.25"+nI+Op+K+le+i+e+a+t,1,l+Bf+i+e+a+t,1,l+wf+i+e+a+t,1,l+Ef+i+e+a+t,1,l+wr+i+e+a+t,1,l+To+i+e+a+t,1,l+wo+i+e+a+t,1,l+On+i+e+a+t,1,l+Ho+i+e+a+t,2,ci+" +lat_1=55"+Yd+AQ+wc+z+u+Q+h+t,1,s+ai+Ye+fA+Jg+Va+i+e+h+t,1,s+ai+Ve+fA+ao+Va+i+e+h+t,1,s+ai+Ye+fA+Jg+Va+i+e+h+t,1,s+ai+Ve+fA+ao+Va+i+e+h+t,1,l+On+_+__+a+t,1,l+On+_+mp+a+t,1,l+mr+_+Fc+a+t,1,l+mr+i+e+a+t,1,l+On+_+S_+a+t,2,l+oc+T+i+e+a+t,1,l+rp+T+_+G_+a+t,1,l+MI+T+_+Eg+a+t,1,l+bI+T+_+CC+a+t,2,l+rl+T+_+kp+a+t,1,l+vg+T+_+Fd+a+t,6,l+Ho+R+J_+a+t,1,l+Dp+T+_+xp+a+t,3,r+el+Qo+Ya+rA+K+u+i+e+a+t,1,r+el+Qo+Ya+rA+og+u+i+e+j+t,1,r+el+Qo+Ya+rA+K+u+i+e+a+t,1,r+el+Qo+Ya+rA+og+u+i+e+j+t,1,l+vg+T+_+ul+a+t,1,l+vg+T+_+C_+a+t,1,l+vg+T+_+gh+a+t,1,l+vg+T+_+Kn+a+t,1,l+rl+T+_+Mp+a+t,1,il+" +lon_0=110"+wQ+ld+gI+m+_o+a+t,1,il+" +lon_0=110"+wQ+ld+gI+m+De+a+t,1,il+" +lon_0=110"+wQ+ld+gI+m+go+a+t,1,s+c+Fl+uA+BA+u+_+ae+a+t,1,s+c+yn+uA+" +x_0=2520000"+u+_+ae+a+t,1,ci+tQ+" +lat_2=58.5"+Ar+" +lon_0=-126"+Et+u+i+e+a+t,1,l+Ll+i+e+a+t,1,s+c+jo+" +k=1"+Ft+u+i+e+a+t,1,s+c+" +lon_0=13.5 +k=1"+Ft+u+i+e+a+t,1,s+c+yn+" +k=1"+Ft+u+i+e+a+t,1,s+c+cy+" +k=1"+Ft+u+i+e+a+t,1,s+c+Td+" +k=1"+Ft+u+i+e+a+t,1,s+c+" +lon_0=14.25 +k=1"+Ft+u+i+e+a+t,1,s+c+" +lon_0=15.75 +k=1"+Ft+u+i+e+a+t,1,s+c+" +lon_0=17.25 +k=1"+Ft+u+i+e+a+t,1,s+c+" +lon_0=18.75 +k=1"+Ft+u+i+e+a+t,1,s+c+" +lon_0=20.25 +k=1"+Ft+u+i+e+a+t,1,s+c+" +lon_0=21.75 +k=1"+Ft+u+i+e+a+t,1,s+c+" +lon_0=23.25 +k=1"+Ft+u+i+e+a+t,1,s+c+rw+" +k=1"+BA+u+m+Ct+a+t,1,s+c+lw+" +k=1"+BA+u+m+Ct+a+t,1,s+c+hw+" +k=1"+BA+u+m+Ct+a+t,1,s+c+gw+" +k=1"+BA+u+m+Ct+a+t,1,s+c+cw+" +k=1"+BA+u+m+Ct+a+t,1,s+c+fw+" +k=1"+BA+u+m+Ct+a+t,1,s+c+rw+" +k=1"+BA+u+m+a+t,1,s+c+lw+" +k=1"+BA+u+m+a+t,1,s+c+hw+" +k=1"+BA+u+m+a+t,1,s+c+gw+" +k=1"+BA+u+m+a+t,1,s+c+cw+" +k=1"+BA+u+m+a+t,1,s+c+fw+" +k=1"+BA+u+m+a+t,1,ct+O+" +lat_ts=-71"+$n+" +k=1"+z+u+C+a+t,1,ct+O+" +lat_ts=-71 +lon_0=70 +k=1"+rd+Bo+C+a+t,1,r+" +lat_1=-68.5 +lat_2=-74.5 +lat_0=-50 +lon_0=70"+rd+Bo+C+a+t,1,r+eQ+Yd+ju+mg+$h+HI+i+e+a+t,1,po+ju+mg+JI+qI+i+e+a+t,1,l+rc+T+F+Zl+a+t,1,l+Ul+T+F+Zl+a+t,3,l+ll+i+e+a+t,1,l+Rl+i+e+a+t,1,l+Iu+i+e+a+t,1,l+xd+i+e+a+t,1,l+Wr+i+e+a+t,1,l+Ll+i+e+a+t,1,l+jc+i+e+a+t,1,l+dh+i+e+a+t,1,l+rc+i+e+a+t,1,l+Ul+i+e+a+t,5,l+_u+_+cl+a+t,1,l+vp+_+cl+a+t,1,l+ll+_+cl+a+t,1,r+" +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19"+d+bA+i+e+a+t,1,s+c+" +lon_0=-8.5 +k=1"+wl+" +y_0=-7800000"+_+Nl+a+t,1,s+c+Ko+uA+d+" +y_0=-6000000"+i+e+a+t,1,l+vg+T+_+Zd+a+t,1,l+ll+_+Nu+a+t,1,l+_u+_+pd+a+t,1,l+_u+_+Zu+a+t,1,l+Wr+F+e+a+t,1,l+Ll+F+e+a+t,1,s+c+" +lon_0=37"+EC+d+pQ+_+P+a+t,1,l+dh+i+e+a+t,1,ve+" +lat_0=52.41864827777778 +lon_0=13.62720366666667"+au+" +y_0=10000"+m+tA+a+t,1,s+c+Jt+uA+d+" +y_0=-4500000"+Q+a+t,1,s+c+Jt+uA+fy+$p+i+e+a+t,1,s+c+Jt+uA+fy+$p+i+e+a+t,1,s+hA+$I+Tr+fs+u+i+e+a+t,2,s+At+Ap+Tr+oA+u+i+e+a+t,1,s+hA+$I+Tr+fs+u+i+e+a+t,2,s+At+Ap+Tr+oA+u+i+e+a+t,1,de+Qh+" +lonc=-86"+Sd+uA+Gd+Wu+Ol+Nd+i+e+a+t,1,de+Qh+" +lonc=-86"+Sd+uA+Gd+Wu+Ol+Nd+i+e+a+t,1,r+uw+dw+Iw+fe+" +x_0=914400 +y_0=914400"+Q+j+t,1,r+uw+dw+Iw+fe+Et+nA+i+e+a+t,1,r+Pf+FI+Xf+fe+BA+bl+i+e+a+t,1,ci+Pf+FI+Xf+fe+BA+Bo+i+e+a+t,1,r+Pf+FI+Xf+fe+BA+bl+i+e+a+t,1,ci+Pf+FI+Xf+fe+BA+Bo+i+e+a+t,1,ci+" +lat_1=24"+uy+" +lat_0=24"+Wc+K+u+i+e+a+t,1,ci+" +lat_1=24"+uy+" +lat_0=24"+Wc+K+u+i+e+a+t,1,r+ya+Qa+AA+ds+BA+nA+i+e+a+t,1,r+ya+Qa+AA+ds+BA+re+i+e+h+t,1,r+ya+Qa+AA+ds+BA+nA+i+e+a+t,1,r+ya+Qa+AA+ds+BA+re+i+e+h+t,1,l+lc+m+G+a+t,1,l+Yc+m+G+a+t,1,l+Cu+m+G+a+t,1,l+yf+m+G+a+t,1,l+Uu+m+G+a+t,1,l+lc+i+e+a+t,1,l+Yc+i+e+a+t,1,l+Cu+i+e+a+t,1,l+yf+i+e+a+t,1,l+Uu+i+e+a+t,1,r+" +lat_1=-14.26666666666667 +lat_0=-14.26666666666667"+Hp+" +k_0=1"+v+" +y_0=95169.31165862332"+R+B_+h+t,4,s+c+bo+uA+d+u+Kt+VA+xI+a+t,1,r+" +lat_1=-28"+mQ+" +lat_0=-32"+Ma+Et+Se+i+e+a+t,1,s+Up+" +lon_0=-2.416666666666667 +k=0.999997 +x_0=47000"+Cp+i+e+a+t,1,s+" +lat_0=49.225 +lon_0=-2.135 +k=0.9999999000000001"+au+" +y_0=70000"+i+e+a+t,1,r+" +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145"+be+dn+W+q+a+t,1,r+" +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145"+be+qr+i+e+a+t,1,r+" +lat_1=-18"+mQ+c+" +lon_0=134"+z+u+i+e+a+t,1,s+" +lat_0=-28"+$c+Bl+wl+ts+i+e+a+t,1,s+dr+" +lon_0=-80.07750791666666 +k=1"+Et+nA+i+e+a+t,1,s+dr+" +lon_0=-77.07750791666666 +k=1"+Et+nA+i+e+a+t,1,s+dr+" +lon_0=-74.07750791666666 +k=1"+Et+nA+i+e+a+t,1,s+dr+" +lon_0=-71.07750791666666 +k=1"+Et+nA+i+e+a+t,1,s+dr+" +lon_0=-68.07750791666666 +k=1"+Et+nA+i+e+a+t,1,s+c+dy+" +k=0.999"+Et+nA+_+AI+a+t,1,rn+" +lat_0=50.625 +lon_0=21.08333333333333"+EC+" +x_0=4637000 +y_0=5467000"+f+M+a+t,1,s+c+xa+he+d+u+R+Bt+a+t,1,s+c+kQ+he+d+u+R+Bt+a+t,1,s+c+xQ+he+d+u+R+Bt+a+t,1,s+c+Sa+he+d+u+R+Bt+a+t,1,s+c+up+he+d+u+R+Bt+a+t,1,s+c+DI+" +k=1"+d+u+i+e+a+t,1,s+c+QC+" +k=1"+d+u+i+e+a+t,1,s+c+mn+" +k=1"+d+u+i+e+a+t,1,s+c+iQ+" +k=1"+d+u+i+e+a+t,1,s+c+Rp+" +k=1"+d+u+i+e+a+t,1,s+c+Ko+" +k=1"+d+u+i+e+a+t,1,s+c+vI+" +k=1"+d+u+i+e+a+t,1,s+c+mC+" +k=1"+d+u+i+e+a+t,1,s+c+Ao+" +k=1"+d+u+i+e+a+t,1,s+c+LI+" +k=1"+d+u+i+e+a+t,1,s+c+" +lon_0=29 +k=1"+d+u+i+e+a+t,1,s+c+gr+" +k=1"+d+u+i+e+a+t,1,s+c+Pd+" +k=1"+d+u+i+e+a+t,2,ve+" +lat_0=-18 +lon_0=178 +x_0=109435.392 +y_0=141622.272"+UC+jy+ff+" +to_meter=0.201168"+t,1,l+Lu+T+_+Pr+a+t,1,l+Dp+T+_+Pr+a+t,6,l+hc+Kt+VA+Zr+a+t,1,l+gc+Kt+VA+Zr+a+t,3,s+c+" +lon_0=18.05779 +k=0.99999425 +x_0=100178.1808 +y_0=-6500614.7836"+i+e+a+t,1,ci+tQ+" +lat_2=58.5"+Ar+" +lon_0=-126"+Et+u+i+e+a+t,1,l+bI+i+e+a+t,1,l+P_+i+e+a+t,1,l+T_+i+e+a+t,1,l+Md+i+e+a+t,1,l+Qf+i+e+a+t,1,l+qc+i+e+a+t,1,l+zc+i+e+a+t,1,r+Iy+" +lat_2=53.5"+c+Bp+" +x_0=930000 +y_0=6430000"+i+e+a+t,1,r+Iy+" +lat_2=53.5"+c+Bp+" +x_0=930000 +y_0=6430000"+i+e+a+t,1,r+" +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5"+MQ+K+yo+i+e+a+t,1,l+vg+T+F+md+a+t,1,r+" +lat_1=-22.24469175 +lat_2=-22.29469175 +lat_0=-22.26969175 +lon_0=166.44242575 +x_0=0.66 +y_0=1.02"+_+Kn+a+t,1,r+" +lat_1=-22.24472222222222 +lat_2=-22.29472222222222 +lat_0=-22.26972222222222 +lon_0=166.4425 +x_0=8.313000000000001 +y_0=-2.354"+_+Kn+a+t,1,de+sI+lm+ym+ad+au+u+Ol+fn+Ky+wI+" +to_meter=20.116756"+t,1,de+sI+lm+ym+ad+" +x_0=804670.24"+u+Ol+fn+Ky+wI+a+t,1,l+Sp+T+i+e+a+t,1,l+vg+T+i+e+a+t,1,l+_f+T+i+e+a+t,1,l+_f+T+_+ul+a+t,2,ci+" +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-84.455955"+Et+nA+i+e+a+t,1,ci+" +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627"+Et+nA+i+e+a+t,1,s+c+EQ+uA+d+u+Kt+VA+Zr+a+t,1,s+c+BC+" +k=0.9965000000000001"+Et+u+_+V+a+t,1,l+To+i+e+a+t,1,l+wo+i+e+a+t,1,l+On+i+e+a+t,1,l+Ho+i+e+a+t,1,l+mr+i+e+a+t,1,l+Sg+i+e+a+t,1,l+mf+i+e+a+t,1,l+Cf+i+e+a+t,1,l+_u+i+e+a+t,1,l+vp+i+e+a+t,1,l+ll+i+e+a+t,1,l+Rl+i+e+a+t,1,s+c+Fl+he+N+u+_+V+a+t,1,s+c+" +lon_0=11"+he+N+u+_+V+a+t,1,s+c+" +lon_0=13"+he+N+u+_+V+a+t,1,s+c+yn+he+N+u+_+V+a+t,1,s+c+BC+he+N+u+_+V+a+t,1,s+c+DI+he+N+u+_+V+a+t,1,s+c+mn+he+N+u+_+V+a+t,1,s+c+Rp+he+N+u+_+V+a+t,1,s+c+vI+he+N+u+_+V+a+t,1,l+Wr+_+V+a+t,1,r+cI+fg+tl+Xu+BA+hm+b+kd+a+t,1,l+Ll+_+V+a+t,1,l+jc+_+V+a+t,1,l+dh+_+V+a+t,1,r+cu+fu+O+ed+z+u+C+a+t,1,r+cu+fu+O+ef+z+u+C+a+t,1,r+cu+fu+O+" +lon_0=-42"+z+u+C+a+t,1,r+ft+ut+O+Pp+z+u+C+a+t,1,r+ft+ut+O+ed+z+u+C+a+t,1,r+ft+ut+O+ef+z+u+C+a+t,1,r+ft+ut+O+Pu+z+u+C+a+t,1,r+ft+ut+O+Lp+z+u+C+a+t,1,r+ft+ut+O+yC+z+u+C+a+t,1,r+ft+ut+O+Qg+z+u+C+a+t,1,r+ft+ut+O+bo+z+u+C+a+t,1,r+ft+ut+O+_l+z+u+C+a+t,1,r+ft+ut+O+yr+z+u+C+a+t,1,r+ft+ut+O+Cl+z+u+C+a+t,1,r+ft+ut+O+pp+z+u+C+a+t,1,r+ft+ut+O+su+z+u+C+a+t,1,r+ft+ut+O+oI+z+u+C+a+t,1,r+gA+cA+O+" +lon_0=-102"+z+u+C+a+t,1,r+gA+cA+O+Jt+z+u+C+a+t,1,r+gA+cA+O+" +lon_0=-78"+z+u+C+a+t,1,r+gA+cA+O+ed+z+u+C+a+t,1,r+gA+cA+O+" +lon_0=-18"+z+u+C+a+t,1,r+gA+cA+O+" +lon_0=-6"+z+u+C+a+t,1,r+gA+cA+O+BQ+z+u+C+a+t,1,r+gA+cA+O+Td+z+u+C+a+t,1,r+gA+cA+O+gr+z+u+C+a+t,1,r+gA+cA+O+Pu+z+u+C+a+t,1,r+gA+cA+O+Lp+z+u+C+a+t,1,r+gA+cA+O+yC+z+u+C+a+t,1,r+gA+cA+O+Qg+z+u+C+a+t,1,r+gA+cA+O+bo+z+u+C+a+t,1,r+gA+cA+O+_l+z+u+C+a+t,1,r+gA+cA+O+yr+z+u+C+a+t,1,r+gA+cA+O+Cl+z+u+C+a+t,1,r+gA+cA+O+pp+z+u+C+a+t,1,r+gA+cA+O+su+z+u+C+a+t,1,r+gA+cA+O+oI+z+u+C+a+t,1,r+gA+cA+O+vC+z+u+C+a+t,1,r+SA+QA+O+py+z+u+C+a+t,1,r+SA+QA+O+_y+z+u+C+a+t,1,r+SA+QA+O+ug+z+u+C+a+t,1,r+SA+QA+O+pl+z+u+C+a+t,1,r+SA+QA+O+ce+z+u+C+a+t,1,r+SA+QA+O+nI+z+u+C+a+t,1,r+SA+QA+O+" +lon_0=-27"+z+u+C+a+t,1,r+SA+QA+O+" +lon_0=-9"+z+u+C+a+t,1,r+SA+QA+O+Fl+z+u+C+a+t,1,r+SA+QA+O+Ao+z+u+C+a+t,1,r+SA+QA+O+tl+z+u+C+a+t,1,r+SA+QA+O+jd+z+u+C+a+t,1,r+SA+QA+O+eo+z+u+C+a+t,1,r+SA+QA+O+so+z+u+C+a+t,1,r+SA+QA+O+xa+z+u+C+a+t,1,r+SA+QA+O+Ma+z+u+C+a+t,1,r+SA+QA+O+$c+z+u+C+a+t,1,r+SA+QA+O+hg+z+u+C+a+t,1,r+GA+NA+O+Tp+z+u+C+a+t,1,r+GA+NA+O+" +lon_0=-144"+z+u+C+a+t,1,r+GA+NA+O+Ec+z+u+C+a+t,1,r+GA+NA+O+$f+z+u+C+a+t,1,r+GA+NA+O+SC+z+u+C+a+t,1,r+GA+NA+O+" +lon_0=-48"+z+u+C+a+t,1,r+GA+NA+O+" +lon_0=-24"+z+u+C+a+t,1,r+GA+NA+O+$n+z+u+C+a+t,1,r+GA+NA+O+Ko+z+u+C+a+t,1,r+GA+NA+O+Fp+z+u+C+a+t,1,r+GA+NA+O+$y+z+u+C+a+t,1,r+GA+NA+O+cc+z+u+C+a+t,1,r+GA+NA+O+Pl+z+u+C+a+t,1,r+GA+NA+O+bC+z+u+C+a+t,1,r+GA+NA+O+DC+z+u+C+a+t,1,ct+O+wA+Jp+" +k=1"+z+u+C+a+t,1,ct+O+wA+_y+" +k=1"+z+u+C+a+t,1,ct+O+wA+" +lon_0=-105 +k=1"+z+u+C+a+t,1,ct+O+wA+GC+" +k=1"+z+u+C+a+t,1,ct+O+wA+" +lon_0=-45 +k=1"+z+u+C+a+t,1,ct+O+wA+" +lon_0=-15 +k=1"+z+u+C+a+t,1,ct+O+wA+yn+" +k=1"+z+u+C+a+t,1,ct+O+wA+tl+" +k=1"+z+u+C+a+t,1,ct+O+wA+to+" +k=1"+z+u+C+a+t,1,ct+O+wA+ss+" +k=1"+z+u+C+a+t,1,ct+O+wA+Ma+" +k=1"+z+u+C+a+t,1,ct+O+wA+Af+" +k=1"+z+u+C+a+t,1,ct+O+wA+Tf+" +k=1"+z+u+C+a+t,1,ct+O+wA+Jt+" +k=1"+z+u+C+a+t,1,ct+O+wA+" +lon_0=-30 +k=1"+z+u+C+a+t,1,ct+O+wA+gr+" +k=1"+z+u+C+a+t,1,ct+O+wA+bo+" +k=1"+z+u+C+a+t,1,ct+O+wA+su+" +k=1"+z+u+C+a+t,1,ct+O+wA+$n+" +k=1"+z+u+C+a+t,1,r+GA+NA+" +lat_0=-78"+oI+z+u+C+a+t,2,l+MI+T+i+Rt+a+t,1,l+rp+T+i+Rt+a+t,1,l+bI+T+i+Rt+a+t,1,l+P_+T+i+Rt+a+t,1,r+pw+" +lat_2=58"+_w+Ko+d+" +y_0=6375000"+i+xg+a+t,1,r+pw+" +lat_2=58"+_w+Ko+d+" +y_0=6375000"+i+e+a+t,1,l+bI+T+_+wg+a+t,1,l+bI+T+_+lh+a+t,1,l+rp+T+_+fh+a+t,1,l+rp+T+_+uh+a+t,1,l+MI+T+_+Ld+a+t,1,l+Vr+F+w_+a+t,1,r+" +lat_1=-30.75 +lat_2=-35.75 +lat_0=-33.25"+iu+" +x_0=9300000"+dn+i+e+a+t,1,ci+sQ+qp+c+Ec+z+Vd+Q+a+t,1,ci+sQ+qp+c+Ec+z+Vd+i+e+a+t,1,ci+sQ+qp+c+Ec+z+Vd+i+e+a+t,1,l+Ho+_+Fc+a+t,1,l+Ho+i+e+a+t,3,s+c+iQ+E+d+RA+b+a+t,1,s+c+Ko+E+d+RA+b+a+t,1,s+c+jo+E+d+RA+b+a+t,1,s+c+" +lon_0=14"+E+d+RA+b+a+t,1,s+c+" +lon_0=16"+E+d+RA+b+a+t,1,s+c+Td+E+d+RA+b+a+t,1,s+c+QC+E+d+RA+b+a+t,1,s+c+iQ+E+d+RA+b+a+t,1,s+c+Ko+E+d+RA+b+a+t,1,s+c+mC+E+d+RA+b+a+t,1,s+c+LI+E+d+RA+b+a+t,1,s+c+gr+E+d+RA+b+a+t,1,rn+" +lat_0=52.16666666666666 +lon_0=19.16666666666667 +k=0.999714"+d+bA+f+M+a+t,1,s+c+yn+" +k=1"+ys+u+f+M+a+t,1,s+c+Td+" +k=1"+Ml+u+f+M+a+t,1,s+c+mn+" +k=1"+Xo+u+f+M+a+t,1,s+c+Ko+" +k=1"+Vg+u+f+M+a+t,1,s+c+yn+" +k=1"+Lt+u+f+M+a+t,1,s+c+mn+" +k=1"+ri+u+f+M+a+t,1,s+c+Ao+" +k=1"+ys+u+f+M+a+t,1,l+WI+T+_+E_+a+t,1,r+" +lat_1=-20.19506944444445 +lat_0=-20.19506944444445 +lon_0=57.52182777777778 +k_0=1"+Et+nA+b+tI+a+t,1,ci+" +lat_1=55"+Yd+AQ+wc+z+u+i+e+a+t,1,s+c+jo+E+d+RA+b+An+a+t,1,s+c+" +lon_0=14"+E+d+RA+b+An+a+t,1,s+c+" +lon_0=16"+E+d+RA+b+An+a+t,1,l+Ll+T+b+An+a+t,1,l+ll+i+e+a+t,1,l+Rl+i+e+a+t,1,l+Iu+i+e+a+t,1,s+c+Ko+EC+d+u+i+e+a+t,1,r+zh+Yo+" +lat_0=63.390675"+PC+" +x_0=6200000"+va+i+e+a+t,1,r+zh+Yo+" +lat_0=63.390675"+PC+" +x_0=6200000"+va+i+e+a+t,2,s+" +lat_0=0.1 +lon_0=21.95 +k=1"+qt+u+f+n+a+t,1,s+" +lat_0=0.1 +lon_0=24.95 +k=1 +x_0=1250000"+u+f+n+a+t,1,s+" +lat_0=0.1 +lon_0=27.95 +k=1 +x_0=2250000"+u+f+n+a+t,1,l+Wr+T+_+a+t,1,l+Wr+T+_+a+t,1,s+kn+Pd+" +k=1 +x_0=615000 +y_0=810000"+xn+eI+a+t,3,r+Fs+Ls+Zh+Xc+tp+u+i+e+a+t,2,r+zs+vf+Fi+ce+Sf+u+i+e+a+t,1,r+zs+vf+Fi+ce+Sf+u+i+e+j+t,1,r+$g+qs+ZA+ps+x+u+i+e+a+t,1,r+$g+qs+ZA+ps+x+u+i+e+h+t,1,r+Ni+Ri+X+ps+x+u+i+e+a+t,1,r+Ni+Ri+X+ps+x+u+i+e+h+t,2,l+ll+b+a+t,1,l+Rl+b+a+t,1,l+Iu+b+a+t,1,l+_f+Q+a+t,1,l+Lu+Q+a+t,1,l+_f+i+e+a+t,1,l+Lu+i+e+a+t,1,l+Rl+_+a+t,1,de+sI+lm+" +alpha=323.0257964666666"+ad+" +x_0=804671"+u+Ol+fn+i+a+t,1,de+sI+aQ+Qm+ad+z+u+Ol+Ir+i+a+t,1,ve+" +lat_0=2.121679744444445 +lon_0=103.4279362361111 +x_0=-14810.562 +y_0=8758.32"+i+a+t,1,ve+" +lat_0=2.682347636111111 +lon_0=101.9749050416667 +x_0=3673.785 +y_0=-4240.573"+i+a+t,1,ve+" +lat_0=3.769388088888889 +lon_0=102.3682989833333 +x_0=-7368.228 +y_0=6485.858"+i+a+t,1,ve+" +lat_0=3.68464905 +lon_0=101.3891079138889 +x_0=-34836.161 +y_0=56464.049"+i+a+t,1,ve+" +lat_0=4.9762852 +lon_0=103.070275625 +x_0=19594.245 +y_0=3371.895"+i+a+t,1,ve+" +lat_0=5.421517541666667 +lon_0=100.3443769638889 +x_0=-23.414 +y_0=62.283"+i+a+t,1,ve+" +lat_0=5.964672713888889 +lon_0=100.6363711111111"+z+u+i+a+t,1,ve+" +lat_0=4.859063022222222 +lon_0=100.8154105861111 +x_0=-1.769 +y_0=133454.779"+i+a+t,1,ve+" +lat_0=5.972543658333334 +lon_0=102.2952416694444 +x_0=13227.851 +y_0=8739.894"+i+a+t,1,s+c+Td+" +k=1"+d+u+_+qA+a+t,1,s+c+zo+" +k=1"+ys+u+_+qA+a+t,1,il+qu+" +lat_ts=42"+z+u+f+n+a+t,1,s+c+_p+" +k=1 +x_0=60500000"+u+f+n+a+t,1,s+c+_p+" +k=1 +x_0=60500000"+u+f+o+a+t,1,l+Ul+b+gs+a+t,1,l+rl+b+gs+a+t,1,l+Vr+b+gs+a+t,1,r+cI+fg+tl+Xu+BA+hm+b+a+t,1,il+$n+" +k=1"+z+u+C+a+t,1,s+c+Fl+" +k=1"+Lt+u+m+a+t,1,s+c+jo+" +k=1"+ri+u+m+a+t,1,s+c+jo+" +k=1"+ri+u+m+a+t,1,s+c+yn+" +k=1"+ys+u+m+a+t,1,s+c+zp+" +k=0.9992"+d+u+i+e+a+t,1,s+c+zp+" +k=0.9992"+z+u+i+e+a+t,1,s+c+zp+" +k=0.9992"+d+u+i+e+a+t,1,s+c+zp+" +k=0.9992"+z+u+i+e+a+t,1,r+Fs+Ls+Zh+Xc+k+u+i+e+h+t,1,l+hc+F+Ra+a+t,1,l+gc+F+Ra+a+t,1,ve+aw+nw+" +x_0=40243.57775604237 +y_0=19069.93351512578"+ws+Es+Hg+t,1,po+Do+$n+z+u+bQ+DQ+a+t,1,po+O+$n+z+u+bQ+DQ+a+t,1,"+proj=cea"+$n+" +lat_ts=30"+z+u+bQ+DQ+a+t,1,ct+Do+" +lat_ts=70 +lon_0=-45 +k=1"+z+u+vQ+ep+a+t,1,ct+O+" +lat_ts=-70"+$n+" +k=1"+z+u+vQ+ep+a+t,1,ct+Do+" +lat_ts=70 +lon_0=-45 +k=1"+z+u+C+a+t,1,s+" +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572"+F+a+t,1,r+" +lat_1=18 +lat_2=24 +lat_0=21"+yr+d+bA+B+p+a+t,1,r+zh+lf+" +lat_0=47.5"+pr+K+br+i+e+a+t,1,r+ji+Ki+ba+Ka+BA+Wa+i+e+h+t,1,r+yA+Yi+Ga+Ka+aA+u+i+e+h+t,1,r+Vi+Wi+dA+ka+zA+u+i+e+h+t,1,r+Xi+Zi+S+Ie+zA+Gn+i+e+h+t,1,s+ge+Ze+E+Nn+qg+i+e+h+t,1,s+ge+$e+E+aA+Bo+i+e+h+t,1,s+ge+Ai+E+UA+Gc+i+e+h+t,1,s+XA+bn+E+Ft+u+i+e+h+t,1,r+ji+Ki+ba+Ka+BA+Wa+i+e+h+t,1,r+yA+Yi+Ga+Ka+aA+u+i+e+h+t,1,r+Vi+Wi+dA+ka+zA+u+i+e+h+t,1,r+Xi+Zi+S+Ie+zA+Gn+i+e+h+t,1,s+ge+Ze+E+Nn+qg+i+e+h+t,1,s+ge+$e+E+aA+Bo+i+e+h+t,1,s+ge+Ai+E+UA+Gc+i+e+h+t,1,s+XA+bn+E+Ft+u+i+e+h+t,1,r+Hi+Ji+$A+qo+zA+u+i+e+h+t,1,r+qi+Cc+zi+qo+zA+Gn+i+e+h+t,1,s+S+je+os+et+u+i+e+h+t,1,s+S+Ke+LA+zg+u+i+e+h+t,1,s+Da+ti+fA+et+u+i+e+h+t,1,s+$i+za+ng+sl+u+i+e+h+t,1,l+Vr+b+Bn+a+t,1,l+oc+b+Bn+a+t,1,r+Hi+Ji+$A+qo+zA+u+i+e+h+t,1,r+qi+Cc+zi+qo+zA+Gn+i+e+h+t,1,s+S+je+os+et+u+i+e+h+t,1,s+S+Ke+LA+zg+u+i+e+h+t,1,s+Da+ti+fA+et+u+i+e+h+t,1,s+$i+za+ng+sl+u+i+e+h+t,1,r+mh+kh+" +lat_0=50.797815"+Cw+" +x_0=150328 +y_0=166262"+i+e+a+t,1,r+" +lat_1=18"+Xf+rg+" +k_0=1"+Cy+" +y_0=650000"+F+e+a+t,1,l+wr+F+e+a+t,1,l+To+F+e+a+t,1,r+oa+ra+lr+Co+_s+u+i+e+h+t,1,r+Rf+Ff+Lf+vt+_s+u+i+e+h+t,1,r+Zt+$t+" +lat_0=25.5"+vt+_s+u+i+e+h+t,2,r+Of+Ba+As+vA+x+u+i+e+h+t,1,r+oa+ra+lr+Co+_s+u+i+e+h+t,1,r+Rf+Ff+Lf+vt+_s+u+i+e+h+t,1,r+_a+Ca+hA+fe+x+u+i+e+h+t,1,r+Of+Ba+As+vA+x+u+i+e+h+t,1,s+" +lat_0=-17 +lon_0=178.75 +k=0.99985"+kt+Ag+B+I+a+t,1,l+ll+CA+ht+uf+a+t,1,l+Rl+CA+ht+uf+a+t,1,s+By+ip+Tr+d+u+i+e+a+t,1,s+By+ip+Tr+d+u+i+e+a+t,1,s+lr+nr+Ad+N+u+i+e+a+t,1,s+kn+jf+it+x+u+i+e+a+t,1,ci+" +lat_1=55"+Yd+AQ+wc+z+u+i+e+a+t,1,de+" +lat_0=57"+xh+Mh+E+eg+as+Ol+fn+i+e+a+t,1,s+Na+wy+E+d+u+i+e+a+t,1,s+Na+Ey+E+d+u+i+e+a+t,1,s+Na+Tf+E+d+u+i+e+a+t,1,s+Na+wc+E+d+u+i+e+a+t,1,s+Na+Jl+E+d+u+i+e+a+t,1,s+Na+yy+E+d+u+i+e+a+t,1,s+Na+Qy+E+d+u+i+e+a+t,1,s+Na+Hp+E+d+u+i+e+a+t,1,r+bh+Dh+kC+my+Et+u+i+e+a+t,1,s+Nt+Re+E+us+u+i+e+a+t,1,s+Nt+Re+E+us+u+i+e+j+t,1,s+Nt+Ne+E+us+u+i+e+a+t,1,s+Nt+Ne+E+us+u+i+e+j+t,1,s+Nt+Sr+it+us+u+i+e+a+t,1,s+Nt+Sr+it+us+u+i+e+j+t,1,r+Hi+Ji+$A+qo+K+u+i+e+a+t,1,r+Hi+Ji+$A+qo+zA+u+i+e+h+t,1,r+qi+Cc+zi+qo+K+br+i+e+a+t,1,r+qi+Cc+zi+qo+zA+Gn+i+e+h+t,1,ci+sQ+qp+c+Ec+z+Vd+i+e+a+t,1,r+di+El+X+Pn+kt+bA+i+e+a+t,1,r+di+El+X+Pn+xA+eA+i+e+h+t,1,r+Ii+pi+$+Pn+kt+bA+i+e+a+t,1,r+Ii+pi+$+Pn+xA+eA+i+e+h+t,1,r+PA+_i+uc+rA+kt+bA+i+e+a+t,1,r+PA+_i+uc+rA+xA+eA+i+e+h+t,1,r+Kh+Hd+Ci+dc+kt+bA+i+e+a+t,1,r+Kh+Hd+Ci+dc+xA+eA+i+e+h+t,1,r+Bi+wi+Ic+Mr+kt+bA+i+e+a+t,1,r+Bi+wi+Ic+Mr+xA+eA+i+e+h+t,1,r+Ei+yi+Qi+Gr+kt+bA+i+e+a+t,1,r+Ei+yi+Qi+Gr+xA+eA+i+e+h+t,1,r+Yh+Vh+Ce+yt+La+Ua+i+e+a+t,1,r+Yh+Vh+Ce+yt+zt+ne+i+e+h+t,1,r+Qs+ms+X+yt+La+Ua+i+e+a+t,1,r+Qs+ms+X+yt+zt+ne+i+e+h+t,1,r+PA+mi+S+yt+La+Ua+i+e+a+t,1,r+PA+mi+S+yt+zt+ne+i+e+h+t,1,r+ki+pc+xi+ml+Dd+vd+i+e+a+t,1,r+ki+pc+xi+ml+Gg+Ng+i+e+h+t,1,s+Me+Fe+_c+N+u+i+e+a+t,1,s+Me+Fe+_c+iA+u+i+e+h+t,1,s+TA+ce+LA+N+u+i+e+a+t,1,s+TA+ce+LA+iA+u+i+e+h+t,1,ci+" +lat_1=24"+uy+" +lat_0=24"+Wc+K+u+i+e+a+t,1,r+Wh+Mi+Jd+Xh+x+u+i+e+a+t,1,r+Wh+Mi+Jd+Xh+x+u+i+e+h+t,1,s+TA+tu+LA+N+u+i+e+a+t,1,s+TA+tu+LA+iA+u+i+e+h+t,1,s+kn+Le+E+N+u+i+e+a+t,1,s+kn+Le+E+iA+u+i+e+h+t,1,s+kn+Ue+E+fs+u+i+e+a+t,1,s+kn+Ue+E+oe+u+i+e+h+t,1,s+H+hl+nt+d+u+i+e+a+t,1,s+H+hl+nt+sA+u+i+e+h+t,1,s+H+Oe+nt+N+u+i+e+a+t,1,s+H+Oe+nt+iA+u+i+e+h+t,1,s+H+Nr+it+_e+u+i+e+a+t,1,s+H+Nr+it+Rg+u+i+e+h+t,1,s+S+je+os+oA+u+i+e+a+t,1,s+S+je+os+et+u+i+e+h+t,1,s+S+Ke+LA+fs+u+i+e+a+t,1,s+S+Ke+LA+zg+u+i+e+h+t,1,s+ai+Ye+fA+pt+ql+i+e+a+t,1,s+ai+Ye+fA+Jg+Va+i+e+h+t,1,s+ai+Ve+fA+ao+ql+i+e+a+t,1,s+ai+Ve+fA+ao+Va+i+e+h+t,1,r+ji+Ki+ba+Ka+BA+nA+i+e+a+t,1,r+ji+Ki+ba+Ka+BA+Wa+i+e+h+t,1,r+yA+Yi+Ga+Ka+d+u+i+e+a+t,1,r+yA+Yi+Ga+Ka+aA+u+i+e+h+t,1,r+Vi+Wi+dA+ka+K+u+i+e+a+t,1,r+Vi+Wi+dA+ka+zA+u+i+e+h+t,1,r+Xi+Zi+S+Ie+K+br+i+e+a+t,1,r+Xi+Zi+S+Ie+zA+Gn+i+e+h+t,1,r+WA+ui+ai+yl+d+u+i+e+a+t,1,r+WA+ui+ai+yl+sA+u+i+e+h+t,1,r+ya+Qa+AA+ds+BA+nA+i+e+a+t,1,r+ya+Qa+AA+ds+BA+re+i+e+h+t,1,r+ks+xs+AA+ds+d+bA+i+e+a+t,1,r+ks+xs+AA+ds+sA+eA+i+e+h+t,1,r+oa+ra+lr+Co+Et+u+i+e+a+t,1,r+oa+ra+lr+Co+_s+u+i+e+h+t,1,r+Rf+Ff+Lf+vt+Et+u+i+e+a+t,1,r+Rf+Ff+Lf+vt+_s+u+i+e+h+t,1,s+By+ip+Tr+d+u+i+e+a+t,1,s+hA+$I+Tr+fs+u+i+e+a+t,1,s+At+Ap+Tr+oA+u+i+e+a+t,1,s+lA+Vn+E+oA+u+i+e+a+t,1,s+At+We+fA+ao+u+i+e+a+t,1,r+Xg+xf+$+rg+K+u+i+e+a+t,1,r+yA+Ae+Pt+at+aA+Wa+i+e+h+t,1,s+Bh+Xp+fA+v+u+R+Ha+h+t,1,s+wh+Vl+fA+v+u+R+Ha+h+t,1,s+ln+Jl+Bl+v+u+R+Ha+h+t,1,s+Eh+Zp+Bl+v+u+R+Ha+h+t,1,s+yh+Wl+" +k=1"+v+u+R+Ha+h+t,1,r+Hr+te+dA+at+aA+Nc+i+e+h+t,1,r+Jr+ee+S+at+aA+va+i+e+h+t,1,r+yA+Ae+Pt+at+aA+Wa+i+e+h+t,1,r+Hr+te+dA+at+aA+Nc+i+e+h+t,1,r+Jr+ee+S+at+aA+va+i+e+h+t,1,po+Do+_p+z+u+C+a+t,1,po+Do+Tf+z+u+C+a+t,1,po+Do+fe+z+u+C+a+t,1,po+Do+" +lon_0=-40"+z+u+C+a+t,1,po+Do+mg+z+u+C+a+t,1,po+Do+bo+z+u+C+a+t,1,ci+" +lat_1=-18"+mQ+c+Er+z+u+i+e+a+t,1,ci+Bw+" +lat_2=68 +lat_0=59 +lon_0=-132.5"+d+bA+i+e+a+t,1,ci+Bw+" +lat_2=68 +lat_0=59 +lon_0=-132.5"+d+bA+i+e+a+t,1,r+" +lat_1=62 +lat_2=70"+c+" +lon_0=-112"+z+u+i+e+a+t,1,r+" +lat_1=62 +lat_2=70"+c+" +lon_0=-112"+z+u+i+e+a+t,1,r+Xg+xf+$+rg+Fg+u+i+e+h+t,1,r+bs+Ds+kr+Wo+d+u+i+e+a+t,1,r+bs+Ds+kr+Wo+sA+u+i+e+h+t,1,r+Ms+bi+kr+za+N+fc+i+e+a+t,1,r+Ms+bi+kr+za+iA+fc+i+e+h+t,1,r+Mf+Ns+Rs+tt+rd+u+i+e+a+t,1,r+Mf+Ns+Rs+tt+Ug+u+i+e+j+t,1,r+vs+Ss+Gs+Il+tC+u+i+e+a+t,1,r+vs+Ss+Gs+Il+Lg+u+i+e+j+t,1,de+Qh+" +lonc=-86"+Sd+uA+Gd+Wu+Ol+Nd+i+e+a+t,1,r+Ot+bf+ba+tt+$h+u+i+e+a+t,1,r+Ot+bf+ba+tt+Kf+u+i+e+j+t,1,r+ic+ga+Ar+xl+_e+ts+i+e+a+t,1,r+la+ha+xr+Xe+_e+ts+i+e+a+t,1,r+ca+fa+gf+tf+_e+ts+i+e+a+t,1,s+Eo+Pe+he+oA+u+i+e+a+t,1,s+Eo+Pe+he+et+u+i+e+h+t,1,s+Eo+jt+he+fs+u+i+e+a+t,1,s+Eo+jt+he+oe+u+i+e+h+t,1,s+Qe+Co+it+d+u+i+e+a+t,1,s+Qe+PI+it+qt+u+i+e+a+t,1,s+ur+TI+LA+hy+u+i+e+a+t,1,r+zh+SI+Zg+ir+x+u+i+e+a+t,1,r+zh+SI+Zg+ir+hi+u+i+e+j+t,1,r+el+El+ua+fe+d+u+i+e+a+t,1,s+ge+$e+E+d+Bo+i+e+a+t,1,s+ge+$e+E+aA+Bo+i+e+h+t,1,s+ge+Ze+E+N+eC+i+e+a+t,1,s+ge+Ze+E+Nn+qg+i+e+h+t,1,s+ge+Ai+E+_e+Ag+i+e+a+t,1,s+ge+Ai+E+UA+Gc+i+e+h+t,1,s+Da+ti+fA+oA+u+i+e+a+t,1,s+Da+ti+fA+et+u+i+e+h+t,1,s+XA+bn+E+Ft+u+i+e+a+t,1,s+XA+bn+E+Ft+u+i+e+h+t,1,s+Nt+Rr+E+d+u+i+e+a+t,1,s+Nt+Rr+E+sA+u+i+e+h+t,1,s+Nt+Te+mo+Df+u+i+e+a+t,1,s+Nt+Te+mo+Df+u+i+e+h+t,1,s+Nt+He+Fr+gy+u+i+e+a+t,1,s+Nt+He+Fr+Og+u+i+e+h+t,1,s+Ga+Je+MA+qt+u+i+e+a+t,1,s+Ga+Je+MA+Pg+u+i+e+h+t,1,s+XA+bn+E+Ft+u+i+e+a+t,1,s+XA+bn+E+Ft+u+i+e+h+t,1,r+Di+vi+ZA+eu+oA+u+i+e+a+t,1,r+Di+vi+ZA+eu+et+u+i+e+h+t,1,s+Ga+qe+MA+hI+u+i+e+a+t,1,s+Ga+qe+MA+Tg+u+i+e+h+t,1,r+Fs+Ls+Zh+Xc+tp+u+i+e+a+t,1,r+Fs+Ls+Zh+Xc+k+u+i+e+h+t,1,r+st+Us+cr+Is+x+u+i+e+a+t,1,r+st+Us+cr+Is+hi+u+i+e+j+t,1,r+Os+Ps+xt+Is+x+u+i+e+a+t,1,r+Os+Ps+xt+Is+hi+u+i+e+j+t,1,r+Uf+da+wt+hs+x+u+i+e+a+t,1,r+Ia+pa+Me+hs+x+u+i+e+a+t,1,r+Si+Ts+qd+ka+x+u+i+e+a+t,1,r+Si+Ts+qd+ka+x+u+i+e+h+t,1,r+Hs+Js+Gi+ka+x+u+i+e+a+t,1,r+Hs+Js+Gi+ka+x+u+i+e+h+t,1,r+el+Qo+Ya+rA+K+u+i+e+a+t,1,r+el+Qo+Ya+rA+og+u+i+e+j+t,1,r+Tu+Be+lA+rA+be+u+i+e+a+t,1,r+Tu+Be+lA+rA+jl+u+i+e+j+t,1,r+Hu+we+H+rA+BA+u+i+e+a+t,1,r+Hu+we+H+rA+Kl+u+i+e+j+t,1,r+$g+qs+ZA+ps+x+u+i+e+a+t,1,r+$g+qs+ZA+ps+x+u+i+e+h+t,1,r+Ni+Ri+X+ps+x+u+i+e+a+t,1,r+Ni+Ri+X+ps+x+u+i+e+h+t,1,s+$i+za+ng+pt+u+i+e+a+t,1,s+$i+za+ng+sl+u+i+e+h+t,1,r+zs+vf+Fi+ce+Sf+u+i+e+a+t,1,r+zs+vf+Fi+ce+Sf+u+i+e+j+t,1,r+_a+Ca+hA+fe+x+u+i+e+a+t,1,r+_a+Ca+hA+fe+x+u+i+e+h+t,1,r+Of+Ba+As+vA+x+u+i+e+a+t,1,r+Of+Ba+As+vA+x+u+i+e+h+t,1,r+js+Ac+$A+Kg+x+u+i+e+a+t,1,r+js+Ac+$A+Kg+x+u+i+e+h+t,1,r+Ws+Xs+Ee+vA+fs+va+i+e+a+t,1,r+Ws+Xs+Ee+vA+oe+va+i+e+h+t,1,ci+Pf+FI+Xf+fe+BA+Bo+i+e+a+t,1,r+Pf+FI+Xf+fe+BA+bl+i+e+a+t,1,r+Ks+tc+zd+kl+N+nA+i+e+a+t,1,r+Ks+tc+zd+kl+iA+re+i+e+h+t,1,r+Ys+Vs+Li+Ie+x+Se+i+e+a+t,1,r+Ys+Vs+Li+Ie+x+vn+i+e+h+t,1,r+Zt+$t+ye+Ie+oA+bl+i+e+a+t,1,r+Zt+$t+ye+Ie+et+of+i+e+h+t,1,r+Zs+$s+Ui+pl+x+Ag+i+e+a+t,1,r+Zs+$s+Ui+pl+x+nf+i+e+h+t,1,r+Hr+te+dA+at+d+Se+i+e+a+t,1,r+Hr+te+dA+at+pn+jI+i+e+j+t,1,r+Hr+te+dA+at+aA+Nc+i+e+h+t,1,r+yA+Ae+Pt+at+d+nA+i+e+a+t,1,r+yA+Ae+Pt+at+pn+Bd+i+e+j+t,1,r+yA+Ae+Pt+at+aA+Wa+i+e+h+t,1,r+Jr+ee+S+at+d+va+i+e+a+t,1,r+Jr+ee+S+at+pn+KI+i+e+j+t,1,r+Jr+ee+S+at+aA+va+i+e+h+t,1,s+Da+tg+Lr+d+u+i+e+a+t,1,r+Gf+Aa+$+ja+Lt+Se+i+e+a+t,1,r+Gf+Aa+$+ja+Sn+vn+i+e+h+t,1,r+WA+Oi+AA+ja+Lt+nA+i+e+a+t,1,r+WA+Oi+AA+ja+Sn+re+i+e+h+t,1,r+st+Nf+cr+ze+d+u+i+e+a+t,1,r+st+Nf+cr+ze+sA+u+i+e+h+t,1,r+ta+ea+Pi+rA+d+u+i+e+a+t,1,r+ta+ea+Pi+rA+sA+u+i+e+h+t,1,r+sc+RI+Bc+un+x+u+i+e+a+t,1,r+wa+Ea+Kd+ce+x+u+i+e+a+t,1,r+gl+ec+hA+Jt+x+u+i+e+a+t,1,r+gl+ec+hA+Jt+x+u+i+e+h+t,1,r+ia+sa+Ti+Jt+x+u+i+e+a+t,1,r+ia+sa+Ti+Jt+x+u+i+e+h+t,1,r+aa+na+Ju+Jt+x+u+i+e+a+t,1,r+aa+na+Ju+Jt+x+u+i+e+h+t,1,s+c+Jt+uA+fy+$p+i+e+a+t,1,s+Vt+ei+MA+N+u+i+e+a+t,1,s+Vt+ii+MA+K+ts+i+e+a+t,1,s+Vt+Ur+MA+x+u+i+e+a+t,1,s+Vt+si+MA+_e+ts+i+e+a+t,1,l+_f+i+e+a+t,1,l+Lu+i+e+a+t,1,l+Dp+i+e+a+t,1,l+O_+i+e+a+t,1,l+oy+i+e+a+t,1,l+H_+i+e+a+t,1,l+MI+i+e+a+t,1,l+rp+i+e+a+t,1,l+bI+i+e+a+t,1,l+P_+i+e+a+t,1,l+T_+i+e+a+t,1,l+Md+i+e+a+t,1,l+Bf+i+e+a+t,1,l+wf+i+e+a+t,1,l+Ef+i+e+a+t,1,l+Qf+i+e+a+t,1,l+qc+i+e+a+t,1,l+zc+i+e+a+t,1,l+wr+i+e+a+t,1,l+To+i+e+a+t,1,l+wo+i+e+a+t,1,s+" +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=160000"+Cp+_+bp+a+t,1,r+Uf+da+wt+hs+x+u+i+e+h+t,1,r+Ia+pa+Me+hs+x+u+i+e+h+t,1,s+Vt+ei+MA+Nn+u+i+e+h+t,1,s+Vt+ii+MA+zA+OA+i+e+h+t,1,s+Vt+Ur+MA+x+u+i+e+h+t,1,s+Vt+si+MA+UA+OA+i+e+h+t,1,r+Uf+da+wt+hs+x+u+i+e+h+t,1,r+Ia+pa+Me+hs+x+u+i+e+h+t,1,s+Vt+ei+MA+Nn+u+i+e+h+t,1,s+Vt+ii+MA+zA+OA+i+e+h+t,1,s+Vt+Ur+MA+x+u+i+e+h+t,1,s+Vt+si+MA+UA+OA+i+e+h+t,1,l+Md+i+e+a+t,1,l+Bf+i+e+a+t,1,l+wf+i+e+a+t,1,l+Ef+i+e+a+t,1,l+Qf+i+e+a+t,1,l+qc+i+e+a+t,1,l+zc+i+e+a+t,1,l+wr+i+e+a+t,1,l+To+i+e+a+t,1,l+wo+i+e+a+t,1,l+H_+i+e+a+t,1,l+MI+i+e+a+t,2,r+Uf+da+wt+hs+x+u+i+e+h+t,1,r+Ia+pa+Me+hs+x+u+i+e+h+t,1,s+Vt+ei+MA+Nn+u+i+e+h+t,1,s+Vt+ii+MA+zA+OA+i+e+h+t,1,s+Vt+Ur+MA+x+u+i+e+h+t,1,s+Vt+si+MA+UA+OA+i+e+h+t,1,s+ln+Jl+Bl+aA+u+i+e+h+t,1,s+ln+Jl+Bl+aA+u+i+e+h+t,1,l+mr+i+e+a+t,1,r+" +lat_1=-54 +lat_2=-54.75 +lat_0=-55 +lon_0=-37"+z+u+C+a+t,1,s+" +lat_0=39.66825833333333 +lon_0=-8.133108333333334 +k=1"+z+u+i+e+a+t,1,s+SQ+A_+" +k=1"+K+le+i+e+a+t,1,s+c+cy+E+d+u+i+e+a+t,1,r+" +lat_1=45.91666666666666 +lat_2=43.08333333333334"+c+cy+z+u+i+e+a+t,1,l+Ll+i+e+a+t,1,l+jc+i+e+a+t,1,l+On+R+N_+a+t,1,s+" +lat_0=32 +lon_0=-64.75 +k=1 +x_0=550000"+ts+F+e+a+t,1,s+c+zl+E+z+u+Q+a+t,1,s+c+hl+E+z+u+Q+a+t,1,s+c+ug+E+z+u+Q+a+t,2,s+c+zl+E+z+u+i+e+a+t,1,s+c+hl+E+z+u+i+e+a+t,1,s+c+ug+E+z+u+i+e+a+t,2,s+c+zl+E+z+u+i+e+a+t,1,s+c+hl+E+z+u+i+e+a+t,1,s+c+ug+E+z+u+i+e+a+t,2,s+" +lat_0=-25.06855261111111 +lon_0=-130.1129671111111 +k=1 +x_0=14200 +y_0=15500"+F+e+a+t,1,l+T_+T+_+q_+a+t,4,s+c+MQ+" +k=1"+Lt+RA+i+e+a+t,1,s+c+" +lon_0=169 +k=1"+Lt+RA+i+e+a+t,1,s+c+" +lon_0=179 +k=1"+Lt+RA+i+e+a+t,1,s+c+" +lon_0=-178 +k=1"+Lt+RA+i+e+a+t,2,s+c+A_+" +k=1"+Lt+RA+i+e+a+t,1,s+c+yn+E+d+as+i+e+a+t,1,r+" +lat_1=23 +lat_2=21.7 +lat_0=22.35"+ce+d+" +y_0=280296.016"+Q+a+t,1,r+" +lat_1=21.3 +lat_2=20.13333333333333 +lat_0=20.71666666666667 +lon_0=-76.83333333333333"+d+" +y_0=229126.939"+Q+a+t,1,r+tQ+lf+hr+" +lon_0=-70"+_e+u+Q+a+t,1,r+tQ+lf+hr+" +lon_0=-70"+_e+u+i+e+a+t,1,r+tQ+lf+hr+" +lon_0=-70"+_e+u+i+e+a+t,1,s+c+Ec+E+z+u+Q+a+t,1,s+c+Ec+E+z+u+i+e+a+t,1,s+c+Ec+E+z+u+i+e+a+t,10,r+mh+kh+" +lat_0=50.797815"+Cw+" +x_0=649328 +y_0=665262"+i+e+a+t,2,s+fg+t_+iC+d+hd+i+e+a+t,1,s+fg+t_+iC+d+hd+i+e+a+t,1,s+fg+t_+iC+d+hd+i+e+a+t,3,g+m+" +towgs84=595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408"+t,2,g+W+t,3,g+i+e+t,1,s+c+kQ+E+qt+u+i+e+a+t,1,s+c+xQ+E+qt+u+i+e+a+t,1,s+c+kQ+E+qt+u+W+a+t,1,s+c+xQ+E+qt+u+W+a+t,1,l+lc+_+hp+a+t,3,il+su+" +k=1"+z+u+C+a+t,1,s+c+Fl+" +k=1"+be+u+f+M+a+t,1,s+c+Fl+" +k=1"+be+u+f+HA+a+t,1,s+c+yn+" +k=1"+Lt+u+f+HA+a+t,1,s+c+mn+" +k=1"+ri+u+f+HA+a+t,1,s+c+Fl+" +k=1"+Lt+u+f+M+a+t,1,s+c+jo+" +k=1"+ri+u+f+M+a+t,1,s+c+Ao+" +k=1"+Wg+u+f+M+a+t,1,s+c+gr+" +k=1"+ig+u+f+M+a+t,1,s+c+Td+" +k=1"+Ml+u+f+HA+a+t,3,rn+" +lat_0=46"+vI+dp+d+bA+f+M+a+t,1,s+c+" +lon_0=11.30625 +k=1.000006 +x_0=1500025.141 +y_0=-667.282"+i+e+a+t,1,s+c+" +lon_0=13.55626666666667 +k=1.0000058 +x_0=1500044.695 +y_0=-667.13"+i+e+a+t,1,s+c+" +lon_0=15.80628452944445 +k=1.00000561024 +x_0=1500064.274 +y_0=-667.711"+i+e+a+t,1,s+c+" +lon_0=18.0563 +k=1.0000054 +x_0=1500083.521 +y_0=-668.8440000000001"+i+e+a+t,1,s+c+" +lon_0=20.30631666666667 +k=1.0000052 +x_0=1500102.765 +y_0=-670.706"+i+e+a+t,1,s+c+" +lon_0=22.55633333333333 +k=1.0000049 +x_0=1500121.846 +y_0=-672.557"+i+e+a+t,1,r+" +lat_1=-37.5 +lat_2=-44.5 +lat_0=-41 +lon_0=173"+gm+" +y_0=7000000"+i+e+a+t,1,r+GA+NA+O+" +lon_0=157"+d+u+i+e+a+t,2,s+c+" +lon_0=18.05787 +k=0.99999506 +x_0=100182.7406 +y_0=-6500620.1207"+i+e+a+t,3,il+" +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0"+u+" +k=1.0"+a+" +nadgrids=@null +wktext "+t,16,s+c+DI+" +k=1"+So+u+i+e+a+t,1,s+c+QC+" +k=1"+oo+u+i+e+a+t,1,s+c+mn+" +k=1"+Ro+u+i+e+a+t,1,s+c+iQ+" +k=1"+ro+u+i+e+a+t,1,s+c+Rp+" +k=1"+Fo+u+i+e+a+t,1,s+c+Ko+" +k=1"+ag+u+i+e+a+t,1,s+c+vI+" +k=1"+Lo+u+i+e+a+t,1,s+c+mC+" +k=1"+Uo+u+i+e+a+t,1,s+c+Ao+" +k=1"+Oo+u+i+e+a+t,1,s+c+LI+" +k=1"+Po+u+i+e+a+t,1,s+c+" +lon_0=29 +k=1"+Ln+u+i+e+a+t,1,s+c+gr+" +k=1"+sr+u+i+e+a+t,1,s+c+Pd+" +k=1"+In+u+i+e+a+t,4,g+i+e+t,1,l+Ul+i+e+a+t,1,l+rl+i+e+a+t,1,l+Vr+i+e+a+t,1,s+ww+" +lon_0=46.5 +k=0.9994"+_e+u+_+P+a+t,13,g+m+KA+t,6,s+c+yn+E+d+as+m+KA+a+t,8,l+On+R+fl+a+t,22,r+" +lat_1=41.25 +lat_2=42.75"+Ju+pu+Dl+$_+i+e+a+t,1,r+" +lat_1=42.25 +lat_2=43.75"+gf+pu+Dl+" +y_0=2200000"+i+e+a+t,1,r+" +lat_1=43.25 +lat_2=44.75"+hr+pu+Dl+" +y_0=3200000"+i+e+a+t,1,r+" +lat_1=44.25 +lat_2=45.75"+Ar+pu+Dl+" +y_0=4200000"+i+e+a+t,1,r+" +lat_1=45.25 +lat_2=46.75 +lat_0=46"+pu+Dl+" +y_0=5200000"+i+e+a+t,1,r+cm+" +lat_2=47.75"+cr+pu+Dl+" +y_0=6200000"+i+e+a+t,1,r+" +lat_1=47.25 +lat_2=48.75 +lat_0=48"+pu+Dl+" +y_0=7200000"+i+e+a+t,1,r+" +lat_1=48.25 +lat_2=49.75 +lat_0=49"+pu+Dl+" +y_0=8200000"+i+e+a+t,1,r+" +lat_1=49.25 +lat_2=50.75"+AQ+pu+Dl+" +y_0=9200000"+i+e+a+t,18,r+" +lat_1=37"+ky+$a+un+z+u+i+e+a+t,1,r+" +lat_1=37"+ky+$a+un+z+u+i+e+a+t,1,r+" +lat_1=37"+ky+$a+un+z+u+i+e+a+t,6,ct+O+" +lat_ts=-70"+$n+" +k=1"+z+u+C+a+t,2,r+zh+Yo+" +lat_0=49 +lon_0=-95"+z+u+i+e+a+t,1,r+zh+Yo+" +lat_0=49 +lon_0=-95"+z+u+i+e+a+t,7,s+nQ+gr+" +k=1"+N+bA+R+pe+a+t,1,s+nQ+LI+" +k=1"+N+bA+R+pe+a+t,1,s+nQ+mC+" +k=1"+N+bA+R+pe+a+t,1,s+nQ+Ko+" +k=1"+N+bA+R+pe+a+t,2,r+hn+gn+cn+Ta+v+u+R+fl+h+t,1,r+hn+gn+cn+Ta+v+Cd+R+fl+h+t,2,il+" +lon_0=100 +lat_ts=-41"+z+u+C+a+t,1,ct+Do+" +lat_ts=71"+$n+" +k=1"+z+u+C+a+t,1,ct+Do+" +lat_ts=75"+$n+" +k=1"+z+u+C+a+t,1,s+c+" +lon_0=55.33333333333334 +k=1"+d+u+C+a+t,4,g+Ku+t,1,g+hu+t,1,g+W+t,1,g+m+t,1,g+ko+es+t,1,g+Tn+t,1,g+ws+Es+t,1,g+R+t,2,g+sf+af+t,1,g+CA+ht+t,1,g+b+t,1,g+mt+dt+t,1,g+CA+" +b=6356514.996941779"+t,1,g+Kt+VA+t,1,g+Cg+t,2,g+Za+Yt+t,1,g+i+t,1,g+xn+t,1,g+er+Dt+t,1,g+_+t,1,g+i+e+t,0,g+i+e+t,1,g+f+t,1,g+fm+t,1,s+c+" +lon_0=28.4 +k=0.9999400000000001"+N+as+i+e+a+t,1,g+" +a=6376523"+EI+t,1,g+tm+BI+t,1,g+aI+xo+t,1,g+F+t,1,g+F+t,1,g+" +a=6378136.2 +b=6356751.516927429"+t,1,g+" +a=6378136.3 +b=6356751.616592146"+t,1,g+yI+QI+t,2,g+um+t,1,l+dh+C+a+t,1,l+rc+C+a+t,3,g+td+Dn+t,1,g+Wn+Rn+t,1,g+B+t,1,g+Bg+Mo+t,1,g+Mn+ue+t,1,g+i+e+t,1,g+" +a=6371007 +b=6371007"+t,1,s+c+jo+E+d+RA+i+e+a+t,1,s+c+" +lon_0=14"+E+d+RA+i+e+a+t,1,s+c+" +lon_0=16"+E+d+RA+i+e+a+t,1,s+c+Td+E+d+RA+i+e+a+t,1,g+" +a=6370997 +b=6370997"+t,1,g+bQ+DQ+t,1,g+vQ+ep+t,2,s+c+QC+E+d+RA+i+e+a+t,1,s+c+iQ+E+d+RA+i+e+a+t,1,s+c+Ko+E+d+RA+i+e+a+t,1,s+c+mC+E+d+RA+i+e+a+t,1,s+c+LI+E+d+RA+i+e+a+t,1,l+Ll+T+i+e+a+t,1,l+jc+T+i+e+a+t,1,l+dh+T+i+e+a+t,8,l+Sg+T+_+y_+a+t,4,g+i+e+t,6,g+i+e+t,1,l+vp+i+e+a+t,1,l+ll+i+e+a+t,4,"+proj=eqc +lat_ts=0"+c+$n+z+u+C+a+t,1,"+proj=eqc +lat_ts=0"+c+$n+z+u+" +a=6371007 +b=6371007"+a+t,5,s+c+Fl+Tr+N+as+i+e+a+t,1,s+c+mg+Tr+K+as+i+e+a+t,1,s+c+" +lon_0=11.75"+Tr+x+as+i+e+a+t,1,s+c+yn+" +k=1"+_e+as+i+e+a+t,24,g+m+t,1,g+i+Xd+t,1,g+td+Dn+t,1,g+_+qA+t,1,g+m+Ct+t,3,g+R+zn+t,1,g+R+t,1,g+R+t,1,g+F+Zl+t,1,g+Kt+VA+Zr+t,1,g+b+kd+t,1,g+i+xg+t,1,g+b+Bn+t,1,g+R+Ha+t,1,g+R+t,1,g+R+t,1,g+R+t,1,g+R+fl+t,2,g+i+_C+t,1,g+b+Xr+t,1,g+b+Jo+t,1,g+Kt+VA+$r+t,1,g+Bg+Mo+sn+t,1,g+Mn+ue+It+t,1,g+f+jn+t,1,g+F+e+t,1,g+m+Cn+t,1,g+m+Ed+t,1,g+i+e+t,1,g+i+e+t,1,g+_+yd+t,1,g+_+Un+t,1,g+CA+ht+uf+t,1,g+m+wn+t,1,g+ws+Es+t,1,g+_+Qd+t,1,g+_+Y+t,1,g+_+t,1,g+_+yp+t,1,g+m+t,1,g+F+e+t,1,g+f+Oc+t,1,g+_+D_+t,1,g+F+e+t,1,g+i+e+t,1,g+aI+xo+Lc+t,1,g+R+B_+t,1,g+i+e+t,1,g+i+e+t,2,g+i+e+t,1,g+aI+xo+t,1,g+b+Wf+t,1,g+i+e+t,2,g+f+HA+t,1,g+f+M+t,1,g+i+e+t,1,g+_+Sl+t,1,g+_+u_+t,1,g+_+d_+t,1,g+_+v_+t,4,g+Ku+Qt+t,1,g+i+e+t,1,g+i+e+t,1,g+f+t,1,g+_+AI+t,1,g+CA+ht+mI+t,1,g+_+Rc+t,1,g+_+" +towgs84=105,326,-102.5,0,0,0.814,-0.6"+t,1,g+_+" +towgs84=-45,417,-3.5,0,0,0.814,-0.6"+t,1,g+b+t,1,g+b+t,1,g+_+t,1,g+f+o+t,1,g+b+lo+t,1,g+W+q+t,1,g+W+Wt+t,1,g+_+Ge+t,1,g+f+Pc+t,1,g+CA+ht+t,1,g+_+cs+t,1,g+_+Cs+t,1,g+mt+dt+Qr+t,1,g+b+rs+t,1,g+m+De+t,1,g+b+vl+t,1,g+CA+ht+I_+t,1,g+f+w+t,1,g+_+t,1,g+R+N_+t,1,s+c+hg+uA+L+u+i+e+h+t,0,s+c+hg+uA+L+u+i+e+h+t,1,g+_+ls+t,1,g+m+" +towgs84=-384,664,-48,0,0,0,0"+t,1,g+b+tn+t,1,g+_+Tt+t,1,g+mt+dt+YA+t,1,g+CA+ht+En+t,1,g+_+y_+t,1,g+_+an+t,2,g+CA+ht+Yn+t,2,g+xn+ho+t,1,g+_+P+t,1,g+_+" +towgs84=-83.11,-97.38,-117.22,0.00569291,-0.0446976,0.0442851,0.1218"+t,1,g+b+Tc+t,4,g+_+hp+t,1,g+um+kI+t,1,g+er+Dt+jA+t,1,g+Kt+VA+Al+t,1,g+Kt+VA+Hc+t,1,g+yI+QI+t,1,g+R+Q_+t,1,g+Wn+Rn+t,1,g+Kt+VA+z_+t,1,g+Za+Yt+_t+t,1,g+b+iI+t,1,g+_+uo+t,1,g+_+EA+t,1,g+_+t,1,g+b+R_+t,1,g+b+" +towgs84=-90,40,88,0,0,0,0"+t,1,g+CA+ht+t,1,g+R+Ja+t,1,g+_+Vf+t,1,g+_+" +towgs84=-333,-222,114,0,0,0,0"+t,1,g+b+" +towgs84=41,-220,-134,0,0,0,0"+t,1,g+m+go+t,1,g+i+e+t,1,g+_+$d+t,2,g+CA+ht+$o+t,1,g+m+j_+t,1,g+b+nn+t,2,g+_+ae+t,1,g+CA+ht+Jc+t,1,g+Q+t,2,g+i+e+t,1,g+b+oi+t,1,g+_+F_+t,1,g+_+y+t,1,g+ko+es+mA+t,1,g+_+Yr+t,1,g+CA+ht+Gt+t,1,g+fm+t,1,g+Ku+Mg+t,1,g+Ku+t,1,g+Ku+t,1,g+m+t,1,g+sf+af+gi+t,1,g+CA+ht+m_+t,1,g+i+e+t,1,g+f+n+t,1,g+_+Ud+t,1,g+xn+t,2,g+_+t,1,g+m+Fa+t,3,g+_+df+t,1,g+Tn+Ht+t,2,g+m+t,2,g+_+Jn+t,1,g+Cg+qa+t,1,g+hu+Qt+t,1,g+hu+Qt+t,1,g+m+G+t,1,g+ws+Es+Kr+t,1,g+xn+t,1,g+CA+ht+Or+t,2,g+m+t,1,g+b+DA+t,1,g+m+t,1,g+_+" +towgs84=-155,171,37,0,0,0,0"+t,1,g+CA+ht+t,1,g+_+qn+t,1,g+m+Z+t,1,g+_+en+t,1,g+m+tA+t,1,g+CA+ht+If+t,1,g+_+Od+t,2,g+F+Yg+t,1,g+i+gp+t,3,g+B+I+t,2,g+B+p+t,2,g+C+t,64,ve+" +lat_0=2.042583333333333 +lon_0=103.5627583333333"+z+u+Za+Yt+_t+a+t,1,ve+" +lat_0=2.712283333333334 +lon_0=101.9411666666667 +x_0=-242.005 +y_0=-948.547"+Za+Yt+_t+a+t,1,ve+" +lat_0=3.710972222222222 +lon_0=102.4361777777778"+z+u+Za+Yt+_t+a+t,1,ve+" +lat_0=3.680344444444444 +lon_0=101.5082444444444 +x_0=-21759.438 +y_0=55960.906"+Za+Yt+_t+a+t,1,ve+" +lat_0=4.946141666666667 +lon_0=102.8952083333333"+z+u+Za+Yt+_t+a+t,1,ve+" +lat_0=5.421325 +lon_0=100.3458694444444"+z+u+Za+Yt+_t+a+t,1,ve+" +lat_0=5.965147222222223 +lon_0=100.6375944444444"+z+u+Za+Yt+_t+a+t,1,ve+" +lat_0=4.859380555555555 +lon_0=100.8167666666667"+z+" +y_0=133453.669"+Za+Yt+_t+a+t,1,ve+" +lat_0=5.893922222222222 +lon_0=102.1772916666667"+z+u+Za+Yt+_t+a+t,1,s+c+hg+uA+L+u+Q+h+t,1,s+c+Tl+uA+L+u+Q+h+t,1,s+c+Hl+uA+L+u+Q+h+t,1,s+c+cg+uA+L+u+Q+h+t,1,s+c+Jp+uA+L+u+Q+h+t,1,s+c+" +lon_0=-159"+uA+L+u+Q+h+t,0,s+c+" +lon_0=-159"+uA+L+u+Q+h+t,1,s+c+py+uA+L+u+Q+h+t,1,s+c+fI+uA+L+u+Q+h+t,1,s+c+" +lon_0=-141"+uA+L+u+Q+h+t,1,s+c+_y+uA+L+u+Q+h+t,1,s+c+xy+uA+L+u+Q+h+t,1,s+c+" +lon_0=-123"+uA+L+u+Q+h+t,1,s+c+ug+uA+L+u+Q+h+t,1,s+c+zl+uA+L+u+Q+h+t,1,s+c+" +lon_0=-105"+uA+L+u+Q+h+t,1,s+" +lat_0=13.5 +lon_0=144.75 +k=1"+pt+Vo+i+e+a+t,1,r+" +lat_1=-6.5 +lat_2=-11.5"+nQ+mC+d+bA+R+pe+a+t,2,s+c+mn+" +k=1"+Xo+u+f+HA+a+t,1,s+c+GC+uA+L+u+Q+h+t,1,s+c+jg+uA+L+u+Q+h+t,1,s+c+Tl+uA+L+u+i+e+h+t,1,s+c+Hl+uA+L+u+i+e+h+t,1,s+c+cg+uA+L+u+i+e+h+t,1,s+c+Jp+uA+L+u+i+e+h+t,1,s+c+" +lon_0=-159"+uA+L+u+i+e+h+t,1,s+c+py+uA+L+u+i+e+h+t,1,s+c+fI+uA+L+u+i+e+h+t,1,s+c+" +lon_0=-141"+uA+L+u+i+e+h+t,1,s+c+_y+uA+L+u+i+e+h+t,1,s+c+xy+uA+L+u+i+e+h+t,1,s+c+" +lon_0=-123"+uA+L+u+i+e+h+t,1,s+c+ug+uA+L+u+i+e+h+t,1,s+c+zl+uA+L+u+i+e+h+t,1,s+c+" +lon_0=-105"+uA+L+u+i+e+h+t,1,s+c+Ko+" +k=1"+Vg+u+f+HA+a+t,3,r+hn+gn+cn+Ta+N+Vo+i+e+a+t,1,s+c+GC+uA+L+u+i+e+h+t,1,s+c+jg+uA+L+u+i+e+h+t,16,r+Ni+Ri+X+ps+k+u+Q+h+t,1,r+Di+vi+Vt+eu+k+Cd+Q+h+t,1,r+_a+Ca+hA+fe+x+u+i+e+h+t,5,r+" +lat_1=-18"+mQ+" +lat_0=-27"+Er+z+u+C+a+t,1,g+i+e+t,4,l+Ho+i+e+a+t,3,g+i+e+t,1,l+rl+T+i+e+a+t,4,g+_+Ru+t,8,g+i+e+t,1,l+Bf+i+e+a+t,1,l+wf+i+e+a+t,1,l+Ef+i+e+a+t,1,l+Qf+i+e+a+t,1,l+qc+i+e+a+t,1,l+zc+i+e+a+t,1,g+i+t,1,s+c+to+" +k=1"+no+u+i+a+t,1,s+c+eo+" +k=1"+Fn+u+i+a+t,1,s+c+Io+" +k=1"+Go+u+i+a+t,1,s+c+io+" +k=1"+No+u+i+a+t,1,s+c+so+" +k=1"+Dr+u+i+a+t,1,s+c+ss+" +k=1"+vo+u+i+a+t,1,s+c+Oa+" +k=1"+So+u+i+a+t,1,s+c+xa+" +k=1"+oo+u+i+a+t,1,s+c+Sa+" +k=1"+Ro+u+i+a+t,1,s+c+Bs+" +k=1"+ro+u+i+a+t,1,s+c+Ma+" +k=1"+Fo+u+i+a+t,1,s+c+to+" +k=1"+d+u+i+a+t,1,s+c+eo+" +k=1"+d+u+i+a+t,1,s+c+Io+" +k=1"+d+u+i+a+t,1,s+c+io+" +k=1"+d+u+i+a+t,1,s+c+so+" +k=1"+d+u+i+a+t,1,s+c+ss+" +k=1"+d+u+i+a+t,1,s+c+Oa+" +k=1"+d+u+i+a+t,1,s+c+xa+" +k=1"+d+u+i+a+t,1,s+c+Sa+" +k=1"+d+u+i+a+t,1,s+c+Bs+" +k=1"+d+u+i+a+t,1,s+c+Ma+" +k=1"+d+u+i+a+t,1,s+c+to+" +k=1"+Lo+u+i+a+t,1,s+c+Qg+" +k=1"+Uo+u+i+a+t,1,s+c+eo+" +k=1"+Oo+u+i+a+t,1,s+c+hf+" +k=1"+Po+u+i+a+t,1,s+c+Io+" +k=1"+Ln+u+i+a+t,1,s+c+bo+" +k=1"+sr+u+i+a+t,1,s+c+io+" +k=1"+In+u+i+a+t,1,s+c+cc+" +k=1"+ar+u+i+a+t,1,s+c+so+" +k=1"+vr+u+i+a+t,1,s+c+_l+" +k=1"+yc+u+i+a+t,1,s+c+ss+" +k=1"+Qc+u+i+a+t,1,s+c+lg+" +k=1"+mc+u+i+a+t,1,s+c+Oa+" +k=1"+kc+u+i+a+t,1,s+c+yr+" +k=1"+xc+u+i+a+t,1,s+c+xa+" +k=1"+Mc+u+i+a+t,1,s+c+Pl+" +k=1"+bc+u+i+a+t,1,s+c+Sa+" +k=1"+Dc+u+i+a+t,1,s+c+Cl+" +k=1"+ou+u+i+a+t,1,s+c+Bs+" +k=1"+vc+u+i+a+t,1,s+c+Er+" +k=1"+ru+u+i+a+t,1,s+c+Ma+" +k=1"+Sc+u+i+a+t,1,s+c+to+" +k=1"+d+u+i+a+t,1,s+c+Qg+" +k=1"+d+u+i+a+t,1,s+c+eo+" +k=1"+d+u+i+a+t,1,s+c+hf+" +k=1"+d+u+i+a+t,1,s+c+Io+" +k=1"+d+u+i+a+t,1,s+c+bo+" +k=1"+d+u+i+a+t,1,s+c+io+" +k=1"+d+u+i+a+t,1,s+c+cc+" +k=1"+d+u+i+a+t,1,s+c+so+" +k=1"+d+u+i+a+t,1,s+c+_l+" +k=1"+d+u+i+a+t,1,s+c+ss+" +k=1"+d+u+i+a+t,1,s+c+lg+" +k=1"+d+u+i+a+t,1,s+c+Oa+" +k=1"+d+u+i+a+t,1,s+c+yr+" +k=1"+d+u+i+a+t,1,s+c+xa+" +k=1"+d+u+i+a+t,1,s+c+Pl+" +k=1"+d+u+i+a+t,1,s+c+Sa+" +k=1"+d+u+i+a+t,1,s+c+Cl+" +k=1"+d+u+i+a+t,1,s+c+Bs+" +k=1"+d+u+i+a+t,1,s+c+Er+" +k=1"+d+u+i+a+t,1,s+c+Ma+" +k=1"+d+u+i+a+t,1,g+f+t,3,g+i+e+t,1,l+On+i+e+a+t,9,s+c+to+" +k=1"+no+u+f+a+t,1,s+c+eo+" +k=1"+Fn+u+f+a+t,1,s+c+Io+" +k=1"+Go+u+f+a+t,1,s+c+io+" +k=1"+No+u+f+a+t,1,s+c+so+" +k=1"+Dr+u+f+a+t,1,s+c+ss+" +k=1"+vo+u+f+a+t,1,s+c+Oa+" +k=1"+So+u+f+a+t,1,s+c+xa+" +k=1"+oo+u+f+a+t,1,s+c+Sa+" +k=1"+Ro+u+f+a+t,1,s+c+Bs+" +k=1"+ro+u+f+a+t,1,s+c+Ma+" +k=1"+Fo+u+f+a+t,1,s+c+to+" +k=1"+d+u+f+a+t,1,s+c+eo+" +k=1"+d+u+f+a+t,1,s+c+Io+" +k=1"+d+u+f+a+t,1,s+c+io+" +k=1"+d+u+f+a+t,1,s+c+so+" +k=1"+d+u+f+a+t,1,s+c+ss+" +k=1"+d+u+f+a+t,1,s+c+Oa+" +k=1"+d+u+f+a+t,1,s+c+xa+" +k=1"+d+u+f+a+t,1,s+c+Sa+" +k=1"+d+u+f+a+t,1,s+c+Bs+" +k=1"+d+u+f+a+t,1,s+c+Ma+" +k=1"+d+u+f+a+t,11,g+b+t,1,g+b+k_+t,1,g+b+x_+t,1,g+b+M_+t,1,g+b+b_+t,1,g+b+pC+t,1,g+b+f_+t,1,g+b+Id+t,1,g+R+t,1,g+R+t,1,g+JA+D+t,1,g+_+dl+t,1,g+i+e+t,1,g+m+_o+t,1,g+_+Gl+t,1,g+_+Qp+t,1,g+_+p_+t,1,g+i+e+t,1,g+W+FA+t,1,g+i+e+t,1,g+b+" +towgs84=-106,-129,165,0,0,0,0"+t,1,g+_+__+t,1,g+_+mp+t,1,g+_+Fc+t,1,g+i+e+t,1,g+_+S_+t,1,g+_+bp+t,1,g+i+e+t,1,g+_+G_+t,1,g+_+Eg+t,1,g+_+CC+t,2,g+_+kp+t,1,g+_+Fd+t,3,g+_+" +towgs84=365,194,166,0,0,0,0"+t,1,g+_+" +towgs84=325,154,172,0,0,0,0"+t,1,g+R+J_+t,1,g+_+xp+t,2,g+_+ul+t,1,g+_+C_+t,1,g+_+gh+t,1,g+_+Kn+t,2,g+_+Mp+t,1,s+c+Fl+uA+ar+u+i+e+a+t,5,s+c+to+" +k=1"+Lo+u+f+a+t,1,s+c+Qg+" +k=1"+Uo+u+f+a+t,1,s+c+eo+" +k=1"+Oo+u+f+a+t,1,s+c+hf+" +k=1"+Po+u+f+a+t,1,s+c+Io+" +k=1"+Ln+u+f+a+t,1,g+" +a=6377019.27 +b=6355762.5391 +towgs84=-28,199,5,0,0,0,0"+t,1,g+_+cl+t,1,g+i+e+t,1,g+_+Nl+t,1,g+i+e+t,1,g+_+Zd+t,1,g+_+Nu+t,1,g+_+pd+t,1,g+_+Zu+t,1,g+m+$u+t,1,g+F+e+t,1,g+_+" +towgs84=-86,-98,-119,0,0,0,0"+t,1,g+i+e+t,1,g+F+e+t,1,g+CA+ht+t,1,g+_+L_+t,1,g+_+pf+t,1,g+i+e+t,1,g+R+" +towgs84=-100,-248,259,0,0,0,0"+t,1,g+f+t,1,g+f+t,1,g+f+" +towgs84=44.585,-131.212,-39.544,0,0,0,0"+t,1,g+b+" +towgs84=-80.01,253.26,291.19,0,0,0,0"+t,1,g+b+" +towgs84=124.5,-63.5,-281,0,0,0,0"+t,2,g+Kt+VA+xI+t,1,g+R+Bt+t,1,g+_+" +towgs84=-133,-321,50,0,0,0,0"+t,2,g+i+e+t,1,g+i+Rt+t,1,g+_+lh+t,1,g+_+wg+t,1,g+_+fh+t,1,g+_+uh+t,1,g+_+Ld+t,1,g+F+w_+t,1,g+F+e+t,1,g+R+pe+t,1,g+b+t,1,g+b+t,1,g+_+E_+t,1,g+b+tI+t,1,g+b+t,1,g+b+An+t,1,g+i+e+t,1,g+b+t,1,g+_+t,1,g+_+t,1,g+xn+eI+t,1,g+_+" +towgs84=114,-116,-333,0,0,0,0"+t,1,g+W+" +towgs84=-491,-22,435,0,0,0,0"+t,1,g+_+" +towgs84=145,75,-272,0,0,0,0"+t,1,g+_+" +towgs84=-320,550,-494,0,0,0,0"+t,1,g+_+" +towgs84=124,-234,-25,0,0,0,0"+t,1,g+_+" +towgs84=-205,107,53,0,0,0,0"+t,1,g+b+" +towgs84=-79,-129,145,0,0,0,0"+t,1,g+_+" +towgs84=-127,-769,472,0,0,0,0"+t,1,g+_+" +towgs84=-104,-129,239,0,0,0,0"+t,1,g+_+" +towgs84=298,-304,-375,0,0,0,0"+t,1,g+R+" +towgs84=-2,151,181,0,0,0,0"+t,1,g+_+" +towgs84=230,-199,-752,0,0,0,0"+t,1,g+_+" +towgs84=211,147,111,0,0,0,0"+t,1,g+B+I+t,1,g+_+Pr+t,1,g+_+" +towgs84=-794,119,-298,0,0,0,0"+t,1,g+R+gg+t,1,g+_+" +towgs84=208,-435,-229,0,0,0,0"+t,1,g+_+" +towgs84=189,-79,-202,0,0,0,0"+t,1,g+R+bg+t,1,g+_+" +towgs84=403,-81,277,0,0,0,0"+t,1,g+_+" +towgs84=-307,-92,127,0,0,0,0"+t,1,g+_+q_+t,1,g+_+" +towgs84=170,42,84,0,0,0,0"+t,2,g+" +a=6378270 +b=6356794.343434343 +towgs84=102,52,-38,0,0,0,0"+t,1,g+_+" +towgs84=276,-57,149,0,0,0,0"+t,1,g+_+" +towgs84=-632,438,-609,0,0,0,0"+t,1,g+_+" +towgs84=647,1777,-1124,0,0,0,0"+t,1,g+b+" +towgs84=260,12,-147,0,0,0,0"+t,1,g+i+e+t,1,g+ws+Es+t,1,g+_+" +towgs84=-156,-271,-189,0,0,0,0"+t,1,g+" +a=6378136 +b=6356751.361745712 +towgs84=0,0,1.5,-0,-0,0.076,0"+t,1,g+_+t,1,g+i+t,1,g+b+gs+t,1,g+b+t,1,g+m+t,1,g+m+t,1,g+i+e+t,1,g+UC+jy+ff+t,1,g+i+e+t,1,g+F+md+t,1,g+Ky+wI+t,1,g+UC+jy+ff+t,1,g+_+t,1,g+_+V+t,1,g+F+e+t,1,g+F+Ra+t,1,g+F+t,1,g+F+e+t,1,g+i+e+t,1,g+fm+t,1,g+i+e+t,1,g+F+e+t,1,g+F+e+t,1,g+i+e+t,1,g+i+e+t,1,s+c+bo+" +k=1"+sr+u+f+a+t,1,s+c+io+" +k=1"+In+u+f+a+t,1,s+c+cc+" +k=1"+ar+u+f+a+t,1,s+c+so+" +k=1"+vr+u+f+a+t,1,s+c+_l+" +k=1"+yc+u+f+a+t,1,s+c+ss+" +k=1"+Qc+u+f+a+t,1,s+c+lg+" +k=1"+mc+u+f+a+t,1,s+c+Oa+" +k=1"+kc+u+f+a+t,1,s+c+yr+" +k=1"+xc+u+f+a+t,1,s+c+xa+" +k=1"+Mc+u+f+a+t,1,s+c+Pl+" +k=1"+bc+u+f+a+t,1,s+c+Sa+" +k=1"+Dc+u+f+a+t,1,s+c+Cl+" +k=1"+ou+u+f+a+t,1,s+c+Bs+" +k=1"+vc+u+f+a+t,1,s+c+Er+" +k=1"+ru+u+f+a+t,1,s+c+Ma+" +k=1"+Sc+u+f+a+t,1,s+c+to+" +k=1"+d+u+f+a+t,1,s+c+Qg+" +k=1"+d+u+f+a+t,1,s+c+eo+" +k=1"+d+u+f+a+t,1,s+c+hf+" +k=1"+d+u+f+a+t,1,s+c+Io+" +k=1"+d+u+f+a+t,1,s+c+bo+" +k=1"+d+u+f+a+t,1,s+c+io+" +k=1"+d+u+f+a+t,1,s+c+cc+" +k=1"+d+u+f+a+t,1,s+c+so+" +k=1"+d+u+f+a+t,1,s+c+_l+" +k=1"+d+u+f+a+t,1,s+c+ss+" +k=1"+d+u+f+a+t,1,s+c+lg+" +k=1"+d+u+f+a+t,1,s+c+Oa+" +k=1"+d+u+f+a+t,1,s+c+yr+" +k=1"+d+u+f+a+t,1,s+c+xa+" +k=1"+d+u+f+a+t,1,s+c+Pl+" +k=1"+d+u+f+a+t,1,s+c+Sa+" +k=1"+d+u+f+a+t,1,s+c+Cl+" +k=1"+d+u+f+a+t,1,s+c+Bs+" +k=1"+d+u+f+a+t,1,g+m+Cn+" +pm=bern"+t,1,g+_+ls+" +pm=bogota"+t,1,g+_+cs+GQ+t,1,g+m+go+Yu+t,1,g+m+KA+yg+t,1,g+_+ae+" +pm=rome"+t,1,g+CA+ht+Gt+kg+t,1,g+m+Yu+t,1,g+_+" +pm=brussels"+t,1,g+_+Jn+kg+t,1,g+CA+ht+Or+kg+t,1,s+c+Er+" +k=1"+d+u+f+a+t,0,s+c+Er+" +k=1"+d+u+f+a+t,1,g+m+De+Yu+t,1,g+m+" +pm=stockholm"+t,1,g+m+" +pm=athens"+t,1,g+CA+ht+En+kg+t,1,g+ko+es+mA+Gp+t,1,g+m+wn+yg+t,2,g+m+_o+Yu+t,1,g+CA+ht+kg+t,1,s+c+Ma+" +k=1"+d+u+f+a+t,1,g+_+t,1,g+_+t,2,r+" +lat_1=15 +lat_2=16.66666666666667 +lat_0=15.83333333333333 +lon_0=-24 +x_0=161587.83 +y_0=128511.202"+C+a+t,13,r+Ew+yw+kC+dy+z+u+i+e+a+t,62,g+" +a=6376523"+EI+_Q+t,2,g+tm+BI+" +pm=madrid"+t,1,g+m+$u+GQ+t,109,g+i+e+t,1,l+Cf+i+e+a+t,1,l+_u+i+e+a+t,1,l+ll+i+e+a+t,2,s+wt+TC+" +k=1"+z+u+_+cs+a+t,23,ct+Do+rI+$n+XI+kt+Se+C+a+t,1,ct+O+" +lat_ts=-90"+$n+XI+kt+Se+C+a+t,6,l+dh+i+e+a+t,21,ci+jp+Qo+oQ+$f+z+u+Q+a+t,1,ci+jp+Qo+oQ+$f+z+u+i+e+a+t,1,ci+jp+Qo+oQ+$f+z+u+i+e+a+t,1,ci+jp+Qo+oQ+$f+z+u+i+e+a+t,33,s+ma+" +lon_0=5.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=6.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=7.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=8.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=9.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+dy+" +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=11.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=12.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=13.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=14.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=15.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+cy+" +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=17.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=18.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=19.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=20.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=21.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=22.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=23.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=24.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=25.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=26.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=27.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=28.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=29.5 +k=1"+pt+nA+i+e+a+t,1,s+ma+" +lon_0=30.5 +k=1"+pt+nA+i+e+a+t,2,g+m+t,35,s+Me+Zc+" +k=1"+N+bA+m+a+t,1,s+Me+fp+" +k=1"+N+" +y_0=550000"+m+a+t,1,s+Me+up+" +k=1"+N+bA+m+a+t,1,s+Me+fp+" +k=1"+N+bA+m+a+t,1,s+Me+Bs+" +k=1"+N+bA+m+a+t,1,s+Me+Zc+" +k=1"+N+bA+m+a+t,1,s+Me+" +lon_0=125.0028902777778 +k=1"+N+bA+m+a+t,1,s+Me+Qw+" +k=1"+N+bA+m+a+t,1,s+Me+Qw+" +k=1"+N+" +y_0=550000"+m+a+t,1,s+Me+" +lon_0=129.0028902777778 +k=1"+N+bA+m+a+t,1,s+Me+" +lon_0=131.0028902777778 +k=1"+N+bA+m+a+t,1,s+Me+od+uA+Et+Se+m+a+t,1,s+Me+od+uA+Et+Se+i+e+a+t,1,s+Me+up+" +k=1"+N+bA+i+e+a+t,1,s+Me+fp+" +k=1"+N+bA+i+e+a+t,1,s+Me+fp+" +k=1"+N+" +y_0=550000"+i+e+a+t,1,s+Me+Bs+" +k=1"+N+bA+i+e+a+t,1,s+Me+Zc+" +k=1"+N+bA+i+e+a+t,1,s+Me+up+" +k=1"+N+lI+i+e+a+t,1,s+Me+fp+" +k=1"+N+lI+i+e+a+t,1,s+Me+Bs+" +k=1"+N+lI+i+e+a+t,1,s+Me+Zc+" +k=1"+N+lI+i+e+a+t,33,lp+Up+" +lon_0=42.5"+ph+E+z+u+m+wn+yg+a+t,2,s+c+jo+uA+d+bA+C+a+t,5,g+m+Dg+t,1,g+m+Dg+yg+t,4,g+Kt+VA+ch+t,1,s+" +lat_0=7.000480277777778 +lon_0=80.77171111111112 +k=0.9999238418"+N+Vo+Kt+VA+z_+a+t,1,s+" +lat_0=7.000471527777778 +lon_0=80.77171308333334 +k=0.9999238418"+d+bA+Kt+VA+ch+a+t,8,r+Ew+yw+kC+dy+z+u+i+e+a+t,3,g+i+t,1,de+sI+aQ+Qm+ad+z+u+Ol+Ir+i+a+t,5,g+i+e+t,1,s+c+Ao+" +k=1"+d+u+i+e+a+t,1,s+c+gr+" +k=1"+d+u+i+e+a+t,1,s+c+zo+" +k=1"+d+u+i+e+a+t,1,s+c+Ou+" +k=1"+d+u+i+e+a+t,1,s+c+jh+" +k=1"+d+u+i+e+a+t,1,s+c+Pu+" +k=1"+d+u+i+e+a+t,1,s+c+tl+" +k=1"+d+u+i+e+a+t,5,g+i+e+t,2,s+c+bo+" +k=1"+qt+u+i+e+a+t,3,s+c+Ao+" +k=1"+Wg+u+i+e+a+t,1,s+c+gr+" +k=1"+ig+u+i+e+a+t,1,s+c+zo+" +k=1"+Ql+u+i+e+a+t,1,s+c+Ou+" +k=1"+sg+u+i+e+a+t,1,s+c+jh+" +k=1"+no+u+i+e+a+t,1,s+c+Pu+" +k=1"+Fn+u+i+e+a+t,1,s+c+tl+" +k=1"+Go+u+i+e+a+t,17,s+c+" +lon_0=90.73333333333333 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=89.55 +k=1"+qt+fi+i+e+a+t,1,s+c+mw+" +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=90.03333333333333 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=90.15000000000001 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=91.13333333333334 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=91.23333333333333 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=89.34999999999999 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=91.34999999999999 +k=1"+qt+fi+i+e+a+t,1,s+c+mw+" +k=1"+qt+fi+i+e+a+t,1,s+c+kw+" +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=89.06666666666666 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=90.26666666666667 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=89.55 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=91.75 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=90.5 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=90.16666666666667 +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=90.11666666666666 +k=1"+qt+fi+i+e+a+t,1,s+c+kw+" +k=1"+qt+fi+i+e+a+t,1,s+c+" +lon_0=90.86666666666666 +k=1"+qt+fi+i+e+a+t,5,s+c+" +lon_0=-7 +k=0.999997"+N+" +y_0=-6000000"+i+e+a+t,4,r+Iy+" +lat_2=54.5"+c+Wc+Et+u+i+e+a+t,1,r+Iy+" +lat_2=54.5"+c+Wc+Et+u+i+e+a+t,3,g+i+e+t,1,r+" +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19"+Dl+yo+i+e+a+t,4,il+Mu+wQ+ld+gI+m+_o+Yu+a+t,1,il+Mu+wQ+ld+gI+m+De+Yu+a+t,1,il+Mu+wQ+ld+gI+m+go+Yu+a+t,6,l+Cf+T+_+Cs+a+t,3,g+i+e+t,3,s+O+SC+" +k=1"+BA+u+i+e+a+t,1,s+O+jg+" +k=1"+be+u+i+e+a+t,1,s+O+ed+" +k=1"+Lt+u+i+e+a+t,1,s+O+nI+" +k=1"+ri+u+i+e+a+t,1,s+O+NC+" +k=1"+ys+u+i+e+a+t,1,s+O+NQ+" +k=1"+Ml+u+i+e+a+t,1,s+O+ef+" +k=1"+Xo+u+i+e+a+t,5,g+i+e+t,1,l+On+T+i+e+a+t,1,l+wo+T+i+e+a+t,1,l+Ho+T+i+e+a+t,3,g+i+e+t,1,l+wo+T+i+e+a+t,1,l+To+T+i+e+a+t,3,g+F+e+t,2,s+c+Wc+E+d+u+F+e+a+t,4,g+i+e+t,2,g+i+e+t,8,g+F+e+t,1,l+Ho+T+F+e+a+t,1,l+mr+T+F+e+a+t,4,l+To+T+i+e+a+t,2,l+wo+T+i+e+a+t,4,g+i+e+t,3,l+_u+T+i+e+a+t,55,g+R+Ut+t,5,r+" +lat_1=10.46666666666667 +lat_0=10.46666666666667 +lon_0=-84.33333333333333 +k_0=0.99995696"+d+" +y_0=271820.522"+R+Ut+a+t,1,r+" +lat_1=9 +lat_0=9"+HC+" +k_0=0.99995696"+d+" +y_0=327987.436"+R+Ut+a+t,2,r+" +lat_1=14.9 +lat_0=14.9"+jt+" +k_0=0.99989906"+d+" +y_0=325992.681"+R+Ut+a+t,1,r+" +lat_1=13.78333333333333 +lat_0=13.78333333333333 +lon_0=-89 +k_0=0.99996704"+d+" +y_0=295809.184"+R+Ut+a+t,1,r+" +lat_1=13.86666666666667 +lat_0=13.86666666666667"+sC+" +k_0=0.99990314"+d+" +y_0=359891.816"+R+Ut+a+t,1,r+" +lat_1=11.73333333333333 +lat_0=11.73333333333333"+sC+" +k_0=0.9999222800000001"+d+" +y_0=288876.327"+R+Ut+a+t,1,l+wr+W+FA+a+t,1,g+ws+Es+t,3,g+R+t,2,r+" +lat_1=8.416666666666666 +lat_0=8.416666666666666 +lon_0=-80 +k_0=0.99989909"+d+" +y_0=294865.303"+R+a+t,3,FC+" +lat_0=8.25"+ce+" +x_0=914391.7962 +y_0=999404.7217154861"+R+" +to_meter=0.9143917962"+t,7,r+GA+NA+" +lat_0=-78 +lon_0=163"+aC+bl+i+e+a+t,1,r+" +lat_1=-73.66666666666667"+QA+" +lat_0=-74.5"+Af+eg+va+i+e+a+t,1,r+" +lat_1=-70.66666666666667 +lat_2=-72.33333333333333 +lat_0=-71.5"+MQ+gm+nA+i+e+a+t,1,ct+O+" +lat_ts=-90"+_p+XI+eg+nA+i+e+a+t,7,g+i+e+t,1,l+On+i+e+a+t,23,lp+Up+xw+ph+E+z+u+m+wn+a+t,1,lp+Up+xw+ph+E+z+u+m+wn+a+t,4,s+SQ+A_+" +k=1"+hI+" +y_0=650000"+_+L_+a+t,1,s+SQ+A_+" +k=1"+hI+" +y_0=650000"+_+pf+a+t,1,s+c+pu+" +k=1"+BA+u+m+tA+a+t,3,s+c+" +lon_0=11.5"+uA+BA+is+C+a+t,1,g+_+t,3,g+W+ot+t,3,FC+c+ef+eg+RA+W+ot+a+t,1,l+Ho+T+W+ot+a+t,2,l+Sg+T+W+ot+a+t,1,l+mf+T+W+ot+a+t,1,l+Cf+T+W+ot+a+t,1,l+Ho+T+_+a+t,1,l+mr+T+_+a+t,1,l+Sg+T+_+a+t,1,l+mf+T+_+a+t,7,g+i+e+t,4,l+yf+T+i+e+a+t,1,l+Uu+T+i+e+a+t,1,l+ZI+T+i+e+a+t,7,r+" +lat_1=16.81666666666667 +lat_0=16.81666666666667"+jt+" +k_0=0.99992226"+d+" +y_0=292209.579"+R+Ut+a+t,2,g+f+gt+t,1,s+c+mn+" +k=1"+ri+u+f+gt+a+t,1,s+c+Ao+" +k=1"+ys+u+f+gt+a+t,1,s+c+zo+" +k=1"+Ml+u+f+gt+a+t,1,s+c+jh+" +k=1"+Xo+u+f+gt+a+t,1,s+c+mn+" +k=1"+d+u+f+gt+a+t,1,s+c+Ao+" +k=1"+d+u+f+gt+a+t,1,s+c+zo+" +k=1"+d+u+f+gt+a+t,1,s+c+jh+" +k=1"+d+u+f+gt+a+t,19,rn+xr+em+Op+kA+" +y_0=304800"+Q+j+t,1,s+" +lat_0=17.06124194444444 +lon_0=-88.6318575 +k=1 +x_0=66220.02833082761 +y_0=135779.5099885299"+ws+Es+Hg+t,4,g+i+e+t,3,s+c+" +lon_0=11.33333333333333 +k=1"+Et+u+i+e+a+t,27,s+ba+HC+" +k=0.999942857"+v+u+Q+h+t,1,s+ba+ds+mo+v+u+Q+h+t,1,s+ba+" +lon_0=-88.75"+mo+v+u+Q+h+t,2,s+c+BQ+uA+d+u+_+P+a+t,2,l+rl+T+F+Zl+a+t,2,s+c+Fl+" +k=1"+be+u+f+M+a+t,1,r+eQ+Yd+ju+mg+$h+HI+i+e+a+t,1,po+ju+mg+JI+qI+i+e+a+t,1,r+eQ+Yd+ju+mg+$h+HI+i+e+a+t,1,po+ju+mg+JI+qI+i+e+a+t,1,po+ju+mg+JI+qI+i+e+a+t,1,r+eQ+Yd+ju+mg+$h+HI+i+e+a+t,1,po+ju+mg+JI+qI+i+e+a+t,1,r+eQ+Yd+ju+mg+$h+HI+i+e+a+t,2,il+" +lon_0=-43 +lat_ts=-2"+eg+RA+i+e+a+t,2,r+" +lat_1=52.66666666666666 +lat_2=54.33333333333334 +lat_0=48"+mg+" +x_0=815000"+u+_+P+a+t,1,l+Vr+T+i+e+a+t,2,s+Da+tg+Lr+aA+u+i+e+h+t,3,s+c+pu+uA+In+u+i+e+a+t,1,s+c+yn+uA+vr+u+i+e+a+t,1,s+c+pu+uA+In+u+i+e+a+t,1,s+c+Fl+uA+ar+u+i+e+a+t,1,s+c+yn+uA+vr+u+i+e+a+t,1,s+Da+tg+Lr+aA+u+i+e+h+t,1,s+Da+tg+Lr+aA+u+i+e+h+t,4,s+c+Fl+uA+" +x_0=500053 +y_0=-3999820"+_+ae+a+t,4,s+c+yn+" +k=1"+Lt+u+f+M+a+t,1,s+c+Fl+" +k=1"+be+u+f+HA+a+t,1,s+c+yn+" +k=1"+Lt+u+f+HA+a+t,1,s+c+Fl+" +k=1"+Lt+u+m+a+t,1,s+c+jo+" +k=1"+ri+u+m+a+t,1,s+c+jo+" +k=1"+ri+u+m+a+t,1,s+c+yn+" +k=1"+ys+u+m+a+t,1,s+c+Fl+" +k=1"+Lt+u+f+M+a+t,1,s+c+jo+" +k=1"+ri+u+f+M+a+t,1,s+c+yn+" +k=1"+ys+u+f+M+a+t,1,s+c+Fl+" +k=1"+Lt+u+f+HA+a+t,1,s+c+jo+" +k=1"+ri+u+f+HA+a+t,1,s+c+yn+" +k=1"+ys+u+f+HA+a+t,1,s+c+BQ+" +k=1"+be+u+m+tA+a+t,1,s+c+Fl+" +k=1"+Lt+u+m+tA+a+t,1,s+c+jo+" +k=1"+ri+u+m+tA+a+t,1,s+c+yn+" +k=1"+ys+u+m+tA+a+t,1,s+c+pu+" +k=1"+BA+u+m+tA+a+t,1,g+m+t,1,s+c+BQ+" +k=1"+be+u+m+a+t,1,s+c+Fl+" +k=1"+Lt+u+m+a+t,1,s+c+jo+" +k=1"+ri+u+m+a+t,1,s+c+yn+" +k=1"+ys+u+m+a+t,15,l+Dp+T+i+e+a+t,125,s+" +lat_0=-35.31773627777778 +lon_0=149.0092948305555 +k=1.000086"+N+lI+W+q+a+t,11,l+Ul+F+e+a+t,1,l+oc+F+e+a+t,2,l+wr+T+i+e+a+t,3,s+c+jo+uA+d+RA+C+a+t,2,s+c+gr+E+d+RA+i+e+a+t,14,l+mr+T+W+ot+a+t,17,l+To+T+W+ot+a+t,1,l+wo+T+W+ot+a+t,1,l+On+T+W+ot+a+t,2,l+rl+T+_+Ru+a+t,1,FC+c+ef+eg+RA+i+e+a+t,6,g+i+t,1,s+c+Hl+uA+BA+bl+i+a+t,3,ct+Do+" +lat_ts=70"+bo+" +k=1"+z+u+vQ+ep+a+t,31,r+rQ+Yo+_r+zl+z+u+C+a+t,1,r+rQ+Yo+_r+RC+z+u+C+a+t,1,r+rQ+Yo+_r+zo+z+u+C+a+t,1,r+rQ+Yo+_r+ss+z+u+C+a+t,1,r+rQ+Yo+_r+Tl+z+u+C+a+t,1,r+fr+lQ+Cr+zl+z+u+C+a+t,1,r+fr+lQ+Cr+RC+z+u+C+a+t,1,r+fr+lQ+Cr+zo+z+u+C+a+t,1,r+fr+lQ+Cr+ss+z+u+C+a+t,1,r+fr+lQ+Cr+Tl+z+u+C+a+t,1,r+hQ+gQ+Br+zl+z+u+C+a+t,1,r+hQ+gQ+Br+RC+z+u+C+a+t,1,r+hQ+gQ+Br+zo+z+u+C+a+t,1,r+hQ+gQ+Br+ss+z+u+C+a+t,1,r+hQ+gQ+Br+Tl+z+u+C+a+t,1,ct+Do+rI+Tf+XI+kt+Se+C+a+t,1,ct+Do+rI+fe+XI+kt+Se+C+a+t,1,ct+Do+rI+" +lon_0=-33"+XI+kt+Se+C+a+t,1,ct+Do+rI+Td+XI+kt+Se+C+a+t,1,ct+Do+rI+ss+XI+kt+Se+C+a+t,110,r+xC+co+fo+" +lon_0=-30"+Lo+li+i+e+a+t,1,r+me+ke+xe+" +lon_0=-52"+vo+qr+i+e+a+t,1,r+me+ke+xe+" +lon_0=-12"+oo+qr+i+e+a+t,1,r+Mt+Yo+bt+jg+Ln+Zo+i+e+a+t,1,r+Mt+Yo+bt+RC+In+Zo+i+e+a+t,1,r+Mt+Yo+bt+" +lon_0=-10"+vr+Zo+i+e+a+t,1,r+fr+rt+lt+" +lon_0=-64"+oo+dn+i+e+a+t,1,r+fr+rt+lt+RC+ro+dn+i+e+a+t,1,r+fr+rt+lt+" +lon_0=-14"+ag+dn+i+e+a+t,1,r+IA+pA+_A+Vc+Dc+is+i+e+a+t,1,r+IA+pA+_A+" +lon_0=-42"+vc+is+i+e+a+t,1,r+IA+pA+_A+" +lon_0=-22"+Sc+is+i+e+a+t,1,r+ie+Zf+se+RQ+Uo+zr+i+e+a+t,1,r+ie+Zf+se+" +lon_0=-38"+Po+zr+i+e+a+t,1,r+ie+Zf+se+" +lon_0=-20"+sr+zr+i+e+a+t,1,r+" +lat_1=67"+Mw+bw+" +lon_0=-51"+Ql+rm+i+e+a+t,1,r+" +lat_1=67"+Mw+bw+" +lon_0=-34"+no+rm+i+e+a+t,1,r+Dw+vw+Sw+" +lon_0=-52"+oo+" +y_0=8500000"+i+e+a+t,1,r+Dw+vw+Sw+" +lon_0=-37"+ro+" +y_0=8500000"+i+e+a+t,1,r+me+ke+xe+" +lon_0=16"+ro+qr+i+e+a+t,1,r+Mt+Yo+bt+mn+Ql+Zo+i+e+a+t,1,r+fr+rt+lt+mg+Uo+dn+i+e+a+t,1,r+fr+rt+lt+cQ+Po+dn+i+e+a+t,1,r+IA+pA+_A+" +lon_0=14"+Ql+is+i+e+a+t,1,r+IA+pA+_A+cQ+no+is+i+e+a+t,1,r+me+ke+xe+" +lon_0=53"+ag+qr+C+a+t,1,r+me+ke+xe+io+Uo+qr+C+a+t,1,r+Mt+Yo+bt+" +lon_0=52"+no+Zo+C+a+t,1,r+Mt+Yo+bt+" +lon_0=83"+Go+Zo+C+a+t,1,r+Mt+Yo+bt+yr+Dr+Zo+C+a+t,1,r+Mt+Yo+bt+" +lon_0=145"+So+Zo+C+a+t,1,r+fr+rt+lt+" +lon_0=58"+sr+dn+C+a+t,1,r+fr+rt+lt+" +lon_0=82"+ar+dn+C+a+t,1,r+fr+rt+lt+EQ+yc+dn+C+a+t,1,r+fr+rt+lt+" +lon_0=130"+mc+dn+C+a+t,1,r+fr+rt+lt+yQ+xc+dn+C+a+t,1,r+fr+rt+lt+" +lon_0=179"+bc+dn+C+a+t,1,r+IA+pA+_A+Lp+Go+is+C+a+t,1,r+IA+pA+_A+" +lon_0=74"+Dr+is+C+a+t,1,r+IA+pA+_A+" +lon_0=95"+So+is+C+a+t,1,r+IA+pA+_A+" +lon_0=116"+Ro+is+C+a+t,1,r+IA+pA+_A+" +lon_0=137"+Fo+is+C+a+t,1,r+IA+pA+_A+" +lon_0=158"+Lo+is+C+a+t,1,r+IA+pA+_A+" +lon_0=179"+Oo+is+C+a+t,1,r+IA+pA+_A+" +lon_0=-163"+Ln+is+i+e+a+t,1,r+IA+pA+_A+fI+In+is+i+e+a+t,1,r+ie+Zf+se+Jp+Fn+zr+i+e+a+t,1,r+ie+Zf+se+fI+No+zr+i+e+a+t,1,r+xC+co+fo+Jt+Fo+li+i+e+a+t,1,r+me+ke+xe+zp+Fn+qr+i+e+a+t,1,r+me+ke+xe+GC+No+qr+i+e+a+t,1,r+Mt+Yo+bt+xy+Lo+Zo+i+e+a+t,1,r+Mt+Yo+bt+pl+Oo+Zo+i+e+a+t,1,r+Mt+Yo+bt+jg+Ln+Zo+i+e+a+t,1,r+fr+rt+lt+xy+Fn+dn+i+e+a+t,1,r+fr+rt+lt+" +lon_0=-104"+No+dn+i+e+a+t,1,r+fr+rt+lt+Xc+vo+dn+i+e+a+t,1,r+IA+pA+_A+" +lon_0=-131"+vr+is+i+e+a+t,1,r+IA+pA+_A+zl+Qc+is+i+e+a+t,1,r+IA+pA+_A+" +lon_0=-91"+kc+is+i+e+a+t,1,r+IA+pA+_A+" +lon_0=-71"+Mc+is+i+e+a+t,1,r+ie+Zf+se+" +lon_0=-132"+vo+zr+i+e+a+t,1,r+ie+Zf+se+" +lon_0=-113"+oo+zr+i+e+a+t,1,r+ie+Zf+se+tf+ro+zr+i+e+a+t,1,r+ie+Zf+se+GC+ag+zr+i+e+a+t,1,r+xC+co+fo+gr+Oo+li+C+a+t,1,r+xC+co+fo+bo+Ln+li+C+a+t,1,r+xC+co+fo+su+In+li+C+a+t,1,r+xC+co+fo+Tf+Ro+li+C+a+t,1,r+me+ke+xe+" +lon_0=133"+Po+qr+C+a+t,1,r+me+ke+xe+MQ+ig+qr+C+a+t,1,r+me+ke+xe+wc+sg+qr+C+a+t,1,r+Mt+Yo+bt+" +lon_0=176"+Ro+Zo+C+a+t,1,r+Mt+Yo+bt+py+Fo+Zo+C+a+t,1,r+fr+rt+lt+" +lon_0=-155"+sg+dn+C+a+t,1,r+IA+pA+_A+" +lon_0=-5"+IQ+is+i+e+a+t,3,l+wr+R+gg+j+t,1,l+wr+R+bg+j+t,6,g+i+e+t,69,s+c+mn+E+d+u+m+KA+a+t,3,g+Kt+VA+" +towgs84=293.17,726.18,245.36,0,0,0,0"+t,3,l+Sg+i+e+a+t,1,l+mf+i+e+a+t,96,r+hn+gn+cn+Ta+N+Vo+i+a+t,4,g+F+hh+t,1,s+c+zo+he+N+" +y_0=-3500000"+F+hh+a+t,4,s+c+mn+E+Xo+u+m+KA+a+t,2,g+i+t,4,g+i+t,3,g+i+t,3,l+_f+i+a+t,1,l+Lu+i+a+t,1,l+Dp+i+a+t,1,l+O_+i+a+t,1,l+oy+i+a+t,1,l+H_+i+a+t,1,l+MI+i+a+t,1,l+rp+i+a+t,1,l+bI+i+a+t,1,l+P_+i+a+t,1,l+T_+i+a+t,1,l+Md+i+a+t,1,l+Bf+i+a+t,1,l+wf+i+a+t,1,l+Ef+i+a+t,1,l+Qf+i+a+t,1,l+qc+i+a+t,1,l+zc+i+a+t,1,l+wr+i+a+t,1,l+To+i+a+t,1,l+wo+i+a+t,2,ci+jp+Qo+oQ+$f+z+u+i+a+t,1,r+IA+pA+_A+" +lon_0=-163"+Ln+is+i+a+t,1,r+IA+pA+_A+fI+In+is+i+a+t,1,r+ie+Zf+se+Jp+Fn+zr+i+a+t,1,r+ie+Zf+se+fI+No+zr+i+a+t,1,s+lr+nr+Ad+N+u+i+a+t,1,s+kn+jf+it+x+u+i+a+t,6,r+" +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102"+be+u+i+e+a+t,3,g+i+e+t,1,l+Bf+i+e+a+t,1,l+wf+i+e+a+t,1,l+Ef+i+e+a+t,1,l+Qf+i+e+a+t,1,l+qc+i+e+a+t,1,l+zc+i+e+a+t,1,r+" +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102"+be+u+i+e+a+t,9,s+c+mn+" +k=1"+oA+u+f+Xt+a+t,1,s+c+Ko+" +k=1"+oA+u+f+Xt+a+t,1,s+c+Ao+" +k=1"+oA+u+f+Xt+a+t,1,s+c+gr+" +k=1"+oA+u+f+Xt+a+t,1,s+c+zo+" +k=1"+oA+u+f+Xt+a+t,1,s+c+Ou+" +k=1"+oA+u+f+Xt+a+t,1,s+c+jh+" +k=1"+oA+u+f+Xt+a+t,4,r+" +lat_1=19.33333333333333 +lat_2=19.7 +lat_0=19.33333333333333 +lon_0=-80.56666666666666 +x_0=899160 +y_0=579120"+i+e+j+t,2,ci+" +lat_1=55"+Yd+AQ+wc+z+u+i+a+t,1,de+" +lat_0=57"+xh+Mh+E+eg+as+Ol+fn+i+a+t,1,s+Na+wy+E+d+u+i+a+t,1,s+Na+Ey+E+d+u+i+a+t,1,s+Na+Tf+E+d+u+i+a+t,1,s+Na+wc+E+d+u+i+a+t,1,s+Na+Jl+E+d+u+i+a+t,1,s+Na+yy+E+d+u+i+a+t,1,s+Na+Qy+E+d+u+i+a+t,1,s+Na+Hp+E+d+u+i+a+t,1,r+bh+Dh+kC+my+Et+u+i+a+t,1,s+Nt+Re+E+us+u+i+a+t,1,s+Nt+Re+E+us+u+i+j+t,1,s+Nt+Ne+E+us+u+i+a+t,1,s+Nt+Ne+E+us+u+i+j+t,1,s+Nt+Sr+it+us+u+i+a+t,1,s+Nt+Sr+it+us+u+i+j+t,1,r+Hi+Ji+$A+qo+K+u+i+a+t,1,r+Hi+Ji+$A+qo+zA+u+i+h+t,1,r+qi+Cc+zi+qo+K+br+i+a+t,1,r+qi+Cc+zi+qo+zA+Gn+i+h+t,1,ci+sQ+qp+c+Ec+z+Vd+i+a+t,1,r+di+El+X+Pn+kt+bA+i+a+t,1,r+di+El+X+Pn+xA+eA+i+h+t,1,r+Ii+pi+$+Pn+kt+bA+i+a+t,1,r+Ii+pi+$+Pn+xA+eA+i+h+t,1,r+PA+_i+uc+rA+kt+bA+i+a+t,1,r+PA+_i+uc+rA+xA+eA+i+h+t,1,r+Kh+Hd+Ci+dc+kt+bA+i+a+t,1,r+Kh+Hd+Ci+dc+xA+eA+i+h+t,1,r+Bi+wi+Ic+Mr+kt+bA+i+a+t,1,r+Bi+wi+Ic+Mr+xA+eA+i+h+t,1,r+Ei+yi+Qi+Gr+kt+bA+i+a+t,1,r+Ei+yi+Qi+Gr+xA+eA+i+h+t,1,r+Yh+Vh+Ce+yt+La+Ua+i+a+t,1,r+Yh+Vh+Ce+yt+zt+ne+i+h+t,1,r+Qs+ms+X+yt+La+Ua+i+a+t,1,r+Qs+ms+X+yt+zt+ne+i+h+t,1,r+PA+mi+S+yt+La+Ua+i+a+t,1,r+PA+mi+S+yt+zt+ne+i+h+t,1,r+ki+pc+xi+ml+Dd+vd+i+a+t,1,r+ki+pc+xi+ml+Gg+Ng+i+h+t,1,s+Me+Fe+_c+N+u+i+a+t,1,s+Me+Fe+_c+iA+u+i+h+t,1,s+TA+ce+LA+N+u+i+a+t,1,s+TA+ce+LA+iA+u+i+h+t,1,ci+" +lat_1=24"+uy+" +lat_0=24"+Wc+K+u+i+a+t,1,r+Wh+Mi+Jd+Xh+x+u+i+a+t,1,r+Wh+Mi+Jd+Xh+x+u+i+h+t,1,s+TA+tu+LA+N+u+i+a+t,1,s+TA+tu+LA+iA+u+i+h+t,1,s+kn+Le+E+N+u+i+a+t,1,s+kn+Le+E+iA+u+i+h+t,1,s+kn+Ue+E+fs+u+i+a+t,1,s+kn+Ue+E+oe+u+i+h+t,1,s+H+hl+nt+d+u+i+a+t,1,s+H+hl+nt+sA+u+i+h+t,1,s+H+Oe+nt+N+u+i+a+t,1,s+H+Oe+nt+iA+u+i+h+t,1,s+H+Nr+it+_e+u+i+a+t,1,s+H+Nr+it+Rg+u+i+h+t,1,s+S+je+os+oA+u+i+a+t,1,s+S+je+os+oA+u+i+h+t,1,s+S+Ke+LA+fs+u+i+a+t,1,s+S+Ke+LA+zg+u+i+h+t,1,s+ai+Ye+fA+pt+ql+i+a+t,1,s+ai+Ye+fA+Jg+Va+i+h+t,1,s+ai+Ve+fA+ao+ql+i+a+t,1,s+ai+Ve+fA+ao+Va+i+h+t,1,r+ji+Ki+ba+Ka+BA+nA+i+a+t,1,r+ji+Ki+ba+Ka+BA+Wa+i+h+t,1,r+yA+Yi+Ga+Ka+d+u+i+a+t,1,r+yA+Yi+Ga+Ka+aA+u+i+h+t,1,r+Vi+Wi+dA+ka+K+u+i+a+t,1,r+Vi+Wi+dA+ka+zA+u+i+h+t,1,r+Xi+Zi+S+Ie+K+br+i+a+t,1,r+Xi+Zi+S+Ie+zA+Gn+i+h+t,1,r+WA+ui+ai+yl+d+u+i+a+t,1,r+WA+ui+ai+yl+sA+u+i+h+t,1,r+ya+Qa+AA+ds+BA+nA+i+a+t,1,r+ya+Qa+AA+ds+BA+re+i+h+t,1,r+ks+xs+AA+ds+d+bA+i+a+t,1,r+ks+xs+AA+ds+sA+eA+i+h+t,1,r+oa+ra+lr+Co+Et+u+i+a+t,1,r+oa+ra+lr+Co+_s+u+i+h+t,1,r+Rf+Ff+Lf+vt+Et+u+i+a+t,1,r+Rf+Ff+Lf+vt+_s+u+i+h+t,1,s+By+ip+Tr+d+u+i+a+t,1,s+hA+$I+Tr+fs+u+i+a+t,1,s+At+Ap+Tr+oA+u+i+a+t,1,s+lA+Vn+E+oA+u+i+a+t,1,s+lA+Vn+E+oA+u+i+h+t,1,s+At+We+fA+ao+u+i+a+t,1,s+At+We+fA+ao+u+i+h+t,1,r+Xg+xf+$+rg+K+u+i+a+t,1,r+Xg+xf+$+rg+Fg+u+i+h+t,1,r+bs+Ds+kr+Wo+d+u+i+a+t,1,r+bs+Ds+kr+Wo+sA+u+i+h+t,1,r+Ms+bi+kr+za+N+fc+i+a+t,1,r+Ms+bi+kr+za+iA+fc+i+h+t,1,r+Mf+Ns+Rs+tt+rd+u+i+a+t,1,r+Mf+Ns+Rs+tt+Ug+u+i+j+t,1,r+vs+Ss+Gs+Il+tC+u+i+a+t,1,r+vs+Ss+Gs+Il+Lg+u+i+j+t,1,de+Qh+" +lonc=-86"+Sd+uA+Gd+Wu+Ol+Nd+i+a+t,1,r+Ot+bf+ba+tt+$h+u+i+a+t,1,r+Ot+bf+ba+tt+Kf+u+i+j+t,1,r+ic+ga+Ar+xl+_e+ts+i+a+t,1,r+ic+ga+Ar+xl+UA+OA+i+h+t,1,r+la+ha+xr+Xe+_e+ts+i+a+t,1,r+la+ha+xr+Xe+UA+OA+i+h+t,1,r+ca+fa+gf+tf+_e+ts+i+a+t,1,r+ca+fa+gf+tf+UA+OA+i+h+t,1,s+Eo+Pe+he+oA+u+i+a+t,1,s+Eo+Pe+he+oA+u+i+h+t,1,s+fg+t_+iC+d+hd+i+a+t,1,s+Eo+jt+he+fs+u+i+a+t,1,s+Eo+jt+he+oe+u+i+h+t,1,s+Qe+Co+it+d+u+i+a+t,1,s+Qe+PI+it+qt+u+i+a+t,1,s+ur+TI+LA+hy+u+i+a+t,1,r+zh+SI+Zg+ir+x+u+i+a+t,1,r+zh+SI+Zg+ir+hi+u+i+j+t,1,r+el+El+ua+fe+d+u+i+a+t,2,s+ge+$e+E+d+Bo+i+a+t,1,s+ge+$e+E+aA+Bo+i+h+t,1,s+ge+Ze+E+N+eC+i+a+t,1,s+ge+Ze+E+Nn+qg+i+h+t,1,s+ge+Ai+E+_e+Ag+i+a+t,1,s+ge+Ai+E+UA+Gc+i+h+t,1,s+Da+ti+fA+oA+u+i+a+t,1,s+Da+ti+fA+oA+u+i+h+t,1,s+XA+bn+E+Ft+u+i+a+t,1,s+XA+bn+E+Ft+u+i+h+t,1,s+Nt+Rr+E+d+u+i+a+t,1,s+Nt+Rr+E+sA+u+i+h+t,1,s+Nt+Te+mo+Df+u+i+a+t,1,s+Nt+Te+mo+Df+u+i+h+t,1,s+Nt+He+Fr+gy+u+i+a+t,1,s+Nt+He+Fr+Og+u+i+h+t,1,s+Ga+Je+MA+qt+u+i+a+t,1,s+Ga+Je+MA+Pg+u+i+h+t,1,s+XA+bn+E+Ft+u+i+a+t,1,s+XA+bn+E+Ft+u+i+h+t,1,r+Di+vi+ZA+eu+oA+u+i+a+t,1,r+Di+vi+ZA+eu+oA+u+i+h+t,1,s+Ga+qe+MA+hI+u+i+a+t,1,s+Ga+qe+MA+Tg+u+i+h+t,1,r+Fs+Ls+Zh+Xc+tp+u+i+a+t,1,r+Fs+Ls+Zh+Xc+k+u+i+h+t,1,r+st+Us+cr+Is+x+u+i+a+t,1,r+st+Us+cr+Is+hi+u+i+j+t,1,r+Os+Ps+xt+Is+x+u+i+a+t,1,r+Os+Ps+xt+Is+hi+u+i+j+t,1,r+Uf+da+wt+hs+x+u+i+a+t,1,r+Uf+da+wt+hs+x+u+i+h+t,1,r+Ia+pa+Me+hs+x+u+i+a+t,1,r+Ia+pa+Me+hs+x+u+i+h+t,1,r+Si+Ts+qd+ka+x+u+i+a+t,1,r+Si+Ts+qd+ka+x+u+i+h+t,1,r+Hs+Js+Gi+ka+x+u+i+a+t,1,r+Hs+Js+Gi+ka+x+u+i+h+t,1,r+el+Qo+Ya+rA+K+u+i+a+t,1,r+el+Qo+Ya+rA+og+u+i+j+t,1,r+Tu+Be+lA+rA+be+u+i+a+t,1,r+Tu+Be+lA+rA+jl+u+i+j+t,1,r+Hu+we+H+rA+BA+u+i+a+t,1,r+Hu+we+H+rA+Kl+u+i+j+t,1,r+$g+qs+ZA+ps+x+u+i+a+t,1,r+$g+qs+ZA+ps+x+u+i+h+t,1,r+Ni+Ri+X+ps+x+u+i+a+t,1,r+Ni+Ri+X+ps+x+u+i+h+t,1,r+hn+gn+cn+Ta+N+Vo+i+a+t,1,s+$i+za+ng+pt+u+i+a+t,1,s+$i+za+ng+sl+u+i+h+t,1,r+zs+vf+Fi+ce+Sf+u+i+a+t,1,r+zs+vf+Fi+ce+Sf+u+i+j+t,1,r+_a+Ca+hA+fe+x+u+i+a+t,1,r+_a+Ca+hA+fe+x+u+i+h+t,1,r+Of+Ba+As+vA+x+u+i+a+t,1,r+Of+Ba+As+vA+x+u+i+h+t,1,r+js+Ac+$A+Kg+x+u+i+a+t,1,r+js+Ac+$A+Kg+x+u+i+h+t,1,r+Ws+Xs+Ee+vA+fs+va+i+a+t,1,r+Ws+Xs+Ee+vA+oe+va+i+h+t,1,ci+Pf+FI+Xf+fe+BA+Bo+i+a+t,1,r+Pf+FI+Xf+fe+BA+bl+i+a+t,1,r+Ks+tc+zd+kl+N+nA+i+a+t,1,r+Ks+tc+zd+kl+iA+re+i+h+t,1,r+Ys+Vs+Li+Ie+x+Se+i+a+t,1,r+Ys+Vs+Li+Ie+x+vn+i+h+t,1,r+Zt+$t+ye+Ie+oA+bl+i+a+t,1,r+Zt+$t+ye+Ie+oA+of+i+h+t,1,r+Zs+$s+Ui+pl+x+Ag+i+a+t,1,r+Zs+$s+Ui+pl+x+nf+i+h+t,1,s+Da+tg+Lr+d+u+i+a+t,1,s+Da+tg+Lr+aA+u+i+h+t,1,r+" +lat_1=37"+ky+$a+un+z+u+i+a+t,1,r+Gf+Aa+$+ja+Lt+Se+i+a+t,1,r+Gf+Aa+$+ja+Sn+vn+i+h+t,1,r+WA+Oi+AA+ja+Lt+nA+i+a+t,1,r+WA+Oi+AA+ja+Sn+re+i+h+t,1,r+st+Nf+cr+ze+d+u+i+a+t,1,r+st+Nf+cr+ze+sA+u+i+h+t,1,r+ta+ea+Pi+rA+d+u+i+a+t,1,r+ta+ea+Pi+rA+sA+u+i+h+t,1,r+sc+RI+Bc+un+x+u+i+a+t,1,r+sc+RI+Bc+un+x+u+i+h+t,1,r+wa+Ea+Kd+ce+x+u+i+a+t,1,r+wa+Ea+Kd+ce+x+u+i+h+t,2,r+gl+ec+hA+Jt+x+u+i+h+t,1,r+ia+sa+Ti+Jt+x+u+i+a+t,1,r+ia+sa+Ti+Jt+x+u+i+h+t,1,r+aa+na+Ju+Jt+x+u+i+a+t,1,r+aa+na+Ju+Jt+x+u+i+h+t,1,s+c+Jt+uA+fy+$p+i+a+t,1,s+Vt+ei+MA+N+u+i+a+t,1,s+Vt+ei+MA+Nn+u+i+h+t,1,s+Vt+ii+MA+K+ts+i+a+t,1,s+Vt+ii+MA+zA+OA+i+h+t,1,s+Vt+si+MA+_e+ts+i+a+t,1,s+Vt+si+MA+UA+OA+i+h+t,1,s+Vt+Ur+MA+x+u+i+a+t,1,s+Vt+Ur+MA+x+u+i+h+t,1,r+Hr+te+dA+at+d+Se+i+a+t,1,r+yA+Ae+Pt+at+d+nA+i+a+t,1,r+Jr+ee+S+at+d+va+i+a+t,1,r+wC+lf+hr+Vn+z+u+i+e+a+t,1,ci+wC+lf+hr+Vn+z+u+i+e+a+t,1,ci+wC+lf+hr+Vn+z+u+i+e+a+t,1,r+Hr+te+dA+at+aA+Nc+i+h+t,1,r+yA+Ae+Pt+at+aA+Wa+i+h+t,1,r+Jr+ee+S+at+aA+va+i+h+t,1,s+Bh+Xp+fA+d+u+i+a+t,1,s+wh+Vl+fA+d+u+i+a+t,1,s+ln+Jl+Bl+d+u+i+a+t,1,s+Eh+Zp+Bl+d+u+i+a+t,1,s+yh+Wl+" +k=1"+d+u+i+a+t,1,s+ln+Jl+Bl+aA+u+i+h+t,1,l+H_+i+a+t,1,l+MI+i+a+t,1,l+O_+T+i+a+t,1,s+" +lat_0=13.5 +lon_0=144.75 +k=1"+pt+Vo+i+a+t,9,s+ww+" +lon_0=46.5 +k=0.9994"+_e+u+mt+_n+gs+a+t,22,g+i+t,1,s+zu+im+E+z+u+i+a+t,1,s+zu+Zc+E+z+u+i+a+t,1,s+$a+yu+E+z+u+i+a+t,1,s+zu+AC+E+z+u+i+a+t,1,s+$a+Qu+E+z+u+i+a+t,1,s+$a+Ip+E+z+u+i+a+t,1,s+$a+mu+E+z+u+i+a+t,1,s+$a+sm+E+z+u+i+a+t,1,s+$a+ku+E+z+u+i+a+t,1,s+Ga+xu+E+z+u+i+a+t,1,s+hr+fQ+E+z+u+i+a+t,1,s+hr+uQ+E+z+u+i+a+t,1,s+hr+dQ+E+z+u+i+a+t,1,s+tr+" +lon_0=142"+E+z+u+i+a+t,1,s+tr+od+E+z+u+i+a+t,1,s+tr+" +lon_0=124"+E+z+u+i+a+t,1,s+tr+Zc+E+z+u+i+a+t,1,s+" +lat_0=20"+Ip+E+z+u+i+a+t,1,s+tr+yQ+E+z+u+i+a+t,1,l+lc+i+a+t,1,l+Yc+i+a+t,1,l+Cu+i+a+t,1,l+yf+i+a+t,1,l+Uu+i+a+t,11,s+c+NC+uA+d+RA+F+e+a+t,3,g+i+e+t,1,l+Wr+i+e+a+t,1,l+Ll+i+e+a+t,1,l+jc+i+e+a+t,11,s+c+" +lon_0=105.625 +k=1.000024"+wl+hd+F+e+a+t,1,s+c+" +lon_0=105.625 +k=1.00002514"+wl+hd+i+e+a+t,1,s+c+" +lon_0=96.875 +k=1"+wl+" +y_0=1400000"+F+e+a+t,1,s+c+" +lon_0=96.875 +k=0.99999387"+wl+li+i+e+a+t,13,l+bd+T+i+e+a+t,1,l+kf+T+i+e+a+t,1,l+_f+T+i+e+a+t,45,g+i+t,1,s+Hf+$l+wp+au+u+i+a+t,1,s+Hf+$l+wp+jr+u+i+j+t,1,s+Hf+$l+wp+au+u+i+a+t,1,s+Hf+$l+wp+jr+u+i+j+t,1,s+Ya+sp+" +k=1.0002"+Au+u+i+a+t,1,s+Ya+sp+" +k=1.0002"+Xn+u+i+j+t,1,s+Ya+sp+" +k=1.0002"+Au+u+i+a+t,1,s+Ya+sp+" +k=1.0002"+Xn+u+i+j+t,1,r+vh+Sh+ap+ac+Au+" +y_0=130000"+i+a+t,1,r+vh+Sh+ap+ac+Xn+jQ+i+j+t,1,r+vh+Sh+ap+ac+Au+" +y_0=130000"+i+a+t,1,r+vh+Sh+ap+ac+Xn+jQ+i+j+t,1,r+Ot+lA+np+My+" +x_0=120000 +y_0=60000"+i+a+t,1,r+Ot+lA+np+My+KQ+Im+i+j+t,1,r+Ot+lA+np+My+" +x_0=120000 +y_0=60000"+i+a+t,1,r+Ot+lA+np+My+KQ+Im+i+j+t,1,s+Da+St+FQ+au+u+i+a+t,1,s+Da+St+FQ+jr+u+i+j+t,1,s+Da+St+FQ+au+u+i+a+t,1,s+Da+St+FQ+jr+u+i+j+t,1,r+Gh+xt+rA+e_+Ft+" +y_0=30000"+i+a+t,1,r+Gh+xt+rA+e_+rf+pm+i+j+t,1,r+Gh+xt+rA+e_+Ft+" +y_0=30000"+i+a+t,1,r+Gh+xt+rA+e_+rf+pm+i+j+t,1,de+Nh+LQ+UQ+" +k=1"+aC+pQ+Ol+OQ+i+a+t,1,de+Nh+LQ+UQ+" +k=1"+CQ+YQ+Ol+OQ+i+j+t,1,de+Nh+LQ+UQ+" +k=1"+aC+pQ+Ol+OQ+i+a+t,1,de+Nh+LQ+UQ+" +k=1"+CQ+YQ+Ol+OQ+i+j+t,1,s+At+St+by+wl+u+i+a+t,1,s+At+St+by+Zn+u+i+j+t,1,s+At+St+by+wl+u+i+a+t,1,s+At+St+by+Zn+u+i+j+t,1,s+Hf+Dy+PQ+Au+u+i+a+t,1,s+Hf+Dy+PQ+Xn+u+i+j+t,1,s+Hf+Dy+PQ+Au+u+i+a+t,1,s+Hf+Dy+PQ+Xn+u+i+j+t,1,s+nC+Ah+dg+wl+u+i+a+t,1,s+nC+Ah+dg+Zn+u+i+j+t,1,s+nC+Ah+dg+wl+u+i+a+t,1,s+nC+Ah+dg+Zn+u+i+j+t,1,s+Ya+St+uI+wl+u+i+a+t,1,s+Ya+St+uI+Zn+u+i+j+t,1,s+Ya+St+uI+wl+u+i+a+t,1,s+Ya+St+uI+Zn+u+i+j+t,1,s+Ar+th+TQ+" +x_0=10000"+u+i+a+t,1,s+Ar+th+TQ+mm+u+i+j+t,1,s+Ar+th+TQ+" +x_0=10000"+u+i+a+t,1,s+Ar+th+TQ+mm+u+i+j+t,1,s+Ar+Mr+HQ+au+u+i+a+t,1,s+Ar+Mr+HQ+jr+u+i+j+t,1,s+Ar+Mr+HQ+au+u+i+a+t,1,s+Ar+Mr+HQ+jr+u+i+j+t,1,s+oC+ug+" +k=1.0001"+Au+u+i+a+t,1,s+oC+ug+" +k=1.0001"+Xn+u+i+j+t,1,s+oC+ug+" +k=1.0001"+Au+u+i+a+t,1,s+oC+ug+" +k=1.0001"+Xn+u+i+j+t,1,de+gd+i_+" +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000"+Ol+" +gamma=5"+i+a+t,1,de+gd+i_+" +alpha=5 +k=1"+VQ+Vy+Ol+" +gamma=5"+i+j+t,1,de+gd+i_+" +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000"+Ol+" +gamma=5"+i+a+t,1,de+gd+i_+" +alpha=5 +k=1"+VQ+Vy+Ol+" +gamma=5"+i+j+t,1,s+rC+eh+Kp+" +x_0=60000"+u+i+a+t,1,s+rC+eh+Kp+_m+u+i+j+t,1,s+rC+eh+Kp+" +x_0=60000"+u+i+a+t,1,s+rC+eh+Kp+_m+u+i+j+t,1,s+Rh+or+vy+JQ+u+i+a+t,1,s+Rh+or+vy+Cm+u+i+j+t,1,s+Rh+or+vy+JQ+u+i+a+t,1,s+Rh+or+vy+Cm+u+i+j+t,1,r+gl+Sy+op+s_+pt+Cp+i+a+t,1,r+gl+Sy+op+s_+al+YI+i+j+t,1,r+gl+Sy+op+s_+pt+Cp+i+a+t,1,r+gl+Sy+op+s_+al+YI+i+j+t,1,s+Fh+ih+qQ+wl+u+i+a+t,1,s+Fh+ih+qQ+Zn+u+i+j+t,1,s+Fh+ih+qQ+wl+u+i+a+t,1,s+Fh+ih+qQ+Zn+u+i+j+t,1,s+Lh+a_+Gy+z+u+i+a+t,1,s+Lh+a_+Gy+z+u+i+j+t,1,s+Lh+a_+Gy+z+u+i+a+t,1,s+Lh+a_+Gy+z+u+i+j+t,4,r+el+Qo+Ya+rA+K+u+i+a+t,1,r+el+Qo+Ya+rA+og+u+i+j+t,2,s+c+QC+" +k=1"+d+u+i+e+a+t,5,s+c+jo+" +k=0.9985000000000001"+aC+u+i+e+a+t,1,s+c+jo+" +k=1"+gm+u+i+e+a+t,3,r+gl+ec+hA+Jt+x+u+i+a+t,1,r+el+El+ua+fe+aA+u+i+h+t,1,g+mt+_n+" +towgs84=-24,-203,268,0,0,0,0"+t,1,g+mt+_n+" +towgs84=-183,-15,273,0,0,0,0"+t,1,g+_+" +towgs84=-235,-110,393,0,0,0,0"+t,1,r+Tu+Be+lA+rA+be+u+i+a+t,1,r+Tu+Be+lA+rA+jl+u+i+j+t,1,r+Hu+we+H+rA+BA+u+i+a+t,1,r+Hu+we+H+rA+Kl+u+i+j+t,5,g+mt+_n+Fu+t,2,g+mt+_n+" +towgs84=-63,176,185,0,0,0,0"+t,21,l+oc+mt+_n+Fu+a+t,7,r+Yp+Ny+$a+n_+K+u+i+e+a+t,1,r+Yp+Ny+$a+n_+zA+u+i+e+h+t,1,r+Yp+Ny+$a+n_+K+u+i+a+t,1,r+Yp+Ny+$a+n_+zA+u+i+h+t,6,po+Do+$n+z+u+F+e+a+t,1,po+O+$n+z+u+F+e+a+t,1,"+proj=cea"+$n+" +lat_ts=30"+z+u+F+e+a+t,29,r+" +lat_1=39 +lat_2=43"+kr+QC+z+u+i+e+a+t,21,g+i+t,1,s+Bu+wu+Am+LC+zy+i+a+t,6,g+i+t,1,s+Bu+wu+Am+LC+zy+i+a+t,14,l+Ul+mt+_n+oi+a+t,1,l+rl+mt+_n+oi+a+t,1,l+Vr+mt+_n+oi+a+t,28,g+i+t,2,g+i+t,2,g+i+t,2,g+i+t,16,r+" +lat_1=43.2 +lat_0=43.2 +lon_0=-95.25 +k_0=1.000052 +x_0=3505207.010414021 +y_0=2926085.852171705"+i+h+t,1,r+" +lat_1=43.16666666666666 +lat_0=43.16666666666666 +lon_0=-92.75 +k_0=1.000043 +x_0=3810007.62001524 +y_0=2987045.974091948"+i+h+t,1,s+nc+" +lon_0=-91.2 +k=1.000035 +x_0=4114808.229616459 +y_0=2529845.05969012"+i+h+t,1,r+" +lat_1=42.53333333333333 +lat_0=42.53333333333333 +lon_0=-94.83333333333333 +k_0=1.000045 +x_0=4419608.839217679 +y_0=2621285.242570485"+i+h+t,1,r+" +lat_1=42.65 +lat_0=42.65 +lon_0=-92.25 +k_0=1.000032 +x_0=4724409.448818898 +y_0=2712725.425450851"+i+h+t,1,s+nc+" +lon_0=-95.73333333333333 +k=1.000039 +x_0=5029210.058420117 +y_0=2011684.023368047"+i+h+t,1,s+nc+" +lon_0=-94.63333333333334"+Kp+" +x_0=5334010.668021336 +y_0=2072644.145288291"+i+h+t,1,s+nc+" +lon_0=-93.71666666666667 +k=1.000033 +x_0=5638811.277622555 +y_0=2133604.267208535"+i+h+t,1,s+nc+" +lon_0=-92.81666666666666"+Jf+" +x_0=5943611.887223775 +y_0=2194564.389128779"+i+h+t,1,r+" +lat_1=41.83333333333334 +lat_0=41.83333333333334 +lon_0=-91.66666666666667 +k_0=1.00002 +x_0=6248412.496824994 +y_0=2438404.876809754"+i+h+t,1,s+nc+" +lon_0=-90.53333333333333"+Jf+" +x_0=6553213.106426213 +y_0=2316484.632969266"+i+h+t,1,r+" +lat_1=40.91666666666666 +lat_0=40.91666666666666 +lon_0=-93.75 +k_0=1.000037 +x_0=6858013.716027432"+Wy+i+h+t,1,s+nc+uu+nu+" +x_0=7162814.325628651 +y_0=1950723.901447803"+i+h+t,1,s+nc+" +lon_0=-91.25 +k=1.000018 +x_0=7467614.93522987"+Wy+i+h+t,3,g+i+t,1,l+Ul+T+i+a+t,1,l+rl+T+i+a+t,1,l+Vr+T+i+a+t,1,l+oc+T+i+a+t,1,l+VI+T+i+a+t,1,l+WI+T+i+a+t,1,l+Np+T+i+a+t,1,l+K_+T+i+a+t,3,g+i+t,2,g+i+t,23,s+dI+o_+wp+Ft+u+i+a+t,1,s+" +lat_0=48"+o_+" +k=1.00019"+pt+u+i+a+t,1,r+Ry+dI+zl+" +k_0=1.000145"+Ft+Vo+i+a+t,1,r+Ry+dI+" +lon_0=-108.5"+ac+N+" +y_0=150000"+i+a+t,1,r+Uh+Oh+yt+ac+N+ts+i+a+t,1,r+Uh+Oh+yt+" +k_0=1.00009"+pt+Cp+i+a+t,1,s+gd+" +lon_0=-107.75 +k=1.000148"+N+u+i+a+t,1,r+cm+" +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185"+pt+ts+i+a+t,1,r+Gw+Nw+JC+" +k_0=1.0001515"+N+Cp+i+a+t,1,s+Rw+qC+" +k=1.00024"+pt+u+i+a+t,1,s+dI+o_+wp+rf+u+i+j+t,1,s+" +lat_0=48"+o_+" +k=1.00019"+al+u+i+j+t,1,r+Ry+dI+zl+" +k_0=1.000145"+rf+" +y_0=199999.9999992"+i+j+t,1,r+Ry+dI+" +lon_0=-108.5"+ac+Yf+" +y_0=150000.00001464"+i+j+t,1,r+Uh+Oh+yt+ac+Yf+Xy+i+j+t,1,r+Uh+Oh+yt+" +k_0=1.00009"+al+" +y_0=49999.99971024"+i+j+t,1,s+gd+" +lon_0=-107.75 +k=1.000148"+Yf+u+i+j+t,1,r+cm+" +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185"+al+Xy+i+j+t,1,r+Gw+Nw+JC+" +k_0=1.0001515"+Yf+YI+i+j+t,1,s+Rw+qC+" +k=1.00024"+sl+u+i+h+t,3,s+cd+" +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000"+i+a+t,1,s+cd+" +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000"+i+h+t,1,g+i+t,3,g+F+t,3,g+F+t,3,s+Ph+Th+" +k=1"+CI+" +y_0=126867.909"+sf+af+" +towgs84=-275.7224,94.7824,340.8944,-8.001,-4.42,-11.821,1"+a+t,115,s+fd+r_+Ig+U+J+i+a+t,1,s+fd+r_+Ig+U+J+i+h+t,1,s+II+lu+pg+U+J+i+a+t,1,s+II+lu+pg+U+J+i+h+t,1,s+" +lat_0=39"+sh+_g+U+J+i+a+t,1,s+" +lat_0=39"+sh+_g+U+J+i+h+t,1,s+" +lat_0=40.45"+ud+Fy+U+J+i+a+t,1,s+" +lat_0=40.45"+ud+Fy+U+J+i+h+t,1,s+" +lat_0=40.05"+zC+qf+U+J+i+a+t,1,s+" +lat_0=40.05"+zC+qf+U+J+i+h+t,1,s+Ly+dd+zf+U+J+i+a+t,1,s+Ly+dd+zf+U+J+i+h+t,1,s+" +lat_0=39"+lC+zQ+U+J+i+a+t,1,s+" +lat_0=39"+lC+zQ+U+J+i+h+t,1,s+" +lat_0=40.4"+jC+_g+U+J+i+a+t,1,s+" +lat_0=40.4"+jC+_g+U+J+i+h+t,1,s+fd+KC+pI+U+J+i+a+t,1,s+fd+KC+pI+U+J+i+h+t,1,s+hC+YC+" +k=1.000021"+U+J+i+a+t,1,s+hC+YC+" +k=1.000021"+U+J+i+h+t,1,s+gC+VC+" +k=1.000024"+U+J+i+a+t,1,s+gC+VC+" +k=1.000024"+U+J+i+h+t,1,s+" +lat_0=40.15"+WC+" +k=1.000032"+U+J+i+a+t,1,s+" +lat_0=40.15"+WC+" +k=1.000032"+U+J+i+h+t,1,s+" +lat_0=38.1"+dd+_I+U+J+i+a+t,1,s+" +lat_0=38.1"+dd+_I+U+J+i+h+t,1,s+" +lat_0=38.45"+ah+" +k=1.000018"+U+J+i+a+t,1,s+" +lat_0=38.45"+ah+" +k=1.000018"+U+J+i+h+t,1,s+" +lat_0=38.65"+XC+Fy+U+J+i+a+t,1,s+" +lat_0=38.65"+XC+Fy+U+J+i+h+t,1,s+" +lat_0=39.1"+ZC+zf+U+J+i+a+t,1,s+" +lat_0=39.1"+ZC+zf+U+J+i+h+t,1,s+cC+r_+zf+U+J+i+a+t,1,s+cC+r_+zf+U+J+i+h+t,1,s+" +lat_0=38.2"+l_+nu+U+J+i+a+t,1,s+" +lat_0=38.2"+l_+nu+U+J+i+h+t,1,s+fC+sh+" +k=1.000033"+U+J+i+a+t,1,s+fC+sh+" +k=1.000033"+U+J+i+h+t,1,s+uC+lu+qf+U+J+i+a+t,1,s+uC+lu+qf+U+J+i+h+t,1,s+" +lat_0=39.95"+ud+_I+U+J+i+a+t,1,s+" +lat_0=39.95"+ud+_I+U+J+i+h+t,1,s+II+lC+pg+U+J+i+a+t,1,s+II+lC+pg+U+J+i+h+t,1,s+hC+$C+Uy+U+J+i+a+t,1,s+hC+$C+Uy+U+J+i+h+t,1,s+dC+" +lon_0=-85.7"+Ig+U+J+i+a+t,1,s+dC+" +lon_0=-85.7"+Ig+U+J+i+h+t,1,s+" +lat_0=39.9"+Kg+Ig+U+J+i+a+t,1,s+" +lat_0=39.9"+Kg+Ig+U+J+i+h+t,1,s+" +lat_0=39.65"+IC+zf+U+J+i+a+t,1,s+" +lat_0=39.65"+IC+zf+U+J+i+h+t,1,s+" +lat_0=37.95"+Hn+Jf+U+J+i+a+t,1,s+" +lat_0=37.95"+Hn+Jf+U+J+i+h+t,1,s+" +lat_0=39.75"+h_+uI+U+J+i+a+t,1,s+" +lat_0=39.75"+h_+uI+U+J+i+h+t,1,s+dC+Hn+pg+U+J+i+a+t,1,s+dC+Hn+pg+U+J+i+h+t,1,s+fC+sC+Ig+U+J+i+a+t,1,s+fC+sC+Ig+U+J+i+h+t,1,s+" +lat_0=38.7 +lon_0=-85.95"+Oy+U+J+i+a+t,1,s+" +lat_0=38.7 +lon_0=-85.95"+Oy+U+J+i+h+t,1,s+Py+ah+Jf+U+J+i+a+t,1,s+Py+ah+Jf+U+J+i+h+t,1,s+" +lat_0=40.3"+Bp+qf+U+J+i+a+t,1,s+" +lat_0=40.3"+Bp+qf+U+J+i+h+t,1,s+" +lat_0=38.55"+AB+pI+U+J+i+a+t,1,s+" +lat_0=38.55"+AB+pI+U+J+i+h+t,1,s+" +lat_0=38.8"+IC+_I+U+J+i+a+t,1,s+" +lat_0=38.8"+IC+_I+U+J+i+h+t,1,s+Ty+Hn+pg+U+J+i+a+t,1,s+Ty+Hn+pg+U+J+i+h+t,1,s+" +lat_0=38.4"+g_+dg+U+J+i+a+t,1,s+" +lat_0=38.4"+g_+dg+U+J+i+h+t,1,s+cC+h_+" +k=1.000037"+U+J+i+a+t,1,s+cC+h_+" +k=1.000037"+U+J+i+h+t,1,s+Py+tB+_g+U+J+i+a+t,1,s+Py+tB+_g+U+J+i+h+t,1,s+II+" +lon_0=-86.75"+Jf+U+J+i+a+t,1,s+II+" +lon_0=-86.75"+Jf+U+J+i+h+t,1,s+" +lat_0=38.95"+dd+pI+U+J+i+a+t,1,s+" +lat_0=38.95"+dd+pI+U+J+i+h+t,1,s+" +lat_0=39.45"+l_+pg+U+J+i+a+t,1,s+" +lat_0=39.45"+l_+pg+U+J+i+h+t,1,s+gC+nh+_g+U+J+i+a+t,1,s+gC+nh+_g+U+J+i+h+t,1,s+Ly+eB+Oy+U+J+i+a+t,1,s+Ly+eB+Oy+U+J+i+h+t,1,s+Hy+" +lon_0=-86.7"+nu+U+J+i+a+t,1,s+Hy+" +lon_0=-86.7"+nu+U+J+i+h+t,1,s+" +lat_0=37.85"+ud+dg+U+J+i+a+t,1,s+" +lat_0=37.85"+ud+dg+U+J+i+h+t,1,s+cd+" +lon_0=-87.95"+Uy+U+J+i+a+t,1,s+cd+" +lon_0=-87.95"+Uy+U+J+i+h+t,1,s+" +lat_0=39.7"+lu+" +k=1.000044"+U+J+i+a+t,1,s+" +lat_0=39.7"+lu+" +k=1.000044"+U+J+i+h+t,1,s+Jy+" +lon_0=-85.3"+qf+U+J+i+a+t,1,s+Jy+" +lon_0=-85.3"+qf+U+J+i+h+t,1,s+Ty+iB+zQ+U+J+i+a+t,1,s+Ty+iB+zQ+U+J+i+h+t,1,s+cd+" +lon_0=-87.05 +k=1.000014"+U+J+i+a+t,1,s+cd+" +lon_0=-87.05 +k=1.000014"+U+J+i+h+t,1,s+ba+Bp+" +k=1.000041"+U+J+i+a+t,1,s+ba+Bp+" +k=1.000041"+U+J+i+h+t,1,s+Jy+jf+" +k=1.000017"+U+J+i+a+t,1,s+Jy+jf+" +k=1.000017"+U+J+i+h+t,1,s+" +lat_0=40.2"+nh+_g+U+J+i+a+t,1,s+" +lat_0=40.2"+nh+_g+U+J+i+h+t,1,s+Hy+c_+dg+U+J+i+a+t,1,s+Hy+c_+dg+U+J+i+h+t,1,s+uC+g_+nu+U+J+i+a+t,1,s+uC+g_+nu+U+J+i+h+t,1,s+fd+" +lon_0=-85.25"+Ig+U+J+i+a+t,1,s+fd+" +lon_0=-85.25"+Ig+U+J+i+h+t,3,g+i+e+t,1,l+Vr+i+e+a+t,1,l+oc+i+e+a+t,1,l+VI+i+e+a+t,152,s+Fw+Jt+" +k=1.0000365285 +x_0=147218.6942 +y_0=0.0037"+i+a+t,1,s+Lw+sB+" +k=1.0000495683 +x_0=172821.9461 +y_0=0.0017"+i+a+t,1,s+Uw+aB+" +k=1.0000486665 +x_0=93150 +y_0=0.0029"+i+a+t,1,r+Ow+Pw+nB+" +k_0=1.0000331195 +x_0=228600.4575 +y_0=148551.4837"+i+a+t,1,s+gf+" +lon_0=-88"+nu+" +x_0=31600 +y_0=4600"+i+a+t,1,s+Tw+oB+" +k=1.0000382778 +x_0=175260.3502 +y_0=0.0048"+i+a+t,1,r+Hw+Jw+rB+" +k_0=1.0000383841 +x_0=64008.1276 +y_0=59445.9043"+i+a+t,1,s+qw+" +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8893 +y_0=0.0049"+i+a+t,1,r+zw+jw+lB+" +k_0=1.0000391127 +x_0=60045.72 +y_0=44091.4346"+i+a+t,1,s+" +lat_0=43.6"+hB+" +k=1.0000463003 +x_0=199949.1989 +y_0=0.0086"+i+a+t,1,r+Kw+Yw+gB+" +k_0=1.00003498 +x_0=169164.3381 +y_0=111569.6134"+i+a+t,1,r+Bm+wm+Vw+" +k_0=1.0000349151 +x_0=113690.6274 +y_0=53703.1201"+i+a+t,1,r+WQ+XQ+cB+" +k_0=1.0000384786 +x_0=247193.2944 +y_0=146591.9896"+i+a+t,1,s+Ww+fB+" +k=1.0000346418 +x_0=263347.7263 +y_0=0.0076"+i+a+t,1,s+" +lat_0=44.4"+uB+" +k=1.0000187521 +x_0=158801.1176 +y_0=0.0023"+i+a+t,1,s+Xw+uu+" +k=1.0000385418 +x_0=59131.3183 +y_0=0.0041"+i+a+t,1,s+Zw+dB+" +k=1.0000410324 +x_0=51816.104 +y_0=0.003"+i+a+t,1,r+$w+AE+IB+" +k_0=1.000035079 +x_0=120091.4402 +y_0=91687.92389999999"+i+a+t,1,s+tE+pB+" +k=1.0000552095 +x_0=133502.6683 +y_0=0.0063"+i+a+t,1,s+eE+_B+" +k=1.0000673004 +x_0=275844.5533 +y_0=0.0157"+i+a+t,1,s+iE+" +lon_0=-90.8 +k=1.0000349452 +x_0=242316.4841 +y_0=0.01"+i+a+t,1,r+sE+aE+CB+" +k_0=1.0000390487 +x_0=170078.7403 +y_0=45830.2947"+i+a+t,1,r+nE+oE+oh+" +k_0=1.0000344057 +x_0=150876.3018 +y_0=79170.7795"+i+a+t,1,s+rE+BB+" +k=1.0000394961 +x_0=113081.0261 +y_0=0.0045"+i+a+t,1,s+lE+wB+" +k=1.0000677153 +x_0=220980.4419 +y_0=0.008500000000000001"+i+a+t,1,s+hE+EB+" +k=1.0000353 +x_0=27000 +y_0=25000"+i+a+t,1,s+gE+yB+" +k=1.0000260649 +x_0=185928.3728 +y_0=0.0009"+i+a+t,1,s+cE+c_+" +k=1.0000233704 +x_0=79857.7614 +y_0=0.0012"+i+a+t,1,s+fE+QB+" +k=1.0000319985 +x_0=130454.6598 +y_0=0.0033"+i+a+t,1,r+uE+dE+mB+" +k_0=1.0000627024 +x_0=198425.197 +y_0=105279.7829"+i+a+t,1,s+IE+kB+" +k=1.0000599003 +x_0=116129.0323 +y_0=0.0058"+i+a+t,1,r+pE+_E+" +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493 +y_0=55049.2669"+i+a+t,1,s+CE+xB+" +k=1.0000234982 +x_0=238658.8794 +y_0=0.0032"+i+a+t,1,s+BE+MB+" +k=1.0000362499 +x_0=105461.0121 +y_0=0.0029"+i+a+t,1,r+wE+EE+bB+" +k_0=1.0000434122 +x_0=204521.209 +y_0=121923.9861"+i+a+t,1,s+yE+DB+" +k=1.0000236869 +x_0=182880.3676 +y_0=0.0033"+i+a+t,1,r+QE+mE+vB+" +k_0=1.0000686968 +x_0=70104.1401 +y_0=57588.0346"+i+a+t,1,r+kE+xE+SB+" +k_0=1.0000362977 +x_0=167640.3354 +y_0=86033.0876"+i+a+t,1,s+ME+rh+" +k=1.0000433849 +x_0=141732.2823 +y_0=0.0059"+i+a+t,1,r+bE+DE+" +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.1128 +y_0=50022.1874"+i+a+t,1,s+vE+GB+" +k=1.0000649554 +x_0=227990.8546 +y_0=0.0109"+i+a+t,1,r+ZQ+$Q+NB+" +k_0=1.0000375653 +x_0=202387.6048 +y_0=134255.4253"+i+a+t,1,s+SE+RB+" +k=1.0000337311 +x_0=146304.2926 +y_0=0.0068"+i+a+t,1,s+GE+FB+" +k=1.0000495976 +x_0=250546.1013 +y_0=0.0234"+i+a+t,1,s+NE+LB+" +k=1.0000373868 +x_0=185623.5716 +y_0=0.0051"+i+a+t,1,r+RE+FE+UB+" +k_0=1.0000573461 +x_0=216713.2336 +y_0=120734.1631"+i+a+t,1,s+Hh+OB+" +k=1.000032144 +x_0=262433.3253 +y_0=0.009599999999999999"+i+a+t,1,s+Hh+rh+" +k=1.0000381803 +x_0=165506.7302 +y_0=0.0103"+i+a+t,1,r+LE+UE+PB+" +k_0=1.0000597566 +x_0=187147.5744 +y_0=107746.7522"+i+a+t,1,s+OE+TB+" +k=1.0000361538 +x_0=256946.9138 +y_0=0.0041"+i+a+t,1,r+PE+TE+HB+" +k_0=1.0000408158 +x_0=222504.4451 +y_0=47532.0602"+i+a+t,1,r+HE+JE+JB+" +k_0=1.0000730142 +x_0=134417.0689 +y_0=50337.1092"+i+a+t,1,r+qE+zE+qB+" +k_0=1.0000367192 +x_0=232562.8651 +y_0=111088.2224"+i+a+t,1,r+jE+KE+zB+" +k_0=1.0000475376 +x_0=234086.8682 +y_0=188358.6058"+i+a+t,1,s+YE+jB+" +k=1.00003738 +x_0=120091.4415 +y_0=0.003"+i+a+t,1,s+VE+KB+" +k=1.0000346179 +x_0=208788.418 +y_0=0.0034"+i+a+t,1,s+WE+YB+" +k=1.0000333645 +x_0=185013.9709 +y_0=0.007"+i+a+t,1,r+XE+ZE+oh+" +k_0=1.0000392096 +x_0=120091.4402 +y_0=45069.7587"+i+a+t,1,r+$E+Ay+Jt+" +k_0=1.0000421209 +x_0=208483.6173 +y_0=134589.754"+i+a+t,1,s+Fw+Jt+" +k=1.0000365285 +x_0=147218.6941325883 +y_0=0.00365760731521463"+i+h+t,1,s+Lw+sB+" +k=1.0000495683 +x_0=172821.945948692 +y_0=0.001828803657607315"+i+h+t,1,s+Uw+aB+" +k=1.0000486665 +x_0=93150"+rr+i+h+t,1,r+Ow+Pw+nB+" +k_0=1.0000331195 +x_0=228600.4575057151 +y_0=148551.4835661671"+i+h+t,1,s+gf+" +lon_0=-88"+nu+" +x_0=31599.99989839979 +y_0=4599.999898399797"+i+h+t,1,s+Tw+oB+" +k=1.0000382778 +x_0=175260.3502159004"+VB+i+h+t,1,r+Hw+Jw+rB+" +k_0=1.0000383841 +x_0=64008.12771145543 +y_0=59445.90419100838"+i+h+t,1,s+qw+" +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8892049784"+VB+i+h+t,1,r+zw+jw+lB+" +k_0=1.0000391127 +x_0=60045.72009144018 +y_0=44091.43449326898"+i+h+t,1,s+" +lat_0=43.6"+hB+" +k=1.0000463003 +x_0=199949.198983998"+WB+i+h+t,1,r+Kw+Yw+gB+" +k_0=1.00003498 +x_0=169164.338023876 +y_0=111569.613512827"+i+h+t,1,r+Bm+wm+Vw+" +k_0=1.0000349151 +x_0=113690.6273812548 +y_0=53703.12024384048"+i+h+t,1,r+WQ+XQ+cB+" +k_0=1.0000384786 +x_0=247193.2943865888 +y_0=146591.9896367793"+i+h+t,1,s+Ww+fB+" +k=1.0000346418 +x_0=263347.7263906528 +y_0=0.00762001524003048"+i+h+t,1,s+" +lat_0=44.4"+uB+" +k=1.0000187521 +x_0=158801.1176022352 +y_0=0.002438404876809754"+i+h+t,1,s+Xw+uu+" +k=1.0000385418 +x_0=59131.31826263652"+XB+i+h+t,1,s+Zw+dB+" +k=1.0000410324 +x_0=51816.10393700787"+rr+i+h+t,1,r+$w+AE+IB+" +k_0=1.000035079"+Zy+" +y_0=91687.92390144781"+i+h+t,1,s+tE+pB+" +k=1.0000552095 +x_0=133502.6682245364 +y_0=0.006400812801625603"+i+h+t,1,s+eE+_B+" +k=1.0000673004 +x_0=275844.5532131065 +y_0=0.0158496316992634"+i+h+t,1,s+iE+" +lon_0=-90.8 +k=1.0000349452 +x_0=242316.484023368 +y_0=0.01005842011684023"+i+h+t,1,r+sE+aE+CB+" +k_0=1.0000390487 +x_0=170078.7401574803 +y_0=45830.29484378968"+i+h+t,1,r+nE+oE+oh+" +k_0=1.0000344057 +x_0=150876.3017526035 +y_0=79170.77937515875"+i+h+t,1,s+rE+BB+" +k=1.0000394961 +x_0=113081.0261620523 +y_0=0.004572009144018288"+i+h+t,1,s+lE+wB+" +k=1.0000677153 +x_0=220980.4419608839"+WB+i+h+t,1,s+hE+EB+" +k=1.0000353 +x_0=27000 +y_0=24999.99989839979"+i+h+t,1,s+gE+yB+" +k=1.0000260649 +x_0=185928.3727711455 +y_0=0.0009144018288036576"+i+h+t,1,s+cE+c_+" +k=1.0000233704 +x_0=79857.76154432308 +y_0=0.001219202438404877"+i+h+t,1,s+fE+QB+" +k=1.0000319985 +x_0=130454.6596901194"+du+i+h+t,1,r+uE+dE+mB+" +k_0=1.0000627024 +x_0=198425.1968503937 +y_0=105279.7828803657"+i+h+t,1,s+IE+kB+" +k=1.0000599003 +x_0=116129.0322580645"+ZB+i+h+t,1,r+pE+_E+" +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493522987 +y_0=55049.26695453391"+i+h+t,1,s+CE+xB+" +k=1.0000234982 +x_0=238658.8794513589"+rr+i+h+t,1,s+BE+MB+" +k=1.0000362499 +x_0=105461.0121412243"+rr+i+h+t,1,r+wE+EE+bB+" +k_0=1.0000434122 +x_0=204521.2090424181 +y_0=121923.9861823724"+i+h+t,1,s+yE+DB+" +k=1.0000236869 +x_0=182880.3675895352"+du+i+h+t,1,r+QE+mE+vB+" +k_0=1.0000686968 +x_0=70104.14020828041 +y_0=57588.03474726949"+i+h+t,1,r+kE+xE+SB+" +k_0=1.0000362977 +x_0=167640.3352806706 +y_0=86033.08773177546"+i+h+t,1,s+ME+rh+" +k=1.0000433849 +x_0=141732.2822453645"+ZB+i+h+t,1,r+bE+DE+" +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.11277622555 +y_0=50022.1874523749"+i+h+t,1,s+vE+GB+" +k=1.0000649554 +x_0=227990.8544577089 +y_0=0.01097282194564389"+i+h+t,1,r+ZQ+$Q+NB+" +k_0=1.0000375653 +x_0=202387.6047752095 +y_0=134255.4254508509"+i+h+t,1,s+SE+RB+" +k=1.0000337311 +x_0=146304.2926085852 +y_0=0.006705613411226822"+i+h+t,1,s+GE+FB+" +k=1.0000495976 +x_0=250546.1013970028 +y_0=0.02346964693929388"+i+h+t,1,s+NE+LB+" +k=1.0000373868 +x_0=185623.5715519431 +y_0=0.005181610363220727"+i+h+t,1,r+RE+FE+UB+" +k_0=1.0000573461 +x_0=216713.2337312675 +y_0=120734.1631699263"+i+h+t,1,s+Hh+OB+" +k=1.000032144 +x_0=262433.3251714504 +y_0=0.009448818897637795"+i+h+t,1,s+Hh+rh+" +k=1.0000381803 +x_0=165506.7300990602 +y_0=0.01036322072644145"+i+h+t,1,r+LE+UE+PB+" +k_0=1.0000597566 +x_0=187147.5742951486 +y_0=107746.7521463043"+i+h+t,1,s+OE+TB+" +k=1.0000361538 +x_0=256946.9138938278"+XB+i+h+t,1,r+PE+TE+HB+" +k_0=1.0000408158 +x_0=222504.44500889 +y_0=47532.0603505207"+i+h+t,1,r+HE+JE+JB+" +k_0=1.0000730142 +x_0=134417.0688341377 +y_0=50337.10927101854"+i+h+t,1,r+qE+zE+qB+" +k_0=1.0000367192 +x_0=232562.8651257302 +y_0=111088.2224028448"+i+h+t,1,r+jE+KE+zB+" +k_0=1.0000475376 +x_0=234086.8681737363 +y_0=188358.6059436119"+i+h+t,1,s+YE+jB+" +k=1.00003738 +x_0=120091.4414020828"+rr+i+h+t,1,s+VE+KB+" +k=1.0000346179 +x_0=208788.4178816358"+du+i+h+t,1,s+WE+YB+" +k=1.0000333645 +x_0=185013.9709423419 +y_0=0.007010414020828041"+i+h+t,1,r+XE+ZE+oh+" +k_0=1.0000392096"+Zy+" +y_0=45069.7588011176"+i+h+t,1,r+$E+Ay+Jt+" +k_0=1.0000421209 +x_0=208483.6172720346 +y_0=134589.7539243078"+i+h+t,41,g+i+t,6,s+c+" +lon_0=68.51666666666667 +k=1 +x_0=1300000"+zI+i+a+t,1,s+c+" +lon_0=71.51666666666667 +k=1"+am+zI+i+a+t,1,s+c+" +lon_0=74.51666666666667 +k=1"+nm+zI+i+a+t,1,s+c+" +lon_0=77.51666666666667 +k=1"+om+zI+i+a+t,1,s+c+" +lon_0=80.51666666666667 +k=1 +x_0=5300000"+zI+i+a+t,12308,s+c+mn+" +k=1"+ri+u+f+o+a+t,1,s+c+Ao+" +k=1"+ys+u+f+o+a+t,1,s+c+zo+" +k=1"+Ml+u+f+o+a+t,1,s+c+jh+" +k=1"+Xo+u+f+o+a+t,1,s+c+tl+" +k=1"+Vg+u+f+o+a+t,1,s+c+qu+" +k=1"+Wg+u+f+o+a+t,1,s+c+GI+" +k=1"+ig+u+f+o+a+t,1,s+c+jd+" +k=1"+Ql+u+f+o+a+t,1,s+c+NI+" +k=1"+sg+u+f+o+a+t,1,s+c+to+" +k=1"+no+u+f+o+a+t,1,s+c+eo+" +k=1"+Fn+u+f+o+a+t,1,s+c+Io+" +k=1"+Go+u+f+o+a+t,1,s+c+io+" +k=1"+No+u+f+o+a+t,1,s+c+so+" +k=1"+Dr+u+f+o+a+t,1,s+c+ss+" +k=1"+vo+u+f+o+a+t,1,s+c+Oa+" +k=1"+So+u+f+o+a+t,1,s+c+xa+" +k=1"+oo+u+f+o+a+t,1,s+c+Sa+" +k=1"+Ro+u+f+o+a+t,1,s+c+Bs+" +k=1"+ro+u+f+o+a+t,1,s+c+Ma+" +k=1"+Fo+u+f+o+a+t,1,s+c+id+" +k=1"+ag+u+f+o+a+t,1,s+c+iu+" +k=1"+Lo+u+f+o+a+t,1,s+c+$c+" +k=1"+Uo+u+f+o+a+t,1,s+c+sd+" +k=1"+Oo+u+f+o+a+t,1,s+c+Af+" +k=1"+Po+u+f+o+a+t,1,s+c+hg+" +k=1"+Ln+u+f+o+a+t,1,s+c+Tl+" +k=1"+sr+u+f+o+a+t,1,s+c+Hl+" +k=1"+In+u+f+o+a+t,1,s+c+cg+" +k=1"+ar+u+f+o+a+t,103,l+dh+b+lo+a+t,1,l+rc+b+lo+a+t,1,l+Ul+b+lo+a+t,1,l+rl+b+lo+a+t,111,l+gc+T+W+q+a+t,1,l+Kc+T+W+q+a+t,1,l+lc+T+W+q+a+t,1,l+Yc+T+W+q+a+t,1,l+Cu+T+W+q+a+t,1,l+yf+T+W+q+a+t,1,l+Uu+T+W+q+a+t,1,l+ZI+T+W+q+a+t,1,l+Sp+T+W+q+a+t,1,l+vg+T+W+q+a+t,91,l+gc+T+W+Wt+a+t,1,l+Kc+T+W+Wt+a+t,1,l+lc+T+W+Wt+a+t,1,l+Yc+T+W+Wt+a+t,1,l+Cu+T+W+Wt+a+t,1,l+yf+T+W+Wt+a+t,1,l+Uu+T+W+Wt+a+t,1,l+ZI+T+W+Wt+a+t,80,l+rc+_+Ge+a+t,1,l+Ul+_+Ge+a+t,1,l+rl+_+Ge+a+t,1,l+Vr+_+Ge+a+t,1,l+oc+_+Ge+a+t,59,l+Vr+_+Ge+a+t,39,l+rl+f+Pc+a+t,1,l+Vr+f+Pc+a+t,251,s+wt+" +lon_0=1 +k=1"+N+yo+_+cs+GQ+a+t,1,s+wt+" +lon_0=1 +k=1"+z+u+_+cs+GQ+a+t,31,l+mr+T+_+Cs+a+t,1,l+Sg+T+_+Cs+a+t,1,l+mf+T+_+Cs+a+t,110,l+jc+T+mt+dt+Qr+a+t,1,l+dh+T+mt+dt+Qr+a+t,1,l+rc+T+mt+dt+Qr+a+t,99,l+dh+T+b+rs+a+t,1,l+rc+T+b+rs+a+t,1,l+Ul+T+b+rs+a+t,58,l+dh+b+rs+a+t,1,l+rc+b+rs+a+t,1,l+Ul+b+rs+a+t,51,l+hc+T+m+De+a+t,1,l+gc+T+m+De+a+t,1,l+Kc+T+m+De+a+t,141,s+c+Vc+ns+K+u+b+vl+a+t,1,s+" +lat_0=13.17638888888889 +lon_0=-59.55972222222222 +k=0.9999986"+JQ+" +y_0=75000"+b+vl+a+t,121,s+c+to+" +k=1"+no+u+f+w+a+t,1,s+c+eo+" +k=1"+Fn+u+f+w+a+t,1,s+c+Io+" +k=1"+Go+u+f+w+a+t,1,s+c+io+" +k=1"+No+u+f+w+a+t,1,s+c+so+" +k=1"+Dr+u+f+w+a+t,1,s+c+ss+" +k=1"+vo+u+f+w+a+t,1,s+c+Oa+" +k=1"+So+u+f+w+a+t,1,s+c+xa+" +k=1"+oo+u+f+w+a+t,1,s+c+Sa+" +k=1"+Ro+u+f+w+a+t,1,s+c+Bs+" +k=1"+ro+u+f+w+a+t,1,s+c+Ma+" +k=1"+Fo+u+f+w+a+t,30,s+c+to+" +k=1"+d+u+f+w+a+t,1,s+c+eo+" +k=1"+d+u+f+w+a+t,1,s+c+Io+" +k=1"+d+u+f+w+a+t,1,s+c+io+" +k=1"+d+u+f+w+a+t,1,s+c+so+" +k=1"+d+u+f+w+a+t,1,s+c+ss+" +k=1"+d+u+f+w+a+t,1,s+c+Oa+" +k=1"+d+u+f+w+a+t,1,s+c+xa+" +k=1"+d+u+f+w+a+t,1,s+c+Sa+" +k=1"+d+u+f+w+a+t,1,s+c+Bs+" +k=1"+d+u+f+w+a+t,1,s+c+Ma+" +k=1"+d+u+f+w+a+t,37,r+mh+kh+Do+$n+Ft+" +y_0=5400000"+_+" +pm=brussels"+a+t,280,_d+Ih+$n+" +k_0=1"+z+u+m+Cn+" +pm=bern"+a+t,1,_d+Ih+Eu+" +k_0=1"+x+Vo+m+Cn+a+t,1,_d+Ih+Eu+" +k_0=1"+z+u+m+Cn+a+t,36,l+To+_+ls+a+t,78,s+Jh+" +lon_0=-77.08091666666667 +k=1"+Et+nA+_+ls+a+t,1,s+Jh+" +lon_0=-74.08091666666667 +k=1"+Et+nA+_+ls+a+t,1,s+Jh+" +lon_0=-71.08091666666667 +k=1"+Et+nA+_+ls+a+t,1,s+Jh+" +lon_0=-68.08091666666667 +k=1"+Et+nA+_+ls+a+t,133,l+Wr+T+b+tn+a+t,1,l+Ll+T+b+tn+a+t,58,s+c+" +lon_0=11.5"+uA+d+RA+b+tn+a+t,1,s+c+jo+uA+d+RA+b+tn+a+t,79,s+O+SC+" +k=1"+BA+u+i+e+a+t,1,s+O+jg+" +k=1"+be+u+i+e+a+t,1,s+O+ed+" +k=1"+Lt+u+i+e+a+t,1,s+O+nI+" +k=1"+ri+u+i+e+a+t,1,s+O+NC+" +k=1"+ys+u+i+e+a+t,1,s+O+NQ+" +k=1"+Ml+u+i+e+a+t,1,s+O+ef+" +k=1"+Xo+u+i+e+a+t,4,s+O+SC+" +k=1"+BA+u+F+e+a+t,1,s+O+jg+" +k=1"+be+u+F+e+a+t,1,s+O+ed+" +k=1"+Lt+u+F+e+a+t,1,s+O+nI+" +k=1"+ri+u+F+e+a+t,1,s+O+NC+" +k=1"+ys+u+F+e+a+t,1,s+O+NQ+" +k=1"+Ml+u+F+e+a+t,1,s+O+ef+" +k=1"+Xo+u+F+e+a+t,4,s+O+SC+" +k=1"+BA+u+_+Tt+a+t,1,s+O+jg+" +k=1"+be+u+_+Tt+a+t,1,s+O+ed+" +k=1"+Lt+u+_+Tt+a+t,1,s+O+nI+" +k=1"+ri+u+_+Tt+a+t,1,s+O+NC+" +k=1"+ys+u+_+Tt+a+t,1,s+O+NQ+" +k=1"+Ml+u+_+Tt+a+t,1,s+O+ef+" +k=1"+Xo+u+_+Tt+a+t,37,l+jc+T+mt+dt+YA+a+t,1,l+dh+T+mt+dt+YA+a+t,40,s+c+yn+" +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+BC+" +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+DI+" +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+mn+" +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+Rp+" +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+vI+" +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+Ao+" +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+" +lon_0=29 +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+Pd+" +k=1"+z+u+Qn+mt+dt+YA+a+t,2,s+c+zo+" +k=1"+z+u+Qn+mt+dt+YA+a+t,39,l+Wr+CA+ht+En+a+t,59,r+" +lat_1=36"+$a+" +lon_0=9.9"+Rd+d+yo+CA+ht+En+a+t,1,r+Vp+Wp+" +lon_0=9.9"+cf+d+yo+CA+ht+En+a+t,129,l+Ho+T+_+an+a+t,1,l+mr+T+_+an+a+t,1,l+Sg+T+_+an+a+t,1,l+mf+T+_+an+a+t,1,l+Cf+T+_+an+a+t,175,r+dm+" +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256"+oA+yo+CA+ht+Yn+a+t,70,r+dm+" +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256"+oA+yo+CA+ht+Yn+a+t,10,rn+" +lat_0=34.2 +lon_0=39.15 +k=0.9995341"+z+u+CA+ht+Yn+a+t,211,s+kn+" +lon_0=35 +k=1"+oA+" +y_0=1100000"+xn+ho+a+t,1,s+kn+Pd+" +k=1 +x_0=615000 +y_0=810000"+xn+ho+a+t,1,s+kn+Ao+" +k=1"+fs+Vo+xn+ho+a+t,1,s+kn+Ao+" +k=1"+fs+$_+xn+ho+a+t,34,l+ll+_+P+a+t,1,l+Rl+_+P+a+t,1,l+Iu+_+P+a+t,1,l+xd+_+P+a+t,1,l+Wr+_+P+a+t,1,l+Ll+_+P+a+t,1,l+jc+_+P+a+t,1,l+dh+_+P+a+t,1,l+rc+_+P+a+t,1,l+Ul+_+P+a+t,1,l+rl+_+P+a+t,52,s+c+$n+uA+d+u+_+P+a+t,5,s+c+" +lon_0=5"+uA+d+u+_+P+a+t,144,l+Vr+b+Tc+a+t,1,l+oc+b+Tc+a+t,460,_d+" +lat_0=47.14439372222222 +lon_0=19.04857177777778 +k_0=0.99993 +x_0=650000"+Vo+um+kI+a+t,130,s+c+" +lon_0=94.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=97.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=100.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=103.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=106.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=109.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=112.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=115.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=118.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=121.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=124.5"+E+N+li+F+e+a+t,1,s+c+od+E+N+li+F+e+a+t,1,s+c+" +lon_0=130.5"+E+N+li+F+e+a+t,1,s+c+AC+E+N+li+F+e+a+t,1,s+c+" +lon_0=136.5"+E+N+li+F+e+a+t,1,s+c+" +lon_0=139.5"+E+N+li+F+e+a+t,1,l+bd+er+Dt+jA+a+t,1,l+kf+er+Dt+jA+a+t,1,l+hc+er+Dt+jA+a+t,1,l+gc+er+Dt+jA+a+t,1,l+Kc+er+Dt+jA+a+t,1,l+lc+er+Dt+jA+a+t,1,l+Yc+er+Dt+jA+a+t,14,l+bd+F+e+a+t,1,l+kf+F+e+a+t,1,l+hc+F+e+a+t,1,l+gc+F+e+a+t,1,l+Kc+F+e+a+t,1,l+lc+F+e+a+t,1,l+Yc+F+e+a+t,5,l+kf+T+F+e+a+t,1,l+hc+T+F+e+a+t,1,l+gc+T+F+e+a+t,1,l+Kc+T+F+e+a+t,1,l+lc+T+F+e+a+t,1,l+Yc+T+F+e+a+t,1,l+Cu+T+F+e+a+t,1,l+yf+T+F+e+a+t,3,l+kf+T+er+Dt+jA+a+t,1,l+hc+T+er+Dt+jA+a+t,1,l+gc+T+er+Dt+jA+a+t,1,l+Kc+T+er+Dt+jA+a+t,1,l+lc+T+er+Dt+jA+a+t,1,l+Yc+T+er+Dt+jA+a+t,1,l+Cu+T+er+Dt+jA+a+t,1,l+yf+T+er+Dt+jA+a+t,52,l+bd+Kt+VA+Al+a+t,1,l+kf+Kt+VA+Al+a+t,1,l+hc+Kt+VA+Al+a+t,99,l+kf+Kt+VA+Hc+a+t,1,l+hc+Kt+VA+Hc+a+t,52,r+" +lat_1=18"+Xf+rg+" +k_0=1 +x_0=167638.49597 +y_0=121918.90616"+yI+QI+Hg+t,100,r+" +lat_1=18"+Xf+rg+" +k_0=1"+qt+" +y_0=150000"+R+Q_+a+t,105,l+Y_+Kt+VA+$r+a+t,1,l+bd+Kt+VA+$r+a+t,5,l+VI+Bg+Mo+sn+a+t,1,l+WI+Bg+Mo+sn+a+t,1,l+Np+Bg+Mo+sn+a+t,29,l+WI+Mn+ue+It+a+t,1,l+Np+Mn+ue+It+a+t,1,l+K_+Mn+ue+It+a+t,1,l+Y_+Mn+ue+It+a+t,1,l+bd+Mn+ue+It+a+t,1,l+kf+Mn+ue+It+a+t,23,r+Yp+" +lat_0=39.5 +lon_0=68 +k_0=0.99846154 +x_0=2153865.73916853 +y_0=2368292.194628102"+Wn+Rn+on+t,1,r+cI+fg+" +lon_0=68"+Pa+nl+ol+Wn+Rn+on+t,1,r+MC+tr+" +lon_0=74"+Pa+nl+ol+Wn+Rn+on+t,1,r+" +lat_1=19 +lat_0=19 +lon_0=80"+Pa+nl+ol+Wn+Rn+on+t,1,r+" +lat_1=12 +lat_0=12 +lon_0=80"+Pa+nl+ol+Wn+Rn+on+t,1,r+MC+tr+bo+Pa+" +x_0=2743185.69 +y_0=914395.23"+Kt+VA+$r+a+t,1,r+cI+fg+" +lon_0=68"+Pa+" +x_0=2743196.4 +y_0=914398.8"+Bg+Mo+sn+a+t,1,r+MC+tr+" +lon_0=74"+Pa+" +x_0=2743196.4 +y_0=914398.8"+Bg+Mo+sn+a+t,1,r+cI+fg+" +lon_0=68"+Pa+Vu+Wd+Mn+ue+It+a+t,1,r+MC+tr+" +lon_0=74"+Pa+Vu+Wd+Mn+ue+It+a+t,1,r+MC+tr+bo+Pa+Vu+Wd+Mn+ue+It+a+t,1,r+" +lat_1=19 +lat_0=19 +lon_0=80"+Pa+Vu+Wd+Mn+ue+It+a+t,1,r+MC+tr+bo+Pa+nl+ol+Wn+Rn+on+t,1,r+" +lat_1=12 +lat_0=12 +lon_0=80"+Pa+Vu+Wd+Mn+ue+It+a+t,117,ve+" +lat_0=1.287646666666667 +lon_0=103.8530022222222"+JQ+" +y_0=30000"+Za+Yt+_t+a+t,47,l+kf+Za+Yt+_t+a+t,1,l+hc+Za+Yt+_t+a+t,52,r+cI+fg+tl+Xu+BA+hm+b+iI+a+t,118,l+To+_+uo+a+t,1,l+wo+_+uo+a+t,1,l+On+_+uo+a+t,97,l+wr+_+EA+a+t,1,l+To+_+EA+a+t,1,l+wo+_+EA+a+t,1,l+On+_+EA+a+t,1,l+Ho+_+EA+a+t,56,l+wr+T+_+EA+a+t,1,l+To+T+_+EA+a+t,1,l+wo+T+_+EA+a+t,1,l+On+T+_+EA+a+t,1,l+Ho+T+_+EA+a+t,1,l+mr+T+_+EA+a+t,9,s+" +lat_0=-6 +lon_0=-80.5 +k=0.99983008 +x_0=222000 +y_0=1426834.743"+_+EA+a+t,1,s+" +lat_0=-9.5 +lon_0=-76 +k=0.99932994 +x_0=720000 +y_0=1039979.159"+_+EA+a+t,1,s+" +lat_0=-9.5"+Wo+" +k=0.99952992 +x_0=1324000 +y_0=1040084.558"+_+EA+a+t,107,s+tw+" +lon_0=-1"+dp+" +x_0=274319.51"+u+b+R_+a+t,231,l+xd+CA+ht+a+t,160,s+c+xa+he+d+u+R+Ja+a+t,1,s+c+kQ+he+d+u+R+Ja+a+t,1,s+c+xQ+he+d+u+R+Ja+a+t,1,s+c+Sa+he+d+u+R+Ja+a+t,1,s+c+up+he+d+u+R+Ja+a+t,433,l+ll+i+e+a+t,1,l+Rl+i+e+a+t,1,l+Iu+i+e+a+t,1,l+xd+i+e+a+t,1,l+Wr+i+e+a+t,1,l+Ll+i+e+a+t,1,l+jc+i+e+a+t,1,l+dh+i+e+a+t,1,l+rc+i+e+a+t,1,l+Ul+i+e+a+t,47,s+c+Ko+uA+d+u+i+e+a+t,48,l+Wr+T+_+$d+a+t,259,r+Vp+Wp+qy+cf+d+yo+CA+ht+$o+a+t,1,r+" +lat_1=29.7 +lat_0=29.7"+qy+" +k_0=0.9996155960000001"+d+yo+CA+ht+$o+a+t,2,r+" +lat_1=26.1 +lat_0=26.1"+qy+" +k_0=0.999616304 +x_0=1200000"+br+CA+ht+$o+a+t,1,r+" +lat_1=22.5 +lat_0=22.5"+qy+" +k_0=0.999616437"+BA+br+CA+ht+$o+a+t,42,l+Ul+m+j_+a+t,94,l+xd+b+nn+a+t,1,l+Wr+b+nn+a+t,59,s+sI+" +lon_0=4.5"+dp+" +x_0=230738.26"+u+b+nn+a+t,1,s+sI+" +lon_0=8.5"+dp+" +x_0=670553.98"+u+b+nn+a+t,1,s+sI+" +lon_0=12.5"+dp+" +x_0=1110369.7"+u+b+nn+a+t,239,l+Wr+CA+ht+Jc+a+t,60,l+Wr+T+CA+ht+Jc+a+t,9,l+Dp+Q+a+t,1,l+O_+Q+a+t,1,l+oy+Q+a+t,1,l+H_+Q+a+t,1,l+MI+Q+a+t,1,l+rp+Q+a+t,1,l+bI+Q+a+t,1,l+P_+Q+a+t,1,l+T_+Q+a+t,1,l+Md+Q+a+t,1,l+Bf+Q+a+t,1,l+wf+Q+a+t,1,l+Ef+Q+a+t,1,l+Qf+Q+a+t,1,l+qc+Q+a+t,1,l+zc+Q+a+t,1,l+wr+Q+a+t,1,l+To+Q+a+t,1,l+wo+Q+a+t,1,l+On+Q+a+t,1,l+Ho+Q+a+t,1,l+mr+Q+a+t,7,s+lr+nr+Ad+v+u+Q+h+t,1,s+kn+jf+it+v+u+Q+h+t,1,de+" +lat_0=57"+xh+Mh+E+" +x_0=5000000.001016002 +y_0=-5000000.001016002"+Ol+fn+Q+h+t,1,s+Na+wy+E+v+u+Q+h+t,1,s+Na+Ey+E+v+u+Q+h+t,1,s+Na+Tf+E+v+u+Q+h+t,1,s+Na+wc+E+v+u+Q+h+t,1,s+Na+Jl+E+v+u+Q+h+t,1,s+Na+yy+E+" +x_0=213360.4267208534"+u+Q+h+t,1,s+Na+Qy+E+v+u+Q+h+t,1,s+Na+Hp+E+wd+u+Q+h+t,1,r+bh+Dh+kC+my+zt+u+Q+h+t,1,r+di+El+X+Pn+k+u+Q+h+t,1,r+Ii+pi+$+Pn+k+u+Q+h+t,1,r+PA+_i+uc+rA+k+u+Q+h+t,1,r+Kh+Hd+Ci+dc+k+u+Q+h+t,1,r+Bi+wi+Ic+Mr+k+u+Q+h+t,1,r+Ei+yi+Qi+Gr+k+u+Q+h+t,2,s+Nt+Ne+E+v+u+Q+h+t,1,s+Nt+Re+E+v+u+Q+h+t,1,s+Nt+Sr+it+v+u+Q+h+t,1,r+Hi+Ji+$A+qo+k+u+Q+h+t,1,r+qi+Cc+zi+qo+k+u+Q+h+t,1,r+" +lat_1=39.71666666666667 +lat_2=40.78333333333333"+X+yt+k+u+Q+h+t,1,r+Yh+Vh+Ce+yt+k+u+Q+h+t,1,r+PA+mi+S+yt+k+u+Q+h+t,1,r+ki+pc+xi+ml+wd+u+Q+h+t,1,s+Me+Fe+_c+v+u+Q+h+t,1,s+TA+ce+LA+v+u+Q+h+t,1,s+TA+tu+LA+v+u+Q+h+t,1,r+Wh+Mi+Jd+Xh+k+u+Q+h+t,6,s+kn+Le+E+v+u+Q+h+t,1,s+kn+Ue+E+v+u+Q+h+t,1,s+H+Oe+nt+v+u+Q+h+t,1,s+H+hl+nt+v+u+Q+h+t,1,s+H+Nr+it+v+u+Q+h+t,1,s+S+je+os+v+u+Q+h+t,1,s+S+Ke+LA+v+u+Q+h+t,1,s+ai+Ye+fA+v+u+Q+h+t,1,s+ai+Ve+fA+v+u+Q+h+t,1,r+ji+Ki+ba+Ka+k+u+Q+h+t,1,r+yA+Yi+Ga+Ka+k+u+Q+h+t,1,r+Vi+Wi+dA+ka+k+u+Q+h+t,1,r+Xi+Zi+S+Ie+k+u+Q+h+t,1,r+WA+ui+ai+yl+k+u+Q+h+t,1,r+" +lat_1=36.73333333333333 +lat_2=37.93333333333333"+AA+ds+k+u+Q+h+t,1,r+" +lat_1=31.16666666666667 +lat_2=32.66666666666666 +lat_0=30.66666666666667"+Co+k+u+Q+h+t,1,r+" +lat_1=29.3 +lat_2=30.7 +lat_0=28.66666666666667"+vt+k+u+Q+h+t,1,s+hA+Vn+E+v+u+Q+h+t,1,s+At+We+fA+v+u+Q+h+t,1,r+" +lat_1=38.3 +lat_2=39.45"+Ce+rg+" +x_0=243840.4876809754"+u+Q+h+t,1,r+" +lat_1=41.71666666666667 +lat_2=42.68333333333333"+kr+za+wd+u+Q+h+t,1,r+" +lat_1=41.28333333333333 +lat_2=41.48333333333333"+kr+Wo+" +x_0=60960.12192024384"+u+Q+h+t,4,r+" +lat_1=47.03333333333333 +lat_2=48.63333333333333"+xr+Xe+k+u+Q+h+t,1,r+" +lat_1=45.61666666666667 +lat_2=47.05"+Ar+xl+k+u+Q+h+t,1,r+" +lat_1=43.78333333333333 +lat_2=45.21666666666667"+gf+tf+k+u+Q+h+t,1,s+Ee+Pe+Ad+v+u+Q+h+t,1,s+lr+jt+LA+v+u+Q+h+t,1,s+Qe+PI+it+v+u+Q+h+t,1,s+Qe+Co+it+v+u+Q+h+t,1,s+ur+TI+LA+v+u+Q+h+t,1,r+" +lat_1=34.41666666666666 +lat_2=33.86666666666667 +lat_0=34.13333333333333"+or+" +x_0=1276106.450596901 +y_0=1268253.006858014"+Q+h+t,48,s+lA+Vn+E+et+u+i+e+h+t,1,s+At+We+fA+ao+u+i+e+h+t,1,r+la+ha+xr+Xe+UA+OA+i+e+h+t,1,r+ic+ga+Ar+xl+UA+OA+i+e+h+t,1,r+ca+fa+gf+tf+UA+OA+i+e+h+t,1,r+el+El+ua+fe+aA+u+i+e+h+t,1,r+sc+RI+Bc+un+x+u+i+e+h+t,1,r+wa+Ea+Kd+ce+x+u+i+e+h+t,1,s+lA+Vn+E+et+u+i+e+h+t,1,s+At+We+fA+ao+u+i+e+h+t,1,r+la+ha+xr+Xe+UA+OA+i+e+h+t,1,r+ic+ga+Ar+xl+UA+OA+i+e+h+t,1,r+ca+fa+gf+tf+UA+OA+i+e+h+t,1,r+el+El+ua+fe+aA+u+i+e+h+t,1,r+sc+RI+Bc+un+x+u+i+e+h+t,1,r+wa+Ea+Kd+ce+x+u+i+e+h+t,1,s+lA+Vn+E+et+u+i+e+h+t,1,s+At+We+fA+ao+u+i+e+h+t,1,r+la+ha+xr+Xe+UA+OA+i+e+h+t,1,r+ic+ga+Ar+xl+UA+OA+i+e+h+t,1,r+ca+fa+gf+tf+UA+OA+i+e+h+t,1,r+el+El+ua+fe+aA+u+i+e+h+t,1,r+sc+RI+Bc+un+x+u+i+e+h+t,1,r+wa+Ea+Kd+ce+x+u+i+e+h+t,21,s+c+hs+E+kA+u+i+e+a+t,1,s+c+ce+E+kA+u+i+e+a+t,1,s+c+Wc+E+kA+u+i+e+a+t,1,s+c+Il+E+kA+u+i+e+a+t,1,s+c+Jt+E+kA+u+i+e+a+t,1,s+c+cp+E+kA+u+i+e+a+t,1,s+c+$f+E+kA+u+i+e+a+t,1,s+c+" +lon_0=-53"+E+kA+u+i+e+a+t,1,s+c+RQ+E+kA+u+i+e+a+t,2,l+Dp+i+e+a+t,1,l+O_+i+e+a+t,1,l+oy+i+e+a+t,1,l+H_+i+e+a+t,1,l+MI+i+e+a+t,1,l+rp+i+e+a+t,1,l+bI+i+e+a+t,1,l+P_+i+e+a+t,1,l+T_+i+e+a+t,1,l+Md+i+e+a+t,1,l+Bf+i+e+a+t,1,l+wf+i+e+a+t,1,l+Ef+i+e+a+t,1,l+Qf+i+e+a+t,1,l+qc+i+e+a+t,1,l+zc+i+e+a+t,1,l+wr+i+e+a+t,1,l+To+i+e+a+t,1,l+wo+i+e+a+t,1,l+On+i+e+a+t,1,l+Ho+i+e+a+t,1,l+mr+i+e+a+t,1,l+Sg+i+e+a+t,6,s+lr+nr+Ad+N+u+i+e+a+t,1,s+kn+jf+it+x+u+i+e+a+t,1,de+" +lat_0=57"+xh+Mh+E+eg+as+Ol+fn+i+e+a+t,1,s+Na+wy+E+d+u+i+e+a+t,1,s+Na+Ey+E+d+u+i+e+a+t,1,s+Na+Tf+E+d+u+i+e+a+t,1,s+Na+wc+E+d+u+i+e+a+t,1,s+Na+Jl+E+d+u+i+e+a+t,1,s+Na+yy+E+d+u+i+e+a+t,1,s+Na+Qy+E+d+u+i+e+a+t,1,s+Na+Hp+E+d+u+i+e+a+t,1,r+bh+Dh+kC+my+Et+u+i+e+a+t,1,r+di+El+X+Pn+kt+bA+i+e+a+t,1,r+Ii+pi+$+Pn+kt+bA+i+e+a+t,1,r+PA+_i+uc+rA+kt+bA+i+e+a+t,1,r+Kh+Hd+Ci+dc+kt+bA+i+e+a+t,1,r+Bi+wi+Ic+Mr+kt+bA+i+e+a+t,1,r+Ei+yi+Qi+Gr+kt+bA+i+e+a+t,2,s+Nt+Ne+E+us+u+i+e+a+t,1,s+Nt+Re+E+us+u+i+e+a+t,1,s+Nt+Sr+it+us+u+i+e+a+t,1,r+Hi+Ji+$A+qo+K+u+i+e+a+t,1,r+qi+Cc+zi+qo+K+br+i+e+a+t,1,r+Qs+ms+X+yt+La+Ua+i+e+a+t,1,r+Yh+Vh+Ce+yt+La+Ua+i+e+a+t,1,r+PA+mi+S+yt+La+Ua+i+e+a+t,1,r+ki+pc+xi+ml+Dd+vd+i+e+a+t,1,s+Me+Fe+_c+N+u+i+e+a+t,1,s+TA+ce+LA+N+u+i+e+a+t,1,s+TA+tu+LA+N+u+i+e+a+t,1,r+Wh+Mi+Jd+Xh+x+u+i+e+a+t,1,s+Bh+Xp+fA+d+u+i+e+a+t,1,s+wh+Vl+fA+d+u+i+e+a+t,1,s+ln+Jl+Bl+d+u+i+e+a+t,1,s+Eh+Zp+Bl+d+u+i+e+a+t,1,s+yh+Wl+" +k=1"+d+u+i+e+a+t,1,s+kn+Le+E+N+u+i+e+a+t,1,s+kn+Ue+E+fs+u+i+e+a+t,1,s+H+Oe+nt+N+u+i+e+a+t,1,s+H+hl+nt+d+u+i+e+a+t,1,s+H+Nr+it+_e+u+i+e+a+t,1,s+S+je+os+oA+u+i+e+a+t,1,s+S+Ke+LA+fs+u+i+e+a+t,1,s+ai+Ye+fA+pt+ql+i+e+a+t,1,s+ai+Ve+fA+ao+ql+i+e+a+t,1,r+ji+Ki+ba+Ka+BA+nA+i+e+a+t,1,r+yA+Yi+Ga+Ka+d+u+i+e+a+t,1,r+Vi+Wi+dA+ka+K+u+i+e+a+t,1,r+Xi+Zi+S+Ie+K+br+i+e+a+t,2,r+ks+xs+AA+ds+d+bA+i+e+a+t,1,r+oa+ra+lr+Co+Et+u+i+e+a+t,1,r+Rf+Ff+Lf+vt+Et+u+i+e+a+t,1,s+lA+Vn+E+oA+u+i+e+a+t,1,s+At+We+fA+ao+u+i+e+a+t,1,r+Xg+xf+$+rg+K+u+i+e+a+t,1,r+Ms+bi+kr+za+N+fc+i+e+a+t,1,r+bs+Ds+kr+Wo+d+u+i+e+a+t,1,r+vs+Ss+Gs+Il+tC+u+i+e+a+t,1,r+Mf+Ns+Rs+tt+rd+u+i+e+a+t,1,r+Ot+bf+ba+tt+$h+u+i+e+a+t,1,r+la+ha+xr+Xe+_e+ts+i+e+a+t,1,r+ic+ga+Ar+xl+_e+ts+i+e+a+t,1,r+ca+fa+gf+tf+_e+ts+i+e+a+t,1,s+Eo+Pe+he+oA+u+i+e+a+t,1,s+Eo+jt+he+fs+u+i+e+a+t,1,s+Qe+PI+it+qt+u+i+e+a+t,1,s+Qe+Co+it+d+u+i+e+a+t,1,s+ur+TI+LA+hy+u+i+e+a+t,41,l+Vr+b+oi+a+t,1,l+oc+b+oi+a+t,80,l+On+_+F_+a+t,80,"+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150"+_+y+a+t,5,s+" +lat_0=-36.87986527777778 +lon_0=174.7643393611111"+E+oA+ni+_+y+a+t,1,s+" +lat_0=-37.76124980555556 +lon_0=176.46619725 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-38.62470277777778 +lon_0=177.8856362777778 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-39.65092930555556 +lon_0=176.6736805277778 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-39.13575830555556 +lon_0=174.22801175 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-39.51247038888889 +lon_0=175.6400368055556 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-40.24194713888889 +lon_0=175.4880996111111 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-40.92553263888889 +lon_0=175.6473496666667 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-41.30131963888888 +lon_0=174.7766231111111 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-40.71475905555556 +lon_0=172.6720465 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-41.27454472222222 +lon_0=173.2993168055555 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-41.28991152777778 +lon_0=172.1090281944444 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-41.81080286111111 +lon_0=171.5812600555556 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-42.33369427777778 +lon_0=171.5497713055556 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-42.68911658333333 +lon_0=173.0101333888889 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-41.54448666666666 +lon_0=173.8020741111111 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-42.88632236111111 +lon_0=170.9799935 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-43.11012813888889 +lon_0=170.2609258333333 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-43.97780288888889 +lon_0=168.606267 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-43.59063758333333 +lon_0=172.7271935833333 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-43.74871155555556 +lon_0=171.3607484722222 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-44.40222036111111 +lon_0=171.0572508333333 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-44.73526797222222 +lon_0=169.4677550833333 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-45.13290258333333 +lon_0=168.3986411944444 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-45.56372616666666 +lon_0=167.7388617777778 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-45.81619661111111 +lon_0=170.6285951666667 +k=1"+oA+ni+_+y+a+t,1,s+" +lat_0=-45.86151336111111 +lon_0=170.2825891111111"+Ad+oA+ni+_+y+a+t,1,s+" +lat_0=-46.60000961111111 +lon_0=168.342872 +k=1 +x_0=300002.66 +y_0=699999.58"+_+y+a+t,26,l+vg+T+_+y+a+t,1,l+_f+T+_+y+a+t,1,l+Lu+T+_+y+a+t,31,s+" +lat_0=-39 +lon_0=175.5 +k=1 +x_0=274319.5243848086 +y_0=365759.3658464114"+_+y+U_+t,1,s+SQ+" +lon_0=171.5 +k=1 +x_0=457199.2073080143 +y_0=457199.2073080143"+_+y+U_+t,99,s+ma+" +lon_0=-4.666666666666667 +k=1"+z+u+ko+es+mA+Gp+a+t,1,s+ma+" +lon_0=-2.333333333333333 +k=1"+z+u+ko+es+mA+Gp+a+t,1,s+ma+$n+" +k=1"+z+u+ko+es+mA+Gp+a+t,1,s+ma+" +lon_0=2.5 +k=1"+z+u+ko+es+mA+Gp+a+t,1,s+ma+iw+" +k=1"+z+u+ko+es+mA+Gp+a+t,1,s+ma+" +lon_0=10.16666666666667 +k=1"+z+u+ko+es+mA+Gp+a+t,1,s+ma+" +lon_0=14.16666666666667 +k=1"+z+u+ko+es+mA+Gp+a+t,1,s+ma+" +lon_0=18.33333333333333 +k=1"+z+u+ko+es+mA+Gp+a+t,31,l+Rl+_+Yr+a+t,64,s+wt+TC+" +k=1 +x_0=180.598 +y_0=-86.98999999999999"+_+Yr+a+t,7,r+bu+Du+" +lon_0=5.399999999999999 +k_0=0.99950908"+d+yo+" +a=6376523"+EI+_Q+a+t,61,r+bu+Du+$n+" +k_0=0.999877341"+x+Vo+CA+ht+Gt+kg+a+t,1,r+" +lat_1=46.8 +lat_0=46.8"+$n+" +k_0=0.99987742"+x+Vo+CA+ht+Gt+kg+a+t,1,r+ty+ey+$n+" +k_0=0.999877499"+x+Vo+CA+ht+Gt+kg+a+t,1,r+iy+sy+$n+" +k_0=0.99994471 +x_0=234.358 +y_0=185861.369"+CA+ht+Gt+kg+a+t,7,r+bu+Du+$n+" +k_0=0.999877341"+x+$_+CA+ht+Gt+kg+a+t,1,r+" +lat_1=46.8 +lat_0=46.8"+$n+" +k_0=0.99987742"+x+" +y_0=2200000"+CA+ht+Gt+kg+a+t,1,r+ty+ey+$n+" +k_0=0.999877499"+x+" +y_0=3200000"+CA+ht+Gt+kg+a+t,1,r+iy+sy+$n+" +k_0=0.99994471 +x_0=234.358 +y_0=4185861.369"+CA+ht+Gt+kg+a+t,126,s+" +lat_0=49 +lon_0=-2 +k=0.9996012717"+K+" +y_0=-100000"+Ku+Mg+a+t,491,ve+Ph+Th+CI+" +y_0=126867.909"+sf+af+gi+a+t,1,s+Ph+Th+" +k=1"+CI+" +y_0=1126867.909"+sf+af+gi+a+t,1,ve+Ph+Th+CI+" +y_0=1126867.909"+sf+af+gi+a+t,39,l+Wr+T+CA+ht+m_+a+t,116,l+hc+T+i+e+a+t,1,l+gc+T+i+e+a+t,1,l+Kc+T+i+e+a+t,1,l+lc+T+i+e+a+t,1,l+Yc+T+i+e+a+t,1,l+Cu+T+i+e+a+t,1,l+yf+T+i+e+a+t,1,l+Uu+T+i+e+a+t,1,l+ZI+T+i+e+a+t,1,l+Sp+T+i+e+a+t,1,l+vg+T+i+e+a+t,46,s+c+mn+" +k=1"+ri+u+f+n+a+t,1,s+c+Ao+" +k=1"+ys+u+f+n+a+t,1,s+c+zo+" +k=1"+Ml+u+f+n+a+t,1,s+c+jh+" +k=1"+Xo+u+f+n+a+t,1,s+c+tl+" +k=1"+Vg+u+f+n+a+t,1,s+c+qu+" +k=1"+Wg+u+f+n+a+t,1,s+c+GI+" +k=1"+ig+u+f+n+a+t,1,s+c+jd+" +k=1"+Ql+u+f+n+a+t,1,s+c+NI+" +k=1"+sg+u+f+n+a+t,1,s+c+to+" +k=1"+no+u+f+n+a+t,1,s+c+eo+" +k=1"+Fn+u+f+n+a+t,1,s+c+Io+" +k=1"+Go+u+f+n+a+t,1,s+c+io+" +k=1"+No+u+f+n+a+t,1,s+c+so+" +k=1"+Dr+u+f+n+a+t,1,s+c+ss+" +k=1"+vo+u+f+n+a+t,1,s+c+Oa+" +k=1"+So+u+f+n+a+t,1,s+c+xa+" +k=1"+oo+u+f+n+a+t,1,s+c+Sa+" +k=1"+Ro+u+f+n+a+t,1,s+c+Bs+" +k=1"+ro+u+f+n+a+t,1,s+c+Ma+" +k=1"+Fo+u+f+n+a+t,1,s+c+id+" +k=1"+ag+u+f+n+a+t,1,s+c+iu+" +k=1"+Lo+u+f+n+a+t,1,s+c+$c+" +k=1"+Uo+u+f+n+a+t,1,s+c+sd+" +k=1"+Oo+u+f+n+a+t,1,s+c+Af+" +k=1"+Po+u+f+n+a+t,1,s+c+hg+" +k=1"+Ln+u+f+n+a+t,1,s+c+Tl+" +k=1"+sr+u+f+n+a+t,1,s+c+Hl+" +k=1"+In+u+f+n+a+t,1,s+c+cg+" +k=1"+ar+u+f+n+a+t,168,s+" +lat_0=24.45"+ow+Bl+N+yo+_+Ud+a+t,391,rn+ay+Yy+" +k=0.9999079"+z+u+m+Fa+a+t,1,rn+ay+Yy+" +k=0.9999079 +x_0=155000 +y_0=463000"+m+Fa+a+t,109,FC+c+ef+eg+RA+W+FA+a+t,67,l+To+W+FA+a+t,1,l+wo+W+FA+a+t,1,l+On+W+FA+a+t,1,l+Ho+W+FA+a+t,1,l+mr+W+FA+a+t,15,l+wr+T+W+FA+a+t,1,l+To+T+W+FA+a+t,1,l+wo+T+W+FA+a+t,1,l+On+T+W+FA+a+t,1,l+Ho+T+W+FA+a+t,1,l+mr+T+W+FA+a+t,1,l+Sg+T+W+FA+a+t,1,l+mf+T+W+FA+a+t,1,l+Cf+T+W+FA+a+t,25,l+On+T+_+df+a+t,1,l+Ho+T+_+df+a+t,112,l+Ll+T+Tn+Ht+a+t,38,s+nd+" +lon_0=11 +k=1"+z+u+Qn+Tn+Ht+Xa+t,2,s+nd+" +lon_0=13 +k=1"+z+u+Qn+Tn+Ht+Xa+t,2,s+nd+yn+" +k=1"+z+u+Qn+Tn+Ht+Xa+t,2,s+nd+BC+" +k=1"+z+u+Qn+Tn+Ht+Xa+t,2,s+nd+DI+" +k=1"+z+u+Qn+Tn+Ht+Xa+t,2,s+nd+mn+" +k=1"+z+u+Qn+Tn+Ht+Xa+t,2,s+nd+Rp+" +k=1"+z+u+Qn+Tn+Ht+Xa+t,2,s+nd+vI+" +k=1"+z+u+Qn+Tn+Ht+Xa+t,317,de+" +lat_0=-18.9 +lonc=44.10000000000001 +alpha=18.9"+ns+K+le+" +gamma=18.9"+_+Jn+kg+a+t,36,l+rl+T+_+Jn+a+t,1,l+Vr+T+_+Jn+a+t,110,l+gc+Cg+qa+a+t,1,l+Kc+Cg+qa+a+t,21,de+sI+aQ+vu+ad+" +x_0=590476.8714630401 +y_0=442857.653094361"+Ir+Cg+qa+" +to_meter=20.11676512155263"+t,1,de+sI+aQ+vu+ad+" +x_0=590476.8727431979 +y_0=442857.6545573985"+Ir+Cg+qa+" +to_meter=0.3047994715386762"+t,1,de+sI+aQ+vu+ad+" +x_0=590476.87 +y_0=442857.65"+Ir+Cg+qa+a+t,28,s+ry+" +lon_0=-8 +k=1"+N+ql+Ku+Qt+a+t,1,s+ry+" +lon_0=-8 +k=1.000035"+N+ql+hu+Qt+a+t,1,s+ry+" +lon_0=-8 +k=1.000035"+N+ql+hu+Qt+a+t,258,s+zu+im+E+z+u+m+G+a+t,1,s+zu+Zc+E+z+u+m+G+a+t,1,s+$a+yu+E+z+u+m+G+a+t,1,s+zu+AC+E+z+u+m+G+a+t,1,s+$a+Qu+E+z+u+m+G+a+t,1,s+$a+Ip+E+z+u+m+G+a+t,1,s+$a+mu+E+z+u+m+G+a+t,1,s+$a+sm+E+z+u+m+G+a+t,1,s+$a+ku+E+z+u+m+G+a+t,1,s+Ga+xu+E+z+u+m+G+a+t,1,s+hr+fQ+E+z+u+m+G+a+t,1,s+hr+uQ+E+z+u+m+G+a+t,1,s+hr+dQ+E+z+u+m+G+a+t,1,s+tr+" +lon_0=142"+E+z+u+m+G+a+t,1,s+tr+od+E+z+u+m+G+a+t,1,s+tr+" +lon_0=124"+E+z+u+m+G+a+t,1,s+tr+Zc+E+z+u+m+G+a+t,1,s+" +lat_0=20"+Ip+E+z+u+m+G+a+t,1,s+tr+yQ+E+z+u+m+G+a+t,21,ve+sw+OC+" +x_0=86501.46392051999"+Em+ws+Es+Kr+Aw+t,139,l+Vr+xn+a+t,1,l+oc+xn+a+t,151,r+" +lat_1=36"+$a+Ep+Rd+d+yo+CA+ht+Or+a+t,1,r+Vp+Wp+Ep+cf+d+yo+CA+ht+Or+a+t,1,r+" +lat_1=36"+$a+Ep+Rd+d+yo+CA+ht+a+t,1,r+Vp+Wp+Ep+cf+d+yo+CA+ht+a+t,235,l+Rl+b+DA+a+t,1,l+Iu+b+DA+a+t,1,l+xd+b+DA+a+t,1,l+Wr+b+DA+a+t,59,r+" +lat_1=36"+$a+Ep+Rd+" +x_0=500135 +y_0=300090"+b+DA+a+t,1,r+Vp+Wp+Ep+cf+" +x_0=500135 +y_0=300090"+b+DA+a+t,236,l+ll+CA+ht+a+t,93,l+Ho+_+qn+a+t,33,s+c+ef+uA+d+u+_+qn+a+t,16,s+c+$B+uA+d+u+_+qn+a+t,1,s+c+$B+E+d+u+_+qn+a+t,80,s+c+LI+" +k=1"+z+as+m+KA+yg+a+t,1,s+c+Pd+" +k=1"+z+as+m+KA+yg+a+t,1,s+c+cQ+" +k=1"+z+as+m+KA+yg+a+t,1,s+c+Su+" +k=1"+z+as+m+Z+a+t,1,s+c+pr+" +k=1"+z+as+m+Z+a+t,1,s+c+Gu+" +k=1"+z+as+m+Z+a+t,1,s+c+Su+" +k=1"+Ft+as+m+Z+a+t,1,s+c+pr+" +k=1 +x_0=450000"+as+m+Z+a+t,1,s+c+Gu+" +k=1"+Cy+as+m+Z+a+t,22,s+c+LI+" +k=1"+z+u+m+KA+yg+a+t,1,s+c+Pd+" +k=1"+z+u+m+KA+yg+a+t,1,s+c+cQ+" +k=1"+z+u+m+KA+yg+a+t,1,s+c+Su+" +k=1"+Ft+u+m+Z+a+t,1,s+c+pr+" +k=1 +x_0=450000"+u+m+Z+a+t,1,s+c+Gu+" +k=1"+Cy+u+m+Z+a+t,1,r+zh+lf+" +lat_0=47.5"+pr+K+br+m+Z+a+t,1,s+c+LI+" +k=1"+Ft+u+m+KA+yg+a+t,1,s+c+Pd+" +k=1 +x_0=450000"+u+m+KA+yg+a+t,1,s+c+cQ+" +k=1"+Cy+u+m+KA+yg+a+t,10,r+mh+kh+Do+" +lon_0=4.356939722222222 +x_0=150000.01256 +y_0=5400088.4378"+_+en+a+t,70,r+" +lat_1=51.16666723333333 +lat_2=49.8333339"+Do+" +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438"+_+en+a+t,96,s+c+BQ+" +k=1"+be+u+m+tA+a+t,1,s+c+Fl+" +k=1"+Lt+u+m+tA+a+t,1,s+c+jo+" +k=1"+ri+u+m+tA+a+t,1,s+c+yn+" +k=1"+ys+u+m+tA+a+t,59,l+ll+CA+ht+If+a+t,1,l+Rl+CA+ht+If+a+t,71,rn+" +lat_0=45.9 +lon_0=25.39246588888889 +k=0.9996667"+d+bA+_+Od+a+t,238,l+rl+F+Yg+a+t,1,l+Vr+F+Yg+a+t,62,s+c+Fp+" +k=1"+d+u+i+gp+a+t,64,l+Bf+i+e+a+t,1,l+wf+i+e+a+t,1,l+Ef+i+e+a+t,1,l+Qf+i+e+a+t,1,l+qc+i+e+a+t,1,l+zc+i+e+a+t,1,l+wr+i+e+a+t,1,l+To+i+e+a+t,1,l+wo+i+e+a+t,1,l+On+i+e+a+t,1,l+Ho+i+e+a+t,1,l+mr+i+e+a+t,1,l+wr+T+i+e+a+t,1,l+To+T+i+e+a+t,1,l+wo+T+i+e+a+t,1,l+On+T+i+e+a+t,1,l+Ho+T+i+e+a+t,1,l+mr+T+i+e+a+t,1,l+Sg+T+i+e+a+t,1,l+mf+T+i+e+a+t,1,l+Cf+T+i+e+a+t,1,l+wr+i+e+a+t,1,l+To+i+e+a+t,1,l+wo+i+e+a+t,1,l+On+i+e+a+t,1,l+Ho+i+e+a+t,1,l+mr+i+e+a+t,1,l+wr+T+i+e+a+t,1,l+To+T+i+e+a+t,1,l+wo+T+i+e+a+t,1,l+On+T+i+e+a+t,1,l+Ho+T+i+e+a+t,1,l+mr+T+i+e+a+t,1,l+Sg+T+i+e+a+t,1,l+mf+T+i+e+a+t,1,l+Cf+T+i+e+a+t,1,r+" +lat_1=48.71666666666667 +lat_2=47.85"+cr+ir+k+u+Q+h+t,1,r+" +lat_1=47.88333333333333 +lat_2=46.45 +lat_0=45.83333333333334"+ir+k+u+Q+h+t,1,r+" +lat_1=46.4 +lat_2=44.86666666666667"+hr+ir+k+u+Q+h+t,2,r+" +lat_1=41.85 +lat_2=42.81666666666667 +lat_0=41.33333333333334"+fe+k+u+Q+h+t,1,r+" +lat_1=40.28333333333333"+bi+wt+" +lon_0=-99.5"+k+u+Q+h+t,1,s+ge+Ze+E+v+u+Q+h+t,1,s+ge+$e+E+v+u+Q+h+t,1,s+ge+Ai+E+v+u+Q+h+t,1,s+Da+ti+fA+v+u+Q+h+t,1,s+XA+" +lon_0=-74.66666666666667"+os+k+u+Q+h+t,1,s+Nt+Te+mo+v+u+Q+h+t,1,s+Nt+Rr+E+v+u+Q+h+t,1,s+Nt+He+Fr+v+u+Q+h+t,1,s+Ga+" +lon_0=-74.33333333333333"+fA+v+u+Q+h+t,1,s+Ga+Je+MA+v+u+Q+h+t,1,s+Ga+qe+MA+v+u+Q+h+t,2,r+" +lat_1=34.33333333333334 +lat_2=36.16666666666666"+Zh+Xc+k+u+Q+h+t,1,r+" +lat_1=47.43333333333333"+ny+cr+Is+k+u+Q+h+t,1,r+" +lat_1=46.18333333333333 +lat_2=47.48333333333333"+xt+Is+k+u+Q+h+t,1,r+" +lat_1=40.43333333333333 +lat_2=41.7"+wt+hs+k+u+Q+h+t,1,r+" +lat_1=38.73333333333333 +lat_2=40.03333333333333"+Me+hs+k+u+Q+h+t,1,r+" +lat_1=35.56666666666667"+Oi+qd+ka+k+u+Q+h+t,1,r+" +lat_1=33.93333333333333 +lat_2=35.23333333333333"+Gi+ka+k+u+Q+h+t,1,r+" +lat_1=44.33333333333334"+lf+lA+rA+k+u+Q+h+t,1,r+" +lat_1=42.33333333333334 +lat_2=44"+H+rA+k+u+Q+h+t,1,r+" +lat_1=40.88333333333333 +lat_2=41.95"+ZA+ps+k+u+Q+h+t,2,s+$i+za+" +k=0.9999938"+v+u+Q+h+t,1,r+" +lat_1=33.76666666666667 +lat_2=34.96666666666667"+zu+ce+k+u+Q+h+t,2,r+" +lat_1=32.33333333333334 +lat_2=33.66666666666666"+Fi+ce+k+u+Q+h+t,1,r+" +lat_1=44.41666666666666 +lat_2=45.68333333333333"+hA+fe+k+u+Q+h+t,1,r+" +lat_1=42.83333333333334 +lat_2=44.4"+As+vA+k+u+Q+h+t,2,r+dm+" +lat_2=36.18333333333333"+zd+kl+k+u+Q+h+t,1,r+" +lat_1=32.13333333333333 +lat_2=33.96666666666667"+Li+" +lon_0=-97.5"+k+u+Q+h+t,1,r+" +lat_1=30.11666666666667 +lat_2=31.88333333333333"+Ee+vA+k+u+Q+h+t,1,r+" +lat_1=28.38333333333333 +lat_2=30.28333333333333"+Ui+pl+k+u+Q+h+t,1,r+" +lat_1=26.16666666666667 +lat_2=27.83333333333333"+ye+Ie+k+u+Q+h+t,1,r+" +lat_1=40.71666666666667 +lat_2=41.78333333333333"+Pt+at+k+u+Q+h+t,1,r+" +lat_1=39.01666666666667 +lat_2=40.65"+dA+at+k+u+Q+h+t,1,r+" +lat_1=37.21666666666667 +lat_2=38.35"+S+at+k+u+Q+h+t,1,s+Da+tg+Lr+v+u+Q+h+t,1,r+" +lat_1=38.03333333333333 +lat_2=39.2"+$+ja+k+u+Q+h+t,1,r+Si+" +lat_2=37.96666666666667"+AA+ja+k+u+Q+h+t,1,r+" +lat_1=47.5"+ny+cr+ze+k+u+Q+h+t,1,r+" +lat_1=45.83333333333334 +lat_2=47.33333333333334"+Pi+rA+k+u+Q+h+t,1,r+" +lat_1=39 +lat_2=40.25"+Bc+un+k+u+Q+h+t,1,r+" +lat_1=37.48333333333333 +lat_2=38.88333333333333"+Kd+ce+k+u+Q+h+t,1,r+" +lat_1=45.56666666666667 +lat_2=46.76666666666667"+Ti+Jt+k+u+Q+h+t,1,r+" +lat_1=44.25"+Qo+hA+Jt+k+u+Q+h+t,1,r+" +lat_1=42.73333333333333 +lat_2=44.06666666666667"+Ju+Jt+k+u+Q+h+t,1,s+qh+ei+LA+v+u+Q+h+t,1,s+qh+ii+LA+v+u+Q+h+t,1,s+qh+Ur+LA+v+u+Q+h+t,1,s+qh+si+LA+v+u+Q+h+t,6,s+c+pl+uA+L+u+Q+h+t,1,s+c+cp+uA+L+u+Q+h+t,1,s+c+Il+uA+L+u+Q+h+t,1,s+c+ce+uA+L+u+Q+h+t,14,s+c+" +lon_0=-53"+E+kA+u+Q+a+t,1,s+c+RQ+E+kA+u+Q+a+t,1,s+c+V_+E+kA+u+Q+a+t,1,s+c+UI+E+kA+u+Q+a+t,1,s+c+OI+E+kA+u+Q+a+t,1,s+c+W_+E+kA+u+Q+a+t,12,r+wC+lf+hr+Vn+z+u+Q+a+t,1,r+Zt+$t+ye+vt+k+u+Q+h+t,1,r+zh+SI+Zg+ir+x+u+i+e+a+t,4,r+el+El+ua+fe+d+u+i+e+a+t,3,s+ge+Ze+E+N+eC+i+e+a+t,1,s+ge+$e+E+d+Bo+i+e+a+t,1,s+ge+Ai+E+_e+Ag+i+e+a+t,1,s+Da+ti+fA+oA+u+i+e+a+t,1,s+XA+bn+E+Ft+u+i+e+a+t,1,s+Nt+Te+mo+Df+u+i+e+a+t,1,s+Nt+Rr+E+d+u+i+e+a+t,1,s+Nt+He+Fr+gy+u+i+e+a+t,1,s+XA+bn+E+Ft+u+i+e+a+t,1,s+Ga+Je+MA+qt+u+i+e+a+t,1,s+Ga+qe+MA+hI+u+i+e+a+t,1,r+Di+vi+ZA+eu+oA+u+i+e+a+t,1,r+Fs+Ls+Zh+Xc+tp+u+i+e+a+t,1,r+st+Us+cr+Is+x+u+i+e+a+t,1,r+Os+Ps+xt+Is+x+u+i+e+a+t,1,r+Uf+da+wt+hs+x+u+i+e+a+t,1,r+Ia+pa+Me+hs+x+u+i+e+a+t,1,r+Si+Ts+qd+ka+x+u+i+e+a+t,1,r+Hs+Js+Gi+ka+x+u+i+e+a+t,1,r+Tu+Be+lA+rA+be+u+i+e+a+t,1,r+Hu+we+H+rA+BA+u+i+e+a+t,1,r+$g+qs+ZA+ps+x+u+i+e+a+t,1,r+Ni+Ri+X+ps+x+u+i+e+a+t,1,s+$i+za+ng+pt+u+i+e+a+t,3,r+zs+vf+Fi+ce+Sf+u+i+e+a+t,1,r+_a+Ca+hA+fe+x+u+i+e+a+t,1,r+Of+Ba+As+vA+x+u+i+e+a+t,1,r+js+Ac+$A+Kg+x+u+i+e+a+t,1,r+Ks+tc+zd+kl+N+nA+i+e+a+t,1,r+Ys+Vs+Li+Ie+x+Se+i+e+a+t,1,r+Ws+Xs+Ee+vA+fs+va+i+e+a+t,1,r+Zs+$s+Ui+pl+x+Ag+i+e+a+t,1,r+Zt+$t+ye+Ie+oA+bl+i+e+a+t,1,r+yA+Ae+Pt+at+d+nA+i+e+a+t,1,r+Hr+te+dA+at+d+Se+i+e+a+t,1,r+Jr+ee+S+at+d+va+i+e+a+t,1,s+Da+tg+Lr+d+u+i+e+a+t,1,r+Gf+Aa+$+ja+Lt+Se+i+e+a+t,1,r+WA+Oi+AA+ja+Lt+nA+i+e+a+t,1,r+st+Nf+cr+ze+d+u+i+e+a+t,1,r+ta+ea+Pi+rA+d+u+i+e+a+t,1,r+sc+RI+Bc+un+x+u+i+e+a+t,1,r+wa+Ea+Kd+ce+x+u+i+e+a+t,1,r+ia+sa+Ti+Jt+x+u+i+e+a+t,1,r+gl+ec+hA+Jt+x+u+i+e+a+t,1,r+aa+na+Ju+Jt+x+u+i+e+a+t,1,s+Vt+ei+MA+N+u+i+e+a+t,1,s+Vt+ii+MA+K+ts+i+e+a+t,1,s+Vt+Ur+MA+x+u+i+e+a+t,1,s+Vt+si+MA+_e+ts+i+e+a+t,3,r+hn+gn+cn+Ta+N+Vo+i+e+a+t,3,s+c+pl+uA+L+u+i+e+h+t,1,s+c+cp+uA+L+u+i+e+h+t,1,s+c+Il+uA+L+u+i+e+h+t,1,s+c+ce+uA+L+u+i+e+h+t,14,s+c+" +lon_0=-53"+E+kA+u+i+e+a+t,1,s+c+RQ+E+kA+u+i+e+a+t,1,s+c+V_+E+kA+u+i+e+a+t,1,s+c+UI+E+kA+u+i+e+a+t,1,s+c+OI+E+kA+u+i+e+a+t,1,s+c+W_+E+kA+u+i+e+a+t,1,s+c+Wo+E+kA+u+i+e+a+t,1,s+c+X_+E+kA+u+i+e+a+t,1,s+c+Z_+E+kA+u+i+e+a+t,1,s+c+un+E+kA+u+i+e+a+t,1,s+c+hs+E+kA+u+i+e+a+t,1,s+c+ce+E+kA+u+i+e+a+t,1,s+c+Wc+E+kA+u+i+e+a+t,1,s+c+Il+E+kA+u+i+e+a+t,1,s+c+Jt+E+kA+u+i+e+a+t,1,s+c+cp+E+kA+u+i+e+a+t,1,s+c+$f+E+kA+u+i+e+a+t,1,r+wC+lf+hr+Vn+z+u+i+e+a+t,1,r+Zt+$t+" +lat_0=25.5"+vt+Et+u+i+e+a+t,2,l+Dp+B+I+a+t,1,l+O_+B+I+a+t,1,l+oy+B+I+a+t,1,l+H_+B+I+a+t,1,l+MI+B+I+a+t,1,l+rp+B+I+a+t,1,l+bI+B+I+a+t,1,l+P_+B+I+a+t,1,l+T_+B+I+a+t,1,l+Md+B+I+a+t,1,l+Bf+B+I+a+t,1,l+wf+B+I+a+t,1,l+Ef+B+I+a+t,1,l+Qf+B+I+a+t,1,l+qc+B+I+a+t,1,l+zc+B+I+a+t,1,l+wr+B+I+a+t,1,l+To+B+I+a+t,1,l+wo+B+I+a+t,1,l+On+B+I+a+t,1,l+Ho+B+I+a+t,1,l+mr+B+I+a+t,1,l+Sg+B+I+a+t,1,l+mf+B+I+a+t,1,l+Cf+B+I+a+t,1,l+_u+B+I+a+t,1,l+vp+B+I+a+t,1,l+ll+B+I+a+t,1,l+Rl+B+I+a+t,1,l+Iu+B+I+a+t,1,l+xd+B+I+a+t,1,l+Wr+B+I+a+t,1,l+Ll+B+I+a+t,1,l+jc+B+I+a+t,1,l+dh+B+I+a+t,1,l+rc+B+I+a+t,1,l+Ul+B+I+a+t,1,l+rl+B+I+a+t,1,l+Vr+B+I+a+t,1,l+oc+B+I+a+t,1,l+VI+B+I+a+t,1,l+WI+B+I+a+t,1,l+Np+B+I+a+t,1,l+K_+B+I+a+t,1,l+Y_+B+I+a+t,1,l+bd+B+I+a+t,1,l+kf+B+I+a+t,1,l+hc+B+I+a+t,1,l+gc+B+I+a+t,1,l+Kc+B+I+a+t,1,l+lc+B+I+a+t,1,l+Yc+B+I+a+t,1,l+Cu+B+I+a+t,1,l+yf+B+I+a+t,1,l+Uu+B+I+a+t,1,l+ZI+B+I+a+t,1,l+Sp+B+I+a+t,1,l+vg+B+I+a+t,1,l+_f+B+I+a+t,1,l+Lu+B+I+a+t,41,l+Dp+T+B+I+a+t,1,l+O_+T+B+I+a+t,1,l+oy+T+B+I+a+t,1,l+H_+T+B+I+a+t,1,l+MI+T+B+I+a+t,1,l+rp+T+B+I+a+t,1,l+bI+T+B+I+a+t,1,l+P_+T+B+I+a+t,1,l+T_+T+B+I+a+t,1,l+Md+T+B+I+a+t,1,l+Bf+T+B+I+a+t,1,l+wf+T+B+I+a+t,1,l+Ef+T+B+I+a+t,1,l+Qf+T+B+I+a+t,1,l+qc+T+B+I+a+t,1,l+zc+T+B+I+a+t,1,l+wr+T+B+I+a+t,1,l+To+T+B+I+a+t,1,l+wo+T+B+I+a+t,1,l+On+T+B+I+a+t,1,l+Ho+T+B+I+a+t,1,l+mr+T+B+I+a+t,1,l+Sg+T+B+I+a+t,1,l+mf+T+B+I+a+t,1,l+Cf+T+B+I+a+t,1,l+_u+T+B+I+a+t,1,l+vp+T+B+I+a+t,1,l+ll+T+B+I+a+t,1,l+Rl+T+B+I+a+t,1,l+Iu+T+B+I+a+t,1,l+xd+T+B+I+a+t,1,l+Wr+T+B+I+a+t,1,l+Ll+T+B+I+a+t,1,l+jc+T+B+I+a+t,1,l+dh+T+B+I+a+t,1,l+rc+T+B+I+a+t,1,l+Ul+T+B+I+a+t,1,l+rl+T+B+I+a+t,1,l+Vr+T+B+I+a+t,1,l+oc+T+B+I+a+t,1,l+VI+T+B+I+a+t,1,l+WI+T+B+I+a+t,1,l+Np+T+B+I+a+t,1,l+K_+T+B+I+a+t,1,l+Y_+T+B+I+a+t,1,l+bd+T+B+I+a+t,1,l+kf+T+B+I+a+t,1,l+hc+T+B+I+a+t,1,l+gc+T+B+I+a+t,1,l+Kc+T+B+I+a+t,1,l+lc+T+B+I+a+t,1,l+Yc+T+B+I+a+t,1,l+Cu+T+B+I+a+t,1,l+yf+T+B+I+a+t,1,l+Uu+T+B+I+a+t,1,l+ZI+T+B+I+a+t,1,l+Sp+T+B+I+a+t,1,l+vg+T+B+I+a+t,1,l+_f+T+B+I+a+t,1,l+Lu+T+B+I+a+t,41,l+Dp+B+p+a+t,1,l+O_+B+p+a+t,1,l+oy+B+p+a+t,1,l+H_+B+p+a+t,1,l+MI+B+p+a+t,1,l+rp+B+p+a+t,1,l+bI+B+p+a+t,1,l+P_+B+p+a+t,1,l+T_+B+p+a+t,1,l+Md+B+p+a+t,1,l+Bf+B+p+a+t,1,l+wf+B+p+a+t,1,l+Ef+B+p+a+t,1,l+Qf+B+p+a+t,1,l+qc+B+p+a+t,1,l+zc+B+p+a+t,1,l+wr+B+p+a+t,1,l+To+B+p+a+t,1,l+wo+B+p+a+t,1,l+On+B+p+a+t,1,l+Ho+B+p+a+t,1,l+mr+B+p+a+t,1,l+Sg+B+p+a+t,1,l+mf+B+p+a+t,1,l+Cf+B+p+a+t,1,l+_u+B+p+a+t,1,l+vp+B+p+a+t,1,l+ll+B+p+a+t,1,l+Rl+B+p+a+t,1,l+Iu+B+p+a+t,1,l+xd+B+p+a+t,1,l+Wr+B+p+a+t,1,l+Ll+B+p+a+t,1,l+jc+B+p+a+t,1,l+dh+B+p+a+t,1,l+rc+B+p+a+t,1,l+Ul+B+p+a+t,1,l+rl+B+p+a+t,1,l+Vr+B+p+a+t,1,l+oc+B+p+a+t,1,l+VI+B+p+a+t,1,l+WI+B+p+a+t,1,l+Np+B+p+a+t,1,l+K_+B+p+a+t,1,l+Y_+B+p+a+t,1,l+bd+B+p+a+t,1,l+kf+B+p+a+t,1,l+hc+B+p+a+t,1,l+gc+B+p+a+t,1,l+Kc+B+p+a+t,1,l+lc+B+p+a+t,1,l+Yc+B+p+a+t,1,l+Cu+B+p+a+t,1,l+yf+B+p+a+t,1,l+Uu+B+p+a+t,1,l+ZI+B+p+a+t,1,l+Sp+B+p+a+t,1,l+vg+B+p+a+t,1,l+_f+B+p+a+t,1,l+Lu+B+p+a+t,41,l+Dp+T+B+p+a+t,1,l+O_+T+B+p+a+t,1,l+oy+T+B+p+a+t,1,l+H_+T+B+p+a+t,1,l+MI+T+B+p+a+t,1,l+rp+T+B+p+a+t,1,l+bI+T+B+p+a+t,1,l+P_+T+B+p+a+t,1,l+T_+T+B+p+a+t,1,l+Md+T+B+p+a+t,1,l+Bf+T+B+p+a+t,1,l+wf+T+B+p+a+t,1,l+Ef+T+B+p+a+t,1,l+Qf+T+B+p+a+t,1,l+qc+T+B+p+a+t,1,l+zc+T+B+p+a+t,1,l+wr+T+B+p+a+t,1,l+To+T+B+p+a+t,1,l+wo+T+B+p+a+t,1,l+On+T+B+p+a+t,1,l+Ho+T+B+p+a+t,1,l+mr+T+B+p+a+t,1,l+Sg+T+B+p+a+t,1,l+mf+T+B+p+a+t,1,l+Cf+T+B+p+a+t,1,l+_u+T+B+p+a+t,1,l+vp+T+B+p+a+t,1,l+ll+T+B+p+a+t,1,l+Rl+T+B+p+a+t,1,l+Iu+T+B+p+a+t,1,l+xd+T+B+p+a+t,1,l+Wr+T+B+p+a+t,1,l+Ll+T+B+p+a+t,1,l+jc+T+B+p+a+t,1,l+dh+T+B+p+a+t,1,l+rc+T+B+p+a+t,1,l+Ul+T+B+p+a+t,1,l+rl+T+B+p+a+t,1,l+Vr+T+B+p+a+t,1,l+oc+T+B+p+a+t,1,l+VI+T+B+p+a+t,1,l+WI+T+B+p+a+t,1,l+Np+T+B+p+a+t,1,l+K_+T+B+p+a+t,1,l+Y_+T+B+p+a+t,1,l+bd+T+B+p+a+t,1,l+kf+T+B+p+a+t,1,l+hc+T+B+p+a+t,1,l+gc+T+B+p+a+t,1,l+Kc+T+B+p+a+t,1,l+lc+T+B+p+a+t,1,l+Yc+T+B+p+a+t,1,l+Cu+T+B+p+a+t,1,l+yf+T+B+p+a+t,1,l+Uu+T+B+p+a+t,1,l+ZI+T+B+p+a+t,1,l+Sp+T+B+p+a+t,1,l+vg+T+B+p+a+t,1,l+_f+T+B+p+a+t,1,l+Lu+T+B+p+a+t,41,l+Dp+C+a+t,1,l+O_+C+a+t,1,l+oy+C+a+t,1,l+H_+C+a+t,1,l+MI+C+a+t,1,l+rp+C+a+t,1,l+bI+C+a+t,1,l+P_+C+a+t,1,l+T_+C+a+t,1,l+Md+C+a+t,1,l+Bf+C+a+t,1,l+wf+C+a+t,1,l+Ef+C+a+t,1,l+Qf+C+a+t,1,l+qc+C+a+t,1,l+zc+C+a+t,1,l+wr+C+a+t,1,l+To+C+a+t,1,l+wo+C+a+t,1,l+On+C+a+t,1,l+Ho+C+a+t,1,l+mr+C+a+t,1,l+Sg+C+a+t,1,l+mf+C+a+t,1,l+Cf+C+a+t,1,l+_u+C+a+t,1,l+vp+C+a+t,1,l+ll+C+a+t,1,l+Rl+C+a+t,1,l+Iu+C+a+t,1,l+xd+C+a+t,1,l+Wr+C+a+t,1,l+Ll+C+a+t,1,l+jc+C+a+t,1,l+dh+C+a+t,1,l+rc+C+a+t,1,l+Ul+C+a+t,1,l+rl+C+a+t,1,l+Vr+C+a+t,1,l+oc+C+a+t,1,l+VI+C+a+t,1,l+WI+C+a+t,1,l+Np+C+a+t,1,l+K_+C+a+t,1,l+Y_+C+a+t,1,l+bd+C+a+t,1,l+kf+C+a+t,1,l+hc+C+a+t,1,l+gc+C+a+t,1,l+Kc+C+a+t,1,l+lc+C+a+t,1,l+Yc+C+a+t,1,l+Cu+C+a+t,1,l+yf+C+a+t,1,l+Uu+C+a+t,1,l+ZI+C+a+t,1,l+Sp+C+a+t,1,l+vg+C+a+t,1,l+_f+C+a+t,1,l+Lu+C+a+t,1,ct+Do+rI+$n+XI+kt+Se+C+a+t,3,s+c+pl+uA+L+u+C+h+t,1,s+c+cp+uA+L+u+C+h+t,1,s+c+Il+uA+L+u+C+h+t,1,s+c+ce+uA+L+u+C+h+t,34,l+Dp+T+C+a+t,1,l+O_+T+C+a+t,1,l+oy+T+C+a+t,1,l+H_+T+C+a+t,1,l+MI+T+C+a+t,1,l+rp+T+C+a+t,1,l+bI+T+C+a+t,1,l+P_+T+C+a+t,1,l+T_+T+C+a+t,1,l+Md+T+C+a+t,1,l+Bf+T+C+a+t,1,l+wf+T+C+a+t,1,l+Ef+T+C+a+t,1,l+Qf+T+C+a+t,1,l+qc+T+C+a+t,1,l+zc+T+C+a+t,1,l+wr+T+C+a+t,1,l+To+T+C+a+t,1,l+wo+T+C+a+t,1,l+On+T+C+a+t,1,l+Ho+T+C+a+t,1,l+mr+T+C+a+t,1,l+Sg+T+C+a+t,1,l+mf+T+C+a+t,1,l+Cf+T+C+a+t,1,l+_u+T+C+a+t,1,l+vp+T+C+a+t,1,l+ll+T+C+a+t,1,l+Rl+T+C+a+t,1,l+Iu+T+C+a+t,1,l+xd+T+C+a+t,1,l+Wr+T+C+a+t,1,l+Ll+T+C+a+t,1,l+jc+T+C+a+t,1,l+dh+T+C+a+t,1,l+rc+T+C+a+t,1,l+Ul+T+C+a+t,1,l+rl+T+C+a+t,1,l+Vr+T+C+a+t,1,l+oc+T+C+a+t,1,l+VI+T+C+a+t,1,l+WI+T+C+a+t,1,l+Np+T+C+a+t,1,l+K_+T+C+a+t,1,l+Y_+T+C+a+t,1,l+bd+T+C+a+t,1,l+kf+T+C+a+t,1,l+hc+T+C+a+t,1,l+gc+T+C+a+t,1,l+Kc+T+C+a+t,1,l+lc+T+C+a+t,1,l+Yc+T+C+a+t,1,l+Cu+T+C+a+t,1,l+yf+T+C+a+t,1,l+Uu+T+C+a+t,1,l+ZI+T+C+a+t,1,l+Sp+T+C+a+t,1,l+vg+T+C+a+t,1,l+_f+T+C+a+t,1,l+Lu+T+C+a+t,1,ct+O+" +lat_ts=-90"+$n+XI+kt+Se+C+a+t,5,s+c+Ou+uA+d+RA+C+a+t].reduce(((A,t,e)=>{if(e%2==0){const e=A.prev+t,i="EPSG:"+e;A.defs.push([i]),A.prev=e}else A.defs[A.defs.length-1].push(t);return A}),{defs:[],prev:0}).defs},546:A=>{A.exports=function(A){return"object"==typeof A&&"function"==typeof A.then?A:{then:t=>t(A)}}},8164:A=>{"use strict";function t(A,{nan_strategy:t="throw"}={nan_strategy:"throw"}){const e=A.length;let i=null,s=null,a=null,n=null;for(let o=0;o<e;o++){const[e,r]=A[o];if(isNaN(e)){if("throw"===t)throw new Error("[bbox-fns/bbox-array] encountered point with a NaN value: ["+e+", "+r+"]")}else null===i?(i=e,s=e):e<i?i=e:e>s&&(s=e);if(isNaN(r)){if("throw"===t)throw new Error("[bbox-fns/bbox-array] encountered point with a NaN value: ["+e+", "+r+"]")}else null===a?(a=r,n=r):r<a?a=r:r>n&&(n=r)}return[i,a,s,n]}A.exports=t,A.exports.default=t},239:A=>{function t([A,t,e,i],{density:s=0}={density:0}){"number"==typeof s&&(s=[s,s]);const[a,n]=s,o=[],r=(e-A)/(a+1),l=(i-t)/(n+1);o.push([A,i]);for(let t=1;t<=n;t++)o.push([A,i-t*l]);o.push([A,t]);for(let e=1;e<=a;e++)o.push([A+e*r,t]);o.push([e,t]);for(let A=1;A<=n;A++)o.push([e,t+A*l]);o.push([e,i]);for(let A=1;A<=a;A++)o.push([e-A*r,i]);return o.push([A,i]),[o]}A.exports=t,A.exports.default=t},474:A=>{"use strict";function t(A){if(0===A.length)return;if(1===A.length)return A[0];let[t,e,i,s]=A[0];for(let a=1;a<A.length;a++){const n=A[a];n[0]<t&&(t=n[0]),n[1]<e&&(e=n[1]),n[2]>i&&(i=n[2]),n[3]>s&&(s=n[3])}return[t,e,i,s]}A.exports=t,A.exports.default=t},5753:(A,t,e)=>{const i=e(8164),s=e(239);function a(A,t,{async:e=!1,density:a,nan_strategy:n="throw"}={}){const o=s(A,{density:a})[0].map((A=>t(A)));return e?Promise.all(o).then((A=>i(A,{nan_strategy:n}))):i(o,{nan_strategy:n})}A.exports=a,A.exports.default=a},9774:A=>{"use strict";function t(A,t){const[e,i,s,a]=A;if(!t)throw new Error("[bbox-fns/split.js] missing breakpoints");const n=t.x||[],o=t.y||[],r=[e].concat(n.filter((A=>A>e&&A<s))).concat([s]),l=[i].concat(o.filter((A=>A>i&&A<a))).concat([a]),h=[];for(let A=1;A<r.length;A++){const t=r[A-1],e=r[A];for(let A=1;A<l.length;A++){const i=l[A-1],s=l[A];h.push([t,i,e,s])}}return h}A.exports=t,A.exports.default=t},1654:(A,t,e)=>{var i;const s=e(2994),a=e(2438),n=e(474),o=e(9774),r=e(5753);"function"!=typeof s&&console.warn("[reproject-bbox] failed to import proj4-merge");const l="[reproject-bbox] You passed in a value of 32767 for {{%s}}, which means a custom non-standard projection.  Please pass in a Well-Known Text or PROJ4JS String instead.";function h({bbox:A,debug_level:t=0,density:e,from:i,nan_strategy:h="throw",proj4:g,split:c=!0,to:f}){if(32767===i)throw new Error(l.replace("{{%s}}","from"));if(32767===f)throw new Error(l.replace("{{%s}}","to"));"number"==typeof i&&(i="EPSG:"+i),"number"==typeof f&&(f="EPSG:"+f);const u=[g,a];"object"==typeof window&&window.proj4&&u.push(window.proj4),"object"==typeof self&&self.proj4&&u.push(self.proj4);const d=s(u)(i,f).forward,I=c?o(A,{x:[0],y:[0]}):[A];t>=2&&console.log("[reproject-bbox] bboxes:",I);const p=I.map((A=>r(A,d,{density:e,nan_strategy:h})));t>=2&&console.log("[reproject-bbox] bboxes_reprojected:",p);return n(p)}void 0===(i=function(){return h}.call(t,e,t,A))||(A.exports=i),A.exports=h,A.exports.default=h,"object"==typeof window&&(window.reprojectBoundingBox=h),"object"==typeof self&&(self.reprojectBoundingBox=h)},4254:(A,t,e)=>{var i;const s=e(3642),a=e(277);function n(A,{densify:t,reproject:e}){if("function"!=typeof e)throw new Error("[reproject-geojson] you must specify a reproject function");if("FeatureCollection"===A.type)return{...A,features:A.features.map((A=>n(A,{densify:t,reproject:e})))};if("Feature"===A.type)return{...A,geometry:n(A.geometry,{densify:t,reproject:e})};if("LineString"===A.type)return{...A,coordinates:a(A.coordinates,e,{densify:t})};if("MultiLineString"===A.type)return{...A,coordinates:A.coordinates.map((A=>a(A,e,{densify:t})))};if("MultiPoint"===A.type)return{...A,coordinates:A.coordinates.map((A=>e(A)))};if("MultiPolygon"===A.type)return{...A,coordinates:A.coordinates.map((A=>A.map((A=>a(A,e,{densify:t})))))};if("Point"===A.type)return{...A,coordinates:e(A.coordinates)};if("Polygon"===A.type)return{...A,coordinates:A.coordinates.map((A=>a(A,e,{densify:t})))};if(Array.isArray(A)){const i=s(A);if(1===i)return e(A);if(2===i)return A.map((A=>e(A)));if(3===i)return A.map((A=>a(A,e,{densify:t})));if(4===i)return A.map((A=>A.map((A=>a(A,e,{densify:t})))))}return A}void 0===(i=function(){return n}.call(t,e,t,A))||(A.exports=i),A.exports=n,"object"==typeof window&&(window.reprojectGeoJSONPluggable=n),"object"==typeof self&&(self.reprojectGeoJSONPluggable=n)},277:(A,t,e)=>{var i;function s(A,t,e){const i="object"==typeof e&&"number"==typeof e.debug_level?e.debug_level:0;let s="object"==typeof e&&"number"==typeof e.densify?e.densify:0;const a="object"==typeof e&&"string"==typeof e.strategy?e.strategy:"auto";s=Math.round(s),i>=1&&(console.log("[reproject-line] debug_level:",i),console.log("[reproject-line] densify:",s),console.log("[reproject-line] strategy:",a));const n=[];let[o,r]=t(A[0]),l=null,h=null;for(let e=1;e<A.length;e++){const[i,g]=A[e-1],[c,f]=A[e],u=(c-i)/(s+1),d=(f-g)/(s+1);for(let A=1;A<=s;A++){const[e,s]=t([i+A*u,g+A*d]);h=(s-r)/(e-o),"always"!==a&&h===l||(n.push([o,r]),l=h),o=e,r=s}const[I,p]=t([c,f]);h=(p-r)/(I-o),"always"!==a&&h===l||(n.push([o,r]),l=h),o=I,r=p}return n.push([o,r]),i>=3&&console.log("[reproject-line] returning",n),n}void 0===(i=function(){return s}.call(t,e,t,A))||(A.exports=i),A.exports=s,A.exports.default=s},1185:(A,t,e)=>{var i;function s({segments:A,min:t=-1/0,max:e=1/0,debug:i=!1}){if(i&&console.log("[segflip] segs:",A),null==A||Array.isArray(A)&&0===A.length)return i&&console.log("[segflip] segments are empty so return the whole row flipped"),[[t,e]];const s=A.map((([A,t])=>[A-1,t+1])).flat();s.unshift(t),s.push(e),i&&console.log("flattened nums:",s);const a=[];for(let A=1;A<s.length;A+=2){const t=s[A-1],e=s[A];t>e||a.push([t,e])}return a}void 0===(i=function(){return s}.call(t,e,t,A))||(A.exports=i),A.exports=s,"object"==typeof window&&(window.segflip=s),"object"==typeof self&&(self.segflip=s)},1003:A=>{const t={Int8Array:127,Uint8Array:255,Uint8ClampedArray:255,Int16Array:32767,Uint16Array:65535,Int32Array:2147483647,Uint32Array:4294967295,Float32Array:34e37,Float64Array:1.8*Math.pow(10,308)==1/0?void 0:1.8*Math.pow(10,308),BigInt64Array:0x8000000000000000,BigUint64Array:0x10000000000000000};A.exports=A=>("string"!=typeof A&&A.constructor&&(A=A.constructor.name),t[A])},7033:A=>{const t={Int8Array:-128,Uint8Array:0,Uint8ClampedArray:0,Int16Array:-32768,Uint16Array:0,Int32Array:-2147483648,Uint32Array:0,BigInt64Array:-0x8000000000000000,BigUint64Array:0};A.exports=A=>("string"!=typeof A&&A.constructor&&(A=A.constructor.name),t[A])},7890:A=>{A.exports={1:function({point:A}){const t=this.data,e=A[this.d0v0];return{parent:t,index:e,value:t[e]}},2:function({point:A}){const t=this.data,e=this.m0v0*A[this.d0v0]+this.m0v1*A[this.d0v1];return{parent:t,index:e,value:t[e]}},3:function({point:A}){const t=this.data,e=this.m0v0*A[this.d0v0]+this.m0v1*A[this.d0v1]+this.m0v2*A[this.d0v2];return{parent:t,index:e,value:t[e]}},4:function({point:A}){const t=this.data,e=this.m0v0*A[this.d0v0]+this.m0v1*A[this.d0v1]+this.m0v2*A[this.d0v2]+this.m0v3*A[this.d0v3];return{parent:t,index:e,value:t[e]}},5:function({point:A}){const t=this.data,e=this.m0v0*A[this.d0v0]+this.m0v1*A[this.d0v1]+this.m0v2*A[this.d0v2]+this.m0v3*A[this.d0v3]+this.m0v4*A[this.d0v4];return{parent:t,index:e,value:t[e]}},"1,1":function({point:A}){const t=this.data[A[this.d0v0]],e=A[this.d1v0];return{parent:t,index:e,value:t[e]}},"1,2":function({point:A}){const t=this.data[A[this.d0v0]],e=this.m1v0*A[this.d1v0]+this.m1v1*A[this.d1v1];return{parent:t,index:e,value:t[e]}},"1,3":function({point:A}){const t=this.data[A[this.d0v0]],e=this.m1v0*A[this.d1v0]+this.m1v1*A[this.d1v1]+this.m1v2*A[this.d1v2];return{parent:t,index:e,value:t[e]}},"1,4":function({point:A}){const t=this.data[A[this.d0v0]],e=this.m1v0*A[this.d1v0]+this.m1v1*A[this.d1v1]+this.m1v2*A[this.d1v2]+this.m1v3*A[this.d1v3];return{parent:t,index:e,value:t[e]}},"1,5":function({point:A}){const t=this.data[A[this.d0v0]],e=this.m1v0*A[this.d1v0]+this.m1v1*A[this.d1v1]+this.m1v2*A[this.d1v2]+this.m1v3*A[this.d1v3]+this.m1v4*A[this.d1v4];return{parent:t,index:e,value:t[e]}},"1,1,1":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]],e=A[this.d2v0];return{parent:t,index:e,value:t[e]}},"1,1,2":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]],e=this.m2v0*A[this.d2v0]+this.m2v1*A[this.d2v1];return{parent:t,index:e,value:t[e]}},"1,1,3":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]],e=this.m2v0*A[this.d2v0]+this.m2v1*A[this.d2v1]+this.m2v2*A[this.d2v2];return{parent:t,index:e,value:t[e]}},"1,1,4":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]],e=this.m2v0*A[this.d2v0]+this.m2v1*A[this.d2v1]+this.m2v2*A[this.d2v2]+this.m2v3*A[this.d2v3];return{parent:t,index:e,value:t[e]}},"1,1,5":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]],e=this.m2v0*A[this.d2v0]+this.m2v1*A[this.d2v1]+this.m2v2*A[this.d2v2]+this.m2v3*A[this.d2v3]+this.m2v4*A[this.d2v4];return{parent:t,index:e,value:t[e]}},"1,1,1,1":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]],e=A[this.d3v0];return{parent:t,index:e,value:t[e]}},"1,1,1,2":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]],e=this.m3v0*A[this.d3v0]+this.m3v1*A[this.d3v1];return{parent:t,index:e,value:t[e]}},"1,1,1,3":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]],e=this.m3v0*A[this.d3v0]+this.m3v1*A[this.d3v1]+this.m3v2*A[this.d3v2];return{parent:t,index:e,value:t[e]}},"1,1,1,4":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]],e=this.m3v0*A[this.d3v0]+this.m3v1*A[this.d3v1]+this.m3v2*A[this.d3v2]+this.m3v3*A[this.d3v3];return{parent:t,index:e,value:t[e]}},"1,1,1,5":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]],e=this.m3v0*A[this.d3v0]+this.m3v1*A[this.d3v1]+this.m3v2*A[this.d3v2]+this.m3v3*A[this.d3v3]+this.m3v4*A[this.d3v4];return{parent:t,index:e,value:t[e]}},"1,1,1,1,1":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]],e=A[this.d4v0];return{parent:t,index:e,value:t[e]}},"1,1,1,1,2":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]],e=this.m4v0*A[this.d4v0]+this.m4v1*A[this.d4v1];return{parent:t,index:e,value:t[e]}},"1,1,1,1,3":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]],e=this.m4v0*A[this.d4v0]+this.m4v1*A[this.d4v1]+this.m4v2*A[this.d4v2];return{parent:t,index:e,value:t[e]}},"1,1,1,1,4":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]],e=this.m4v0*A[this.d4v0]+this.m4v1*A[this.d4v1]+this.m4v2*A[this.d4v2]+this.m4v3*A[this.d4v3];return{parent:t,index:e,value:t[e]}},"1,1,1,1,5":function({point:A}){const t=this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]],e=this.m4v0*A[this.d4v0]+this.m4v1*A[this.d4v1]+this.m4v2*A[this.d4v2]+this.m4v3*A[this.d4v3]+this.m4v4*A[this.d4v4];return{parent:t,index:e,value:t[e]}}}},5588:A=>{A.exports={1:function({point:A,value:t}){this.data[A[this.d0v0]]=t},2:function({point:A,value:t}){this.data[this.m0v0*A[this.d0v0]+this.m0v1*A[this.d0v1]]=t},3:function({point:A,value:t}){this.data[this.m0v0*A[this.d0v0]+this.m0v1*A[this.d0v1]+this.m0v2*A[this.d0v2]]=t},4:function({point:A,value:t}){this.data[this.m0v0*A[this.d0v0]+this.m0v1*A[this.d0v1]+this.m0v2*A[this.d0v2]+this.m0v3*A[this.d0v3]]=t},5:function({point:A,value:t}){this.data[this.m0v0*A[this.d0v0]+this.m0v1*A[this.d0v1]+this.m0v2*A[this.d0v2]+this.m0v3*A[this.d0v3]+this.m0v4*A[this.d0v4]]=t},"1,1":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]]=t},"1,2":function({point:A,value:t}){this.data[A[this.d0v0]][this.m1v0*A[this.d1v0]+this.m1v1*A[this.d1v1]]=t},"1,3":function({point:A,value:t}){this.data[A[this.d0v0]][this.m1v0*A[this.d1v0]+this.m1v1*A[this.d1v1]+this.m1v2*A[this.d1v2]]=t},"1,4":function({point:A,value:t}){this.data[A[this.d0v0]][this.m1v0*A[this.d1v0]+this.m1v1*A[this.d1v1]+this.m1v2*A[this.d1v2]+this.m1v3*A[this.d1v3]]=t},"1,5":function({point:A,value:t}){this.data[A[this.d0v0]][this.m1v0*A[this.d1v0]+this.m1v1*A[this.d1v1]+this.m1v2*A[this.d1v2]+this.m1v3*A[this.d1v3]+this.m1v4*A[this.d1v4]]=t},"1,1,1":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]]=t},"1,1,2":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][this.m2v0*A[this.d2v0]+this.m2v1*A[this.d2v1]]=t},"1,1,3":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][this.m2v0*A[this.d2v0]+this.m2v1*A[this.d2v1]+this.m2v2*A[this.d2v2]]=t},"1,1,4":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][this.m2v0*A[this.d2v0]+this.m2v1*A[this.d2v1]+this.m2v2*A[this.d2v2]+this.m2v3*A[this.d2v3]]=t},"1,1,5":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][this.m2v0*A[this.d2v0]+this.m2v1*A[this.d2v1]+this.m2v2*A[this.d2v2]+this.m2v3*A[this.d2v3]+this.m2v4*A[this.d2v4]]=t},"1,1,1,1":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]]=t},"1,1,1,2":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][this.m3v0*A[this.d3v0]+this.m3v1*A[this.d3v1]]=t},"1,1,1,3":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][this.m3v0*A[this.d3v0]+this.m3v1*A[this.d3v1]+this.m3v2*A[this.d3v2]]=t},"1,1,1,4":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][this.m3v0*A[this.d3v0]+this.m3v1*A[this.d3v1]+this.m3v2*A[this.d3v2]+this.m3v3*A[this.d3v3]]=t},"1,1,1,5":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][this.m3v0*A[this.d3v0]+this.m3v1*A[this.d3v1]+this.m3v2*A[this.d3v2]+this.m3v3*A[this.d3v3]+this.m3v4*A[this.d3v4]]=t},"1,1,1,1,1":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]][A[this.d4v0]]=t},"1,1,1,1,2":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]][this.m4v0*A[this.d4v0]+this.m4v1*A[this.d4v1]]=t},"1,1,1,1,3":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]][this.m4v0*A[this.d4v0]+this.m4v1*A[this.d4v1]+this.m4v2*A[this.d4v2]]=t},"1,1,1,1,4":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]][this.m4v0*A[this.d4v0]+this.m4v1*A[this.d4v1]+this.m4v2*A[this.d4v2]+this.m4v3*A[this.d4v3]]=t},"1,1,1,1,5":function({point:A,value:t}){this.data[A[this.d0v0]][A[this.d1v0]][A[this.d2v0]][A[this.d3v0]][this.m4v0*A[this.d4v0]+this.m4v1*A[this.d4v1]+this.m4v2*A[this.d4v2]+this.m4v3*A[this.d4v3]+this.m4v4*A[this.d4v4]]=t}}},883:(A,t,e)=>{const i={},{wrapNextFunction:s}=e(5876),a=e(7890),n=e(5588),o={Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Float32Array,Float64Array};try{o.BigInt64Array=BigInt64Array,o.BigUint64Array=BigUint64Array}catch(A){}const r=A=>A.match(/\\[[^\\]]+\\]/g),l=A=>A.startsWith("[")&&A.endsWith("]")?A.substring(1,A.length-1):A,h=A=>A.startsWith("(")&&A.endsWith(")")?A.substring(1,A.length-1):A,g=A=>A.match(/(\\(.*?\\)|[^\\(,\\s]+)(?=\\s*,|\\s*$)/g),c=A=>{A=l(A),A=h(A);const t=g(A);return 1===t.length?{type:"Vector",dim:t[0]}:{type:"Matrix",parts:t.map(c)}};function f(A){const t=A.match(/[^ A-Za-z,\\[\\]]/g);if(t)throw new Error("The following invalid characters were used: "+t.map((A=>`"${A}"`)).join(", "));return!0}function u(A,{useLayoutCache:t=!0}={useLayoutCache:!0}){if(t&&A in i)return i[A];f(A);const e=r(A).map(c),s={type:"Layout",summary:e.map((A=>"Matrix"===A.type?A.parts.length:1)),dims:e};return t&&(i[A]=s),s}function d({useLayoutCache:A=!0,data:t,layout:e,sizes:i={}}){"string"==typeof e&&(e=u(e,{useLayoutCache:A}));const{dims:s}=e,a=s.length,o=p({useLayoutCache:A,layout:e,sizes:i}),r=a-1,l=e.summary.toString();if(l in n){const A={data:t};return e.dims.map(((t,e)=>{"Vector"===t.type?A[`d${e}v0`]=t.dim:"Matrix"===t.type&&t.parts.forEach(((t,i)=>{A[`d${e}v${i}`]=t.dim,A[`m${e}v${i}`]=o[t.dim]}))})),n[l].bind(A)}return({point:A,value:e})=>{let i=t;for(let t=0;t<a;t++){const a=t===r,n=s[t];let l;l="Vector"===n.type?A[n.dim]:n.parts.reduce(((t,{dim:e})=>t+o[e]*A[e]),0),a?i[l]=e:i=i[l]}}}function I({rect:A={}}){if(A)for(let t in A){const e=A[t];if(2!==e.length)throw new Error("[xdim] uh oh. invalid hyper-rectangle");const[i,s]=e;if(i>s)throw new Error(`[xdim] uh oh. invalid range for "${t}".  Start of ${i} can\'t be greater than end of ${s}.`);if(i<0)throw new Error(`[xdim] uh oh. invalid hyper-rectangle with start ${i}`)}}function p({useLayoutCache:A=!0,layout:t,sizes:e}){"string"==typeof t&&(t=u(t,{useLayoutCache:A}));const{dims:i}=t,s=i.length;let a={};for(let A=0;A<s;A++){const t=i[A];if("Vector"===t.type)a[t.dim]=1;else{const{parts:A}=t;let i=1;for(let t=A.length-1;t>=0;t--){const{dim:s}=A[t];a[s]=i,i*=e[A[t].dim]}}}return a}function _({useLayoutCache:A=!0,data:t,layout:e,point:i,sizes:s={}}){let a,n;"string"==typeof e&&(e=u(e,{useLayoutCache:A}));let o=t;const{dims:r}=e,l=r.length;for(let A=0;A<l;A++){const t=r[A];if("Vector"===t.type){const A=i[t.dim];a=o,n=A,o=o[A]}else{const{parts:A}=t;let e=0,r=1;for(let t=A.length-1;t>=0;t--){const a=A[t];if("Vector"===a.type){const{dim:A}=a;if(e+=r*i[A],t>0){if(!(A in s))throw new Error(`you cannot calculate the location without knowing the size of the "${A}" dimension.`);r*=s[A]}}}a=o,n=e,o=o[e]}}return{index:n,value:o,parent:a}}function C({arr:A,fill:t,lens:e,arrayTypes:i}){if(0===e.length)return A;const s=e[0];if(1===e.length){const e=i?i[i.length-1]:"Array";for(let i=0;i<A.length;i++)A[i]=new o[e](s).fill(t)}else for(let a=0;a<A.length;a++){const n=new Array(s).fill(t);A[a]=n,C({arr:n,fill:t,lens:e.slice(1),arrayTypes:i})}return A}function B({fill:A,shape:t,arrayTypes:e}){const i=t[0];if(1===t.length){if(Array.isArray(e)&&1!==e.length)throw new Error("[xdim] shape and arrayTypes have different lengths");const t=Array.isArray(e)?e[0]:"Array";return new o[t](i).fill(A)}return C({arr:new Array(i).fill(A),fill:A,lens:t.slice(1),arrayTypes:e})}function w({fill:A,layout:t,useLayoutCache:e=!0,sizes:i,arrayTypes:s}){"string"==typeof t&&(t=u(t,{useLayoutCache:e}));const a=t.dims.map((A=>"Vector"===A.type?i[A.dim]:"Matrix"===A.type?A.parts.reduce(((A,t)=>{if(!(t.dim in i))throw new Error(`[xdim] could not find "${t.dim}" in sizes: { ${Object.keys(i).join(", ")} }`);return A*i[t.dim]}),1):void 0));return{data:B({fill:A,shape:a,arrayTypes:s}),shape:a,arrayTypes:s}}function E({start:A=0,end:t=100}){let e=A-1;return t+=1,s((function(){return e++,e===t?{done:!0}:{done:!1,value:e}}))}function y({order:A,sizes:t,rect:e={}}){const i=Array.isArray(A)?A:Object.keys(t).sort(((A,e)=>t[A]-t[e])),a=new Array(i.length),n={};for(let A=0;A<i.length-1;A++){const s=i[A],[o,r]=e[s]||[0,t[s]-1];a[A]=E({start:o+1,end:r}),n[s]=o}const o=i[i.length-1],[r,l]=e[o]||[0,t[o]-1];return a[a.length-1]=E({start:r,end:l}),n[o]=r-1,s((function(){for(let A=a.length-1;A>=0;A--){const{value:s,done:o}=a[A].next();if(!o){for(let s=A+1;s<a.length;s++){const A=i[s],[o,r]=e[A]||[0,t[A]-1];a[s]=E({start:o+1,end:r}),n[A]=o}return n[i[A]]=s,{value:n,done:!1}}if(0===A)return{done:!0}}}))}A.exports={addDims:C,checkValidity:f,createMatrix:B,iterClip:function({data:A,layout:t,order:e,rect:i={},sizes:a={},useLayoutCache:n=!0}){if(!A)throw new Error("[xdim] must specify data");if(!t)throw new Error("[xdim] must specify layout");const o=y({order:e,sizes:a,rect:i});return s((function(){const{value:e,done:i}=o.next();if(i)return{done:!0};{const{value:i}=_({data:A,layout:t,point:e,sizes:a,useLayoutCache:n});return{done:!1,value:i}}}))},iterRange:E,iterPoints:y,matchSequences:g,parse:u,parseDimensions:function(A){const t={},e=/[A-Za-z]+/g;let i;for(;null!==(i=e.exec(A));){const[A]=i;t[A]={name:A}}return t},parseSequences:c,parseVectors:r,prepareData:w,prepareSelect:function({useLayoutCache:A=!0,data:t,layout:e,sizes:i={}}){"string"==typeof e&&(e=u(e,{useLayoutCache:A}));const{dims:s}=e,n=s.length,o=p({useLayoutCache:A,layout:e,sizes:i}),r=n-1,l=e.summary.toString();if(l in a){const A={data:t};return e.dims.map(((t,e)=>{"Vector"===t.type?A[`d${e}v0`]=t.dim:"Matrix"===t.type&&t.parts.forEach(((t,i)=>{A[`d${e}v${i}`]=t.dim,A[`m${e}v${i}`]=o[t.dim]}))})),a[l].bind(A)}return({point:A})=>{let e=t;for(let t=0;t<n;t++){const i=t===r,a=s[t];let n;if(n="Vector"===a.type?A[a.dim]:a.parts.reduce(((t,{dim:e})=>t+o[e]*A[e]),0),i)return{index:n,parent:e,value:e[n]};e=e[n]}}},prepareUpdate:d,removeBraces:l,removeParentheses:h,select:_,transform:function({data:A,fill:t,from:e,to:i,sizes:s,useLayoutCache:a=!0}){"string"==typeof e&&(e=u(e,{useLayoutCache:a})),"string"==typeof i&&(i=u(i,{useLayoutCache:a}));const{data:n}=w({fill:t,layout:i,sizes:s}),o=d({useLayoutCache:a,data:n,layout:i,sizes:s}),r=y({sizes:s});for(point of r){const{value:t}=_({data:A,layout:e,point,sizes:s});o({point,value:t})}return{data:n}},update:function({useLayoutCache:A=!0,data:t,layout:e,point:i,sizes:s={},value:a}){"string"==typeof e&&(e=u(e,{useLayoutCache:A}));const{dims:n}=e;for(let A=0;A<n.length;A++){const e=A===n.length-1,o=n[A];let r;if("Vector"===o.type)r=i[o.dim];else{const{parts:A}=o;r=0;let t=1;for(let e=A.length-1;e>=0;e--){const a=A[e],{dim:n}=a;if(r+=t*i[n],e>0){if(!(n in s))throw new Error(`you cannot calculate the location without knowing the size of the "${n}" dimension.`);t*=s[n]}}}e?t[r]=a:t=t[r]}},clip:function({useLayoutCache:A=!0,data:t,layout:e,rect:i,sizes:s={},flat:a=!1,validate:n=!0}){n&&I({rect:i}),"string"==typeof e&&(e=u(e,{useLayoutCache:A}));let o=[t];if(e.dims.forEach((A=>{let t=[];o.forEach((e=>{if("Vector"===A.type){const[s,a]=i[A.dim];t=t.concat(e.slice(s,a+1))}else{const{parts:a}=A;let n=[0],o=1;for(let A=a.length-1;A>=0;A--){const t=a[A],{dim:e}=t,[r,l]=i[e],h=[];for(let A=r;A<=l;A++)n.forEach((t=>{h.push(t+o*A)}));n=h,o*=s[e]}n.forEach((A=>{t.push(e[A])}))}})),o=t})),a)return{data:o};const r=Object.fromEntries(Object.entries(i).map((([A,[t,e]])=>[A,e-t+1]))),{data:l}=w({layout:e,sizes:r}),h=e.dims.length,g=(A,t)=>{if(t===h)for(let t=0;t<A.length;t++)A[t]=o.shift();else A.forEach((A=>g(A,t+1)))};return g(l,1),{data:l}},validateRect:I}},7840:A=>{function t(A,t){const e=new RegExp(t,"g"),i=A.match(e);return i?i.length:0}A.exports=t,A.exports.default=t},4635:(A,t,e)=>{const i=e(9622),s=e(2566),a=e(7840);function n(A,t,e){const n=e&&e.debug||!1,o=!(e&&!1===typeof e.nested),r=e&&e.startIndex||0;n&&console.log("[xml-utils] starting findTagByName with",t," and ",e);const l=i(A,`<${t}[ \\n>/]`,r);if(n&&console.log("[xml-utils] start:",l),-1===l)return;const h=A.slice(l+t.length);let g=s(h,"^[^<]*[ /]>",0);const c=-1!==g&&"/"===h[g-1];if(n&&console.log("[xml-utils] selfClosing:",c),!1===c)if(o){let A=0,e=1,i=0;for(;-1!==(g=s(h,"[ /]"+t+">",A));){const s=h.substring(A,g+1);if(e+=a(s,"<"+t+"[ \\n\\t>]"),i+=a(s,"</"+t+">"),i>=e)break;A=g}}else g=s(h,"[ /]"+t+">",0);const f=l+t.length+g+1;if(n&&console.log("[xml-utils] end:",f),-1===f)return;const u=A.slice(l,f);let d;return d=c?null:u.slice(u.indexOf(">")+1,u.lastIndexOf("<")),{inner:d,outer:u,start:l,end:f}}A.exports=n,A.exports.default=n},8602:(A,t,e)=>{const i=e(4635);function s(A,t,e){const s=[],a=e&&e.debug||!1,n=!e||"boolean"!=typeof e.nested||e.nested;let o,r=e&&e.startIndex||0;for(;o=i(A,t,{debug:a,startIndex:r});)r=n?o.start+1+t.length:o.end,s.push(o);return a&&console.log("findTagsByName found",s.length,"tags"),s}A.exports=s,A.exports.default=s},8330:A=>{function t(A,t,e){const i=e&&e.debug||!1;i&&console.log("[xml-utils] getting "+t+" in "+A);const s="object"==typeof A?A.outer:A,a=s.slice(0,s.indexOf(">")+1),n=[\'"\',"\'"];for(let A=0;A<n.length;A++){const e=n[A],s=t+"\\\\="+e+"([^"+e+"]*)"+e;i&&console.log("[xml-utils] pattern:",s);const o=new RegExp(s).exec(a);if(i&&console.log("[xml-utils] match:",o),o)return o[1]}}A.exports=t,A.exports.default=t},2566:A=>{function t(A,t,e){const i=new RegExp(t).exec(A.slice(e));return i?e+i.index+i[0].length-1:-1}A.exports=t,A.exports.default=t},9622:A=>{function t(A,t,e){const i=new RegExp(t).exec(A.slice(e));return i?e+i.index:-1}A.exports=t,A.exports.default=t},3752:()=>{},3640:()=>{},2630:()=>{},7061:(A,t,e)=>{var i=e(8698).default;function s(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */A.exports=s=function(){return e},A.exports.__esModule=!0,A.exports.default=A.exports;var t,e={},a=Object.prototype,n=a.hasOwnProperty,o=Object.defineProperty||function(A,t,e){A[t]=e.value},r="function"==typeof Symbol?Symbol:{},l=r.iterator||"@@iterator",h=r.asyncIterator||"@@asyncIterator",g=r.toStringTag||"@@toStringTag";function c(A,t,e){return Object.defineProperty(A,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),A[t]}try{c({},"")}catch(t){c=function(A,t,e){return A[t]=e}}function f(A,t,e,i){var s=t&&t.prototype instanceof B?t:B,a=Object.create(s.prototype),n=new G(i||[]);return o(a,"_invoke",{value:b(A,e,n)}),a}function u(A,t,e){try{return{type:"normal",arg:A.call(t,e)}}catch(A){return{type:"throw",arg:A}}}e.wrap=f;var d="suspendedStart",I="suspendedYield",p="executing",_="completed",C={};function B(){}function w(){}function E(){}var y={};c(y,l,(function(){return this}));var Q=Object.getPrototypeOf,m=Q&&Q(Q(N([])));m&&m!==a&&n.call(m,l)&&(y=m);var k=E.prototype=B.prototype=Object.create(y);function x(A){["next","throw","return"].forEach((function(t){c(A,t,(function(A){return this._invoke(t,A)}))}))}function M(A,t){function e(s,a,o,r){var l=u(A[s],A,a);if("throw"!==l.type){var h=l.arg,g=h.value;return g&&"object"==i(g)&&n.call(g,"__await")?t.resolve(g.__await).then((function(A){e("next",A,o,r)}),(function(A){e("throw",A,o,r)})):t.resolve(g).then((function(A){h.value=A,o(h)}),(function(A){return e("throw",A,o,r)}))}r(l.arg)}var s;o(this,"_invoke",{value:function(A,i){function a(){return new t((function(t,s){e(A,i,t,s)}))}return s=s?s.then(a,a):a()}})}function b(A,e,i){var s=d;return function(a,n){if(s===p)throw new Error("Generator is already running");if(s===_){if("throw"===a)throw n;return{value:t,done:!0}}for(i.method=a,i.arg=n;;){var o=i.delegate;if(o){var r=D(o,i);if(r){if(r===C)continue;return r}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(s===d)throw s=_,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);s=p;var l=u(A,e,i);if("normal"===l.type){if(s=i.done?_:I,l.arg===C)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(s=_,i.method="throw",i.arg=l.arg)}}}function D(A,e){var i=e.method,s=A.iterator[i];if(s===t)return e.delegate=null,"throw"===i&&A.iterator.return&&(e.method="return",e.arg=t,D(A,e),"throw"===e.method)||"return"!==i&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a \'"+i+"\' method")),C;var a=u(s,A.iterator,e.arg);if("throw"===a.type)return e.method="throw",e.arg=a.arg,e.delegate=null,C;var n=a.arg;return n?n.done?(e[A.resultName]=n.value,e.next=A.nextLoc,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,C):n:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,C)}function v(A){var t={tryLoc:A[0]};1 in A&&(t.catchLoc=A[1]),2 in A&&(t.finallyLoc=A[2],t.afterLoc=A[3]),this.tryEntries.push(t)}function S(A){var t=A.completion||{};t.type="normal",delete t.arg,A.completion=t}function G(A){this.tryEntries=[{tryLoc:"root"}],A.forEach(v,this),this.reset(!0)}function N(A){if(A||""===A){var e=A[l];if(e)return e.call(A);if("function"==typeof A.next)return A;if(!isNaN(A.length)){var s=-1,a=function e(){for(;++s<A.length;)if(n.call(A,s))return e.value=A[s],e.done=!1,e;return e.value=t,e.done=!0,e};return a.next=a}}throw new TypeError(i(A)+" is not iterable")}return w.prototype=E,o(k,"constructor",{value:E,configurable:!0}),o(E,"constructor",{value:w,configurable:!0}),w.displayName=c(E,g,"GeneratorFunction"),e.isGeneratorFunction=function(A){var t="function"==typeof A&&A.constructor;return!!t&&(t===w||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(A){return Object.setPrototypeOf?Object.setPrototypeOf(A,E):(A.__proto__=E,c(A,g,"GeneratorFunction")),A.prototype=Object.create(k),A},e.awrap=function(A){return{__await:A}},x(M.prototype),c(M.prototype,h,(function(){return this})),e.AsyncIterator=M,e.async=function(A,t,i,s,a){void 0===a&&(a=Promise);var n=new M(f(A,t,i,s),a);return e.isGeneratorFunction(t)?n:n.next().then((function(A){return A.done?A.value:n.next()}))},x(k),c(k,g,"Generator"),c(k,l,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(A){var t=Object(A),e=[];for(var i in t)e.push(i);return e.reverse(),function A(){for(;e.length;){var i=e.pop();if(i in t)return A.value=i,A.done=!1,A}return A.done=!0,A}},e.values=N,G.prototype={constructor:G,reset:function(A){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(S),!A)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function(){this.done=!0;var A=this.tryEntries[0].completion;if("throw"===A.type)throw A.arg;return this.rval},dispatchException:function(A){if(this.done)throw A;var e=this;function i(i,s){return o.type="throw",o.arg=A,e.next=i,s&&(e.method="next",e.arg=t),!!s}for(var s=this.tryEntries.length-1;s>=0;--s){var a=this.tryEntries[s],o=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var r=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(r&&l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(r){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(A,t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var s=i;break}}s&&("break"===A||"continue"===A)&&s.tryLoc<=t&&t<=s.finallyLoc&&(s=null);var a=s?s.completion:{};return a.type=A,a.arg=t,s?(this.method="next",this.next=s.finallyLoc,C):this.complete(a)},complete:function(A,t){if("throw"===A.type)throw A.arg;return"break"===A.type||"continue"===A.type?this.next=A.arg:"return"===A.type?(this.rval=this.arg=A.arg,this.method="return",this.next="end"):"normal"===A.type&&t&&(this.next=t),C},finish:function(A){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===A)return this.complete(e.completion,e.afterLoc),S(e),C}},catch:function(A){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===A){var i=e.completion;if("throw"===i.type){var s=i.arg;S(e)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(A,e,i){return this.delegate={iterator:N(A),resultName:e,nextLoc:i},"next"===this.method&&(this.arg=t),C}},e}A.exports=s,A.exports.__esModule=!0,A.exports.default=A.exports},8698:A=>{function t(e){return A.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(A){return typeof A}:function(A){return A&&"function"==typeof Symbol&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},A.exports.__esModule=!0,A.exports.default=A.exports,t(e)}A.exports=t,A.exports.__esModule=!0,A.exports.default=A.exports},4687:(A,t,e)=>{var i=e(7061)();A.exports=i;try{regeneratorRuntime=i}catch(A){"object"==typeof globalThis?globalThis.regeneratorRuntime=i:Function("r","regeneratorRuntime = r")(i)}},7737:(A,t,e)=>{"use strict";function i(A,t){let e=A.length-t,i=0;do{for(let e=t;e>0;e--)A[i+t]+=A[i],i++;e-=t}while(e>0)}function s(A,t,e){let i=0,s=A.length;const a=s/e;for(;s>t;){for(let e=t;e>0;--e)A[i+t]+=A[i],++i;s-=t}const n=A.slice();for(let t=0;t<a;++t)for(let i=0;i<e;++i)A[e*t+i]=n[(e-i-1)*a+t]}e.d(t,{Z:()=>a});class a{async decode(A,t){const e=await this.decodeBlock(t),a=A.Predictor||1;if(1!==a){const t=!A.StripOffsets;return function(A,t,e,a,n,o){if(!t||1===t)return A;for(let A=0;A<n.length;++A){if(n[A]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(n[A]!==n[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const r=n[0]/8,l=2===o?1:n.length;for(let o=0;o<a&&!(o*l*e*r>=A.byteLength);++o){let a;if(2===t){switch(n[0]){case 8:a=new Uint8Array(A,o*l*e*r,l*e*r);break;case 16:a=new Uint16Array(A,o*l*e*r,l*e*r/2);break;case 32:a=new Uint32Array(A,o*l*e*r,l*e*r/4);break;default:throw new Error(`Predictor 2 not allowed with ${n[0]} bits per sample.`)}i(a,l)}else 3===t&&(a=new Uint8Array(A,o*l*e*r,l*e*r),s(a,l,r))}return A}(e,a,t?A.TileWidth:A.ImageWidth,t?A.TileLength:A.RowsPerStrip||A.ImageLength,A.BitsPerSample,A.PlanarConfiguration)}return e}}},5522:(A,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>a});var i=e(7885),s=e(7737);class a extends s.Z{decodeBlock(A){return(0,i.rr)(new Uint8Array(A)).buffer}}},9347:(A,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>p});var i=e(7737);const s=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),a=4017,n=799,o=3406,r=2276,l=1567,h=3784,g=5793,c=2896;function f(A,t){let e=0;const i=[];let s=16;for(;s>0&&!A[s-1];)--s;i.push({children:[],index:0});let a,n=i[0];for(let o=0;o<s;o++){for(let s=0;s<A[o];s++){for(n=i.pop(),n.children[n.index]=t[e];n.index>0;)n=i.pop();for(n.index++,i.push(n);i.length<=o;)i.push(a={children:[],index:0}),n.children[n.index]=a.children,n=a;e++}o+1<s&&(i.push(a={children:[],index:0}),n.children[n.index]=a.children,n=a)}return i[0].children}function u(A,t,e,i,a,n,o,r,l){const{mcusPerLine:h,progressive:g}=e,c=t;let f=t,u=0,d=0;function I(){if(d>0)return d--,u>>d&1;if(u=A[f++],255===u){const t=A[f++];if(t)throw new Error(`unexpected marker: ${(u<<8|t).toString(16)}`)}return d=7,u>>>7}function p(A){let t,e=A;for(;null!==(t=I());){if(e=e[t],"number"==typeof e)return e;if("object"!=typeof e)throw new Error("invalid huffman sequence")}return null}function _(A){let t=A,e=0;for(;t>0;){const A=I();if(null===A)return;e=e<<1|A,--t}return e}function C(A){const t=_(A);return t>=1<<A-1?t:t+(-1<<A)+1}let B=0;let w,E=0;function y(A,t,e,i,s){const a=e%h,n=(e/h|0)*A.v+i,o=a*A.h+s;t(A,A.blocks[n][o])}function Q(A,t,e){const i=e/A.blocksPerLine|0,s=e%A.blocksPerLine;t(A,A.blocks[i][s])}const m=i.length;let k,x,M,b,D,v;v=g?0===n?0===r?function(A,t){const e=p(A.huffmanTableDC),i=0===e?0:C(e)<<l;A.pred+=i,t[0]=A.pred}:function(A,t){t[0]|=I()<<l}:0===r?function(A,t){if(B>0)return void B--;let e=n;const i=o;for(;e<=i;){const i=p(A.huffmanTableAC),a=15&i,n=i>>4;if(0===a){if(n<15){B=_(n)+(1<<n)-1;break}e+=16}else e+=n,t[s[e]]=C(a)*(1<<l),e++}}:function(A,t){let e=n;const i=o;let a=0;for(;e<=i;){const i=s[e],n=t[i]<0?-1:1;switch(E){case 0:{const t=p(A.huffmanTableAC),e=15&t;if(a=t>>4,0===e)a<15?(B=_(a)+(1<<a),E=4):(a=16,E=1);else{if(1!==e)throw new Error("invalid ACn encoding");w=C(e),E=a?2:3}continue}case 1:case 2:t[i]?t[i]+=(I()<<l)*n:(a--,0===a&&(E=2===E?3:0));break;case 3:t[i]?t[i]+=(I()<<l)*n:(t[i]=w<<l,E=0);break;case 4:t[i]&&(t[i]+=(I()<<l)*n)}e++}4===E&&(B--,0===B&&(E=0))}:function(A,t){const e=p(A.huffmanTableDC),i=0===e?0:C(e);A.pred+=i,t[0]=A.pred;let a=1;for(;a<64;){const e=p(A.huffmanTableAC),i=15&e,n=e>>4;if(0===i){if(n<15)break;a+=16}else a+=n,t[s[a]]=C(i),a++}};let S,G,N=0;G=1===m?i[0].blocksPerLine*i[0].blocksPerColumn:h*e.mcusPerColumn;const R=a||G;for(;N<G;){for(x=0;x<m;x++)i[x].pred=0;if(B=0,1===m)for(k=i[0],D=0;D<R;D++)Q(k,v,N),N++;else for(D=0;D<R;D++){for(x=0;x<m;x++){k=i[x];const{h:A,v:t}=k;for(M=0;M<t;M++)for(b=0;b<A;b++)y(k,v,N,M,b)}if(N++,N===G)break}if(d=0,S=A[f]<<8|A[f+1],S<65280)throw new Error("marker was not found");if(!(S>=65488&&S<=65495))break;f+=2}return f-c}function d(A,t){const e=[],{blocksPerLine:i,blocksPerColumn:s}=t,f=i<<3,u=new Int32Array(64),d=new Uint8Array(64);function I(A,e,i){const s=t.quantizationTable;let f,u,d,I,p,_,C,B,w;const E=i;let y;for(y=0;y<64;y++)E[y]=A[y]*s[y];for(y=0;y<8;++y){const A=8*y;0!==E[1+A]||0!==E[2+A]||0!==E[3+A]||0!==E[4+A]||0!==E[5+A]||0!==E[6+A]||0!==E[7+A]?(f=g*E[0+A]+128>>8,u=g*E[4+A]+128>>8,d=E[2+A],I=E[6+A],p=c*(E[1+A]-E[7+A])+128>>8,B=c*(E[1+A]+E[7+A])+128>>8,_=E[3+A]<<4,C=E[5+A]<<4,w=f-u+1>>1,f=f+u+1>>1,u=w,w=d*h+I*l+128>>8,d=d*l-I*h+128>>8,I=w,w=p-C+1>>1,p=p+C+1>>1,C=w,w=B+_+1>>1,_=B-_+1>>1,B=w,w=f-I+1>>1,f=f+I+1>>1,I=w,w=u-d+1>>1,u=u+d+1>>1,d=w,w=p*r+B*o+2048>>12,p=p*o-B*r+2048>>12,B=w,w=_*n+C*a+2048>>12,_=_*a-C*n+2048>>12,C=w,E[0+A]=f+B,E[7+A]=f-B,E[1+A]=u+C,E[6+A]=u-C,E[2+A]=d+_,E[5+A]=d-_,E[3+A]=I+p,E[4+A]=I-p):(w=g*E[0+A]+512>>10,E[0+A]=w,E[1+A]=w,E[2+A]=w,E[3+A]=w,E[4+A]=w,E[5+A]=w,E[6+A]=w,E[7+A]=w)}for(y=0;y<8;++y){const A=y;0!==E[8+A]||0!==E[16+A]||0!==E[24+A]||0!==E[32+A]||0!==E[40+A]||0!==E[48+A]||0!==E[56+A]?(f=g*E[0+A]+2048>>12,u=g*E[32+A]+2048>>12,d=E[16+A],I=E[48+A],p=c*(E[8+A]-E[56+A])+2048>>12,B=c*(E[8+A]+E[56+A])+2048>>12,_=E[24+A],C=E[40+A],w=f-u+1>>1,f=f+u+1>>1,u=w,w=d*h+I*l+2048>>12,d=d*l-I*h+2048>>12,I=w,w=p-C+1>>1,p=p+C+1>>1,C=w,w=B+_+1>>1,_=B-_+1>>1,B=w,w=f-I+1>>1,f=f+I+1>>1,I=w,w=u-d+1>>1,u=u+d+1>>1,d=w,w=p*r+B*o+2048>>12,p=p*o-B*r+2048>>12,B=w,w=_*n+C*a+2048>>12,_=_*a-C*n+2048>>12,C=w,E[0+A]=f+B,E[56+A]=f-B,E[8+A]=u+C,E[48+A]=u-C,E[16+A]=d+_,E[40+A]=d-_,E[24+A]=I+p,E[32+A]=I-p):(w=g*i[y+0]+8192>>14,E[0+A]=w,E[8+A]=w,E[16+A]=w,E[24+A]=w,E[32+A]=w,E[40+A]=w,E[48+A]=w,E[56+A]=w)}for(y=0;y<64;++y){const A=128+(E[y]+8>>4);e[y]=A<0?0:A>255?255:A}}for(let A=0;A<s;A++){const s=A<<3;for(let A=0;A<8;A++)e.push(new Uint8Array(f));for(let a=0;a<i;a++){I(t.blocks[A][a],d,u);let i=0;const n=a<<3;for(let A=0;A<8;A++){const t=e[s+A];for(let A=0;A<8;A++)t[n+A]=d[i++]}}}return e}class I{constructor(){this.jfif=null,this.adobe=null,this.quantizationTables=[],this.huffmanTablesAC=[],this.huffmanTablesDC=[],this.resetFrames()}resetFrames(){this.frames=[]}parse(A){let t=0;function e(){const e=A[t]<<8|A[t+1];return t+=2,e}function i(){const i=e(),s=A.subarray(t,t+i-2);return t+=s.length,s}function a(A){let t,e,i=0,s=0;for(e in A.components)A.components.hasOwnProperty(e)&&(t=A.components[e],i<t.h&&(i=t.h),s<t.v&&(s=t.v));const a=Math.ceil(A.samplesPerLine/8/i),n=Math.ceil(A.scanLines/8/s);for(e in A.components)if(A.components.hasOwnProperty(e)){t=A.components[e];const o=Math.ceil(Math.ceil(A.samplesPerLine/8)*t.h/i),r=Math.ceil(Math.ceil(A.scanLines/8)*t.v/s),l=a*t.h,h=n*t.v,g=[];for(let A=0;A<h;A++){const A=[];for(let t=0;t<l;t++)A.push(new Int32Array(64));g.push(A)}t.blocksPerLine=o,t.blocksPerColumn=r,t.blocks=g}A.maxH=i,A.maxV=s,A.mcusPerLine=a,A.mcusPerColumn=n}let n=e();if(65496!==n)throw new Error("SOI not found");for(n=e();65497!==n;){switch(n){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:{const A=i();65504===n&&74===A[0]&&70===A[1]&&73===A[2]&&70===A[3]&&0===A[4]&&(this.jfif={version:{major:A[5],minor:A[6]},densityUnits:A[7],xDensity:A[8]<<8|A[9],yDensity:A[10]<<8|A[11],thumbWidth:A[12],thumbHeight:A[13],thumbData:A.subarray(14,14+3*A[12]*A[13])}),65518===n&&65===A[0]&&100===A[1]&&111===A[2]&&98===A[3]&&101===A[4]&&0===A[5]&&(this.adobe={version:A[6],flags0:A[7]<<8|A[8],flags1:A[9]<<8|A[10],transformCode:A[11]});break}case 65499:{const i=e()+t-2;for(;t<i;){const i=A[t++],a=new Int32Array(64);if(i>>4==0)for(let e=0;e<64;e++){a[s[e]]=A[t++]}else{if(i>>4!=1)throw new Error("DQT: invalid table spec");for(let A=0;A<64;A++){a[s[A]]=e()}}this.quantizationTables[15&i]=a}break}case 65472:case 65473:case 65474:{e();const i={extended:65473===n,progressive:65474===n,precision:A[t++],scanLines:e(),samplesPerLine:e(),components:{},componentsOrder:[]},s=A[t++];let o;for(let e=0;e<s;e++){o=A[t];const e=A[t+1]>>4,s=15&A[t+1],a=A[t+2];i.componentsOrder.push(o),i.components[o]={h:e,v:s,quantizationIdx:a},t+=3}a(i),this.frames.push(i);break}case 65476:{const i=e();for(let e=2;e<i;){const i=A[t++],s=new Uint8Array(16);let a=0;for(let e=0;e<16;e++,t++)s[e]=A[t],a+=s[e];const n=new Uint8Array(a);for(let e=0;e<a;e++,t++)n[e]=A[t];e+=17+a,i>>4==0?this.huffmanTablesDC[15&i]=f(s,n):this.huffmanTablesAC[15&i]=f(s,n)}break}case 65501:e(),this.resetInterval=e();break;case 65498:{e();const i=A[t++],s=[],a=this.frames[0];for(let e=0;e<i;e++){const e=a.components[A[t++]],i=A[t++];e.huffmanTableDC=this.huffmanTablesDC[i>>4],e.huffmanTableAC=this.huffmanTablesAC[15&i],s.push(e)}const n=A[t++],o=A[t++],r=A[t++],l=u(A,t,a,s,this.resetInterval,n,o,r>>4,15&r);t+=l;break}case 65535:255!==A[t]&&t--;break;default:if(255===A[t-3]&&A[t-2]>=192&&A[t-2]<=254){t-=3;break}throw new Error(`unknown JPEG marker ${n.toString(16)}`)}n=e()}}getResult(){const{frames:A}=this;if(0===this.frames.length)throw new Error("no frames were decoded");this.frames.length>1&&console.warn("more than one frame is not supported");for(let A=0;A<this.frames.length;A++){const t=this.frames[A].components;for(const A of Object.keys(t))t[A].quantizationTable=this.quantizationTables[t[A].quantizationIdx],delete t[A].quantizationIdx}const t=A[0],{components:e,componentsOrder:i}=t,s=[],a=t.samplesPerLine,n=t.scanLines;for(let A=0;A<i.length;A++){const a=e[i[A]];s.push({lines:d(0,a),scaleX:a.h/t.maxH,scaleY:a.v/t.maxV})}const o=new Uint8Array(a*n*s.length);let r=0;for(let A=0;A<n;++A)for(let t=0;t<a;++t)for(let e=0;e<s.length;++e){const i=s[e];o[r]=i.lines[0|A*i.scaleY][0|t*i.scaleX],++r}return o}}class p extends i.Z{constructor(A){super(),this.reader=new I,A.JPEGTables&&this.reader.parse(A.JPEGTables)}decodeBlock(A){return this.reader.resetFrames(),this.reader.parse(new Uint8Array(A)),this.reader.getResult().buffer}}},1293:(A,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>f,zstd:()=>c});var i=e(7885),s=e(7197);let a,n,o;const r={env:{emscripten_notify_memory_growth:function(A){o=new Uint8Array(n.exports.memory.buffer)}}};const l="";var h=e(7737),g=e(2499);const c=new class{init(){return a||(a="undefined"!=typeof fetch?fetch("data:application/wasm;base64,"+l).then((A=>A.arrayBuffer())).then((A=>WebAssembly.instantiate(A,r))).then(this._init):WebAssembly.instantiate(Buffer.from(l,"base64"),r).then(this._init),a)}_init(A){n=A.instance,r.env.emscripten_notify_memory_growth(0)}decode(A,t=0){if(!n)throw new Error("ZSTDDecoder: Await .init() before decoding.");const e=A.byteLength,i=n.exports.malloc(e);o.set(A,i),t=t||Number(n.exports.ZSTD_findDecompressedSize(i,e));const s=n.exports.malloc(t),a=n.exports.ZSTD_decompress(s,t,i,e),r=o.slice(s,s+a);return n.exports.free(i),n.exports.free(s),r}};class f extends h.Z{constructor(A){super(),this.planarConfiguration=void 0!==A.PlanarConfiguration?A.PlanarConfiguration:1,this.samplesPerPixel=void 0!==A.SamplesPerPixel?A.SamplesPerPixel:1,this.addCompression=A.LercParameters[g.L5.AddCompression]}decodeBlock(A){switch(this.addCompression){case g.Qb.None:break;case g.Qb.Deflate:A=(0,i.rr)(new Uint8Array(A)).buffer;break;case g.Qb.Zstandard:A=c.decode(new Uint8Array(A)).buffer;break;default:throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`)}return s.decode(A,{returnPixelInterleavedDims:1===this.planarConfiguration}).pixels[0].buffer}}},8672:(A,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>o});var i=e(7737);const s=257;function a(A,t){for(let e=t.length-1;e>=0;e--)A.push(t[e]);return A}function n(A){const t=new Uint16Array(4093),e=new Uint8Array(4093);for(let A=0;A<=257;A++)t[A]=4096,e[A]=A;let i=258,n=9,o=0;function r(){i=258,n=9}function l(A){const t=function(A,t,e){const i=t%8,a=Math.floor(t/8),n=8-i,o=t+e-8*(a+1);let r=8*(a+2)-(t+e);const l=8*(a+2)-t;if(r=Math.max(0,r),a>=A.length)return console.warn("ran off the end of the buffer before finding EOI_CODE (end on input code)"),s;let h=A[a]&2**(8-i)-1;h<<=e-n;let g=h;if(a+1<A.length){let t=A[a+1]>>>r;t<<=Math.max(0,e-l),g+=t}if(o>8&&a+2<A.length){const i=8*(a+3)-(t+e);g+=A[a+2]>>>i}return g}(A,o,n);return o+=n,t}function h(A,s){return e[i]=s,t[i]=A,i++,i-1}function g(A){const i=[];for(let s=A;4096!==s;s=t[s])i.push(e[s]);return i}const c=[];r();const f=new Uint8Array(A);let u,d=l(f);for(;d!==s;){if(256===d){for(r(),d=l(f);256===d;)d=l(f);if(d===s)break;if(d>256)throw new Error(`corrupted code at scanline ${d}`);a(c,g(d)),u=d}else if(d<i){const A=g(d);a(c,A),h(u,A[A.length-1]),u=d}else{const A=g(u);if(!A)throw new Error(`Bogus entry. Not in dictionary, ${u} / ${i}, position: ${o}`);a(c,A),c.push(A[A.length-1]),h(u,A[A.length-1]),u=d}i+1>=2**n&&(12===n?u=void 0:n++),d=l(f)}return new Uint8Array(c)}class o extends i.Z{decodeBlock(A){return n(A).buffer}}},7411:(A,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var i=e(7737);class s extends i.Z{decodeBlock(A){const t=new DataView(A),e=[];for(let i=0;i<A.byteLength;++i){let A=t.getInt8(i);if(A<0){const s=t.getUint8(i+1);A=-A;for(let t=0;t<=A;++t)e.push(s);i+=1}else{for(let s=0;s<=A;++s)e.push(t.getUint8(i+s+1));i+=A+1}}return new Uint8Array(e).buffer}}},3321:(A,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var i=e(7737);class s extends i.Z{decodeBlock(A){return A}}},1588:(A,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var i=e(7737);class s extends i.Z{constructor(){if(super(),"undefined"==typeof createImageBitmap)throw new Error("Cannot decode WebImage as `createImageBitmap` is not available");if("undefined"==typeof document&&"undefined"==typeof OffscreenCanvas)throw new Error("Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available")}async decode(A,t){const e=new Blob([t]),i=await createImageBitmap(e);let s;"undefined"!=typeof document?(s=document.createElement("canvas"),s.width=i.width,s.height=i.height):s=new OffscreenCanvas(i.width,i.height);const a=s.getContext("2d");return a.drawImage(i,0,0),a.getImageData(0,0,i.width,i.height).data.buffer}}},2499:(A,t,e)=>{"use strict";e.d(t,{Ie:()=>r,It:()=>a,L:()=>i,L5:()=>h,P1:()=>c,Qb:()=>g,pd:()=>l,sf:()=>o});const i={315:"Artist",258:"BitsPerSample",265:"CellLength",264:"CellWidth",320:"ColorMap",259:"Compression",33432:"Copyright",306:"DateTime",338:"ExtraSamples",266:"FillOrder",289:"FreeByteCounts",288:"FreeOffsets",291:"GrayResponseCurve",290:"GrayResponseUnit",316:"HostComputer",270:"ImageDescription",257:"ImageLength",256:"ImageWidth",271:"Make",281:"MaxSampleValue",280:"MinSampleValue",272:"Model",254:"NewSubfileType",274:"Orientation",262:"PhotometricInterpretation",284:"PlanarConfiguration",296:"ResolutionUnit",278:"RowsPerStrip",277:"SamplesPerPixel",305:"Software",279:"StripByteCounts",273:"StripOffsets",255:"SubfileType",263:"Threshholding",282:"XResolution",283:"YResolution",326:"BadFaxLines",327:"CleanFaxData",343:"ClipPath",328:"ConsecutiveBadFaxLines",433:"Decode",434:"DefaultImageColor",269:"DocumentName",336:"DotRange",321:"HalftoneHints",346:"Indexed",347:"JPEGTables",285:"PageName",297:"PageNumber",317:"Predictor",319:"PrimaryChromaticities",532:"ReferenceBlackWhite",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",559:"StripRowCounts",330:"SubIFDs",292:"T4Options",293:"T6Options",325:"TileByteCounts",323:"TileLength",324:"TileOffsets",322:"TileWidth",301:"TransferFunction",318:"WhitePoint",344:"XClipPathUnits",286:"XPosition",529:"YCbCrCoefficients",531:"YCbCrPositioning",530:"YCbCrSubSampling",345:"YClipPathUnits",287:"YPosition",37378:"ApertureValue",40961:"ColorSpace",36868:"DateTimeDigitized",36867:"DateTimeOriginal",34665:"Exif IFD",36864:"ExifVersion",33434:"ExposureTime",41728:"FileSource",37385:"Flash",40960:"FlashpixVersion",33437:"FNumber",42016:"ImageUniqueID",37384:"LightSource",37500:"MakerNote",37377:"ShutterSpeedValue",37510:"UserComment",33723:"IPTC",34675:"ICC Profile",700:"XMP",42112:"GDAL_METADATA",42113:"GDAL_NODATA",34377:"Photoshop",33550:"ModelPixelScale",33922:"ModelTiepoint",34264:"ModelTransformation",34735:"GeoKeyDirectory",34736:"GeoDoubleParams",34737:"GeoAsciiParams",50674:"LercParameters"},s={};for(const A in i)i.hasOwnProperty(A)&&(s[i[A]]=parseInt(A,10));const a=[s.BitsPerSample,s.ExtraSamples,s.SampleFormat,s.StripByteCounts,s.StripOffsets,s.StripRowCounts,s.TileByteCounts,s.TileOffsets,s.SubIFDs],n={1:"BYTE",2:"ASCII",3:"SHORT",4:"LONG",5:"RATIONAL",6:"SBYTE",7:"UNDEFINED",8:"SSHORT",9:"SLONG",10:"SRATIONAL",11:"FLOAT",12:"DOUBLE",13:"IFD",16:"LONG8",17:"SLONG8",18:"IFD8"},o={};for(const A in n)n.hasOwnProperty(A)&&(o[n[A]]=parseInt(A,10));const r={WhiteIsZero:0,BlackIsZero:1,RGB:2,Palette:3,TransparencyMask:4,CMYK:5,YCbCr:6,CIELab:8,ICCLab:9},l={Unspecified:0,Assocalpha:1,Unassalpha:2},h={Version:0,AddCompression:1},g={None:0,Deflate:1,Zstandard:2},c={1024:"GTModelTypeGeoKey",1025:"GTRasterTypeGeoKey",1026:"GTCitationGeoKey",2048:"GeographicTypeGeoKey",2049:"GeogCitationGeoKey",2050:"GeogGeodeticDatumGeoKey",2051:"GeogPrimeMeridianGeoKey",2052:"GeogLinearUnitsGeoKey",2053:"GeogLinearUnitSizeGeoKey",2054:"GeogAngularUnitsGeoKey",2055:"GeogAngularUnitSizeGeoKey",2056:"GeogEllipsoidGeoKey",2057:"GeogSemiMajorAxisGeoKey",2058:"GeogSemiMinorAxisGeoKey",2059:"GeogInvFlatteningGeoKey",2060:"GeogAzimuthUnitsGeoKey",2061:"GeogPrimeMeridianLongGeoKey",2062:"GeogTOWGS84GeoKey",3072:"ProjectedCSTypeGeoKey",3073:"PCSCitationGeoKey",3074:"ProjectionGeoKey",3075:"ProjCoordTransGeoKey",3076:"ProjLinearUnitsGeoKey",3077:"ProjLinearUnitSizeGeoKey",3078:"ProjStdParallel1GeoKey",3079:"ProjStdParallel2GeoKey",3080:"ProjNatOriginLongGeoKey",3081:"ProjNatOriginLatGeoKey",3082:"ProjFalseEastingGeoKey",3083:"ProjFalseNorthingGeoKey",3084:"ProjFalseOriginLongGeoKey",3085:"ProjFalseOriginLatGeoKey",3086:"ProjFalseOriginEastingGeoKey",3087:"ProjFalseOriginNorthingGeoKey",3088:"ProjCenterLongGeoKey",3089:"ProjCenterLatGeoKey",3090:"ProjCenterEastingGeoKey",3091:"ProjCenterNorthingGeoKey",3092:"ProjScaleAtNatOriginGeoKey",3093:"ProjScaleAtCenterGeoKey",3094:"ProjAzimuthAngleGeoKey",3095:"ProjStraightVertPoleLongGeoKey",3096:"ProjRectifiedGridAngleGeoKey",4096:"VerticalCSTypeGeoKey",4097:"VerticalCitationGeoKey",4098:"VerticalDatumGeoKey",4099:"VerticalUnitsGeoKey"},f={};for(const A in c)c.hasOwnProperty(A)&&(f[c[A]]=parseInt(A,10))},7885:(A,t,e)=>{"use strict";e.d(t,{rr:()=>Ie});function i(A){let t=A.length;for(;--t>=0;)A[t]=0}const s=256,a=286,n=30,o=15,r=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),l=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),h=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),g=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),c=new Array(576);i(c);const f=new Array(60);i(f);const u=new Array(512);i(u);const d=new Array(256);i(d);const I=new Array(29);i(I);const p=new Array(n);function _(A,t,e,i,s){this.static_tree=A,this.extra_bits=t,this.extra_base=e,this.elems=i,this.max_length=s,this.has_stree=A&&A.length}let C,B,w;function E(A,t){this.dyn_tree=A,this.max_code=0,this.stat_desc=t}i(p);const y=A=>A<256?u[A]:u[256+(A>>>7)],Q=(A,t)=>{A.pending_buf[A.pending++]=255&t,A.pending_buf[A.pending++]=t>>>8&255},m=(A,t,e)=>{A.bi_valid>16-e?(A.bi_buf|=t<<A.bi_valid&65535,Q(A,A.bi_buf),A.bi_buf=t>>16-A.bi_valid,A.bi_valid+=e-16):(A.bi_buf|=t<<A.bi_valid&65535,A.bi_valid+=e)},k=(A,t,e)=>{m(A,e[2*t],e[2*t+1])},x=(A,t)=>{let e=0;do{e|=1&A,A>>>=1,e<<=1}while(--t>0);return e>>>1},M=(A,t,e)=>{const i=new Array(16);let s,a,n=0;for(s=1;s<=o;s++)n=n+e[s-1]<<1,i[s]=n;for(a=0;a<=t;a++){let t=A[2*a+1];0!==t&&(A[2*a]=x(i[t]++,t))}},b=A=>{let t;for(t=0;t<a;t++)A.dyn_ltree[2*t]=0;for(t=0;t<n;t++)A.dyn_dtree[2*t]=0;for(t=0;t<19;t++)A.bl_tree[2*t]=0;A.dyn_ltree[512]=1,A.opt_len=A.static_len=0,A.sym_next=A.matches=0},D=A=>{A.bi_valid>8?Q(A,A.bi_buf):A.bi_valid>0&&(A.pending_buf[A.pending++]=A.bi_buf),A.bi_buf=0,A.bi_valid=0},v=(A,t,e,i)=>{const s=2*t,a=2*e;return A[s]<A[a]||A[s]===A[a]&&i[t]<=i[e]},S=(A,t,e)=>{const i=A.heap[e];let s=e<<1;for(;s<=A.heap_len&&(s<A.heap_len&&v(t,A.heap[s+1],A.heap[s],A.depth)&&s++,!v(t,i,A.heap[s],A.depth));)A.heap[e]=A.heap[s],e=s,s<<=1;A.heap[e]=i},G=(A,t,e)=>{let i,a,n,o,h=0;if(0!==A.sym_next)do{i=255&A.pending_buf[A.sym_buf+h++],i+=(255&A.pending_buf[A.sym_buf+h++])<<8,a=A.pending_buf[A.sym_buf+h++],0===i?k(A,a,t):(n=d[a],k(A,n+s+1,t),o=r[n],0!==o&&(a-=I[n],m(A,a,o)),i--,n=y(i),k(A,n,e),o=l[n],0!==o&&(i-=p[n],m(A,i,o)))}while(h<A.sym_next);k(A,256,t)},N=(A,t)=>{const e=t.dyn_tree,i=t.stat_desc.static_tree,s=t.stat_desc.has_stree,a=t.stat_desc.elems;let n,r,l,h=-1;for(A.heap_len=0,A.heap_max=573,n=0;n<a;n++)0!==e[2*n]?(A.heap[++A.heap_len]=h=n,A.depth[n]=0):e[2*n+1]=0;for(;A.heap_len<2;)l=A.heap[++A.heap_len]=h<2?++h:0,e[2*l]=1,A.depth[l]=0,A.opt_len--,s&&(A.static_len-=i[2*l+1]);for(t.max_code=h,n=A.heap_len>>1;n>=1;n--)S(A,e,n);l=a;do{n=A.heap[1],A.heap[1]=A.heap[A.heap_len--],S(A,e,1),r=A.heap[1],A.heap[--A.heap_max]=n,A.heap[--A.heap_max]=r,e[2*l]=e[2*n]+e[2*r],A.depth[l]=(A.depth[n]>=A.depth[r]?A.depth[n]:A.depth[r])+1,e[2*n+1]=e[2*r+1]=l,A.heap[1]=l++,S(A,e,1)}while(A.heap_len>=2);A.heap[--A.heap_max]=A.heap[1],((A,t)=>{const e=t.dyn_tree,i=t.max_code,s=t.stat_desc.static_tree,a=t.stat_desc.has_stree,n=t.stat_desc.extra_bits,r=t.stat_desc.extra_base,l=t.stat_desc.max_length;let h,g,c,f,u,d,I=0;for(f=0;f<=o;f++)A.bl_count[f]=0;for(e[2*A.heap[A.heap_max]+1]=0,h=A.heap_max+1;h<573;h++)g=A.heap[h],f=e[2*e[2*g+1]+1]+1,f>l&&(f=l,I++),e[2*g+1]=f,g>i||(A.bl_count[f]++,u=0,g>=r&&(u=n[g-r]),d=e[2*g],A.opt_len+=d*(f+u),a&&(A.static_len+=d*(s[2*g+1]+u)));if(0!==I){do{for(f=l-1;0===A.bl_count[f];)f--;A.bl_count[f]--,A.bl_count[f+1]+=2,A.bl_count[l]--,I-=2}while(I>0);for(f=l;0!==f;f--)for(g=A.bl_count[f];0!==g;)c=A.heap[--h],c>i||(e[2*c+1]!==f&&(A.opt_len+=(f-e[2*c+1])*e[2*c],e[2*c+1]=f),g--)}})(A,t),M(e,h,A.bl_count)},R=(A,t,e)=>{let i,s,a=-1,n=t[1],o=0,r=7,l=4;for(0===n&&(r=138,l=3),t[2*(e+1)+1]=65535,i=0;i<=e;i++)s=n,n=t[2*(i+1)+1],++o<r&&s===n||(o<l?A.bl_tree[2*s]+=o:0!==s?(s!==a&&A.bl_tree[2*s]++,A.bl_tree[32]++):o<=10?A.bl_tree[34]++:A.bl_tree[36]++,o=0,a=s,0===n?(r=138,l=3):s===n?(r=6,l=3):(r=7,l=4))},F=(A,t,e)=>{let i,s,a=-1,n=t[1],o=0,r=7,l=4;for(0===n&&(r=138,l=3),i=0;i<=e;i++)if(s=n,n=t[2*(i+1)+1],!(++o<r&&s===n)){if(o<l)do{k(A,s,A.bl_tree)}while(0!=--o);else 0!==s?(s!==a&&(k(A,s,A.bl_tree),o--),k(A,16,A.bl_tree),m(A,o-3,2)):o<=10?(k(A,17,A.bl_tree),m(A,o-3,3)):(k(A,18,A.bl_tree),m(A,o-11,7));o=0,a=s,0===n?(r=138,l=3):s===n?(r=6,l=3):(r=7,l=4)}};let L=!1;const U=(A,t,e,i)=>{m(A,0+(i?1:0),3),D(A),Q(A,e),Q(A,~e),e&&A.pending_buf.set(A.window.subarray(t,t+e),A.pending),A.pending+=e};var O=(A,t,e,i)=>{let a,n,o=0;A.level>0?(2===A.strm.data_type&&(A.strm.data_type=(A=>{let t,e=4093624447;for(t=0;t<=31;t++,e>>>=1)if(1&e&&0!==A.dyn_ltree[2*t])return 0;if(0!==A.dyn_ltree[18]||0!==A.dyn_ltree[20]||0!==A.dyn_ltree[26])return 1;for(t=32;t<s;t++)if(0!==A.dyn_ltree[2*t])return 1;return 0})(A)),N(A,A.l_desc),N(A,A.d_desc),o=(A=>{let t;for(R(A,A.dyn_ltree,A.l_desc.max_code),R(A,A.dyn_dtree,A.d_desc.max_code),N(A,A.bl_desc),t=18;t>=3&&0===A.bl_tree[2*g[t]+1];t--);return A.opt_len+=3*(t+1)+5+5+4,t})(A),a=A.opt_len+3+7>>>3,n=A.static_len+3+7>>>3,n<=a&&(a=n)):a=n=e+5,e+4<=a&&-1!==t?U(A,t,e,i):4===A.strategy||n===a?(m(A,2+(i?1:0),3),G(A,c,f)):(m(A,4+(i?1:0),3),((A,t,e,i)=>{let s;for(m(A,t-257,5),m(A,e-1,5),m(A,i-4,4),s=0;s<i;s++)m(A,A.bl_tree[2*g[s]+1],3);F(A,A.dyn_ltree,t-1),F(A,A.dyn_dtree,e-1)})(A,A.l_desc.max_code+1,A.d_desc.max_code+1,o+1),G(A,A.dyn_ltree,A.dyn_dtree)),b(A),i&&D(A)},P={_tr_init:A=>{L||((()=>{let A,t,e,i,s;const g=new Array(16);for(e=0,i=0;i<28;i++)for(I[i]=e,A=0;A<1<<r[i];A++)d[e++]=i;for(d[e-1]=i,s=0,i=0;i<16;i++)for(p[i]=s,A=0;A<1<<l[i];A++)u[s++]=i;for(s>>=7;i<n;i++)for(p[i]=s<<7,A=0;A<1<<l[i]-7;A++)u[256+s++]=i;for(t=0;t<=o;t++)g[t]=0;for(A=0;A<=143;)c[2*A+1]=8,A++,g[8]++;for(;A<=255;)c[2*A+1]=9,A++,g[9]++;for(;A<=279;)c[2*A+1]=7,A++,g[7]++;for(;A<=287;)c[2*A+1]=8,A++,g[8]++;for(M(c,287,g),A=0;A<n;A++)f[2*A+1]=5,f[2*A]=x(A,5);C=new _(c,r,257,a,o),B=new _(f,l,0,n,o),w=new _(new Array(0),h,0,19,7)})(),L=!0),A.l_desc=new E(A.dyn_ltree,C),A.d_desc=new E(A.dyn_dtree,B),A.bl_desc=new E(A.bl_tree,w),A.bi_buf=0,A.bi_valid=0,b(A)},_tr_stored_block:U,_tr_flush_block:O,_tr_tally:(A,t,e)=>(A.pending_buf[A.sym_buf+A.sym_next++]=t,A.pending_buf[A.sym_buf+A.sym_next++]=t>>8,A.pending_buf[A.sym_buf+A.sym_next++]=e,0===t?A.dyn_ltree[2*e]++:(A.matches++,t--,A.dyn_ltree[2*(d[e]+s+1)]++,A.dyn_dtree[2*y(t)]++),A.sym_next===A.sym_end),_tr_align:A=>{m(A,2,3),k(A,256,c),(A=>{16===A.bi_valid?(Q(A,A.bi_buf),A.bi_buf=0,A.bi_valid=0):A.bi_valid>=8&&(A.pending_buf[A.pending++]=255&A.bi_buf,A.bi_buf>>=8,A.bi_valid-=8)})(A)}};var T=(A,t,e,i)=>{let s=65535&A|0,a=A>>>16&65535|0,n=0;for(;0!==e;){n=e>2e3?2e3:e,e-=n;do{s=s+t[i++]|0,a=a+s|0}while(--n);s%=65521,a%=65521}return s|a<<16|0};const H=new Uint32Array((()=>{let A,t=[];for(var e=0;e<256;e++){A=e;for(var i=0;i<8;i++)A=1&A?3988292384^A>>>1:A>>>1;t[e]=A}return t})());var J=(A,t,e,i)=>{const s=H,a=i+e;A^=-1;for(let e=i;e<a;e++)A=A>>>8^s[255&(A^t[e])];return-1^A},q={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},z={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:j,_tr_stored_block:K,_tr_flush_block:Y,_tr_tally:V,_tr_align:W}=P,{Z_NO_FLUSH:X,Z_PARTIAL_FLUSH:Z,Z_FULL_FLUSH:$,Z_FINISH:AA,Z_BLOCK:tA,Z_OK:eA,Z_STREAM_END:iA,Z_STREAM_ERROR:sA,Z_DATA_ERROR:aA,Z_BUF_ERROR:nA,Z_DEFAULT_COMPRESSION:oA,Z_FILTERED:rA,Z_HUFFMAN_ONLY:lA,Z_RLE:hA,Z_FIXED:gA,Z_DEFAULT_STRATEGY:cA,Z_UNKNOWN:fA,Z_DEFLATED:uA}=z,dA=258,IA=262,pA=42,_A=113,CA=666,BA=(A,t)=>(A.msg=q[t],t),wA=A=>2*A-(A>4?9:0),EA=A=>{let t=A.length;for(;--t>=0;)A[t]=0},yA=A=>{let t,e,i,s=A.w_size;t=A.hash_size,i=t;do{e=A.head[--i],A.head[i]=e>=s?e-s:0}while(--t);t=s,i=t;do{e=A.prev[--i],A.prev[i]=e>=s?e-s:0}while(--t)};let QA=(A,t,e)=>(t<<A.hash_shift^e)&A.hash_mask;const mA=A=>{const t=A.state;let e=t.pending;e>A.avail_out&&(e=A.avail_out),0!==e&&(A.output.set(t.pending_buf.subarray(t.pending_out,t.pending_out+e),A.next_out),A.next_out+=e,t.pending_out+=e,A.total_out+=e,A.avail_out-=e,t.pending-=e,0===t.pending&&(t.pending_out=0))},kA=(A,t)=>{Y(A,A.block_start>=0?A.block_start:-1,A.strstart-A.block_start,t),A.block_start=A.strstart,mA(A.strm)},xA=(A,t)=>{A.pending_buf[A.pending++]=t},MA=(A,t)=>{A.pending_buf[A.pending++]=t>>>8&255,A.pending_buf[A.pending++]=255&t},bA=(A,t,e,i)=>{let s=A.avail_in;return s>i&&(s=i),0===s?0:(A.avail_in-=s,t.set(A.input.subarray(A.next_in,A.next_in+s),e),1===A.state.wrap?A.adler=T(A.adler,t,s,e):2===A.state.wrap&&(A.adler=J(A.adler,t,s,e)),A.next_in+=s,A.total_in+=s,s)},DA=(A,t)=>{let e,i,s=A.max_chain_length,a=A.strstart,n=A.prev_length,o=A.nice_match;const r=A.strstart>A.w_size-IA?A.strstart-(A.w_size-IA):0,l=A.window,h=A.w_mask,g=A.prev,c=A.strstart+dA;let f=l[a+n-1],u=l[a+n];A.prev_length>=A.good_match&&(s>>=2),o>A.lookahead&&(o=A.lookahead);do{if(e=t,l[e+n]===u&&l[e+n-1]===f&&l[e]===l[a]&&l[++e]===l[a+1]){a+=2,e++;do{}while(l[++a]===l[++e]&&l[++a]===l[++e]&&l[++a]===l[++e]&&l[++a]===l[++e]&&l[++a]===l[++e]&&l[++a]===l[++e]&&l[++a]===l[++e]&&l[++a]===l[++e]&&a<c);if(i=dA-(c-a),a=c-dA,i>n){if(A.match_start=t,n=i,i>=o)break;f=l[a+n-1],u=l[a+n]}}}while((t=g[t&h])>r&&0!=--s);return n<=A.lookahead?n:A.lookahead},vA=A=>{const t=A.w_size;let e,i,s;do{if(i=A.window_size-A.lookahead-A.strstart,A.strstart>=t+(t-IA)&&(A.window.set(A.window.subarray(t,t+t-i),0),A.match_start-=t,A.strstart-=t,A.block_start-=t,A.insert>A.strstart&&(A.insert=A.strstart),yA(A),i+=t),0===A.strm.avail_in)break;if(e=bA(A.strm,A.window,A.strstart+A.lookahead,i),A.lookahead+=e,A.lookahead+A.insert>=3)for(s=A.strstart-A.insert,A.ins_h=A.window[s],A.ins_h=QA(A,A.ins_h,A.window[s+1]);A.insert&&(A.ins_h=QA(A,A.ins_h,A.window[s+3-1]),A.prev[s&A.w_mask]=A.head[A.ins_h],A.head[A.ins_h]=s,s++,A.insert--,!(A.lookahead+A.insert<3)););}while(A.lookahead<IA&&0!==A.strm.avail_in)},SA=(A,t)=>{let e,i,s,a=A.pending_buf_size-5>A.w_size?A.w_size:A.pending_buf_size-5,n=0,o=A.strm.avail_in;do{if(e=65535,s=A.bi_valid+42>>3,A.strm.avail_out<s)break;if(s=A.strm.avail_out-s,i=A.strstart-A.block_start,e>i+A.strm.avail_in&&(e=i+A.strm.avail_in),e>s&&(e=s),e<a&&(0===e&&t!==AA||t===X||e!==i+A.strm.avail_in))break;n=t===AA&&e===i+A.strm.avail_in?1:0,K(A,0,0,n),A.pending_buf[A.pending-4]=e,A.pending_buf[A.pending-3]=e>>8,A.pending_buf[A.pending-2]=~e,A.pending_buf[A.pending-1]=~e>>8,mA(A.strm),i&&(i>e&&(i=e),A.strm.output.set(A.window.subarray(A.block_start,A.block_start+i),A.strm.next_out),A.strm.next_out+=i,A.strm.avail_out-=i,A.strm.total_out+=i,A.block_start+=i,e-=i),e&&(bA(A.strm,A.strm.output,A.strm.next_out,e),A.strm.next_out+=e,A.strm.avail_out-=e,A.strm.total_out+=e)}while(0===n);return o-=A.strm.avail_in,o&&(o>=A.w_size?(A.matches=2,A.window.set(A.strm.input.subarray(A.strm.next_in-A.w_size,A.strm.next_in),0),A.strstart=A.w_size,A.insert=A.strstart):(A.window_size-A.strstart<=o&&(A.strstart-=A.w_size,A.window.set(A.window.subarray(A.w_size,A.w_size+A.strstart),0),A.matches<2&&A.matches++,A.insert>A.strstart&&(A.insert=A.strstart)),A.window.set(A.strm.input.subarray(A.strm.next_in-o,A.strm.next_in),A.strstart),A.strstart+=o,A.insert+=o>A.w_size-A.insert?A.w_size-A.insert:o),A.block_start=A.strstart),A.high_water<A.strstart&&(A.high_water=A.strstart),n?4:t!==X&&t!==AA&&0===A.strm.avail_in&&A.strstart===A.block_start?2:(s=A.window_size-A.strstart,A.strm.avail_in>s&&A.block_start>=A.w_size&&(A.block_start-=A.w_size,A.strstart-=A.w_size,A.window.set(A.window.subarray(A.w_size,A.w_size+A.strstart),0),A.matches<2&&A.matches++,s+=A.w_size,A.insert>A.strstart&&(A.insert=A.strstart)),s>A.strm.avail_in&&(s=A.strm.avail_in),s&&(bA(A.strm,A.window,A.strstart,s),A.strstart+=s,A.insert+=s>A.w_size-A.insert?A.w_size-A.insert:s),A.high_water<A.strstart&&(A.high_water=A.strstart),s=A.bi_valid+42>>3,s=A.pending_buf_size-s>65535?65535:A.pending_buf_size-s,a=s>A.w_size?A.w_size:s,i=A.strstart-A.block_start,(i>=a||(i||t===AA)&&t!==X&&0===A.strm.avail_in&&i<=s)&&(e=i>s?s:i,n=t===AA&&0===A.strm.avail_in&&e===i?1:0,K(A,A.block_start,e,n),A.block_start+=e,mA(A.strm)),n?3:1)},GA=(A,t)=>{let e,i;for(;;){if(A.lookahead<IA){if(vA(A),A.lookahead<IA&&t===X)return 1;if(0===A.lookahead)break}if(e=0,A.lookahead>=3&&(A.ins_h=QA(A,A.ins_h,A.window[A.strstart+3-1]),e=A.prev[A.strstart&A.w_mask]=A.head[A.ins_h],A.head[A.ins_h]=A.strstart),0!==e&&A.strstart-e<=A.w_size-IA&&(A.match_length=DA(A,e)),A.match_length>=3)if(i=V(A,A.strstart-A.match_start,A.match_length-3),A.lookahead-=A.match_length,A.match_length<=A.max_lazy_match&&A.lookahead>=3){A.match_length--;do{A.strstart++,A.ins_h=QA(A,A.ins_h,A.window[A.strstart+3-1]),e=A.prev[A.strstart&A.w_mask]=A.head[A.ins_h],A.head[A.ins_h]=A.strstart}while(0!=--A.match_length);A.strstart++}else A.strstart+=A.match_length,A.match_length=0,A.ins_h=A.window[A.strstart],A.ins_h=QA(A,A.ins_h,A.window[A.strstart+1]);else i=V(A,0,A.window[A.strstart]),A.lookahead--,A.strstart++;if(i&&(kA(A,!1),0===A.strm.avail_out))return 1}return A.insert=A.strstart<2?A.strstart:2,t===AA?(kA(A,!0),0===A.strm.avail_out?3:4):A.sym_next&&(kA(A,!1),0===A.strm.avail_out)?1:2},NA=(A,t)=>{let e,i,s;for(;;){if(A.lookahead<IA){if(vA(A),A.lookahead<IA&&t===X)return 1;if(0===A.lookahead)break}if(e=0,A.lookahead>=3&&(A.ins_h=QA(A,A.ins_h,A.window[A.strstart+3-1]),e=A.prev[A.strstart&A.w_mask]=A.head[A.ins_h],A.head[A.ins_h]=A.strstart),A.prev_length=A.match_length,A.prev_match=A.match_start,A.match_length=2,0!==e&&A.prev_length<A.max_lazy_match&&A.strstart-e<=A.w_size-IA&&(A.match_length=DA(A,e),A.match_length<=5&&(A.strategy===rA||3===A.match_length&&A.strstart-A.match_start>4096)&&(A.match_length=2)),A.prev_length>=3&&A.match_length<=A.prev_length){s=A.strstart+A.lookahead-3,i=V(A,A.strstart-1-A.prev_match,A.prev_length-3),A.lookahead-=A.prev_length-1,A.prev_length-=2;do{++A.strstart<=s&&(A.ins_h=QA(A,A.ins_h,A.window[A.strstart+3-1]),e=A.prev[A.strstart&A.w_mask]=A.head[A.ins_h],A.head[A.ins_h]=A.strstart)}while(0!=--A.prev_length);if(A.match_available=0,A.match_length=2,A.strstart++,i&&(kA(A,!1),0===A.strm.avail_out))return 1}else if(A.match_available){if(i=V(A,0,A.window[A.strstart-1]),i&&kA(A,!1),A.strstart++,A.lookahead--,0===A.strm.avail_out)return 1}else A.match_available=1,A.strstart++,A.lookahead--}return A.match_available&&(i=V(A,0,A.window[A.strstart-1]),A.match_available=0),A.insert=A.strstart<2?A.strstart:2,t===AA?(kA(A,!0),0===A.strm.avail_out?3:4):A.sym_next&&(kA(A,!1),0===A.strm.avail_out)?1:2};function RA(A,t,e,i,s){this.good_length=A,this.max_lazy=t,this.nice_length=e,this.max_chain=i,this.func=s}const FA=[new RA(0,0,0,0,SA),new RA(4,4,8,4,GA),new RA(4,5,16,8,GA),new RA(4,6,32,32,GA),new RA(4,4,16,16,NA),new RA(8,16,32,32,NA),new RA(8,16,128,128,NA),new RA(8,32,128,256,NA),new RA(32,128,258,1024,NA),new RA(32,258,258,4096,NA)];function LA(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=uA,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),EA(this.dyn_ltree),EA(this.dyn_dtree),EA(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),EA(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),EA(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const UA=A=>{if(!A)return 1;const t=A.state;return!t||t.strm!==A||t.status!==pA&&57!==t.status&&69!==t.status&&73!==t.status&&91!==t.status&&103!==t.status&&t.status!==_A&&t.status!==CA?1:0},OA=A=>{if(UA(A))return BA(A,sA);A.total_in=A.total_out=0,A.data_type=fA;const t=A.state;return t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=2===t.wrap?57:t.wrap?pA:_A,A.adler=2===t.wrap?0:1,t.last_flush=-2,j(t),eA},PA=A=>{const t=OA(A);var e;return t===eA&&((e=A.state).window_size=2*e.w_size,EA(e.head),e.max_lazy_match=FA[e.level].max_lazy,e.good_match=FA[e.level].good_length,e.nice_match=FA[e.level].nice_length,e.max_chain_length=FA[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0),t},TA=(A,t,e,i,s,a)=>{if(!A)return sA;let n=1;if(t===oA&&(t=6),i<0?(n=0,i=-i):i>15&&(n=2,i-=16),s<1||s>9||e!==uA||i<8||i>15||t<0||t>9||a<0||a>gA||8===i&&1!==n)return BA(A,sA);8===i&&(i=9);const o=new LA;return A.state=o,o.strm=A,o.status=pA,o.wrap=n,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=s+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<s+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=t,o.strategy=a,o.method=e,PA(A)};var HA={deflateInit:(A,t)=>TA(A,t,uA,15,8,cA),deflateInit2:TA,deflateReset:PA,deflateResetKeep:OA,deflateSetHeader:(A,t)=>UA(A)||2!==A.state.wrap?sA:(A.state.gzhead=t,eA),deflate:(A,t)=>{if(UA(A)||t>tA||t<0)return A?BA(A,sA):sA;const e=A.state;if(!A.output||0!==A.avail_in&&!A.input||e.status===CA&&t!==AA)return BA(A,0===A.avail_out?nA:sA);const i=e.last_flush;if(e.last_flush=t,0!==e.pending){if(mA(A),0===A.avail_out)return e.last_flush=-1,eA}else if(0===A.avail_in&&wA(t)<=wA(i)&&t!==AA)return BA(A,nA);if(e.status===CA&&0!==A.avail_in)return BA(A,nA);if(e.status===pA&&0===e.wrap&&(e.status=_A),e.status===pA){let t=uA+(e.w_bits-8<<4)<<8,i=-1;if(i=e.strategy>=lA||e.level<2?0:e.level<6?1:6===e.level?2:3,t|=i<<6,0!==e.strstart&&(t|=32),t+=31-t%31,MA(e,t),0!==e.strstart&&(MA(e,A.adler>>>16),MA(e,65535&A.adler)),A.adler=1,e.status=_A,mA(A),0!==e.pending)return e.last_flush=-1,eA}if(57===e.status)if(A.adler=0,xA(e,31),xA(e,139),xA(e,8),e.gzhead)xA(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),xA(e,255&e.gzhead.time),xA(e,e.gzhead.time>>8&255),xA(e,e.gzhead.time>>16&255),xA(e,e.gzhead.time>>24&255),xA(e,9===e.level?2:e.strategy>=lA||e.level<2?4:0),xA(e,255&e.gzhead.os),e.gzhead.extra&&e.gzhead.extra.length&&(xA(e,255&e.gzhead.extra.length),xA(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(A.adler=J(A.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=69;else if(xA(e,0),xA(e,0),xA(e,0),xA(e,0),xA(e,0),xA(e,9===e.level?2:e.strategy>=lA||e.level<2?4:0),xA(e,3),e.status=_A,mA(A),0!==e.pending)return e.last_flush=-1,eA;if(69===e.status){if(e.gzhead.extra){let t=e.pending,i=(65535&e.gzhead.extra.length)-e.gzindex;for(;e.pending+i>e.pending_buf_size;){let s=e.pending_buf_size-e.pending;if(e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex,e.gzindex+s),e.pending),e.pending=e.pending_buf_size,e.gzhead.hcrc&&e.pending>t&&(A.adler=J(A.adler,e.pending_buf,e.pending-t,t)),e.gzindex+=s,mA(A),0!==e.pending)return e.last_flush=-1,eA;t=0,i-=s}let s=new Uint8Array(e.gzhead.extra);e.pending_buf.set(s.subarray(e.gzindex,e.gzindex+i),e.pending),e.pending+=i,e.gzhead.hcrc&&e.pending>t&&(A.adler=J(A.adler,e.pending_buf,e.pending-t,t)),e.gzindex=0}e.status=73}if(73===e.status){if(e.gzhead.name){let t,i=e.pending;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>i&&(A.adler=J(A.adler,e.pending_buf,e.pending-i,i)),mA(A),0!==e.pending)return e.last_flush=-1,eA;i=0}t=e.gzindex<e.gzhead.name.length?255&e.gzhead.name.charCodeAt(e.gzindex++):0,xA(e,t)}while(0!==t);e.gzhead.hcrc&&e.pending>i&&(A.adler=J(A.adler,e.pending_buf,e.pending-i,i)),e.gzindex=0}e.status=91}if(91===e.status){if(e.gzhead.comment){let t,i=e.pending;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>i&&(A.adler=J(A.adler,e.pending_buf,e.pending-i,i)),mA(A),0!==e.pending)return e.last_flush=-1,eA;i=0}t=e.gzindex<e.gzhead.comment.length?255&e.gzhead.comment.charCodeAt(e.gzindex++):0,xA(e,t)}while(0!==t);e.gzhead.hcrc&&e.pending>i&&(A.adler=J(A.adler,e.pending_buf,e.pending-i,i))}e.status=103}if(103===e.status){if(e.gzhead.hcrc){if(e.pending+2>e.pending_buf_size&&(mA(A),0!==e.pending))return e.last_flush=-1,eA;xA(e,255&A.adler),xA(e,A.adler>>8&255),A.adler=0}if(e.status=_A,mA(A),0!==e.pending)return e.last_flush=-1,eA}if(0!==A.avail_in||0!==e.lookahead||t!==X&&e.status!==CA){let i=0===e.level?SA(e,t):e.strategy===lA?((A,t)=>{let e;for(;;){if(0===A.lookahead&&(vA(A),0===A.lookahead)){if(t===X)return 1;break}if(A.match_length=0,e=V(A,0,A.window[A.strstart]),A.lookahead--,A.strstart++,e&&(kA(A,!1),0===A.strm.avail_out))return 1}return A.insert=0,t===AA?(kA(A,!0),0===A.strm.avail_out?3:4):A.sym_next&&(kA(A,!1),0===A.strm.avail_out)?1:2})(e,t):e.strategy===hA?((A,t)=>{let e,i,s,a;const n=A.window;for(;;){if(A.lookahead<=dA){if(vA(A),A.lookahead<=dA&&t===X)return 1;if(0===A.lookahead)break}if(A.match_length=0,A.lookahead>=3&&A.strstart>0&&(s=A.strstart-1,i=n[s],i===n[++s]&&i===n[++s]&&i===n[++s])){a=A.strstart+dA;do{}while(i===n[++s]&&i===n[++s]&&i===n[++s]&&i===n[++s]&&i===n[++s]&&i===n[++s]&&i===n[++s]&&i===n[++s]&&s<a);A.match_length=dA-(a-s),A.match_length>A.lookahead&&(A.match_length=A.lookahead)}if(A.match_length>=3?(e=V(A,1,A.match_length-3),A.lookahead-=A.match_length,A.strstart+=A.match_length,A.match_length=0):(e=V(A,0,A.window[A.strstart]),A.lookahead--,A.strstart++),e&&(kA(A,!1),0===A.strm.avail_out))return 1}return A.insert=0,t===AA?(kA(A,!0),0===A.strm.avail_out?3:4):A.sym_next&&(kA(A,!1),0===A.strm.avail_out)?1:2})(e,t):FA[e.level].func(e,t);if(3!==i&&4!==i||(e.status=CA),1===i||3===i)return 0===A.avail_out&&(e.last_flush=-1),eA;if(2===i&&(t===Z?W(e):t!==tA&&(K(e,0,0,!1),t===$&&(EA(e.head),0===e.lookahead&&(e.strstart=0,e.block_start=0,e.insert=0))),mA(A),0===A.avail_out))return e.last_flush=-1,eA}return t!==AA?eA:e.wrap<=0?iA:(2===e.wrap?(xA(e,255&A.adler),xA(e,A.adler>>8&255),xA(e,A.adler>>16&255),xA(e,A.adler>>24&255),xA(e,255&A.total_in),xA(e,A.total_in>>8&255),xA(e,A.total_in>>16&255),xA(e,A.total_in>>24&255)):(MA(e,A.adler>>>16),MA(e,65535&A.adler)),mA(A),e.wrap>0&&(e.wrap=-e.wrap),0!==e.pending?eA:iA)},deflateEnd:A=>{if(UA(A))return sA;const t=A.state.status;return A.state=null,t===_A?BA(A,aA):eA},deflateSetDictionary:(A,t)=>{let e=t.length;if(UA(A))return sA;const i=A.state,s=i.wrap;if(2===s||1===s&&i.status!==pA||i.lookahead)return sA;if(1===s&&(A.adler=T(A.adler,t,e,0)),i.wrap=0,e>=i.w_size){0===s&&(EA(i.head),i.strstart=0,i.block_start=0,i.insert=0);let A=new Uint8Array(i.w_size);A.set(t.subarray(e-i.w_size,e),0),t=A,e=i.w_size}const a=A.avail_in,n=A.next_in,o=A.input;for(A.avail_in=e,A.next_in=0,A.input=t,vA(i);i.lookahead>=3;){let A=i.strstart,t=i.lookahead-2;do{i.ins_h=QA(i,i.ins_h,i.window[A+3-1]),i.prev[A&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=A,A++}while(--t);i.strstart=A,i.lookahead=2,vA(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,A.next_in=n,A.input=o,A.avail_in=a,i.wrap=s,eA},deflateInfo:"pako deflate (from Nodeca project)"};const JA=(A,t)=>Object.prototype.hasOwnProperty.call(A,t);var qA={assign:function(A){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const e=t.shift();if(e){if("object"!=typeof e)throw new TypeError(e+"must be non-object");for(const t in e)JA(e,t)&&(A[t]=e[t])}}return A},flattenChunks:A=>{let t=0;for(let e=0,i=A.length;e<i;e++)t+=A[e].length;const e=new Uint8Array(t);for(let t=0,i=0,s=A.length;t<s;t++){let s=A[t];e.set(s,i),i+=s.length}return e}};let zA=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(A){zA=!1}const jA=new Uint8Array(256);for(let A=0;A<256;A++)jA[A]=A>=252?6:A>=248?5:A>=240?4:A>=224?3:A>=192?2:1;jA[254]=jA[254]=1;var KA={string2buf:A=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(A);let t,e,i,s,a,n=A.length,o=0;for(s=0;s<n;s++)e=A.charCodeAt(s),55296==(64512&e)&&s+1<n&&(i=A.charCodeAt(s+1),56320==(64512&i)&&(e=65536+(e-55296<<10)+(i-56320),s++)),o+=e<128?1:e<2048?2:e<65536?3:4;for(t=new Uint8Array(o),a=0,s=0;a<o;s++)e=A.charCodeAt(s),55296==(64512&e)&&s+1<n&&(i=A.charCodeAt(s+1),56320==(64512&i)&&(e=65536+(e-55296<<10)+(i-56320),s++)),e<128?t[a++]=e:e<2048?(t[a++]=192|e>>>6,t[a++]=128|63&e):e<65536?(t[a++]=224|e>>>12,t[a++]=128|e>>>6&63,t[a++]=128|63&e):(t[a++]=240|e>>>18,t[a++]=128|e>>>12&63,t[a++]=128|e>>>6&63,t[a++]=128|63&e);return t},buf2string:(A,t)=>{const e=t||A.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(A.subarray(0,t));let i,s;const a=new Array(2*e);for(s=0,i=0;i<e;){let t=A[i++];if(t<128){a[s++]=t;continue}let n=jA[t];if(n>4)a[s++]=65533,i+=n-1;else{for(t&=2===n?31:3===n?15:7;n>1&&i<e;)t=t<<6|63&A[i++],n--;n>1?a[s++]=65533:t<65536?a[s++]=t:(t-=65536,a[s++]=55296|t>>10&1023,a[s++]=56320|1023&t)}}return((A,t)=>{if(t<65534&&A.subarray&&zA)return String.fromCharCode.apply(null,A.length===t?A:A.subarray(0,t));let e="";for(let i=0;i<t;i++)e+=String.fromCharCode(A[i]);return e})(a,s)},utf8border:(A,t)=>{(t=t||A.length)>A.length&&(t=A.length);let e=t-1;for(;e>=0&&128==(192&A[e]);)e--;return e<0||0===e?t:e+jA[A[e]]>t?e:t}};var YA=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const VA=Object.prototype.toString,{Z_NO_FLUSH:WA,Z_SYNC_FLUSH:XA,Z_FULL_FLUSH:ZA,Z_FINISH:$A,Z_OK:At,Z_STREAM_END:tt,Z_DEFAULT_COMPRESSION:et,Z_DEFAULT_STRATEGY:it,Z_DEFLATED:st}=z;function at(A){this.options=qA.assign({level:et,method:st,chunkSize:16384,windowBits:15,memLevel:8,strategy:it},A||{});let t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new YA,this.strm.avail_out=0;let e=HA.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(e!==At)throw new Error(q[e]);if(t.header&&HA.deflateSetHeader(this.strm,t.header),t.dictionary){let A;if(A="string"==typeof t.dictionary?KA.string2buf(t.dictionary):"[object ArrayBuffer]"===VA.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,e=HA.deflateSetDictionary(this.strm,A),e!==At)throw new Error(q[e]);this._dict_set=!0}}function nt(A,t){const e=new at(t);if(e.push(A,!0),e.err)throw e.msg||q[e.err];return e.result}at.prototype.push=function(A,t){const e=this.strm,i=this.options.chunkSize;let s,a;if(this.ended)return!1;for(a=t===~~t?t:!0===t?$A:WA,"string"==typeof A?e.input=KA.string2buf(A):"[object ArrayBuffer]"===VA.call(A)?e.input=new Uint8Array(A):e.input=A,e.next_in=0,e.avail_in=e.input.length;;)if(0===e.avail_out&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),(a===XA||a===ZA)&&e.avail_out<=6)this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;else{if(s=HA.deflate(e,a),s===tt)return e.next_out>0&&this.onData(e.output.subarray(0,e.next_out)),s=HA.deflateEnd(this.strm),this.onEnd(s),this.ended=!0,s===At;if(0!==e.avail_out){if(a>0&&e.next_out>0)this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;else if(0===e.avail_in)break}else this.onData(e.output)}return!0},at.prototype.onData=function(A){this.chunks.push(A)},at.prototype.onEnd=function(A){A===At&&(this.result=qA.flattenChunks(this.chunks)),this.chunks=[],this.err=A,this.msg=this.strm.msg};var ot={Deflate:at,deflate:nt,deflateRaw:function(A,t){return(t=t||{}).raw=!0,nt(A,t)},gzip:function(A,t){return(t=t||{}).gzip=!0,nt(A,t)},constants:z};const rt=16209;var lt=function(A,t){let e,i,s,a,n,o,r,l,h,g,c,f,u,d,I,p,_,C,B,w,E,y,Q,m;const k=A.state;e=A.next_in,Q=A.input,i=e+(A.avail_in-5),s=A.next_out,m=A.output,a=s-(t-A.avail_out),n=s+(A.avail_out-257),o=k.dmax,r=k.wsize,l=k.whave,h=k.wnext,g=k.window,c=k.hold,f=k.bits,u=k.lencode,d=k.distcode,I=(1<<k.lenbits)-1,p=(1<<k.distbits)-1;A:do{f<15&&(c+=Q[e++]<<f,f+=8,c+=Q[e++]<<f,f+=8),_=u[c&I];t:for(;;){if(C=_>>>24,c>>>=C,f-=C,C=_>>>16&255,0===C)m[s++]=65535&_;else{if(!(16&C)){if(0==(64&C)){_=u[(65535&_)+(c&(1<<C)-1)];continue t}if(32&C){k.mode=16191;break A}A.msg="invalid literal/length code",k.mode=rt;break A}B=65535&_,C&=15,C&&(f<C&&(c+=Q[e++]<<f,f+=8),B+=c&(1<<C)-1,c>>>=C,f-=C),f<15&&(c+=Q[e++]<<f,f+=8,c+=Q[e++]<<f,f+=8),_=d[c&p];e:for(;;){if(C=_>>>24,c>>>=C,f-=C,C=_>>>16&255,!(16&C)){if(0==(64&C)){_=d[(65535&_)+(c&(1<<C)-1)];continue e}A.msg="invalid distance code",k.mode=rt;break A}if(w=65535&_,C&=15,f<C&&(c+=Q[e++]<<f,f+=8,f<C&&(c+=Q[e++]<<f,f+=8)),w+=c&(1<<C)-1,w>o){A.msg="invalid distance too far back",k.mode=rt;break A}if(c>>>=C,f-=C,C=s-a,w>C){if(C=w-C,C>l&&k.sane){A.msg="invalid distance too far back",k.mode=rt;break A}if(E=0,y=g,0===h){if(E+=r-C,C<B){B-=C;do{m[s++]=g[E++]}while(--C);E=s-w,y=m}}else if(h<C){if(E+=r+h-C,C-=h,C<B){B-=C;do{m[s++]=g[E++]}while(--C);if(E=0,h<B){C=h,B-=C;do{m[s++]=g[E++]}while(--C);E=s-w,y=m}}}else if(E+=h-C,C<B){B-=C;do{m[s++]=g[E++]}while(--C);E=s-w,y=m}for(;B>2;)m[s++]=y[E++],m[s++]=y[E++],m[s++]=y[E++],B-=3;B&&(m[s++]=y[E++],B>1&&(m[s++]=y[E++]))}else{E=s-w;do{m[s++]=m[E++],m[s++]=m[E++],m[s++]=m[E++],B-=3}while(B>2);B&&(m[s++]=m[E++],B>1&&(m[s++]=m[E++]))}break}}break}}while(e<i&&s<n);B=f>>3,e-=B,f-=B<<3,c&=(1<<f)-1,A.next_in=e,A.next_out=s,A.avail_in=e<i?i-e+5:5-(e-i),A.avail_out=s<n?n-s+257:257-(s-n),k.hold=c,k.bits=f};const ht=15,gt=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ct=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ft=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ut=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var dt=(A,t,e,i,s,a,n,o)=>{const r=o.bits;let l,h,g,c,f,u,d=0,I=0,p=0,_=0,C=0,B=0,w=0,E=0,y=0,Q=0,m=null;const k=new Uint16Array(16),x=new Uint16Array(16);let M,b,D,v=null;for(d=0;d<=ht;d++)k[d]=0;for(I=0;I<i;I++)k[t[e+I]]++;for(C=r,_=ht;_>=1&&0===k[_];_--);if(C>_&&(C=_),0===_)return s[a++]=20971520,s[a++]=20971520,o.bits=1,0;for(p=1;p<_&&0===k[p];p++);for(C<p&&(C=p),E=1,d=1;d<=ht;d++)if(E<<=1,E-=k[d],E<0)return-1;if(E>0&&(0===A||1!==_))return-1;for(x[1]=0,d=1;d<ht;d++)x[d+1]=x[d]+k[d];for(I=0;I<i;I++)0!==t[e+I]&&(n[x[t[e+I]]++]=I);if(0===A?(m=v=n,u=20):1===A?(m=gt,v=ct,u=257):(m=ft,v=ut,u=0),Q=0,I=0,d=p,f=a,B=C,w=0,g=-1,y=1<<C,c=y-1,1===A&&y>852||2===A&&y>592)return 1;for(;;){M=d-w,n[I]+1<u?(b=0,D=n[I]):n[I]>=u?(b=v[n[I]-u],D=m[n[I]-u]):(b=96,D=0),l=1<<d-w,h=1<<B,p=h;do{h-=l,s[f+(Q>>w)+h]=M<<24|b<<16|D|0}while(0!==h);for(l=1<<d-1;Q&l;)l>>=1;if(0!==l?(Q&=l-1,Q+=l):Q=0,I++,0==--k[d]){if(d===_)break;d=t[e+n[I]]}if(d>C&&(Q&c)!==g){for(0===w&&(w=C),f+=p,B=d-w,E=1<<B;B+w<_&&(E-=k[B+w],!(E<=0));)B++,E<<=1;if(y+=1<<B,1===A&&y>852||2===A&&y>592)return 1;g=Q&c,s[g]=C<<24|B<<16|f-a|0}}return 0!==Q&&(s[f+Q]=d-w<<24|64<<16|0),o.bits=C,0};const{Z_FINISH:It,Z_BLOCK:pt,Z_TREES:_t,Z_OK:Ct,Z_STREAM_END:Bt,Z_NEED_DICT:wt,Z_STREAM_ERROR:Et,Z_DATA_ERROR:yt,Z_MEM_ERROR:Qt,Z_BUF_ERROR:mt,Z_DEFLATED:kt}=z,xt=16180,Mt=16190,bt=16191,Dt=16192,vt=16194,St=16199,Gt=16200,Nt=16206,Rt=16209,Ft=A=>(A>>>24&255)+(A>>>8&65280)+((65280&A)<<8)+((255&A)<<24);function Lt(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Ut=A=>{if(!A)return 1;const t=A.state;return!t||t.strm!==A||t.mode<xt||t.mode>16211?1:0},Ot=A=>{if(Ut(A))return Et;const t=A.state;return A.total_in=A.total_out=t.total=0,A.msg="",t.wrap&&(A.adler=1&t.wrap),t.mode=xt,t.last=0,t.havedict=0,t.flags=-1,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,Ct},Pt=A=>{if(Ut(A))return Et;const t=A.state;return t.wsize=0,t.whave=0,t.wnext=0,Ot(A)},Tt=(A,t)=>{let e;if(Ut(A))return Et;const i=A.state;return t<0?(e=0,t=-t):(e=5+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?Et:(null!==i.window&&i.wbits!==t&&(i.window=null),i.wrap=e,i.wbits=t,Pt(A))},Ht=(A,t)=>{if(!A)return Et;const e=new Lt;A.state=e,e.strm=A,e.window=null,e.mode=xt;const i=Tt(A,t);return i!==Ct&&(A.state=null),i};let Jt,qt,zt=!0;const jt=A=>{if(zt){Jt=new Int32Array(512),qt=new Int32Array(32);let t=0;for(;t<144;)A.lens[t++]=8;for(;t<256;)A.lens[t++]=9;for(;t<280;)A.lens[t++]=7;for(;t<288;)A.lens[t++]=8;for(dt(1,A.lens,0,288,Jt,0,A.work,{bits:9}),t=0;t<32;)A.lens[t++]=5;dt(2,A.lens,0,32,qt,0,A.work,{bits:5}),zt=!1}A.lencode=Jt,A.lenbits=9,A.distcode=qt,A.distbits=5},Kt=(A,t,e,i)=>{let s;const a=A.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new Uint8Array(a.wsize)),i>=a.wsize?(a.window.set(t.subarray(e-a.wsize,e),0),a.wnext=0,a.whave=a.wsize):(s=a.wsize-a.wnext,s>i&&(s=i),a.window.set(t.subarray(e-i,e-i+s),a.wnext),(i-=s)?(a.window.set(t.subarray(e-i,e),0),a.wnext=i,a.whave=a.wsize):(a.wnext+=s,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=s))),0};var Yt={inflateReset:Pt,inflateReset2:Tt,inflateResetKeep:Ot,inflateInit:A=>Ht(A,15),inflateInit2:Ht,inflate:(A,t)=>{let e,i,s,a,n,o,r,l,h,g,c,f,u,d,I,p,_,C,B,w,E,y,Q=0;const m=new Uint8Array(4);let k,x;const M=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Ut(A)||!A.output||!A.input&&0!==A.avail_in)return Et;e=A.state,e.mode===bt&&(e.mode=Dt),n=A.next_out,s=A.output,r=A.avail_out,a=A.next_in,i=A.input,o=A.avail_in,l=e.hold,h=e.bits,g=o,c=r,y=Ct;A:for(;;)switch(e.mode){case xt:if(0===e.wrap){e.mode=Dt;break}for(;h<16;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(2&e.wrap&&35615===l){0===e.wbits&&(e.wbits=15),e.check=0,m[0]=255&l,m[1]=l>>>8&255,e.check=J(e.check,m,2,0),l=0,h=0,e.mode=16181;break}if(e.head&&(e.head.done=!1),!(1&e.wrap)||(((255&l)<<8)+(l>>8))%31){A.msg="incorrect header check",e.mode=Rt;break}if((15&l)!==kt){A.msg="unknown compression method",e.mode=Rt;break}if(l>>>=4,h-=4,E=8+(15&l),0===e.wbits&&(e.wbits=E),E>15||E>e.wbits){A.msg="invalid window size",e.mode=Rt;break}e.dmax=1<<e.wbits,e.flags=0,A.adler=e.check=1,e.mode=512&l?16189:bt,l=0,h=0;break;case 16181:for(;h<16;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(e.flags=l,(255&e.flags)!==kt){A.msg="unknown compression method",e.mode=Rt;break}if(57344&e.flags){A.msg="unknown header flags set",e.mode=Rt;break}e.head&&(e.head.text=l>>8&1),512&e.flags&&4&e.wrap&&(m[0]=255&l,m[1]=l>>>8&255,e.check=J(e.check,m,2,0)),l=0,h=0,e.mode=16182;case 16182:for(;h<32;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}e.head&&(e.head.time=l),512&e.flags&&4&e.wrap&&(m[0]=255&l,m[1]=l>>>8&255,m[2]=l>>>16&255,m[3]=l>>>24&255,e.check=J(e.check,m,4,0)),l=0,h=0,e.mode=16183;case 16183:for(;h<16;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}e.head&&(e.head.xflags=255&l,e.head.os=l>>8),512&e.flags&&4&e.wrap&&(m[0]=255&l,m[1]=l>>>8&255,e.check=J(e.check,m,2,0)),l=0,h=0,e.mode=16184;case 16184:if(1024&e.flags){for(;h<16;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}e.length=l,e.head&&(e.head.extra_len=l),512&e.flags&&4&e.wrap&&(m[0]=255&l,m[1]=l>>>8&255,e.check=J(e.check,m,2,0)),l=0,h=0}else e.head&&(e.head.extra=null);e.mode=16185;case 16185:if(1024&e.flags&&(f=e.length,f>o&&(f=o),f&&(e.head&&(E=e.head.extra_len-e.length,e.head.extra||(e.head.extra=new Uint8Array(e.head.extra_len)),e.head.extra.set(i.subarray(a,a+f),E)),512&e.flags&&4&e.wrap&&(e.check=J(e.check,i,f,a)),o-=f,a+=f,e.length-=f),e.length))break A;e.length=0,e.mode=16186;case 16186:if(2048&e.flags){if(0===o)break A;f=0;do{E=i[a+f++],e.head&&E&&e.length<65536&&(e.head.name+=String.fromCharCode(E))}while(E&&f<o);if(512&e.flags&&4&e.wrap&&(e.check=J(e.check,i,f,a)),o-=f,a+=f,E)break A}else e.head&&(e.head.name=null);e.length=0,e.mode=16187;case 16187:if(4096&e.flags){if(0===o)break A;f=0;do{E=i[a+f++],e.head&&E&&e.length<65536&&(e.head.comment+=String.fromCharCode(E))}while(E&&f<o);if(512&e.flags&&4&e.wrap&&(e.check=J(e.check,i,f,a)),o-=f,a+=f,E)break A}else e.head&&(e.head.comment=null);e.mode=16188;case 16188:if(512&e.flags){for(;h<16;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(4&e.wrap&&l!==(65535&e.check)){A.msg="header crc mismatch",e.mode=Rt;break}l=0,h=0}e.head&&(e.head.hcrc=e.flags>>9&1,e.head.done=!0),A.adler=e.check=0,e.mode=bt;break;case 16189:for(;h<32;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}A.adler=e.check=Ft(l),l=0,h=0,e.mode=Mt;case Mt:if(0===e.havedict)return A.next_out=n,A.avail_out=r,A.next_in=a,A.avail_in=o,e.hold=l,e.bits=h,wt;A.adler=e.check=1,e.mode=bt;case bt:if(t===pt||t===_t)break A;case Dt:if(e.last){l>>>=7&h,h-=7&h,e.mode=Nt;break}for(;h<3;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}switch(e.last=1&l,l>>>=1,h-=1,3&l){case 0:e.mode=16193;break;case 1:if(jt(e),e.mode=St,t===_t){l>>>=2,h-=2;break A}break;case 2:e.mode=16196;break;case 3:A.msg="invalid block type",e.mode=Rt}l>>>=2,h-=2;break;case 16193:for(l>>>=7&h,h-=7&h;h<32;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if((65535&l)!=(l>>>16^65535)){A.msg="invalid stored block lengths",e.mode=Rt;break}if(e.length=65535&l,l=0,h=0,e.mode=vt,t===_t)break A;case vt:e.mode=16195;case 16195:if(f=e.length,f){if(f>o&&(f=o),f>r&&(f=r),0===f)break A;s.set(i.subarray(a,a+f),n),o-=f,a+=f,r-=f,n+=f,e.length-=f;break}e.mode=bt;break;case 16196:for(;h<14;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(e.nlen=257+(31&l),l>>>=5,h-=5,e.ndist=1+(31&l),l>>>=5,h-=5,e.ncode=4+(15&l),l>>>=4,h-=4,e.nlen>286||e.ndist>30){A.msg="too many length or distance symbols",e.mode=Rt;break}e.have=0,e.mode=16197;case 16197:for(;e.have<e.ncode;){for(;h<3;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}e.lens[M[e.have++]]=7&l,l>>>=3,h-=3}for(;e.have<19;)e.lens[M[e.have++]]=0;if(e.lencode=e.lendyn,e.lenbits=7,k={bits:e.lenbits},y=dt(0,e.lens,0,19,e.lencode,0,e.work,k),e.lenbits=k.bits,y){A.msg="invalid code lengths set",e.mode=Rt;break}e.have=0,e.mode=16198;case 16198:for(;e.have<e.nlen+e.ndist;){for(;Q=e.lencode[l&(1<<e.lenbits)-1],I=Q>>>24,p=Q>>>16&255,_=65535&Q,!(I<=h);){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(_<16)l>>>=I,h-=I,e.lens[e.have++]=_;else{if(16===_){for(x=I+2;h<x;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(l>>>=I,h-=I,0===e.have){A.msg="invalid bit length repeat",e.mode=Rt;break}E=e.lens[e.have-1],f=3+(3&l),l>>>=2,h-=2}else if(17===_){for(x=I+3;h<x;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}l>>>=I,h-=I,E=0,f=3+(7&l),l>>>=3,h-=3}else{for(x=I+7;h<x;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}l>>>=I,h-=I,E=0,f=11+(127&l),l>>>=7,h-=7}if(e.have+f>e.nlen+e.ndist){A.msg="invalid bit length repeat",e.mode=Rt;break}for(;f--;)e.lens[e.have++]=E}}if(e.mode===Rt)break;if(0===e.lens[256]){A.msg="invalid code -- missing end-of-block",e.mode=Rt;break}if(e.lenbits=9,k={bits:e.lenbits},y=dt(1,e.lens,0,e.nlen,e.lencode,0,e.work,k),e.lenbits=k.bits,y){A.msg="invalid literal/lengths set",e.mode=Rt;break}if(e.distbits=6,e.distcode=e.distdyn,k={bits:e.distbits},y=dt(2,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,k),e.distbits=k.bits,y){A.msg="invalid distances set",e.mode=Rt;break}if(e.mode=St,t===_t)break A;case St:e.mode=Gt;case Gt:if(o>=6&&r>=258){A.next_out=n,A.avail_out=r,A.next_in=a,A.avail_in=o,e.hold=l,e.bits=h,lt(A,c),n=A.next_out,s=A.output,r=A.avail_out,a=A.next_in,i=A.input,o=A.avail_in,l=e.hold,h=e.bits,e.mode===bt&&(e.back=-1);break}for(e.back=0;Q=e.lencode[l&(1<<e.lenbits)-1],I=Q>>>24,p=Q>>>16&255,_=65535&Q,!(I<=h);){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(p&&0==(240&p)){for(C=I,B=p,w=_;Q=e.lencode[w+((l&(1<<C+B)-1)>>C)],I=Q>>>24,p=Q>>>16&255,_=65535&Q,!(C+I<=h);){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}l>>>=C,h-=C,e.back+=C}if(l>>>=I,h-=I,e.back+=I,e.length=_,0===p){e.mode=16205;break}if(32&p){e.back=-1,e.mode=bt;break}if(64&p){A.msg="invalid literal/length code",e.mode=Rt;break}e.extra=15&p,e.mode=16201;case 16201:if(e.extra){for(x=e.extra;h<x;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}e.length+=l&(1<<e.extra)-1,l>>>=e.extra,h-=e.extra,e.back+=e.extra}e.was=e.length,e.mode=16202;case 16202:for(;Q=e.distcode[l&(1<<e.distbits)-1],I=Q>>>24,p=Q>>>16&255,_=65535&Q,!(I<=h);){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(0==(240&p)){for(C=I,B=p,w=_;Q=e.distcode[w+((l&(1<<C+B)-1)>>C)],I=Q>>>24,p=Q>>>16&255,_=65535&Q,!(C+I<=h);){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}l>>>=C,h-=C,e.back+=C}if(l>>>=I,h-=I,e.back+=I,64&p){A.msg="invalid distance code",e.mode=Rt;break}e.offset=_,e.extra=15&p,e.mode=16203;case 16203:if(e.extra){for(x=e.extra;h<x;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}e.offset+=l&(1<<e.extra)-1,l>>>=e.extra,h-=e.extra,e.back+=e.extra}if(e.offset>e.dmax){A.msg="invalid distance too far back",e.mode=Rt;break}e.mode=16204;case 16204:if(0===r)break A;if(f=c-r,e.offset>f){if(f=e.offset-f,f>e.whave&&e.sane){A.msg="invalid distance too far back",e.mode=Rt;break}f>e.wnext?(f-=e.wnext,u=e.wsize-f):u=e.wnext-f,f>e.length&&(f=e.length),d=e.window}else d=s,u=n-e.offset,f=e.length;f>r&&(f=r),r-=f,e.length-=f;do{s[n++]=d[u++]}while(--f);0===e.length&&(e.mode=Gt);break;case 16205:if(0===r)break A;s[n++]=e.length,r--,e.mode=Gt;break;case Nt:if(e.wrap){for(;h<32;){if(0===o)break A;o--,l|=i[a++]<<h,h+=8}if(c-=r,A.total_out+=c,e.total+=c,4&e.wrap&&c&&(A.adler=e.check=e.flags?J(e.check,s,c,n-c):T(e.check,s,c,n-c)),c=r,4&e.wrap&&(e.flags?l:Ft(l))!==e.check){A.msg="incorrect data check",e.mode=Rt;break}l=0,h=0}e.mode=16207;case 16207:if(e.wrap&&e.flags){for(;h<32;){if(0===o)break A;o--,l+=i[a++]<<h,h+=8}if(4&e.wrap&&l!==(4294967295&e.total)){A.msg="incorrect length check",e.mode=Rt;break}l=0,h=0}e.mode=16208;case 16208:y=Bt;break A;case Rt:y=yt;break A;case 16210:return Qt;default:return Et}return A.next_out=n,A.avail_out=r,A.next_in=a,A.avail_in=o,e.hold=l,e.bits=h,(e.wsize||c!==A.avail_out&&e.mode<Rt&&(e.mode<Nt||t!==It))&&Kt(A,A.output,A.next_out,c-A.avail_out),g-=A.avail_in,c-=A.avail_out,A.total_in+=g,A.total_out+=c,e.total+=c,4&e.wrap&&c&&(A.adler=e.check=e.flags?J(e.check,s,c,A.next_out-c):T(e.check,s,c,A.next_out-c)),A.data_type=e.bits+(e.last?64:0)+(e.mode===bt?128:0)+(e.mode===St||e.mode===vt?256:0),(0===g&&0===c||t===It)&&y===Ct&&(y=mt),y},inflateEnd:A=>{if(Ut(A))return Et;let t=A.state;return t.window&&(t.window=null),A.state=null,Ct},inflateGetHeader:(A,t)=>{if(Ut(A))return Et;const e=A.state;return 0==(2&e.wrap)?Et:(e.head=t,t.done=!1,Ct)},inflateSetDictionary:(A,t)=>{const e=t.length;let i,s,a;return Ut(A)?Et:(i=A.state,0!==i.wrap&&i.mode!==Mt?Et:i.mode===Mt&&(s=1,s=T(s,t,e,0),s!==i.check)?yt:(a=Kt(A,t,e,e),a?(i.mode=16210,Qt):(i.havedict=1,Ct)))},inflateInfo:"pako inflate (from Nodeca project)"};var Vt=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const Wt=Object.prototype.toString,{Z_NO_FLUSH:Xt,Z_FINISH:Zt,Z_OK:$t,Z_STREAM_END:Ae,Z_NEED_DICT:te,Z_STREAM_ERROR:ee,Z_DATA_ERROR:ie,Z_MEM_ERROR:se}=z;function ae(A){this.options=qA.assign({chunkSize:65536,windowBits:15,to:""},A||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||A&&A.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new YA,this.strm.avail_out=0;let e=Yt.inflateInit2(this.strm,t.windowBits);if(e!==$t)throw new Error(q[e]);if(this.header=new Vt,Yt.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=KA.string2buf(t.dictionary):"[object ArrayBuffer]"===Wt.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(e=Yt.inflateSetDictionary(this.strm,t.dictionary),e!==$t)))throw new Error(q[e])}function ne(A,t){const e=new ae(t);if(e.push(A),e.err)throw e.msg||q[e.err];return e.result}ae.prototype.push=function(A,t){const e=this.strm,i=this.options.chunkSize,s=this.options.dictionary;let a,n,o;if(this.ended)return!1;for(n=t===~~t?t:!0===t?Zt:Xt,"[object ArrayBuffer]"===Wt.call(A)?e.input=new Uint8Array(A):e.input=A,e.next_in=0,e.avail_in=e.input.length;;){for(0===e.avail_out&&(e.output=new Uint8Array(i),e.next_out=0,e.avail_out=i),a=Yt.inflate(e,n),a===te&&s&&(a=Yt.inflateSetDictionary(e,s),a===$t?a=Yt.inflate(e,n):a===ie&&(a=te));e.avail_in>0&&a===Ae&&e.state.wrap>0&&0!==A[e.next_in];)Yt.inflateReset(e),a=Yt.inflate(e,n);switch(a){case ee:case ie:case te:case se:return this.onEnd(a),this.ended=!0,!1}if(o=e.avail_out,e.next_out&&(0===e.avail_out||a===Ae))if("string"===this.options.to){let A=KA.utf8border(e.output,e.next_out),t=e.next_out-A,s=KA.buf2string(e.output,A);e.next_out=t,e.avail_out=i-t,t&&e.output.set(e.output.subarray(A,A+t),0),this.onData(s)}else this.onData(e.output.length===e.next_out?e.output:e.output.subarray(0,e.next_out));if(a!==$t||0!==o){if(a===Ae)return a=Yt.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,!0;if(0===e.avail_in)break}}return!0},ae.prototype.onData=function(A){this.chunks.push(A)},ae.prototype.onEnd=function(A){A===$t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=qA.flattenChunks(this.chunks)),this.chunks=[],this.err=A,this.msg=this.strm.msg};var oe={Inflate:ae,inflate:ne,inflateRaw:function(A,t){return(t=t||{}).raw=!0,ne(A,t)},ungzip:ne,constants:z};const{Deflate:re,deflate:le,deflateRaw:he,gzip:ge}=ot,{Inflate:ce,inflate:fe,inflateRaw:ue,ungzip:de}=oe;var Ie=fe}},t={};function e(i){var s=t[i];if(void 0!==s)return s.exports;var a=t[i]={exports:{}};return A[i](a,a.exports,e),a.exports}e.n=A=>{var t=A&&A.__esModule?()=>A.default:()=>A;return e.d(t,{a:t}),t},e.d=(A,t)=>{for(var i in t)e.o(t,i)&&!e.o(A,i)&&Object.defineProperty(A,i,{enumerable:!0,get:t[i]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(A){if("object"==typeof window)return window}}(),e.o=(A,t)=>Object.prototype.hasOwnProperty.call(A,t),e.r=A=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})};var i={};return(()=>{"use strict";function A(A,t){(null==t||t>A.length)&&(t=A.length);for(var e=0,i=new Array(t);e<t;e++)i[e]=A[e];return i}function t(t,e){if(t){if("string"==typeof t)return A(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?A(t,e):void 0}}function s(A,e){return function(A){if(Array.isArray(A))return A}(A)||function(A,t){var e=null==A?null:"undefined"!=typeof Symbol&&A[Symbol.iterator]||A["@@iterator"];if(null!=e){var i,s,a,n,o=[],r=!0,l=!1;try{if(a=(e=e.call(A)).next,0===t){if(Object(e)!==e)return;r=!1}else for(;!(r=(i=a.call(e)).done)&&(o.push(i.value),o.length!==t);r=!0);}catch(A){l=!0,s=A}finally{try{if(!r&&null!=e.return&&(n=e.return(),Object(n)!==n))return}finally{if(l)throw s}}return o}}(A,e)||t(A,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(A){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(A){return typeof A}:function(A){return A&&"function"==typeof Symbol&&A.constructor===Symbol&&A!==Symbol.prototype?"symbol":typeof A},a(A)}function n(e){return function(t){if(Array.isArray(t))return A(t)}(e)||function(A){if("undefined"!=typeof Symbol&&null!=A[Symbol.iterator]||null!=A["@@iterator"])return Array.from(A)}(e)||t(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(A,t,e,i,s,a,n){try{var o=A[a](n),r=o.value}catch(A){return void e(A)}o.done?t(r):Promise.resolve(r).then(i,s)}function r(A){return function(){var t=this,e=arguments;return new Promise((function(i,s){var a=A.apply(t,e);function n(A){o(a,i,s,n,r,"next",A)}function r(A){o(a,i,s,n,r,"throw",A)}n(void 0)}))}}e.r(i);var l=e(4687),h=e.n(l);function g(A,t){var e=t.size,i=void 0===e?1:e,s=t.wait,a=void 0===s?1/0:s,n=null,o=[];return function(t){var e=o,s=function(){var t=r(h().mark((function t(){return h().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:Promise.resolve(A(e.map((function(A){return A.params})))).then((function(A){A.forEach((function(A,t){e[t].resolve(A)}))}));case 1:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();return new Promise((function(A,r){e.push({resolve:A,params:t,reject:r}),e.length===i?(n&&(clearTimeout(n),n=null),s(),o=[]):n||a===1/0||(n=setTimeout((function(){o===e&&(o=[],clearTimeout(n),n=null,s())}),a))}))}}var c="microlink.function:",f="microlink.promise:";function u(A){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.function_prefix,i=void 0===e?c:e,n=t.promise_prefix,o=void 0===n?f:n,r=arguments.length>2?arguments[2]:void 0,l={},h={};return r||(r=function(){return Math.random()}),A=function A(t){if(Array.isArray(t))return t.map((function(t){return A(t)}));if("function"==typeof t){var e=r(t);return l[e]=t,i+e}if("object"===a(t)&&null!==t&&"function"==typeof t.then){var n=r(t);return h[n]=t,l[n]=function(){return t},o+n}return"object"===a(t)&&null!==t&&-1===t.constructor.name.indexOf("Array")?Object.fromEntries(Object.entries(t).map((function(t){var e=s(t,2);return[e[0],A(e[1])]}))):t}(A),[A,l,h]}function d(A,t){var e=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).debug_level,i=void 0===e?0:e,o={},l=t.map((function(A){var t=A.id,e=A.method,i=A.params;"number"!=typeof t&&(t=Math.random());var a=s(u(i||[],"microlink.call:"),2),n=a[0],r=a[1];return Object.assign(o,r),{jsonrpc:"2.0",id:t,method:e,params:n}}));i>=2&&console.log("[microlink.batchcall] requests serialized to ",l);var g=l.map((function(A){return A.id}));return new Promise((function(t){var e=function(){var e=r(h().mark((function e(r){var l,c,f,u,d;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i>=2&&console.log("[microlink.batchcall] response listener received message event with data",r.data),"object"===a(l=r.data)&&null!==l){e.next=4;break}return e.abrupt("return");case 4:if("2.0"!==l.jsonrpc||!l.method||!(l.method in o)){e.next=13;break}if(Array.isArray(l.params)){e.next=7;break}throw Error("[microlink.batchcall] params should be an array");case 7:return e.next=9,(c=o)[l.method].apply(c,n(l.params));case 9:return f=e.sent,u={jsonrpc:"2.0",result:f,id:l.id},i>=2&&console.log("[microlink.batchcall] posting message down to worker:",u),e.abrupt("return",A.postMessage(u));case 13:Array.isArray(l)&&l.every((function(A){return"object"===a(A)&&g.includes(A.id)}))&&(i>=2&&console.log("[microlink.batchcall] removing exhausted listener"),A.removeEventListener("message",s),o=null,l.sort((function(A,t){return Math.sign(g.indexOf(A.id)-g.indexOf(t.id))})),d=l.map((function(A){return A.result})),i>=2&&console.log("[microlink.batchcall] resolving batch call:",d),t(d));case 14:case"end":return e.stop()}}),e)})));function s(A){return e.apply(this,arguments)}return s}();return A.addEventListener("message",e),i>=2&&console.log("[microlink.batchcall] posting message down to worker:",l),A.postMessage(l)}))}function I(A,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=i.batch_size,n=void 0===s?1:s,o=i.batch_wait,r=void 0===o?10:o,l=i.debug_level,h=void 0===l?0:l;if(Array.isArray(t))return e>=0?t.map((function(t){return I(A,t,e-1,{batch_size:n,batch_wait:r})})):t;if("object"===a(t)&&null!==t&&-1===t.constructor.name.indexOf("Array")){var u={};for(var p in t)u[p]=I(A,t[p],e-1,{batch_size:n,batch_wait:r});return u}if("string"==typeof t&&t.startsWith(c)){var _=t.replace(c,""),C=g((function(t){return d(A,t,{debug_level:h})}),{size:n,wait:r});return function(){var A=Array.from(arguments);return C({method:_,params:A})}}if("string"==typeof t&&t.startsWith(f)){var B=t.replace(f,"");return g((function(t){return d(A,t,{debug_level:h})}),{size:n,wait:r})({method:B,params:[]})}return t}function p(A){var t=A.error,e=A.id;return{jsonrpc:"2.0",error:{code:-32603,message:"Internal error",data:{error:t.message}},id:e}}function _(A){var t=A.id;return{jsonrpc:"2.0",error:{code:-32601,message:"Method not found",data:{method:A.method}},id:t}}function C(A){return(t,...e)=>w(A,t,e)}function B(A,t){return C(m(A,t).get)}const{apply:w,construct:E,defineProperty:y,get:Q,getOwnPropertyDescriptor:m,getPrototypeOf:k,has:x,ownKeys:M,set:b,setPrototypeOf:D}=Reflect,{EPSILON:v,MAX_SAFE_INTEGER:S,isFinite:G,isNaN:N}=Number,{iterator:R,species:F,toStringTag:L,for:U}=Symbol,O=Object,{create:P,defineProperty:T,freeze:H,is:J}=O,q=O.prototype,z=(q.__lookupGetter__&&C(q.__lookupGetter__),O.hasOwn||C(q.hasOwnProperty)),j=Array,K=(j.isArray,j.prototype),Y=(C(K.join),C(K.push),C(K.toLocaleString),K[R]),V=C(Y),{abs:W,trunc:X}=Math,Z=ArrayBuffer,$=(Z.isView,Z.prototype),AA=(C($.slice),B($,"byteLength"),"undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:null),tA=(AA&&B(AA.prototype,"byteLength"),k(Uint8Array)),eA=(tA.from,tA.prototype),iA=(eA[R],C(eA.keys),C(eA.values),C(eA.entries),C(eA.set),C(eA.reverse),C(eA.fill),C(eA.copyWithin),C(eA.sort),C(eA.slice),C(eA.subarray),B(eA,"buffer"),B(eA,"byteOffset"),B(eA,"length"),B(eA,L),Uint8Array),sA=Uint16Array,aA=Uint32Array,nA=Float32Array,oA=k([][R]()),rA=C(oA.next),lA=C(function*(){}().next),hA=k(oA),gA=DataView.prototype,cA=C(gA.getUint16),fA=(C(gA.setUint16),TypeError),uA=WeakSet.prototype,dA=(C(uA.add),C(uA.has),WeakMap),IA=dA.prototype,pA=C(IA.get),_A=(C(IA.has),C(IA.set)),CA=new dA,BA=P(null,{next:{value:function(){const A=pA(CA,this);return rA(A)}},[R]:{value:function(){return this}}});const wA=new dA,EA=P(hA,{next:{value:function(){const A=pA(wA,this);return lA(A)},writable:!0,configurable:!0}});for(const A of M(oA))"next"!==A&&T(EA,A,m(oA,A));const yA=new Z(4),QA=new nA(yA),mA=new aA(yA),kA=new sA(512),xA=new iA(512);for(let A=0;A<256;++A){const t=A-127;t<-27?(kA[A]=0,kA[256|A]=32768,xA[A]=24,xA[256|A]=24):t<-14?(kA[A]=1024>>-t-14,kA[256|A]=1024>>-t-14|32768,xA[A]=-t-1,xA[256|A]=-t-1):t<=15?(kA[A]=t+15<<10,kA[256|A]=t+15<<10|32768,xA[A]=13,xA[256|A]=13):t<128?(kA[A]=31744,kA[256|A]=64512,xA[A]=24,xA[256|A]=24):(kA[A]=31744,kA[256|A]=64512,xA[A]=13,xA[256|A]=13)}const MA=new aA(2048);for(let A=1;A<1024;++A){let t=A<<13,e=0;for(;0==(8388608&t);)t<<=1,e-=8388608;t&=-8388609,e+=947912704,MA[A]=t|e}for(let A=1024;A<2048;++A)MA[A]=939524096+(A-1024<<13);const bA=new aA(64);for(let A=1;A<31;++A)bA[A]=A<<23;bA[31]=1199570944,bA[32]=2147483648;for(let A=33;A<63;++A)bA[A]=2147483648+(A-32<<23);bA[63]=3347054592;const DA=new sA(64);for(let A=1;A<64;++A)32!==A&&(DA[A]=1024);function vA(A,t,...e){return function(A){const t=A>>10;return mA[0]=MA[DA[t]+(1023&A)]+bA[t],QA[0]}(cA(A,t,...function(A){if(A[R]===Y&&oA.next===rA)return A;const t=P(BA);return _A(CA,t,V(A)),t}(e)))}var SA=e(8330),GA=e(8602),NA=e(2499);const RA=new Map;function FA(A,t){Array.isArray(A)||(A=[A]),A.forEach((A=>RA.set(A,t)))}function LA(A,t,e,i=1){return new(Object.getPrototypeOf(A).constructor)(t*e*i)}function UA(A,t,e){return(1-e)*A+e*t}function OA(A,t,e,i,s,a="nearest"){switch(a.toLowerCase()){case"nearest":return function(A,t,e,i,s){const a=t/i,n=e/s;return A.map((A=>{const o=LA(A,i,s);for(let r=0;r<s;++r){const s=Math.min(Math.round(n*r),e-1);for(let e=0;e<i;++e){const n=Math.min(Math.round(a*e),t-1),l=A[s*t+n];o[r*i+e]=l}}return o}))}(A,t,e,i,s);case"bilinear":case"linear":return function(A,t,e,i,s){const a=t/i,n=e/s;return A.map((A=>{const o=LA(A,i,s);for(let r=0;r<s;++r){const s=n*r,l=Math.floor(s),h=Math.min(Math.ceil(s),e-1);for(let e=0;e<i;++e){const n=a*e,g=n%1,c=Math.floor(n),f=Math.min(Math.ceil(n),t-1),u=A[l*t+c],d=A[l*t+f],I=A[h*t+c],p=A[h*t+f],_=UA(UA(u,d,g),UA(I,p,g),s%1);o[r*i+e]=_}}return o}))}(A,t,e,i,s);default:throw new Error(`Unsupported resampling method: \'${a}\'`)}}function PA(A,t,e,i,s,a,n="nearest"){switch(n.toLowerCase()){case"nearest":return function(A,t,e,i,s,a){const n=t/i,o=e/s,r=LA(A,i,s,a);for(let l=0;l<s;++l){const s=Math.min(Math.round(o*l),e-1);for(let e=0;e<i;++e){const o=Math.min(Math.round(n*e),t-1);for(let n=0;n<a;++n){const h=A[s*t*a+o*a+n];r[l*i*a+e*a+n]=h}}}return r}(A,t,e,i,s,a);case"bilinear":case"linear":return function(A,t,e,i,s,a){const n=t/i,o=e/s,r=LA(A,i,s,a);for(let l=0;l<s;++l){const s=o*l,h=Math.floor(s),g=Math.min(Math.ceil(s),e-1);for(let e=0;e<i;++e){const o=n*e,c=o%1,f=Math.floor(o),u=Math.min(Math.ceil(o),t-1);for(let n=0;n<a;++n){const o=A[h*t*a+f*a+n],d=A[h*t*a+u*a+n],I=A[g*t*a+f*a+n],p=A[g*t*a+u*a+n],_=UA(UA(o,d,c),UA(I,p,c),s%1);r[l*i*a+e*a+n]=_}}}return r}(A,t,e,i,s,a);default:throw new Error(`Unsupported resampling method: \'${n}\'`)}}function TA(A,t,e){let i=0;for(let s=t;s<e;++s)i+=A[s];return i}function HA(A,t,e){switch(A){case 1:if(t<=8)return new Uint8Array(e);if(t<=16)return new Uint16Array(e);if(t<=32)return new Uint32Array(e);break;case 2:if(8===t)return new Int8Array(e);if(16===t)return new Int16Array(e);if(32===t)return new Int32Array(e);break;case 3:switch(t){case 16:case 32:return new Float32Array(e);case 64:return new Float64Array(e)}}throw Error("Unsupported data format/bitsPerSample")}FA([void 0,1],(()=>Promise.resolve().then(e.bind(e,3321)).then((A=>A.default)))),FA(5,(()=>Promise.resolve().then(e.bind(e,8672)).then((A=>A.default)))),FA(6,(()=>{throw new Error("old style JPEG compression is not supported.")})),FA(7,(()=>Promise.resolve().then(e.bind(e,9347)).then((A=>A.default)))),FA([8,32946],(()=>Promise.resolve().then(e.bind(e,5522)).then((A=>A.default)))),FA(32773,(()=>Promise.resolve().then(e.bind(e,7411)).then((A=>A.default)))),FA(34887,(()=>Promise.resolve().then(e.bind(e,1293)).then((async A=>(await A.zstd.init(),A))).then((A=>A.default)))),FA(50001,(()=>Promise.resolve().then(e.bind(e,1588)).then((A=>A.default))));const JA=class{constructor(A,t,e,i,s,a){this.fileDirectory=A,this.geoKeys=t,this.dataView=e,this.littleEndian=i,this.tiles=s?{}:null,this.isTiled=!A.StripOffsets;const n=A.PlanarConfiguration;if(this.planarConfiguration=void 0===n?1:n,1!==this.planarConfiguration&&2!==this.planarConfiguration)throw new Error("Invalid planar configuration.");this.source=a}getFileDirectory(){return this.fileDirectory}getGeoKeys(){return this.geoKeys}getWidth(){return this.fileDirectory.ImageWidth}getHeight(){return this.fileDirectory.ImageLength}getSamplesPerPixel(){return void 0!==this.fileDirectory.SamplesPerPixel?this.fileDirectory.SamplesPerPixel:1}getTileWidth(){return this.isTiled?this.fileDirectory.TileWidth:this.getWidth()}getTileHeight(){return this.isTiled?this.fileDirectory.TileLength:void 0!==this.fileDirectory.RowsPerStrip?Math.min(this.fileDirectory.RowsPerStrip,this.getHeight()):this.getHeight()}getBlockWidth(){return this.getTileWidth()}getBlockHeight(A){return this.isTiled||(A+1)*this.getTileHeight()<=this.getHeight()?this.getTileHeight():this.getHeight()-A*this.getTileHeight()}getBytesPerPixel(){let A=0;for(let t=0;t<this.fileDirectory.BitsPerSample.length;++t)A+=this.getSampleByteSize(t);return A}getSampleByteSize(A){if(A>=this.fileDirectory.BitsPerSample.length)throw new RangeError(`Sample index ${A} is out of range.`);return Math.ceil(this.fileDirectory.BitsPerSample[A]/8)}getReaderForSample(A){const t=this.fileDirectory.SampleFormat?this.fileDirectory.SampleFormat[A]:1,e=this.fileDirectory.BitsPerSample[A];switch(t){case 1:if(e<=8)return DataView.prototype.getUint8;if(e<=16)return DataView.prototype.getUint16;if(e<=32)return DataView.prototype.getUint32;break;case 2:if(e<=8)return DataView.prototype.getInt8;if(e<=16)return DataView.prototype.getInt16;if(e<=32)return DataView.prototype.getInt32;break;case 3:switch(e){case 16:return function(A,t){return vA(this,A,t)};case 32:return DataView.prototype.getFloat32;case 64:return DataView.prototype.getFloat64}}throw Error("Unsupported data format/bitsPerSample")}getSampleFormat(A=0){return this.fileDirectory.SampleFormat?this.fileDirectory.SampleFormat[A]:1}getBitsPerSample(A=0){return this.fileDirectory.BitsPerSample[A]}getArrayForSample(A,t){return HA(this.getSampleFormat(A),this.getBitsPerSample(A),t)}async getTileOrStrip(A,t,e,i,s){const a=Math.ceil(this.getWidth()/this.getTileWidth()),n=Math.ceil(this.getHeight()/this.getTileHeight());let o;const{tiles:r}=this;let l,h;1===this.planarConfiguration?o=t*a+A:2===this.planarConfiguration&&(o=e*a*n+t*a+A),this.isTiled?(l=this.fileDirectory.TileOffsets[o],h=this.fileDirectory.TileByteCounts[o]):(l=this.fileDirectory.StripOffsets[o],h=this.fileDirectory.StripByteCounts[o]);const g=(await this.source.fetch([{offset:l,length:h}],s))[0];let c;return null!==r&&r[o]?c=r[o]:(c=(async()=>{let A=await i.decode(this.fileDirectory,g);const e=this.getSampleFormat(),s=this.getBitsPerSample();return function(A,t){return(1!==A&&2!==A||!(t<=32)||t%8!=0)&&(3!==A||16!==t&&32!==t&&64!==t)}(e,s)&&(A=function(A,t,e,i,s,a,n){const o=new DataView(A),r=2===e?1:i,l=HA(t,s,2===e?n*a:n*a*i),h=parseInt("1".repeat(s),2);if(1===t){let A;A=1===e?i*s:s;let t=a*A;0!=(7&t)&&(t=t+7&-8);for(let A=0;A<n;++A){const e=A*t;for(let t=0;t<a;++t){const i=e+t*r*s;for(let e=0;e<r;++e){const n=i+e*s,g=(A*a+t)*r+e,c=Math.floor(n/8),f=n%8;if(f+s<=8)l[g]=o.getUint8(c)>>8-s-f&h;else if(f+s<=16)l[g]=o.getUint16(c)>>16-s-f&h;else if(f+s<=24){const A=o.getUint16(c)<<8|o.getUint8(c+2);l[g]=A>>24-s-f&h}else l[g]=o.getUint32(c)>>32-s-f&h}}}}return l.buffer}(A,e,this.planarConfiguration,this.getSamplesPerPixel(),s,this.getTileWidth(),this.getBlockHeight(t))),A})(),null!==r&&(r[o]=c)),{x:A,y:t,sample:e,data:await c}}async _readRaster(A,t,e,i,s,a,n,o,r){const l=this.getTileWidth(),h=this.getTileHeight(),g=this.getWidth(),c=this.getHeight(),f=Math.max(Math.floor(A[0]/l),0),u=Math.min(Math.ceil(A[2]/l),Math.ceil(g/l)),d=Math.max(Math.floor(A[1]/h),0),I=Math.min(Math.ceil(A[3]/h),Math.ceil(c/h)),p=A[2]-A[0];let _=this.getBytesPerPixel();const C=[],B=[];for(let A=0;A<t.length;++A)1===this.planarConfiguration?C.push(TA(this.fileDirectory.BitsPerSample,0,t[A])/8):C.push(0),B.push(this.getReaderForSample(t[A]));const w=[],{littleEndian:E}=this;for(let a=d;a<I;++a)for(let n=f;n<u;++n){let o;1===this.planarConfiguration&&(o=this.getTileOrStrip(n,a,0,s,r));for(let f=0;f<t.length;++f){const u=f,d=t[f];2===this.planarConfiguration&&(_=this.getSampleByteSize(d),o=this.getTileOrStrip(n,a,d,s,r));const I=o.then((s=>{const a=s.data,n=new DataView(a),o=this.getBlockHeight(s.y),r=s.y*h,f=s.x*l,d=r+o,I=(s.x+1)*l,w=B[u],y=Math.min(o,o-(d-A[3]),c-r),Q=Math.min(l,l-(I-A[2]),g-f);for(let s=Math.max(0,A[1]-r);s<y;++s)for(let a=Math.max(0,A[0]-f);a<Q;++a){const o=(s*l+a)*_,h=w.call(n,o+C[u],E);let g;i?(g=(s+r-A[1])*p*t.length+(a+f-A[0])*t.length+u,e[g]=h):(g=(s+r-A[1])*p+a+f-A[0],e[u][g]=h)}}));w.push(I)}}if(await Promise.all(w),a&&A[2]-A[0]!==a||n&&A[3]-A[1]!==n){let s;return s=i?PA(e,A[2]-A[0],A[3]-A[1],a,n,t.length,o):OA(e,A[2]-A[0],A[3]-A[1],a,n,o),s.width=a,s.height=n,s}return e.width=a||A[2]-A[0],e.height=n||A[3]-A[1],e}async readRasters({window:A,samples:t=[],interleave:e,pool:i=null,width:s,height:a,resampleMethod:n,fillValue:o,signal:r}={}){const l=A||[0,0,this.getWidth(),this.getHeight()];if(l[0]>l[2]||l[1]>l[3])throw new Error("Invalid subsets");const h=(l[2]-l[0])*(l[3]-l[1]),g=this.getSamplesPerPixel();if(t&&t.length){for(let A=0;A<t.length;++A)if(t[A]>=g)return Promise.reject(new RangeError(`Invalid sample index \'${t[A]}\'.`))}else for(let A=0;A<g;++A)t.push(A);let c;if(e){c=HA(this.fileDirectory.SampleFormat?Math.max.apply(null,this.fileDirectory.SampleFormat):1,Math.max.apply(null,this.fileDirectory.BitsPerSample),h*t.length),o&&c.fill(o)}else{c=[];for(let A=0;A<t.length;++A){const e=this.getArrayForSample(t[A],h);Array.isArray(o)&&A<o.length?e.fill(o[A]):o&&!Array.isArray(o)&&e.fill(o),c.push(e)}}const f=i||await async function(A){const t=RA.get(A.Compression);if(!t)throw new Error(`Unknown compression method identifier: ${A.Compression}`);return new(await t())(A)}(this.fileDirectory);return await this._readRaster(l,t,c,e,f,s,a,n,r)}async readRGB({window:A,interleave:t=!0,pool:e=null,width:i,height:s,resampleMethod:a,enableAlpha:n=!1,signal:o}={}){const r=A||[0,0,this.getWidth(),this.getHeight()];if(r[0]>r[2]||r[1]>r[3])throw new Error("Invalid subsets");const l=this.fileDirectory.PhotometricInterpretation;if(l===NA.Ie.RGB){let r=[0,1,2];if(this.fileDirectory.ExtraSamples!==NA.pd.Unspecified&&n){r=[];for(let A=0;A<this.fileDirectory.BitsPerSample.length;A+=1)r.push(A)}return this.readRasters({window:A,interleave:t,samples:r,pool:e,width:i,height:s,resampleMethod:a,signal:o})}let h;switch(l){case NA.Ie.WhiteIsZero:case NA.Ie.BlackIsZero:case NA.Ie.Palette:h=[0];break;case NA.Ie.CMYK:h=[0,1,2,3];break;case NA.Ie.YCbCr:case NA.Ie.CIELab:h=[0,1,2];break;default:throw new Error("Invalid or unsupported photometric interpretation.")}const g={window:r,interleave:!0,samples:h,pool:e,width:i,height:s,resampleMethod:a,signal:o},{fileDirectory:c}=this,f=await this.readRasters(g),u=2**this.fileDirectory.BitsPerSample[0];let d;switch(l){case NA.Ie.WhiteIsZero:d=function(A,t){const{width:e,height:i}=A,s=new Uint8Array(e*i*3);let a;for(let e=0,i=0;e<A.length;++e,i+=3)a=256-A[e]/t*256,s[i]=a,s[i+1]=a,s[i+2]=a;return s}(f,u);break;case NA.Ie.BlackIsZero:d=function(A,t){const{width:e,height:i}=A,s=new Uint8Array(e*i*3);let a;for(let e=0,i=0;e<A.length;++e,i+=3)a=A[e]/t*256,s[i]=a,s[i+1]=a,s[i+2]=a;return s}(f,u);break;case NA.Ie.Palette:d=function(A,t){const{width:e,height:i}=A,s=new Uint8Array(e*i*3),a=t.length/3,n=t.length/3*2;for(let e=0,i=0;e<A.length;++e,i+=3){const o=A[e];s[i]=t[o]/65536*256,s[i+1]=t[o+a]/65536*256,s[i+2]=t[o+n]/65536*256}return s}(f,c.ColorMap);break;case NA.Ie.CMYK:d=function(A){const{width:t,height:e}=A,i=new Uint8Array(t*e*3);for(let t=0,e=0;t<A.length;t+=4,e+=3){const s=A[t],a=A[t+1],n=A[t+2],o=A[t+3];i[e]=(255-s)/256*255*((255-o)/256),i[e+1]=(255-a)/256*255*((255-o)/256),i[e+2]=(255-n)/256*255*((255-o)/256)}return i}(f);break;case NA.Ie.YCbCr:d=function(A){const{width:t,height:e}=A,i=new Uint8ClampedArray(t*e*3);for(let t=0,e=0;t<A.length;t+=3,e+=3){const s=A[t],a=A[t+1],n=A[t+2];i[e]=s+1.402*(n-128),i[e+1]=s-.34414*(a-128)-.71414*(n-128),i[e+2]=s+1.772*(a-128)}return i}(f);break;case NA.Ie.CIELab:d=function(A){const{width:t,height:e}=A,i=new Uint8Array(t*e*3);for(let t=0,e=0;t<A.length;t+=3,e+=3){let s,a,n,o=(A[t+0]+16)/116,r=(A[t+1]<<24>>24)/500+o,l=o-(A[t+2]<<24>>24)/200;r=.95047*(r*r*r>.008856?r*r*r:(r-16/116)/7.787),o=1*(o*o*o>.008856?o*o*o:(o-16/116)/7.787),l=1.08883*(l*l*l>.008856?l*l*l:(l-16/116)/7.787),s=3.2406*r+-1.5372*o+-.4986*l,a=-.9689*r+1.8758*o+.0415*l,n=.0557*r+-.204*o+1.057*l,s=s>.0031308?1.055*s**(1/2.4)-.055:12.92*s,a=a>.0031308?1.055*a**(1/2.4)-.055:12.92*a,n=n>.0031308?1.055*n**(1/2.4)-.055:12.92*n,i[e]=255*Math.max(0,Math.min(1,s)),i[e+1]=255*Math.max(0,Math.min(1,a)),i[e+2]=255*Math.max(0,Math.min(1,n))}return i}(f);break;default:throw new Error("Unsupported photometric interpretation.")}if(!t){const A=new Uint8Array(d.length/3),t=new Uint8Array(d.length/3),e=new Uint8Array(d.length/3);for(let i=0,s=0;i<d.length;i+=3,++s)A[s]=d[i],t[s]=d[i+1],e[s]=d[i+2];d=[A,t,e]}return d.width=f.width,d.height=f.height,d}getTiePoints(){if(!this.fileDirectory.ModelTiepoint)return[];const A=[];for(let t=0;t<this.fileDirectory.ModelTiepoint.length;t+=6)A.push({i:this.fileDirectory.ModelTiepoint[t],j:this.fileDirectory.ModelTiepoint[t+1],k:this.fileDirectory.ModelTiepoint[t+2],x:this.fileDirectory.ModelTiepoint[t+3],y:this.fileDirectory.ModelTiepoint[t+4],z:this.fileDirectory.ModelTiepoint[t+5]});return A}getGDALMetadata(A=null){const t={};if(!this.fileDirectory.GDAL_METADATA)return null;const e=this.fileDirectory.GDAL_METADATA;let i=GA(e,"Item");i=null===A?i.filter((A=>void 0===SA(A,"sample"))):i.filter((t=>Number(SA(t,"sample"))===A));for(let A=0;A<i.length;++A){const e=i[A];t[SA(e,"name")]=e.inner}return t}getGDALNoData(){if(!this.fileDirectory.GDAL_NODATA)return null;const A=this.fileDirectory.GDAL_NODATA;return Number(A.substring(0,A.length-1))}getOrigin(){const A=this.fileDirectory.ModelTiepoint,t=this.fileDirectory.ModelTransformation;if(A&&6===A.length)return[A[3],A[4],A[5]];if(t)return[t[3],t[7],t[11]];throw new Error("The image does not have an affine transformation.")}getResolution(A=null){const t=this.fileDirectory.ModelPixelScale,e=this.fileDirectory.ModelTransformation;if(t)return[t[0],-t[1],t[2]];if(e)return[e[0],-e[5],e[10]];if(A){const[t,e,i]=A.getResolution();return[t*A.getWidth()/this.getWidth(),e*A.getHeight()/this.getHeight(),i*A.getWidth()/this.getWidth()]}throw new Error("The image does not have an affine transformation.")}pixelIsArea(){return 1===this.geoKeys.GTRasterTypeGeoKey}getBoundingBox(){const A=this.getHeight(),t=this.getWidth();if(this.fileDirectory.ModelTransformation){const[e,i,s,a,n,o,r,l]=this.fileDirectory.ModelTransformation,h=[[0,0],[0,A],[t,0],[t,A]].map((([A,t])=>[a+e*A+i*t,l+n*A+o*t])),g=h.map((A=>A[0])),c=h.map((A=>A[1]));return[Math.min(...g),Math.min(...c),Math.max(...g),Math.max(...c)]}{const A=this.getOrigin(),t=this.getResolution(),e=A[0],i=A[1],s=e+t[0]*this.getWidth(),a=i+t[1]*this.getHeight();return[Math.min(e,s),Math.min(i,a),Math.max(e,s),Math.max(i,a)]}}};class qA{constructor(A){this._dataView=new DataView(A)}get buffer(){return this._dataView.buffer}getUint64(A,t){const e=this.getUint32(A,t),i=this.getUint32(A+4,t);let s;if(t){if(s=e+2**32*i,!Number.isSafeInteger(s))throw new Error(`${s} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`);return s}if(s=2**32*e+i,!Number.isSafeInteger(s))throw new Error(`${s} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`);return s}getInt64(A,t){let e=0;const i=(128&this._dataView.getUint8(A+(t?7:0)))>0;let s=!0;for(let a=0;a<8;a++){let n=this._dataView.getUint8(A+(t?a:7-a));i&&(s?0!==n&&(n=255&~(n-1),s=!1):n=255&~n),e+=n*256**a}return i&&(e=-e),e}getUint8(A,t){return this._dataView.getUint8(A,t)}getInt8(A,t){return this._dataView.getInt8(A,t)}getUint16(A,t){return this._dataView.getUint16(A,t)}getInt16(A,t){return this._dataView.getInt16(A,t)}getUint32(A,t){return this._dataView.getUint32(A,t)}getInt32(A,t){return this._dataView.getInt32(A,t)}getFloat16(A,t){return vA(this._dataView,A,t)}getFloat32(A,t){return this._dataView.getFloat32(A,t)}getFloat64(A,t){return this._dataView.getFloat64(A,t)}}class zA{constructor(A,t,e,i){this._dataView=new DataView(A),this._sliceOffset=t,this._littleEndian=e,this._bigTiff=i}get sliceOffset(){return this._sliceOffset}get sliceTop(){return this._sliceOffset+this.buffer.byteLength}get littleEndian(){return this._littleEndian}get bigTiff(){return this._bigTiff}get buffer(){return this._dataView.buffer}covers(A,t){return this.sliceOffset<=A&&this.sliceTop>=A+t}readUint8(A){return this._dataView.getUint8(A-this._sliceOffset,this._littleEndian)}readInt8(A){return this._dataView.getInt8(A-this._sliceOffset,this._littleEndian)}readUint16(A){return this._dataView.getUint16(A-this._sliceOffset,this._littleEndian)}readInt16(A){return this._dataView.getInt16(A-this._sliceOffset,this._littleEndian)}readUint32(A){return this._dataView.getUint32(A-this._sliceOffset,this._littleEndian)}readInt32(A){return this._dataView.getInt32(A-this._sliceOffset,this._littleEndian)}readFloat32(A){return this._dataView.getFloat32(A-this._sliceOffset,this._littleEndian)}readFloat64(A){return this._dataView.getFloat64(A-this._sliceOffset,this._littleEndian)}readUint64(A){const t=this.readUint32(A),e=this.readUint32(A+4);let i;if(this._littleEndian){if(i=t+2**32*e,!Number.isSafeInteger(i))throw new Error(`${i} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`);return i}if(i=2**32*t+e,!Number.isSafeInteger(i))throw new Error(`${i} exceeds MAX_SAFE_INTEGER. Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues`);return i}readInt64(A){let t=0;const e=(128&this._dataView.getUint8(A+(this._littleEndian?7:0)))>0;let i=!0;for(let s=0;s<8;s++){let a=this._dataView.getUint8(A+(this._littleEndian?s:7-s));e&&(i?0!==a&&(a=255&~(a-1),i=!1):a=255&~a),t+=a*256**s}return e&&(t=-t),t}readOffset(A){return this._bigTiff?this.readUint64(A):this.readUint32(A)}}const jA="\\r\\n\\r\\n";function KA(A){if(void 0!==Object.fromEntries)return Object.fromEntries(A);const t={};for(const[e,i]of A)t[e.toLowerCase()]=i;return t}function YA(A){return KA(A.split("\\r\\n").map((A=>{const t=A.split(":").map((A=>A.trim()));return t[0]=t[0].toLowerCase(),t})))}function VA(A){let t,e,i;return A&&([,t,e,i]=A.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/),t=parseInt(t,10),e=parseInt(e,10),i=parseInt(i,10)),{start:t,end:e,total:i}}class WA{async fetch(A,t=void 0){return Promise.all(A.map((A=>this.fetchSlice(A,t))))}async fetchSlice(A){throw new Error(`fetching of slice ${A} not possible, not implemented`)}get fileSize(){return null}async close(){}}class XA extends Map{constructor(A={}){if(super(),!(A.maxSize&&A.maxSize>0))throw new TypeError("`maxSize` must be a number greater than 0");if("number"==typeof A.maxAge&&0===A.maxAge)throw new TypeError("`maxAge` must be a number greater than 0");this.maxSize=A.maxSize,this.maxAge=A.maxAge||Number.POSITIVE_INFINITY,this.onEviction=A.onEviction,this.cache=new Map,this.oldCache=new Map,this._size=0}_emitEvictions(A){if("function"==typeof this.onEviction)for(const[t,e]of A)this.onEviction(t,e.value)}_deleteIfExpired(A,t){return"number"==typeof t.expiry&&t.expiry<=Date.now()&&("function"==typeof this.onEviction&&this.onEviction(A,t.value),this.delete(A))}_getOrDeleteIfExpired(A,t){if(!1===this._deleteIfExpired(A,t))return t.value}_getItemValue(A,t){return t.expiry?this._getOrDeleteIfExpired(A,t):t.value}_peek(A,t){const e=t.get(A);return this._getItemValue(A,e)}_set(A,t){this.cache.set(A,t),this._size++,this._size>=this.maxSize&&(this._size=0,this._emitEvictions(this.oldCache),this.oldCache=this.cache,this.cache=new Map)}_moveToRecent(A,t){this.oldCache.delete(A),this._set(A,t)}*_entriesAscending(){for(const A of this.oldCache){const[t,e]=A;if(!this.cache.has(t)){!1===this._deleteIfExpired(t,e)&&(yield A)}}for(const A of this.cache){const[t,e]=A;!1===this._deleteIfExpired(t,e)&&(yield A)}}get(A){if(this.cache.has(A)){const t=this.cache.get(A);return this._getItemValue(A,t)}if(this.oldCache.has(A)){const t=this.oldCache.get(A);if(!1===this._deleteIfExpired(A,t))return this._moveToRecent(A,t),t.value}}set(A,t,{maxAge:e=this.maxAge}={}){const i="number"==typeof e&&e!==Number.POSITIVE_INFINITY?Date.now()+e:void 0;return this.cache.has(A)?this.cache.set(A,{value:t,expiry:i}):this._set(A,{value:t,expiry:i}),this}has(A){return this.cache.has(A)?!this._deleteIfExpired(A,this.cache.get(A)):!!this.oldCache.has(A)&&!this._deleteIfExpired(A,this.oldCache.get(A))}peek(A){return this.cache.has(A)?this._peek(A,this.cache):this.oldCache.has(A)?this._peek(A,this.oldCache):void 0}delete(A){const t=this.cache.delete(A);return t&&this._size--,this.oldCache.delete(A)||t}clear(){this.cache.clear(),this.oldCache.clear(),this._size=0}resize(A){if(!(A&&A>0))throw new TypeError("`maxSize` must be a number greater than 0");const t=[...this._entriesAscending()],e=t.length-A;e<0?(this.cache=new Map(t),this.oldCache=new Map,this._size=t.length):(e>0&&this._emitEvictions(t.slice(0,e)),this.oldCache=new Map(t.slice(e)),this.cache=new Map,this._size=0),this.maxSize=A}*keys(){for(const[A]of this)yield A}*values(){for(const[,A]of this)yield A}*[Symbol.iterator](){for(const A of this.cache){const[t,e]=A;!1===this._deleteIfExpired(t,e)&&(yield[t,e.value])}for(const A of this.oldCache){const[t,e]=A;if(!this.cache.has(t)){!1===this._deleteIfExpired(t,e)&&(yield[t,e.value])}}}*entriesDescending(){let A=[...this.cache];for(let t=A.length-1;t>=0;--t){const e=A[t],[i,s]=e;!1===this._deleteIfExpired(i,s)&&(yield[i,s.value])}A=[...this.oldCache];for(let t=A.length-1;t>=0;--t){const e=A[t],[i,s]=e;if(!this.cache.has(i)){!1===this._deleteIfExpired(i,s)&&(yield[i,s.value])}}}*entriesAscending(){for(const[A,t]of this._entriesAscending())yield[A,t.value]}get size(){if(!this._size)return this.oldCache.size;let A=0;for(const t of this.oldCache.keys())this.cache.has(t)||A++;return Math.min(this._size+A,this.maxSize)}entries(){return this.entriesAscending()}forEach(A,t=this){for(const[e,i]of this.entriesAscending())A.call(t,i,e,this)}get[Symbol.toStringTag](){return JSON.stringify([...this.entriesAscending()])}}class ZA extends Error{constructor(A){super(A),Error.captureStackTrace&&Error.captureStackTrace(this,ZA),this.name="AbortError"}}class $A extends Error{constructor(A,t){super(t),this.errors=A,this.message=t,this.name="AggregateError"}}const At=$A;class tt{constructor(A,t,e=null){this.offset=A,this.length=t,this.data=e}get top(){return this.offset+this.length}}class et{constructor(A,t,e){this.offset=A,this.length=t,this.blockIds=e}}class it extends WA{constructor(A,{blockSize:t=65536,cacheSize:e=100}={}){super(),this.source=A,this.blockSize=t,this.blockCache=new XA({maxSize:e,onEviction:(A,t)=>{this.evictedBlocks.set(A,t)}}),this.evictedBlocks=new Map,this.blockRequests=new Map,this.blockIdsToFetch=new Set,this.abortedBlockIds=new Set}get fileSize(){return this.source.fileSize}async fetch(A,t){const e=[],i=[],s=[];this.evictedBlocks.clear();for(const{offset:t,length:a}of A){let A=t+a;const{fileSize:n}=this;null!==n&&(A=Math.min(A,n));for(let a=Math.floor(t/this.blockSize)*this.blockSize;a<A;a+=this.blockSize){const A=Math.floor(a/this.blockSize);this.blockCache.has(A)||this.blockRequests.has(A)||(this.blockIdsToFetch.add(A),i.push(A)),this.blockRequests.has(A)&&e.push(this.blockRequests.get(A)),s.push(A)}}await async function(A){return new Promise((t=>setTimeout(t,A)))}(),this.fetchBlocks(t);const a=[];for(const A of i)this.blockRequests.has(A)&&a.push(this.blockRequests.get(A));await Promise.allSettled(e),await Promise.allSettled(a);const n=[],o=s.filter((A=>this.abortedBlockIds.has(A)||!this.blockCache.has(A)));if(o.forEach((A=>this.blockIdsToFetch.add(A))),o.length>0&&t&&!t.aborted){this.fetchBlocks(null);for(const A of o){const t=this.blockRequests.get(A);if(!t)throw new Error(`Block ${A} is not in the block requests`);n.push(t)}await Promise.allSettled(n)}if(t&&t.aborted)throw new ZA("Request was aborted");const r=s.map((A=>this.blockCache.get(A)||this.evictedBlocks.get(A))),l=r.filter((A=>!A));if(l.length)throw new At(l,"Request failed");const h=new Map(function(A,t){const e=Array.isArray(A)?A:Array.from(A),i=Array.isArray(t)?t:Array.from(t);return e.map(((A,t)=>[A,i[t]]))}(s,r));return this.readSliceData(A,h)}fetchBlocks(A){if(this.blockIdsToFetch.size>0){const t=this.groupBlocks(this.blockIdsToFetch),e=this.source.fetch(t,A);for(let i=0;i<t.length;++i){const s=t[i];for(const t of s.blockIds)this.blockRequests.set(t,(async()=>{try{const A=(await e)[i],s=t*this.blockSize,a=s-A.offset,n=Math.min(a+this.blockSize,A.data.byteLength),o=A.data.slice(a,n),r=new tt(s,o.byteLength,o,t);this.blockCache.set(t,r),this.abortedBlockIds.delete(t)}catch(e){if("AbortError"!==e.name)throw e;e.signal=A,this.blockCache.delete(t),this.abortedBlockIds.add(t)}finally{this.blockRequests.delete(t)}})())}this.blockIdsToFetch.clear()}}groupBlocks(A){const t=Array.from(A).sort(((A,t)=>A-t));if(0===t.length)return[];let e=[],i=null;const s=[];for(const A of t)null===i||i+1===A?(e.push(A),i=A):(s.push(new et(e[0]*this.blockSize,e.length*this.blockSize,e)),e=[A],i=A);return s.push(new et(e[0]*this.blockSize,e.length*this.blockSize,e)),s}readSliceData(A,t){return A.map((A=>{let e=A.offset+A.length;null!==this.fileSize&&(e=Math.min(this.fileSize,e));const i=Math.floor(A.offset/this.blockSize),s=Math.floor(e/this.blockSize),a=new ArrayBuffer(A.length),n=new Uint8Array(a);for(let a=i;a<=s;++a){const i=t.get(a),s=i.offset-A.offset;let o,r=0,l=0;s<0?r=-s:s>0&&(l=s),o=i.top-e<0?i.length-r:e-i.offset-r;const h=new Uint8Array(i.data,r,o);n.set(h,l)}return a}))}}class st{get ok(){return this.status>=200&&this.status<=299}get status(){throw new Error("not implemented")}getHeader(A){throw new Error("not implemented")}async getData(){throw new Error("not implemented")}}class at{constructor(A){this.url=A}async request({headers:A,credentials:t,signal:e}={}){throw new Error("request is not implemented")}}class nt extends st{constructor(A){super(),this.response=A}get status(){return this.response.status}getHeader(A){return this.response.headers.get(A)}async getData(){return this.response.arrayBuffer?await this.response.arrayBuffer():(await this.response.buffer()).buffer}}class ot extends at{constructor(A,t){super(A),this.credentials=t}async request({headers:A,credentials:t,signal:e}={}){const i=await fetch(this.url,{headers:A,credentials:t,signal:e});return new nt(i)}}class rt extends st{constructor(A,t){super(),this.xhr=A,this.data=t}get status(){return this.xhr.status}getHeader(A){return this.xhr.getResponseHeader(A)}async getData(){return this.data}}class lt extends at{constructRequest(A,t){return new Promise(((e,i)=>{const s=new XMLHttpRequest;s.open("GET",this.url),s.responseType="arraybuffer";for(const[t,e]of Object.entries(A))s.setRequestHeader(t,e);s.onload=()=>{const A=s.response;e(new rt(s,A))},s.onerror=i,s.onabort=()=>i(new ZA("Request aborted")),s.send(),t&&(t.aborted&&s.abort(),t.addEventListener("abort",(()=>s.abort())))}))}async request({headers:A,signal:t}={}){return await this.constructRequest(A,t)}}var ht=e(3752),gt=e(3640),ct=e(2630);class ft extends st{constructor(A,t){super(),this.response=A,this.dataPromise=t}get status(){return this.response.statusCode}getHeader(A){return this.response.headers[A]}async getData(){return await this.dataPromise}}class ut extends at{constructor(A){super(A),this.parsedUrl=ct.parse(this.url),this.httpApi="http:"===this.parsedUrl.protocol?ht:gt}constructRequest(A,t){return new Promise(((e,i)=>{const s=this.httpApi.get({...this.parsedUrl,headers:A},(A=>{const t=new Promise((t=>{const e=[];A.on("data",(A=>{e.push(A)})),A.on("end",(()=>{const A=Buffer.concat(e).buffer;t(A)})),A.on("error",i)}));e(new ft(A,t))}));s.on("error",i),t&&(t.aborted&&s.destroy(new ZA("Request aborted")),t.addEventListener("abort",(()=>s.destroy(new ZA("Request aborted")))))}))}async request({headers:A,signal:t}={}){return await this.constructRequest(A,t)}}class dt extends WA{constructor(A,t,e,i){super(),this.client=A,this.headers=t,this.maxRanges=e,this.allowFullFile=i,this._fileSize=null}async fetch(A,t){return this.maxRanges>=A.length?this.fetchSlices(A,t):(this.maxRanges>0&&A.length,Promise.all(A.map((A=>this.fetchSlice(A,t)))))}async fetchSlices(A,t){const e=await this.client.request({headers:{...this.headers,Range:`bytes=${A.map((({offset:A,length:t})=>`${A}-${A+t}`)).join(",")}`},signal:t});if(e.ok){if(206===e.status){const{type:i,params:s}=function(A){const[t,...e]=A.split(";").map((A=>A.trim()));return{type:t,params:KA(e.map((A=>A.split("="))))}}(e.getHeader("content-type"));if("multipart/byteranges"===i){const A=function(A,t){let e=null;const i=new TextDecoder("ascii"),s=[],a=`--${t}`,n=`${a}--`;for(let t=0;t<10;++t)i.decode(new Uint8Array(A,t,a.length))===a&&(e=t);if(null===e)throw new Error("Could not find initial boundary");for(;e<A.byteLength;){const t=i.decode(new Uint8Array(A,e,Math.min(a.length+1024,A.byteLength-e)));if(0===t.length||t.startsWith(n))break;if(!t.startsWith(a))throw new Error("Part does not start with boundary");const o=t.substr(a.length+2);if(0===o.length)break;const r=o.indexOf(jA),l=YA(o.substr(0,r)),{start:h,end:g,total:c}=VA(l["content-range"]),f=e+a.length+r+4,u=parseInt(g,10)+1-parseInt(h,10);s.push({headers:l,data:A.slice(f,f+u),offset:h,length:u,fileSize:c}),e=f+u+4}return s}(await e.getData(),s.boundary);return this._fileSize=A[0].fileSize||null,A}const a=await e.getData(),{start:n,end:o,total:r}=VA(e.getHeader("content-range"));this._fileSize=r||null;const l=[{data:a,offset:n,length:o-n}];if(A.length>1){const e=await Promise.all(A.slice(1).map((A=>this.fetchSlice(A,t))));return l.concat(e)}return l}{if(!this.allowFullFile)throw new Error("Server responded with full file");const A=await e.getData();return this._fileSize=A.byteLength,[{data:A,offset:0,length:A.byteLength}]}}throw new Error("Error fetching data.")}async fetchSlice(A,t){const{offset:e,length:i}=A,s=await this.client.request({headers:{...this.headers,Range:`bytes=${e}-${e+i}`},signal:t});if(s.ok){if(206===s.status){const A=await s.getData(),{total:t}=VA(s.getHeader("content-range"));return this._fileSize=t||null,{data:A,offset:e,length:i}}{if(!this.allowFullFile)throw new Error("Server responded with full file");const A=await s.getData();return this._fileSize=A.byteLength,{data:A,offset:0,length:A.byteLength}}}throw new Error("Error fetching data.")}get fileSize(){return this._fileSize}}function It(A,{blockSize:t,cacheSize:e}){return null===t?A:new it(A,{blockSize:t,cacheSize:e})}function pt(A,{forceXHR:t=!1,...e}={}){return"function"!=typeof fetch||t?"undefined"!=typeof XMLHttpRequest?function(A,{headers:t={},maxRanges:e=0,allowFullFile:i=!1,...s}={}){const a=new lt(A);return It(new dt(a,t,e,i),s)}(A,e):function(A,{headers:t={},maxRanges:e=0,allowFullFile:i=!1,...s}={}){const a=new ut(A);return It(new dt(a,t,e,i),s)}(A,e):function(A,{headers:t={},credentials:e,maxRanges:i=0,allowFullFile:s=!1,...a}={}){const n=new ot(A,e);return It(new dt(n,t,i,s),a)}(A,e)}function _t(A){switch(A){case NA.sf.BYTE:case NA.sf.ASCII:case NA.sf.SBYTE:case NA.sf.UNDEFINED:return 1;case NA.sf.SHORT:case NA.sf.SSHORT:return 2;case NA.sf.LONG:case NA.sf.SLONG:case NA.sf.FLOAT:case NA.sf.IFD:return 4;case NA.sf.RATIONAL:case NA.sf.SRATIONAL:case NA.sf.DOUBLE:case NA.sf.LONG8:case NA.sf.SLONG8:case NA.sf.IFD8:return 8;default:throw new RangeError(`Invalid field type: ${A}`)}}function Ct(A,t,e,i){let s=null,a=null;const n=_t(t);switch(t){case NA.sf.BYTE:case NA.sf.ASCII:case NA.sf.UNDEFINED:s=new Uint8Array(e),a=A.readUint8;break;case NA.sf.SBYTE:s=new Int8Array(e),a=A.readInt8;break;case NA.sf.SHORT:s=new Uint16Array(e),a=A.readUint16;break;case NA.sf.SSHORT:s=new Int16Array(e),a=A.readInt16;break;case NA.sf.LONG:case NA.sf.IFD:s=new Uint32Array(e),a=A.readUint32;break;case NA.sf.SLONG:s=new Int32Array(e),a=A.readInt32;break;case NA.sf.LONG8:case NA.sf.IFD8:s=new Array(e),a=A.readUint64;break;case NA.sf.SLONG8:s=new Array(e),a=A.readInt64;break;case NA.sf.RATIONAL:s=new Uint32Array(2*e),a=A.readUint32;break;case NA.sf.SRATIONAL:s=new Int32Array(2*e),a=A.readInt32;break;case NA.sf.FLOAT:s=new Float32Array(e),a=A.readFloat32;break;case NA.sf.DOUBLE:s=new Float64Array(e),a=A.readFloat64;break;default:throw new RangeError(`Invalid field type: ${t}`)}if(t!==NA.sf.RATIONAL&&t!==NA.sf.SRATIONAL)for(let t=0;t<e;++t)s[t]=a.call(A,i+t*n);else for(let t=0;t<e;t+=2)s[t]=a.call(A,i+t*n),s[t+1]=a.call(A,i+(t*n+4));return t===NA.sf.ASCII?new TextDecoder("utf-8").decode(s):s}class Bt{constructor(A,t,e){this.fileDirectory=A,this.geoKeyDirectory=t,this.nextIFDByteOffset=e}}class wt extends Error{constructor(A){super(`No image at index ${A}`),this.index=A}}class Et{async readRasters(A={}){const{window:t,width:e,height:i}=A;let{resX:s,resY:a,bbox:n}=A;const o=await this.getImage();let r=o;const l=await this.getImageCount(),h=o.getBoundingBox();if(t&&n)throw new Error(\'Both "bbox" and "window" passed.\');if(e||i){if(t){const[A,e]=o.getOrigin(),[i,s]=o.getResolution();n=[A+t[0]*i,e+t[1]*s,A+t[2]*i,e+t[3]*s]}const A=n||h;if(e){if(s)throw new Error("Both width and resX passed");s=(A[2]-A[0])/e}if(i){if(a)throw new Error("Both width and resY passed");a=(A[3]-A[1])/i}}if(s||a){const A=[];for(let t=0;t<l;++t){const e=await this.getImage(t),{SubfileType:i,NewSubfileType:s}=e.fileDirectory;(0===t||2===i||1&s)&&A.push(e)}A.sort(((A,t)=>A.getWidth()-t.getWidth()));for(let t=0;t<A.length;++t){const e=A[t],i=(h[2]-h[0])/e.getWidth(),n=(h[3]-h[1])/e.getHeight();if(r=e,s&&s>i||a&&a>n)break}}let g=t;if(n){const[A,t]=o.getOrigin(),[e,i]=r.getResolution(o);g=[Math.round((n[0]-A)/e),Math.round((n[1]-t)/i),Math.round((n[2]-A)/e),Math.round((n[3]-t)/i)],g=[Math.min(g[0],g[2]),Math.min(g[1],g[3]),Math.max(g[0],g[2]),Math.max(g[1],g[3])]}return r.readRasters({...A,window:g})}}class yt extends Et{constructor(A,t,e,i,s={}){super(),this.source=A,this.littleEndian=t,this.bigTiff=e,this.firstIFDOffset=i,this.cache=s.cache||!1,this.ifdRequests=[],this.ghostValues=null}async getSlice(A,t){const e=this.bigTiff?4048:1024;return new zA((await this.source.fetch([{offset:A,length:void 0!==t?t:e}]))[0],A,this.littleEndian,this.bigTiff)}async parseFileDirectoryAt(A){const t=this.bigTiff?20:12,e=this.bigTiff?8:2;let i=await this.getSlice(A);const s=this.bigTiff?i.readUint64(A):i.readUint16(A),a=s*t+(this.bigTiff?16:6);i.covers(A,a)||(i=await this.getSlice(A,a));const n={};let o=A+(this.bigTiff?8:2);for(let A=0;A<s;o+=t,++A){const A=i.readUint16(o),t=i.readUint16(o+2),e=this.bigTiff?i.readUint64(o+4):i.readUint32(o+4);let s,a;const r=_t(t),l=o+(this.bigTiff?12:8);if(r*e<=(this.bigTiff?8:4))s=Ct(i,t,e,l);else{const A=i.readOffset(l),a=_t(t)*e;if(i.covers(A,a))s=Ct(i,t,e,A);else{s=Ct(await this.getSlice(A,a),t,e,A)}}a=1===e&&-1===NA.It.indexOf(A)&&t!==NA.sf.RATIONAL&&t!==NA.sf.SRATIONAL?s[0]:s,n[NA.L[A]]=a}const r=function(A){const t=A.GeoKeyDirectory;if(!t)return null;const e={};for(let i=4;i<=4*t[3];i+=4){const s=NA.P1[t[i]],a=t[i+1]?NA.L[t[i+1]]:null,n=t[i+2],o=t[i+3];let r=null;if(a){if(r=A[a],null==r)throw new Error(`Could not get value of geoKey \'${s}\'.`);"string"==typeof r?r=r.substring(o,o+n-1):r.subarray&&(r=r.subarray(o,o+n),1===n&&(r=r[0]))}else r=o;e[s]=r}return e}(n),l=i.readOffset(A+e+t*s);return new Bt(n,r,l)}async requestIFD(A){if(this.ifdRequests[A])return this.ifdRequests[A];if(0===A)return this.ifdRequests[A]=this.parseFileDirectoryAt(this.firstIFDOffset),this.ifdRequests[A];if(!this.ifdRequests[A-1])try{this.ifdRequests[A-1]=this.requestIFD(A-1)}catch(t){if(t instanceof wt)throw new wt(A);throw t}return this.ifdRequests[A]=(async()=>{const t=await this.ifdRequests[A-1];if(0===t.nextIFDByteOffset)throw new wt(A);return this.parseFileDirectoryAt(t.nextIFDByteOffset)})(),this.ifdRequests[A]}async getImage(A=0){const t=await this.requestIFD(A);return new JA(t.fileDirectory,t.geoKeyDirectory,this.dataView,this.littleEndian,this.cache,this.source)}async getImageCount(){let A=0,t=!0;for(;t;)try{await this.requestIFD(A),++A}catch(A){if(!(A instanceof wt))throw A;t=!1}return A}async getGhostValues(){const A=this.bigTiff?16:8;if(this.ghostValues)return this.ghostValues;const t="GDAL_STRUCTURAL_METADATA_SIZE=";let e=await this.getSlice(A,130);if(t===Ct(e,NA.sf.ASCII,30,A)){const t=Ct(e,NA.sf.ASCII,130,A).split("\\n")[0],i=Number(t.split("=")[1].split(" ")[0])+t.length;i>130&&(e=await this.getSlice(A,i));const s=Ct(e,NA.sf.ASCII,i,A);this.ghostValues={},s.split("\\n").filter((A=>A.length>0)).map((A=>A.split("="))).forEach((([A,t])=>{this.ghostValues[A]=t}))}return this.ghostValues}static async fromSource(A,t,e){const i=(await A.fetch([{offset:0,length:1024}],e))[0],s=new qA(i),a=s.getUint16(0,0);let n;if(18761===a)n=!0;else{if(19789!==a)throw new TypeError("Invalid byte order value.");n=!1}const o=s.getUint16(2,n);let r;if(42===o)r=!1;else{if(43!==o)throw new TypeError("Invalid magic number.");r=!0;if(8!==s.getUint16(4,n))throw new Error("Unsupported offset byte-size.")}const l=r?s.getUint64(8,n):s.getUint32(4,n);return new yt(A,n,r,l,t)}close(){return"function"==typeof this.source.close&&this.source.close()}}class Qt extends Map{#A=0;#t=new Map;#e=new Map;#i;#s;#a;constructor(A={}){if(super(),!(A.maxSize&&A.maxSize>0))throw new TypeError("`maxSize` must be a number greater than 0");if("number"==typeof A.maxAge&&0===A.maxAge)throw new TypeError("`maxAge` must be a number greater than 0");this.#i=A.maxSize,this.#s=A.maxAge||Number.POSITIVE_INFINITY,this.#a=A.onEviction}get __oldCache(){return this.#e}#n(A){if("function"==typeof this.#a)for(const[t,e]of A)this.#a(t,e.value)}#o(A,t){return"number"==typeof t.expiry&&t.expiry<=Date.now()&&("function"==typeof this.#a&&this.#a(A,t.value),this.delete(A))}#r(A,t){if(!1===this.#o(A,t))return t.value}#l(A,t){return t.expiry?this.#r(A,t):t.value}#h(A,t){const e=t.get(A);return this.#l(A,e)}#g(A,t){this.#t.set(A,t),this.#A++,this.#A>=this.#i&&(this.#A=0,this.#n(this.#e),this.#e=this.#t,this.#t=new Map)}#c(A,t){this.#e.delete(A),this.#g(A,t)}*#f(){for(const A of this.#e){const[t,e]=A;if(!this.#t.has(t)){!1===this.#o(t,e)&&(yield A)}}for(const A of this.#t){const[t,e]=A;!1===this.#o(t,e)&&(yield A)}}get(A){if(this.#t.has(A)){const t=this.#t.get(A);return this.#l(A,t)}if(this.#e.has(A)){const t=this.#e.get(A);if(!1===this.#o(A,t))return this.#c(A,t),t.value}}set(A,t,{maxAge:e=this.#s}={}){const i="number"==typeof e&&e!==Number.POSITIVE_INFINITY?Date.now()+e:void 0;return this.#t.has(A)?this.#t.set(A,{value:t,expiry:i}):this.#g(A,{value:t,expiry:i}),this}has(A){return this.#t.has(A)?!this.#o(A,this.#t.get(A)):!!this.#e.has(A)&&!this.#o(A,this.#e.get(A))}peek(A){return this.#t.has(A)?this.#h(A,this.#t):this.#e.has(A)?this.#h(A,this.#e):void 0}delete(A){const t=this.#t.delete(A);return t&&this.#A--,this.#e.delete(A)||t}clear(){this.#t.clear(),this.#e.clear(),this.#A=0}resize(A){if(!(A&&A>0))throw new TypeError("`maxSize` must be a number greater than 0");const t=[...this.#f()],e=t.length-A;e<0?(this.#t=new Map(t),this.#e=new Map,this.#A=t.length):(e>0&&this.#n(t.slice(0,e)),this.#e=new Map(t.slice(e)),this.#t=new Map,this.#A=0),this.#i=A}*keys(){for(const[A]of this)yield A}*values(){for(const[,A]of this)yield A}*[Symbol.iterator](){for(const A of this.#t){const[t,e]=A;!1===this.#o(t,e)&&(yield[t,e.value])}for(const A of this.#e){const[t,e]=A;if(!this.#t.has(t)){!1===this.#o(t,e)&&(yield[t,e.value])}}}*entriesDescending(){let A=[...this.#t];for(let t=A.length-1;t>=0;--t){const e=A[t],[i,s]=e;!1===this.#o(i,s)&&(yield[i,s.value])}A=[...this.#e];for(let t=A.length-1;t>=0;--t){const e=A[t],[i,s]=e;if(!this.#t.has(i)){!1===this.#o(i,s)&&(yield[i,s.value])}}}*entriesAscending(){for(const[A,t]of this.#f())yield[A,t.value]}get size(){if(!this.#A)return this.#e.size;let A=0;for(const t of this.#e.keys())this.#t.has(t)||A++;return Math.min(this.#A+A,this.#i)}get maxSize(){return this.#i}entries(){return this.entriesAscending()}forEach(A,t=this){for(const[e,i]of this.entriesAscending())A.call(t,i,e,this)}get[Symbol.toStringTag](){return JSON.stringify([...this.entriesAscending()])}}var mt=e(7298),kt=e(4091);async function xt(A){const t=await A.getImage(),e=await t.getGeoKeys(),{ProjectedCSTypeGeoKey:i}=e;if("number"==typeof i&&32767!==i&&i<=32760)return i;const{GeographicTypeGeoKey:s}=e;if("number"==typeof s&&"number"!=typeof i)return s;const{PCSCitationGeoKey:a}=e;if(a&&a.includes("ESRI PE String")){const A=a.split("\\0").find((A=>A.startsWith("ESRI PE String"))).replace("ESRI PE String = ",""),t=await kt(A);if(t)return t}}var Mt=e(8726),bt=e(954),Dt=e(2944),vt=e(7437),St=e(7455),Gt=e(4899);function Nt([A,t,e,i],s){const[a,n]=s||[0,0];return[Math.floor(A)-a,Math.floor(t)-n,Math.ceil(e)+a,Math.ceil(i)+n]}var Rt=e(6316),Ft=e(2438),Lt=e(1654);async function Ut({bbox:A,bbox_srs:t=4326,cutline:e,cutline_srs:i=4326,debug_level:s=0,density:a=100,geotiff:n,geotiff_srs:o,expr:r,method:l,pixel_depth:h,round:g,tile_array_types:c,tile_height:f=256,tile_srs:u=3857,tile_array_types_strategy:d="auto",tile_layout:I="[band][row,column]",tile_resolution:p=[1,1],tile_width:_=256,timed:C=!1,use_overview:B=!0,turbo:w=!1}){let E;try{const y=C?performance.now():0;if(!A)throw new Error("[geotiff-tile] you must provide bbox");if(isNaN(f))throw new Error("[geotiff-tile] tile_height is NaN");if(isNaN(_))throw new Error("[geotiff-tile] tile_width is NaN");const Q=await n.getImage(0),m=Q.getHeight(),k=[Number(A[0]),Number(A[1]),Number(A[2]),Number(A[3])];if(s>=1&&console.log("bbox_nums:",k),!o){const A=C?performance.now():0;o=await xt(n),C&&console.log("[geotiff-tile] parsing epsg code took "+Math.round(performance.now()-A)+"ms")}if(s>=1&&console.log("[geotiff-tile] geotiff_srs:",o),!o)throw new Error("[geotiff-tile] unfortunately we weren\'t able to parse an EPSG code from the GeoTIFF metadata. Unfortunately, this library does not currently support reading tiles from GeoTIFF files with custom projections. We hope to add this support in the future, per time and funding.");const x=C?performance.now():0;E=(()=>{if(u===t)return A;if("simple"===t){const A=Mt(Q),t=Gt(A),[e,i,n,r]=k,l=bt([e,m-r,n,m-i],t.forward,{async:!1,density:0});return s>=1&&console.log("bbox_in_geotiff_srs:",l),o===u?l:Lt({bbox:l,density:a,from:o,to:u})}return s>=1&&console.log(`reprojecting bbox from "${t}" to "${u}"`),Lt({bbox:k,density:a,from:t,to:u})})(),s>=1&&console.log("bbox_in_tile_srs:",E),C&&console.log("[geotiff-tile] getting bbox_in_tile_srs took "+Math.round(performance.now()-x)+"ms");const M="simple"===t&&u===o?{bbox:k,debugLevel:s,srs:"simple",geotiff:n,use_overview:B,target_height:f,target_width:_}:{bbox:E,debugLevel:s,srs:u,geotiff:n,use_overview:B,target_height:f,target_width:_};s>=2&&console.log("[geotiff-tile] calling readBoundingBox with:\\n",M);const b=C?performance.now():0,D=await async function({bbox:A,debug_level:t=0,density:e=100,geotiff:i,geotiff_srs:s,padding:a,proj4:n,srs:o,use_overview:r=!1,target_height:l,target_width:h}){if(t>=1&&console.log("[geotiff-read-bbox] starting"),null===i)throw new Error("[geotiff-read-bbox] geotiff is null");if(void 0===i)throw new Error("[geotiff-read-bbox] geotiff is undefined");const g=performance.now(),c=await i.getImage(),f=performance.now()-g;t>=2&&console.log(`[geotiff-read-bbox] getting first image took ${Math.round(f)} ms`);const u=c.getHeight(),d=c.getWidth();if(t>=2&&console.log("[geotiff-read-bbox] image_height:",u),t>=2&&console.log("[geotiff-read-bbox] image_width:",d),s||(s=await xt(i)),t>=2&&console.log("[geotiff-read-bbox] geotiff_srs:",s),[void 0,null,32767].includes(s)&&"simple"!==o)throw new Error("[geotiff-read-bbox] unable to parse SRS of geotiff");"number"==typeof s&&(s="EPSG:"+s),"number"==typeof o&&(o="EPSG:"+o);const I=c.fileDirectory;if(!(I.ModelTransformation||I.ModelTiepoint&&I.ModelPixelScale))throw new Error("GeoTIFF doesn\'t have ModelTransformation nor ModelTiepoint+ModelPixelScale");const p=Mt(c);t>=1&&console.log("[geotiff-read-bbox] geotransform:",p);const _=Gt(p);t>=1&&console.log("[geotiff-read-bbox] affine:",_);const C=St([n]);let B;if(t>=1&&console.log("[geotiff-read-bbox] proj4:",typeof C),"simple"===o){const[t,e,i,s]=A;B=[t,c.getHeight()-s,i,c.getHeight()-e]}else{let i,a,n,r;if(s===o)t>=2&&console.log("[geotiff-read-bbox] srs of geotiff and bbox are the same!"),n=A=>A,r=A=>A,i=A=>_.inverse(A),a=A=>_.forward(A);else{if(!s.includes("[")&&!s.includes("+")&&!C.defs[s])throw new Error("[geotiff-read-bbox] unrecognized srs: "+s);if(!o.includes("[")&&!o.includes("+")&&!C.defs[o])throw new Error("[geotiff-read-bbox] unrecognized srs: "+o);({forward:n,inverse:r}=C(s,o)),i=A=>_.inverse(r(A)),a=A=>n(_.forward(A))}B=bt(A,i,{density:e})}t>=2&&console.log("[geotiff-read-bbox] bbox_in_base_image_coords:",B);let w=Nt(B,a);t>=2&&console.log("[geotiff-read-bbox] read_window:",w);let[E,y]=vt(w);t>=2&&console.log("[geotiff-read-bbox] base read size:",[E,y]);const Q={image:c,index:0,ratio:[1,1],read_window:w,read_height:y,read_width:E};if(r&&l&&h){t>=2&&console.log("[geotiff-read-bbox] getting image count");const A=performance.now(),e=await i.getImageCount();t>=2&&console.log("[geotiff-read-bbox] image_count: "+e);const s=performance.now()-A;t>=2&&console.log(`[geotiff-read-bbox] getting image count (${e}) took ${s} ms`);for(let A=1;A<e;A++){const e=await i.getImage(A);if(t>=3&&console.log("[geotiff-read-bbox] subimage:",typeof e),4===e.fileDirectory.PhotometricInterpretation){t>=3&&console.log(`[geotiff-read-bbox] ignoring image ${A} because it is a transparency mask`);continue}const s=e.getHeight()/u;t>=3&&console.log("[geotiff-read-bbox] ratioX:",s);const n=e.getWidth()/d;t>=3&&console.log("[geotiff-read-bbox] ratioY:",n);const o=Dt(B,[s,n]);t>=3&&console.log("[geotiff-read-bbox] bbox_in_subimage_coords:",o);const r=Nt(o,a);if(t>=2&&console.log("[geotiff-read-bbox] subimage_read_window:",r),[E,y]=vt(r),t>=3&&console.log("[geotiff-read-bbox] read_width:",E),t>=3&&console.log("[geotiff-read-bbox] read_height:",y),!(y>=l&&E>=h))break;Q.image=e,Q.index=A,Q.ratio=[s,n],Q.read_height=y,Q.read_width=E,Q.read_window=r,t>=2&&console.log("[geotiff-read-bbox] selected:",Q)}}const m=performance.now(),k=await Q.image.readRasters({window:Q.read_window}),x=performance.now()-m;t>=2&&console.log("[geotiff-read-bbox] reading rasters took "+x.toFixed()+"ms"),t>=3&&console.log("[geotiff-read-bbox] data:",k);const M=Dt(Q.read_window,Q.ratio.map((A=>1/A))),b=bt(M,_.forward,{density:e}),[D,v,S,G]=M,N=[D,v];t>=3&&console.log("[geotiff-read-bbox] upper_left:",N);const[R,F]=_.forward(N),L=[R,p[1]/Q.ratio[0],p[2]/Q.ratio[1],F,p[4]/Q.ratio[0],p[5]/Q.ratio[1]],U=[M[0],u-M[3],M[2],u-M[1]],O={base_window:M,bbox:b,data:k,geotransform:L,height:Q.read_height,index:Q.index,image:Q.image,simple_bbox:U,srs:s,width:Q.read_width,window:Q.read_window};return[["read_bbox","bbox"],["selected_image_index","index"],["selected_image","image"]].forEach((([A,e])=>{Object.defineProperty(O,A,{get:()=>(t>=1&&console.log(`[geotiff-read-bbox] ${A} is deprected, please use ${e} instead`),O[e])})})),Object.defineProperty(O,"read_window",{get(){return t>=1&&console.log("[geotiff-read-bbox] read_window [left, bottom, top, right] is deprected, please use window [left, top, right, bottom] instead"),[this.window[0],this.window[3],this.window[2],this.window[1]]}}),Object.defineProperty(O,"srs_of_geotiff",{get(){return t>=1&&console.log("[geotiff-read-bbox] srs_of_geotiff is deprected, please use srs instead"),this.srs.startsWith("EPSG:")?Number(this.srs.replace("EPSG:","")):this.srs}}),O}(M);s>=2&&console.log("[geotiff-tile] geotiff-read-bbox result is:\\n",D),C&&console.log("[geotiff-tile] reading bounding box took "+Math.round(performance.now()-b)+"ms");const v=D.data[0].constructor.name;s>=2&&console.log("[geotiff-tile] sourceArrayType:\\n",v);const[S,G]=(()=>{switch(v){case"Uint8Array":return[0,255];case"Int8Array":return[-128,127];case"Uint16Array":return[0,65535];case"Int16Array":return[-32768,32767];case"Uint32Array":return[0,4294967295];case"Int32Array":return[-2147483648,2147483647];case"Float32Array":return[-34e37,34e37];case"Float64Array":return[-1*Number.MAX_VALUE,Number.MAX_VALUE];case"BigInt64Array":return[Math.pow(-2,63),Math.pow(2,63)-1];case"BigUint64Array":return[0,Math.pow(2,64)-1];default:return[void 0,void 0]}})();let N,R;e&&!i&&(i=4326),o!==u&&({forward:N,inverse:R}=Ft("number"==typeof o?"EPSG:"+o:o,"number"==typeof u?"EPSG:"+u:u)),C&&console.log("[geotiff-tile] time elapsed before warping "+Math.round(performance.now()-y)+"ms");const F=C?performance.now():0,L=I.match(/\\[/g).length;c=c||("auto"===d?r?new Array(L).fill("Array"):new Array(L-1).fill("Array").concat([v]):"geotiff"===d?new Array(L-1).fill("Array").concat([v]):new Array(L-1).fill("Array")),s>=2&&console.log("[geotiff-tile] tile_array_types:\\n",c);const U=E.map((A=>Number(A))),O=u,P={cutline:e,cutline_srs:i,cutline_forward:e?Ft("EPSG:"+i,"EPSG:"+u).forward:void 0,debug_level:s>1?s-1:0,forward:N,inverse:R,in_data:D.data,in_bbox:"simple"===O?D.simple_bbox:D.bbox,in_geotransform:"simple"===O?null:D.geotransform,in_layout:"[band][row,column]",in_no_data:Rt(Q),in_srs:o,in_width:D.width,in_height:D.height,method:l,out_array_types:c,out_bbox:U,out_height:f,out_layout:I,out_pixel_depth:h,out_resolution:"number"==typeof p?[p,p]:p,out_srs:O,out_width:_,round:g,theoretical_max:G,theoretical_min:S,expr:r,turbo:w};s>=2&&console.log("[geotiff-tile] geowarp_options:\\n",P);const{data:T,...H}=await mt(P);return C&&console.log("[geotiff-tile] geowarp took "+Math.round(performance.now()-F)+"ms"),C&&console.log("[geotiff-tile] took "+Math.round(performance.now()-y)+"ms"),s>=1&&(H.readResult=D),{height:f,tile:T,width:_,extra:H}}catch(A){throw console.log("[geotiff-tile] failed to create tile"),console.log("[geotiff-tile] bbox_in_tile_srs: ",E),console.log("[geotiff-tile] tile_height:",f),console.log("[geotiff-tile] tile_width;",_),console.log("[geotiff-tile] tile_srs:",u),console.log("[geotiff-tile] use_overview:",B),console.error("[geotiff-tile] error:",A),A}}"object"==typeof window&&(window.geotiff_tile={createTile:Ut}),"object"==typeof self&&(self.geotiff_tile={createTile:Ut});const Ot=new Qt({maxSize:10});try{const A={clear_cache:async function({debug_level:A=0}={}){A>=1&&console.log("[geotiff-tile-web-worker/worker.mjs:_clear_cache] clearing cache"),Ot.clear()},create_tile:async function(A){const{debug_level:t}=A;try{const{url:e}=A;t>=1&&console.log("[geotiff-tile-web-worker/worker.mjs:_create_tile] creating tile from "+e),Ot.has(e)?t>=1&&console.log("[geotiff-tile-web-worker/worker.mjs:_create_tile] url in cache"):(t>=1&&console.log("[geotiff-tile-web-worker/worker.mjs:_create_tile] url not in cache so fetching geotiff metadata"),Ot.set(e,async function(A,t={},e){return yt.fromSource(pt(A,t),e)}(e)));const i=await Ot.get(e);t>=3&&console.log("[geotiff-tile-web-worker/worker.mjs:_create_tile] geotiff:",i);const s=((A,t)=>{const e={};return["bbox","bbox_srs","cutline","cutline_srs","debug_level","expr","geotiff_srs","method","pixel_depth","round","tile_array_types","tile_height","tile_srs","tile_array_types_strategy","tile_layout","timed","tile_width","use_overview","turbo"].forEach((t=>{e[t]=A[t]})),e})(A);s.debug_level&&s.debug_level--,s.geotiff=i,t>=3&&console.log("[geotiff-tile-web-worker:onmessage] cleaned_params:",s);const a=await Ut(s);return t>=3&&console.log("[geotiff-tile-web-worker:onmessage] create_geotiff_tile returned:",a),a}catch(A){throw console.error(A),A}},set_max_cache_size:async function({debug_level:A=0}={}){A>=1&&console.log("[geotiff-tile-web-worker/worker.mjs:_set_max_cache_size] resizing cache to",data),Ot.resize(data)}};Pt=A,Ht=(Tt={batch_size:1/0,batch_wait:100})&&"number"==typeof Tt.batch_size?Tt.batch_size:1,Jt=Tt&&"number"==typeof Tt.batch_wait?Tt.batch_wait:1/0,qt=Tt&&Tt.debug_level,zt={},jt=function(){var A=r(h().mark((function A(t){var e,i,o,l,g,d,C,B,w,E,y,Q;return h().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:if(e=t.data,qt>=2&&console.log("[microlink.expose] received message data",e),!(Array.isArray(e)&&e.length>=1&&"2.0"===e[0].jsonrpc&&e[0].method)){A.next=11;break}if(qt>=2&&console.log("[microlink.call] top thread received batch request"),zt){A.next=6;break}throw new Error("[microlink.call] no callable functions");case 6:return A.next=8,Promise.all(e.map(function(){var A=r(h().mark((function A(t){var e;return h().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:if("function"==typeof zt[t.method]){A.next=2;break}return A.abrupt("return",_({id:t.id,method:t.method}));case 2:return A.prev=2,A.next=5,zt[t.method].apply(zt,n(t.params));case 5:return e=A.sent,A.abrupt("return",{jsonrpc:"2.0",result:e,id:t.id});case 9:return A.prev=9,A.t0=A.catch(2),A.abrupt("return",p({id:l,error:A.t0}));case 12:case"end":return A.stop()}}),A,null,[[2,9]])})));return function(t){return A.apply(this,arguments)}}()));case 8:return i=A.sent,qt>=2&&console.log("[microlink.call] exposed thread posting results to main thread:",i),A.abrupt("return",postMessage(i));case 11:if("object"===a(e)){A.next=13;break}return A.abrupt("return");case 13:if("2.0"===e.jsonrpc){A.next=15;break}return A.abrupt("return");case 15:if(e.method){A.next=17;break}return A.abrupt("return");case 17:if(o=t.data,l=o.id,g=o.method,d=o.params,"microlink.list"!==g){A.next=21;break}return qt>=2&&console.log("[microlink.expose] posting method names",e),A.abrupt("return",postMessage({jsonrpc:"2.0",result:Object.keys(Pt),id:l}));case 21:if("function"==typeof Pt[g]){A.next=24;break}return qt>=2&&console.error("[microlink.expose] method not found: "+g),A.abrupt("return",postMessage(_({id:l,method:g})));case 24:return A.prev=24,C=I(self,d,2,{batch_size:Ht,batch_wait:Jt}),A.next=28,Pt[g].apply(Pt,n(C));case 28:return B=A.sent,w=u(B,{function_prefix:c,promise_prefix:f}),E=s(w,2),y=E[0],Q=E[1],qt>=2&&console.log("[microlink.expose]",g,"result",B,"serialized to",[y,Q]),Object.assign(zt,Q),qt>=2&&console.log("[microlink.expose] posting serialized result for "+g+": "+JSON.stringify(y)),A.abrupt("return",postMessage({jsonrpc:"2.0",result:y,id:l}));case 36:return A.prev=36,A.t0=A.catch(24),console.error("[microlink.expose] error:",A.t0),A.abrupt("return",postMessage(p({error:A.t0,id:l})));case 40:case"end":return A.stop()}}),A,null,[[24,36]])})));return function(t){return A.apply(this,arguments)}}(),addEventListener("message",(function(A){setTimeout((function(){return jt(A)}),0)}))}catch(A){console.error(A)}var Pt,Tt,Ht,Jt,qt,zt,jt})(),i})()));' };
  }
});

// node_modules/geotiff-tile-web-worker/lib/index.prod.js
var require_index_prod = __commonJS({
  "node_modules/geotiff-tile-web-worker/lib/index.prod.js"(exports, module) {
    var wrap2 = (init_wrap(), __toCommonJS(wrap_exports)).default;
    var FrameWorker = require_frame_worker();
    var { prepareData: prepareData2, prepareUpdate: prepareUpdate2 } = require_xdim();
    var { workerString } = require_worker_string_prod();
    var DEFAULT_TILE_LAYOUT = "[band][row,column]";
    var absolutify = (url) => {
      if (url.startsWith("/")) {
        return location.origin + url;
      } else if (url.startsWith("./")) {
        return location.href.split("/").slice(0, -1).join("/") + "/" + url.replace(/^\.\//, "");
      } else {
        return url;
      }
    };
    async function createWorker(options) {
      const debug_level = typeof options === "object" && typeof options.debug_level === "number" ? options.debug_level : 0;
      const useFrameWorker = typeof options === "object" && options.iframe === true;
      if (debug_level >= 1) console.log("[geotiff-tile-web-worker:createWorker] useFrameWorker is " + useFrameWorker);
      const WebWorker = useFrameWorker === false && typeof Worker === "function" ? Worker : FrameWorker;
      if (debug_level >= 1) console.log("[geotiff-tile-web-worker:createWorker] WebWorker:", WebWorker);
      const maxTiles = typeof options === "object" && typeof options.maxTiles === "number" ? options.maxTiles : Infinity;
      if (debug_level >= 1) console.log("[geotiff-tile-web-worker:createWorker] debug level is " + debug_level);
      const blob = new Blob([workerString], { type: "text/javascript" });
      if (debug_level >= 2) console.log("[geotiff-tile-web-worker/index.js:createWorker] created blob from worker string:", blob);
      const blobURL = URL.createObjectURL(blob);
      const worker = new WebWorker(blobURL);
      if (debug_level >= 2) console.log("[geotiff-tile-web-worker/index.js:createWorker] worker:", worker);
      const wrapfn = wrap2.default || wrap2;
      if (debug_level >= 2) console.log("[geotiff-tile-web-worker/index.js:createWorker] wrapfn:", wrapfn);
      const obj2 = await wrapfn(worker, { debug_level: debug_level - 1 });
      if (debug_level >= 2) console.log("[geotiff-tile-web-worker/index.js:createWorker] obj:", obj2);
      worker.clearCache = obj2.clear_cache;
      worker.setMaxCacheSize = obj2.set_max_cache_size;
      worker.createTile = async function({ url, ...rest }) {
        if (typeof rest.expr === "function") {
          const { debug_level: debug_level2, tile_layout = DEFAULT_TILE_LAYOUT, expr, tile_array_types } = rest;
          const time_before_create_tile = performance.now();
          let {
            tile: temp_tile,
            height,
            width,
            extra
          } = await obj2.create_tile({
            url: absolutify(url),
            ...rest,
            expr: void 0,
            tile_layout: "[row][column][band]",
            tile_array_types: void 0
          });
          const time_after_create_time = performance.now();
          if (debug_level2 >= 2) {
            console.log(
              "[geotiff-tile-web-worker] creating initial tile (before applying expr) took " + Math.round(time_after_create_time - time_before_create_tile) + " ms"
            );
          }
          const time_expr_start = performance.now();
          const sizes = {
            band: extra.out_bands.length,
            row: height,
            column: width
          };
          const { data: tile } = prepareData2({
            layout: tile_layout,
            sizes,
            arrayTypes: tile_array_types
          });
          const update = prepareUpdate2({
            data: tile,
            layout: tile_layout,
            sizes
          });
          const num_bands = sizes.band;
          for (let row = 0; row < height; row++) {
            for (let column = 0; column < width; column++) {
              const pixel2 = temp_tile[row][column];
              const values = expr({ pixel: pixel2 });
              for (let band = 0; band < num_bands; band++) {
                update({
                  point: {
                    band,
                    row,
                    column
                  },
                  value: values[band]
                });
              }
            }
          }
          const time_expr_end = performance.now();
          if (debug_level2 >= 2) console.log("[geotiff-tile-web-worker] applying expr took " + Math.round(time_expr_end - time_expr_start) + " ms");
          return { tile, height, layout: tile_layout, width };
        } else {
          const result2 = obj2.create_tile({ url: absolutify(url), ...rest });
          if (result2 === void 0) throw new Error("[geotiff-tile-web-worker] create_tile returned undefined");
          return result2;
        }
      };
      if (debug_level >= 2) console.log("[geotiff-tile-web-worker/index.js:createWorker] wrapped worker:", worker);
      return worker;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return { createWorker };
      });
    }
    if (typeof module === "object") {
      module.exports = { createWorker };
    }
    if (typeof self === "object") {
      self.geotiff_tile_web_worker = { createWorker };
    }
    if (typeof window === "object") {
      window.geotiff_tile_web_worker = { createWorker };
    }
  }
});

// node_modules/geotiff-epsg-code/index.cjs
var require_geotiff_epsg_code = __commonJS({
  "node_modules/geotiff-epsg-code/index.cjs"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = parse2;
    var _getEpsgCode = _interopRequireDefault(require_get_epsg_code_node_min());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    async function parse2(geotiff) {
      const image = await geotiff.getImage();
      const geoKeys = await image.getGeoKeys();
      const {
        ProjectedCSTypeGeoKey
      } = geoKeys;
      if (typeof ProjectedCSTypeGeoKey === "number" && ProjectedCSTypeGeoKey !== 32767 && ProjectedCSTypeGeoKey <= 32760) {
        return ProjectedCSTypeGeoKey;
      }
      const {
        GeographicTypeGeoKey
      } = geoKeys;
      if (typeof GeographicTypeGeoKey === "number" && typeof ProjectedCSTypeGeoKey !== "number") {
        return GeographicTypeGeoKey;
      }
      const {
        PCSCitationGeoKey
      } = geoKeys;
      if (PCSCitationGeoKey && PCSCitationGeoKey.includes("ESRI PE String")) {
        const citation = PCSCitationGeoKey.split("\0").find((it) => it.startsWith("ESRI PE String"));
        const esri_wkt = citation.replace("ESRI PE String = ", "");
        const code = await (0, _getEpsgCode.default)(esri_wkt);
        if (code) {
          return code;
        }
      }
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/geotiff-geotransform/index.js
var require_geotiff_geotransform = __commonJS({
  "node_modules/geotiff-geotransform/index.js"(exports, module) {
    function geotransform(image, { debug = false } = { debug: false }) {
      const fd = image.fileDirectory;
      if (fd.ModelTransformation) {
        const [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p] = fd.ModelTransformation;
        return [d, a, b, h, e, f];
      } else if (fd.ModelTiepoint && !fd.ModelPixelScale) {
        if (debug) console.log("[geotiff-geotransform] missing ModelPixelScaleTag");
      } else if (fd.ModelPixelScale && !fd.ModelTiepoint) {
        if (debug) console.log("[geotiff-geotransform] missing ModelTiepointTag");
      } else if (fd.ModelTiepoint && fd.ModelPixelScale) {
        const [i, j, k, x, y, z] = fd.ModelTiepoint;
        if (debug) {
          if (i !== 0) console.log("[geotiff-geotransform] unexpected i value in ModelTiepoint: " + i);
          if (j !== 0) console.log("[geotiff-geotransform] unexpected j value in ModelTiepoint: " + j);
          if (k !== 0) console.log("[geotiff-geotransform] unexpected k value in ModelTiepoint: " + k);
        }
        const [scaleX, scaleY, scaleZ] = fd.ModelPixelScale;
        return [x, scaleX, 0, y, 0, -1 * scaleY];
      }
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return geotransform;
      });
    }
    if (typeof module === "object") {
      module.exports = geotransform;
      module.exports.default = geotransform;
    }
  }
});

// node_modules/geotiff-read-bbox/index.cjs
var require_geotiff_read_bbox = __commonJS({
  "node_modules/geotiff-read-bbox/index.cjs"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = geotiff_read_bbox;
    exports.snap_to_read_window = snap_to_read_window;
    var _geotiffEpsgCode = _interopRequireDefault(require_geotiff_epsg_code());
    var _geotiffGeotransform = _interopRequireDefault(require_geotiff_geotransform());
    var _reproject = _interopRequireDefault(require_reproject());
    var _scale = _interopRequireDefault(require_scale());
    var _intersect = _interopRequireDefault(require_intersect());
    var _bboxSize = _interopRequireDefault(require_bbox_size());
    var _proj4Collect = _interopRequireDefault(require_proj4_collect());
    var _Geotransform = _interopRequireDefault(require_Geotransform());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function snap_to_read_window([xmin, ymin, xmax, ymax], padding) {
      const [padX, padY] = padding || [0, 0];
      return [Math.floor(xmin) - padX, Math.floor(ymin) - padY, Math.ceil(xmax) + padX, Math.ceil(ymax) + padY];
    }
    async function geotiff_read_bbox({
      bbox,
      clamp = false,
      debug_level = 0,
      density = 100,
      fill_value,
      geotiff,
      geotiff_srs,
      padding,
      proj4: custom_proj4,
      srs: srs_of_bbox,
      use_overview = false,
      target_height,
      target_width,
      signal
    }) {
      if (debug_level >= 1) console.log("[geotiff-read-bbox] starting");
      if (signal && signal.aborted) throw new Error("[geotiff-read-bbox] operation aborted");
      if (geotiff === null) throw new Error("[geotiff-read-bbox] geotiff is null");
      if (geotiff === void 0) throw new Error("[geotiff-read-bbox] geotiff is undefined");
      const start_get_image = performance.now();
      const image = await geotiff.getImage();
      const duration_get_image = performance.now() - start_get_image;
      if (debug_level >= 2) {
        console.log(`[geotiff-read-bbox] getting first image took ${Math.round(duration_get_image)} ms`);
      }
      const image_height = image.getHeight();
      const image_width = image.getWidth();
      if (debug_level >= 2) console.log("[geotiff-read-bbox] image_height:", image_height);
      if (debug_level >= 2) console.log("[geotiff-read-bbox] image_width:", image_width);
      if (!geotiff_srs) geotiff_srs = await (0, _geotiffEpsgCode.default)(geotiff);
      if (debug_level >= 2) console.log("[geotiff-read-bbox] geotiff_srs:", geotiff_srs);
      if ([void 0, null, 32767].includes(geotiff_srs) && srs_of_bbox !== "simple") {
        throw new Error("[geotiff-read-bbox] unable to parse SRS of geotiff");
      }
      if (typeof geotiff_srs === "number") geotiff_srs = "EPSG:" + geotiff_srs;
      if (typeof srs_of_bbox === "number") srs_of_bbox = "EPSG:" + srs_of_bbox;
      const fd = image.fileDirectory;
      if (!(fd.ModelTransformation || fd.ModelTiepoint && fd.ModelPixelScale)) {
        throw new Error("GeoTIFF doesn't have ModelTransformation nor ModelTiepoint+ModelPixelScale");
      }
      const geotransform = (0, _geotiffGeotransform.default)(image);
      if (debug_level >= 1) console.log("[geotiff-read-bbox] geotransform:", geotransform);
      const affine = (0, _Geotransform.default)(geotransform);
      if (debug_level >= 1) console.log("[geotiff-read-bbox] affine:", affine);
      const proj43 = (0, _proj4Collect.default)([custom_proj4]);
      if (debug_level >= 1) console.log("[geotiff-read-bbox] proj4:", typeof proj43);
      let bbox_in_base_image_coords;
      if (srs_of_bbox === "simple") {
        const [xmin, ymin, xmax, ymax] = bbox;
        bbox_in_base_image_coords = [
          xmin,
          image.getHeight() - ymax,
          // how many pixels from top of geotiff,
          xmax,
          image.getHeight() - ymin
          // how many pixels from top of geotiff
        ];
      } else {
        let convert_from_srs_of_bbox_to_px_of_geotiff;
        let convert_from_px_of_geotiff_to_srs_of_bbox;
        let convert_from_srs_of_geotiff_to_srs_of_bbox;
        let convert_from_srs_of_bbox_to_srs_of_geotiff;
        if (geotiff_srs === srs_of_bbox) {
          if (debug_level >= 2) console.log("[geotiff-read-bbox] srs of geotiff and bbox are the same!");
          convert_from_srs_of_geotiff_to_srs_of_bbox = (pt) => pt;
          convert_from_srs_of_bbox_to_srs_of_geotiff = (pt) => pt;
          convert_from_srs_of_bbox_to_px_of_geotiff = (xy) => affine.inverse(xy);
          convert_from_px_of_geotiff_to_srs_of_bbox = (ij) => affine.forward(ij);
        } else {
          if (!geotiff_srs.includes("[") && !geotiff_srs.includes("+") && !proj43.defs[geotiff_srs]) throw new Error("[geotiff-read-bbox] unrecognized srs: " + geotiff_srs);
          if (!srs_of_bbox.includes("[") && !srs_of_bbox.includes("+") && !proj43.defs[srs_of_bbox]) throw new Error("[geotiff-read-bbox] unrecognized srs: " + srs_of_bbox);
          ({
            forward: convert_from_srs_of_geotiff_to_srs_of_bbox,
            inverse: convert_from_srs_of_bbox_to_srs_of_geotiff
          } = proj43(geotiff_srs, srs_of_bbox));
          convert_from_srs_of_bbox_to_px_of_geotiff = (xy) => affine.inverse(convert_from_srs_of_bbox_to_srs_of_geotiff(xy));
          convert_from_px_of_geotiff_to_srs_of_bbox = (ij) => convert_from_srs_of_geotiff_to_srs_of_bbox(affine.forward(ij));
        }
        bbox_in_base_image_coords = (0, _reproject.default)(bbox, convert_from_srs_of_bbox_to_px_of_geotiff, {
          density,
          nan_strategy: "skip"
        });
      }
      if (debug_level >= 2) console.log("[geotiff-read-bbox] bbox_in_base_image_coords:", bbox_in_base_image_coords);
      let read_window = snap_to_read_window(bbox_in_base_image_coords, padding);
      if (debug_level >= 2) console.log("[geotiff-read-bbox] read_window:", read_window);
      let [read_width, read_height] = (0, _bboxSize.default)(read_window);
      if (debug_level >= 2) console.log("[geotiff-read-bbox] base read size:", [read_width, read_height]);
      const selected = {
        image,
        image_height,
        image_width,
        index: 0,
        ratio: [1, 1],
        read_window,
        read_height,
        read_width
      };
      if (use_overview && target_height && target_width) {
        if (debug_level >= 2) console.log("[geotiff-read-bbox] getting image count");
        const start_get_image_count = performance.now();
        const image_count = await geotiff.getImageCount();
        if (debug_level >= 2) console.log("[geotiff-read-bbox] image_count: " + image_count);
        const duration_get_image_count = performance.now() - start_get_image_count;
        if (debug_level >= 2) {
          console.log(`[geotiff-read-bbox] getting image count (${image_count}) took ${duration_get_image_count} ms`);
        }
        for (let i = 1; i < image_count; i++) {
          const subimage = await geotiff.getImage(i);
          if (debug_level >= 3) console.log("[geotiff-read-bbox] subimage:", typeof subimage);
          if (subimage.fileDirectory.PhotometricInterpretation === 4) {
            if (debug_level >= 3) console.log(`[geotiff-read-bbox] ignoring image ${i} because it is a transparency mask`);
            continue;
          }
          const ratioX = subimage.getHeight() / image_height;
          if (debug_level >= 3) console.log("[geotiff-read-bbox] ratioX:", ratioX);
          const ratioY = subimage.getWidth() / image_width;
          if (debug_level >= 3) console.log("[geotiff-read-bbox] ratioY:", ratioY);
          const bbox_in_subimage_coords = (0, _scale.default)(bbox_in_base_image_coords, [ratioX, ratioY]);
          if (debug_level >= 3) console.log("[geotiff-read-bbox] bbox_in_subimage_coords:", bbox_in_subimage_coords);
          const subimage_read_window = snap_to_read_window(bbox_in_subimage_coords, padding);
          if (debug_level >= 2) console.log("[geotiff-read-bbox] subimage_read_window:", subimage_read_window);
          [read_width, read_height] = (0, _bboxSize.default)(subimage_read_window);
          if (debug_level >= 3) console.log("[geotiff-read-bbox] read_width:", read_width);
          if (debug_level >= 3) console.log("[geotiff-read-bbox] read_height:", read_height);
          if (read_height >= target_height && read_width >= target_width) {
            selected.image = subimage;
            selected.image_height = subimage.getHeight();
            selected.image_width = subimage.getWidth();
            selected.index = i;
            selected.ratio = [ratioX, ratioY];
            selected.read_height = read_height;
            selected.read_width = read_width;
            selected.read_window = subimage_read_window;
            if (debug_level >= 2) console.log("[geotiff-read-bbox] selected:", selected);
          } else {
            break;
          }
        }
      }
      const start_read_rasters = performance.now();
      let data;
      if (debug_level >= 3) console.log("[geotiff-read-bbox] selected:", selected);
      const [left, top, right, bottom] = selected.read_window;
      if (right <= 0 || bottom <= 0 || left >= selected.image_width || top >= selected.image_height) {
        const depth = image.getSamplesPerPixel();
        const read_area = selected.read_width * selected.read_height;
        data = [];
        for (let b = 0; b < depth; b++) data.push(new Array(read_area).fill(fill_value));
      } else {
        if (clamp) {
          if (debug_level >= 2) console.log("[geotiff-read-bbox] clamping");
          selected.read_window = (0, _intersect.default)(selected.read_window, [0, 0, selected.image_width, selected.image_height]);
          [read_width, read_height] = (0, _bboxSize.default)(selected.read_window);
          selected.read_height = read_height;
          selected.read_width = read_width;
        }
        if (debug_level >= 2) console.log("[geotiff-read-bbox] reading ", selected.read_window);
        data = await selected.image.readRasters({
          fillValue: fill_value,
          window: selected.read_window,
          signal
        });
      }
      const duration_read_rasters = performance.now() - start_read_rasters;
      if (debug_level >= 2) {
        console.log("[geotiff-read-bbox] reading rasters took " + duration_read_rasters.toFixed() + "ms");
      }
      if (debug_level >= 3) console.log("[geotiff-read-bbox] data:", data);
      const unscaled_read_window = (0, _scale.default)(selected.read_window, selected.ratio.map((n) => 1 / n));
      const read_bbox = (0, _reproject.default)(unscaled_read_window, affine.forward, {
        density
      });
      const [scaled_left, scaled_top, scaled_right, scaled_bottom] = unscaled_read_window;
      const upper_left = [scaled_left, scaled_top];
      if (debug_level >= 3) console.log("[geotiff-read-bbox] upper_left:", upper_left);
      const [upper_left_x, upper_left_y] = affine.forward(upper_left);
      const read_geotransform = [upper_left_x, geotransform[1] / selected.ratio[0], geotransform[2] / selected.ratio[1], upper_left_y, geotransform[4] / selected.ratio[0], geotransform[5] / selected.ratio[1]];
      const simple_bbox = [unscaled_read_window[0], image_height - unscaled_read_window[3], unscaled_read_window[2], image_height - unscaled_read_window[1]];
      const result2 = {
        base_window: unscaled_read_window,
        bbox: read_bbox,
        data,
        geotransform: read_geotransform,
        height: selected.read_height,
        index: selected.index,
        image: selected.image,
        simple_bbox,
        srs: geotiff_srs,
        width: selected.read_width,
        window: selected.read_window
      };
      [["read_bbox", "bbox"], ["selected_image_index", "index"], ["selected_image", "image"]].forEach(([_from, _to]) => {
        Object.defineProperty(result2, _from, {
          get() {
            if (debug_level >= 1) console.log(`[geotiff-read-bbox] ${_from} is deprected, please use ${_to} instead`);
            return result2[_to];
          }
        });
      });
      Object.defineProperty(result2, "read_window", {
        get() {
          if (debug_level >= 1) {
            console.log("[geotiff-read-bbox] read_window [left, bottom, top, right] is deprected, please use window [left, top, right, bottom] instead");
          }
          return [this.window[0], this.window[3], this.window[2], this.window[1]];
        }
      });
      Object.defineProperty(result2, "srs_of_geotiff", {
        get() {
          if (debug_level >= 1) console.log("[geotiff-read-bbox] srs_of_geotiff is deprected, please use srs instead");
          return this.srs.startsWith("EPSG:") ? Number(this.srs.replace("EPSG:", "")) : this.srs;
        }
      });
      return result2;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/geotiff-precise-no-data/geotiff-precise-no-data.js
var require_geotiff_precise_no_data = __commonJS({
  "node_modules/geotiff-precise-no-data/geotiff-precise-no-data.js"(exports, module) {
    function getPreciseNoDataValue(data, options) {
      if (data.fileDirectory) data = data.fileDirectory;
      if (data.GDAL_NODATA) data = data.GDAL_NODATA;
      if (typeof data !== "string") return void 0;
      if (options && options.raw) return data;
      data = data.replace("\0", "").trim();
      if (["-inf", "-infinity"].includes(data)) {
        return "-Infinity";
      }
      if (["+inf", "inf", "+infinity", "infinity"].includes(data)) {
        return "Infinity";
      }
      data = data.replace(/^\+/, "");
      return data;
    }
    if (typeof module === "object") {
      module.exports = getPreciseNoDataValue;
      module.exports.default = getPreciseNoDataValue;
      module.exports.getPreciseNoDataValue = getPreciseNoDataValue;
    }
  }
});

// node_modules/geotiff-no-data/geotiff-no-data.js
var require_geotiff_no_data = __commonJS({
  "node_modules/geotiff-no-data/geotiff-no-data.js"(exports, module) {
    var get_precise_no_data_value = require_geotiff_precise_no_data();
    function getNoDataNumber(image) {
      const precise_no_data_value = get_precise_no_data_value(image);
      if (typeof precise_no_data_value === void 0) return;
      const no_data_value = Number(precise_no_data_value);
      if (isNaN(no_data_value)) return;
      return no_data_value;
    }
    if (typeof define === "function" && define.amd) {
      define(function() {
        return getNoDataNumber;
      });
    }
    if (typeof module === "object") {
      module.exports = getNoDataNumber;
      module.exports.default = getNoDataNumber;
    }
    if (typeof window === "object") {
      window.getNoDataNumber = getNoDataNumber;
    }
    if (typeof self === "object") {
      self.getNoDataNumber = getNoDataNumber;
    }
  }
});

// node_modules/geotiff-tile/dist/cjs/geotiff-tile.js
var require_geotiff_tile = __commonJS({
  "node_modules/geotiff-tile/dist/cjs/geotiff-tile.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createTile;
    var _geowarp = _interopRequireDefault(require_geowarp());
    var _geotiffReadBbox = _interopRequireDefault(require_geotiff_read_bbox());
    var _geotiffEpsgCode = _interopRequireDefault(require_geotiff_epsg_code());
    var _geotiffNoData = _interopRequireDefault(require_geotiff_no_data());
    var _geotiffGeotransform = _interopRequireDefault(require_geotiff_geotransform());
    var _Geotransform = _interopRequireDefault(require_Geotransform());
    var _proj4FullyLoaded = _interopRequireDefault(require_proj4_fully_loaded());
    var _reproject = _interopRequireDefault(require_reproject());
    var _reprojectBbox = _interopRequireDefault(require_reproject_bbox());
    function _interopRequireDefault(obj2) {
      return obj2 && obj2.__esModule ? obj2 : { default: obj2 };
    }
    async function createTile({
      // bands,
      bbox,
      bbox_srs = 4326,
      cutline,
      cutline_srs = 4326,
      debug_level = 0,
      density = 100,
      geotiff,
      geotiff_srs,
      expr: _expr,
      // fit = false,
      method,
      pixel_depth,
      round,
      tile_array_types,
      tile_height = 256,
      tile_srs = 3857,
      // epsg code of the output tile
      tile_array_types_strategy = "auto",
      tile_layout = "[band][row,column]",
      tile_resolution = [1, 1],
      tile_width = 256,
      timed = false,
      use_overview = true,
      turbo = false
    }) {
      let bbox_in_tile_srs;
      try {
        const start_time = timed ? performance.now() : 0;
        if (!bbox) throw new Error("[geotiff-tile] you must provide bbox");
        if (isNaN(tile_height)) throw new Error("[geotiff-tile] tile_height is NaN");
        if (isNaN(tile_width)) throw new Error("[geotiff-tile] tile_width is NaN");
        const image = await geotiff.getImage(0);
        const image_height = image.getHeight();
        const bbox_nums = [Number(bbox[0]), Number(bbox[1]), Number(bbox[2]), Number(bbox[3])];
        if (debug_level >= 1) console.log("bbox_nums:", bbox_nums);
        if (!geotiff_srs) {
          const start_get_geotiff_epsg_code = timed ? performance.now() : 0;
          geotiff_srs = await (0, _geotiffEpsgCode.default)(geotiff);
          if (timed) console.log("[geotiff-tile] parsing epsg code took " + Math.round(performance.now() - start_get_geotiff_epsg_code) + "ms");
        }
        if (debug_level >= 1) console.log("[geotiff-tile] geotiff_srs:", geotiff_srs);
        if (!geotiff_srs) {
          throw new Error("[geotiff-tile] unfortunately we weren't able to parse an EPSG code from the GeoTIFF metadata. Unfortunately, this library does not currently support reading tiles from GeoTIFF files with custom projections. We hope to add this support in the future, per time and funding.");
        }
        const start_bbox_in_tile_srs = timed ? performance.now() : 0;
        bbox_in_tile_srs = (() => {
          if (tile_srs === bbox_srs) {
            return bbox;
          } else if (bbox_srs === "simple") {
            const geotransform = (0, _geotiffGeotransform.default)(image);
            const affine = (0, _Geotransform.default)(geotransform);
            const [xmin, ymin, xmax, ymax] = bbox_nums;
            const image_bbox = [xmin, image_height - ymax, xmax, image_height - ymin];
            const bbox_in_geotiff_srs = (0, _reproject.default)(image_bbox, affine.forward, {
              async: false,
              density: 0
              // standard 6-param geoaffine transformations won't lead to curved lines
            });
            if (debug_level >= 1) console.log("bbox_in_geotiff_srs:", bbox_in_geotiff_srs);
            if (geotiff_srs === tile_srs) {
              return bbox_in_geotiff_srs;
            } else {
              return (0, _reprojectBbox.default)({
                bbox: bbox_in_geotiff_srs,
                density,
                from: geotiff_srs,
                to: tile_srs
              });
            }
          } else {
            if (debug_level >= 1) console.log(`reprojecting bbox from "${bbox_srs}" to "${tile_srs}"`);
            return (0, _reprojectBbox.default)({
              bbox: bbox_nums,
              density,
              from: bbox_srs,
              to: tile_srs
            });
          }
        })();
        if (debug_level >= 1) console.log("bbox_in_tile_srs:", bbox_in_tile_srs);
        if (timed) console.log("[geotiff-tile] getting bbox_in_tile_srs took " + Math.round(performance.now() - start_bbox_in_tile_srs) + "ms");
        const readBoundingBoxOptions = (() => {
          if (bbox_srs === "simple" && tile_srs === geotiff_srs) {
            return {
              bbox: bbox_nums,
              debugLevel: debug_level,
              srs: "simple",
              geotiff,
              use_overview,
              target_height: tile_height,
              target_width: tile_width
            };
          } else {
            return {
              bbox: bbox_in_tile_srs,
              debugLevel: debug_level,
              srs: tile_srs,
              geotiff,
              use_overview,
              target_height: tile_height,
              target_width: tile_width
            };
          }
        })();
        if (debug_level >= 2) console.log("[geotiff-tile] calling readBoundingBox with:\n", readBoundingBoxOptions);
        const start_read_bbox = timed ? performance.now() : 0;
        const readResult = await (0, _geotiffReadBbox.default)(readBoundingBoxOptions);
        if (debug_level >= 2) console.log("[geotiff-tile] geotiff-read-bbox result is:\n", readResult);
        if (timed) console.log("[geotiff-tile] reading bounding box took " + Math.round(performance.now() - start_read_bbox) + "ms");
        const sourceArrayType = readResult.data[0].constructor.name;
        if (debug_level >= 2) console.log("[geotiff-tile] sourceArrayType:\n", sourceArrayType);
        const [theoretical_min, theoretical_max] = (() => {
          switch (sourceArrayType) {
            case "Uint8Array":
              return [0, 255];
            case "Int8Array":
              return [-128, 127];
            case "Uint16Array":
              return [0, 65535];
            case "Int16Array":
              return [-32768, 32767];
            case "Uint32Array":
              return [0, 4294967295];
            case "Int32Array":
              return [-2147483648, 2147483647];
            case "Float32Array":
              return [-34e37, 34e37];
            case "Float64Array":
              return [-1 * Number.MAX_VALUE, Number.MAX_VALUE];
            case "BigInt64Array":
              return [Math.pow(-2, 63), Math.pow(2, 63) - 1];
            case "BigUint64Array":
              return [0, Math.pow(2, 64) - 1];
            default:
              return [void 0, void 0];
          }
        })();
        if (cutline && !cutline_srs) {
          cutline_srs = 4326;
        }
        let forward33, inverse33;
        if (geotiff_srs !== tile_srs) {
          ({
            forward: forward33,
            inverse: inverse33
          } = (0, _proj4FullyLoaded.default)(typeof geotiff_srs === "number" ? "EPSG:" + geotiff_srs : geotiff_srs, typeof tile_srs === "number" ? "EPSG:" + tile_srs : tile_srs));
        }
        if (timed) console.log("[geotiff-tile] time elapsed before warping " + Math.round(performance.now() - start_time) + "ms");
        const start_geowarp = timed ? performance.now() : 0;
        const array_depth = tile_layout.match(/\[/g).length;
        tile_array_types = (() => {
          if (tile_array_types) {
            return tile_array_types;
          } else if (tile_array_types_strategy === "auto") {
            if (_expr) {
              return new Array(array_depth).fill("Array");
            } else {
              return new Array(array_depth - 1).fill("Array").concat([sourceArrayType]);
            }
          } else if (tile_array_types_strategy === "geotiff") {
            return new Array(array_depth - 1).fill("Array").concat([sourceArrayType]);
          } else if (tile_array_types_strategy === "untyped") {
            return new Array(array_depth - 1).fill("Array");
          }
          return new Array(array_depth - 1).fill("Array");
        })();
        if (debug_level >= 2) console.log("[geotiff-tile] tile_array_types:\n", tile_array_types);
        const bbox_in_tile_srs_num = bbox_in_tile_srs.map((it) => Number(it));
        const out_srs = tile_srs;
        const geowarp_options = {
          cutline,
          cutline_srs,
          cutline_forward: cutline ? (0, _proj4FullyLoaded.default)("EPSG:" + cutline_srs, "EPSG:" + tile_srs).forward : void 0,
          debug_level: debug_level > 1 ? debug_level - 1 : 0,
          forward: forward33,
          inverse: inverse33,
          in_data: readResult.data,
          in_bbox: out_srs === "simple" ? readResult.simple_bbox : readResult.bbox,
          // in_geotransform is only necessary if using skewed or rotated in_data
          in_geotransform: out_srs === "simple" ? null : readResult.geotransform,
          in_layout: "[band][row,column]",
          in_no_data: (0, _geotiffNoData.default)(image),
          in_srs: geotiff_srs,
          in_width: readResult.width,
          in_height: readResult.height,
          method,
          // out_bands: should use if repeated bands in output
          out_array_types: tile_array_types,
          out_bbox: bbox_in_tile_srs_num,
          out_height: tile_height,
          out_layout: tile_layout,
          out_pixel_depth: pixel_depth,
          out_resolution: typeof tile_resolution === "number" ? [tile_resolution, tile_resolution] : tile_resolution,
          out_srs,
          out_width: tile_width,
          round,
          theoretical_max,
          theoretical_min,
          expr: _expr,
          turbo
        };
        if (debug_level >= 2) console.log("[geotiff-tile] geowarp_options:\n", geowarp_options);
        const {
          data: out_data,
          ...extra
        } = await (0, _geowarp.default)(geowarp_options);
        if (timed) console.log("[geotiff-tile] geowarp took " + Math.round(performance.now() - start_geowarp) + "ms");
        if (timed) console.log("[geotiff-tile] took " + Math.round(performance.now() - start_time) + "ms");
        if (debug_level >= 1) extra.readResult = readResult;
        return {
          height: tile_height,
          tile: out_data,
          width: tile_width,
          extra
          // extra metadata from geowarp
        };
      } catch (error) {
        console.log("[geotiff-tile] failed to create tile");
        console.log("[geotiff-tile] bbox_in_tile_srs: ", bbox_in_tile_srs);
        console.log("[geotiff-tile] tile_height:", tile_height);
        console.log("[geotiff-tile] tile_width;", tile_width);
        console.log("[geotiff-tile] tile_srs:", tile_srs);
        console.log("[geotiff-tile] use_overview:", use_overview);
        console.error("[geotiff-tile] error:", error);
        throw error;
      }
    }
    if (typeof window === "object") {
      window.geotiff_tile = {
        createTile
      };
    }
    if (typeof self === "object") {
      self.geotiff_tile = {
        createTile
      };
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/georaster-stack/core/index.js
var require_core = __commonJS({
  "node_modules/georaster-stack/core/index.js"(exports, module) {
    var readTile = require_geotiff_tile();
    var proj4fullyloaded = require_proj4_fully_loaded();
    var chooseAtRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];
    var range2 = (ct) => new Array(ct).fill(0).map((_, i) => i);
    var GeoRasterStack2 = class _GeoRasterStack {
      constructor({ cache = true, cache_size = 100, create_worker, debug_level, flat = false, georasters, method, turbo }) {
        this.cache = [];
        this.cache_size = cache_size;
        this.use_cache = cache || false;
        this.debug_level = debug_level;
        this.flat = flat;
        this.georasters = georasters;
        this.defaultMethod = method;
        this.defaultTurbo = turbo;
        this.tileWorkers = range2(3).map(() => create_worker());
        return this;
      }
      static async init({ cache, cache_size, create_worker, debug_level, flat, method, parse_georaster, sources, turbo }) {
        return new _GeoRasterStack({
          cache,
          cache_size,
          create_worker,
          debug_level,
          flat,
          georasters: await Promise.all(sources.map((src) => typeof src === "string" ? parse_georaster(src) : src)),
          method,
          turbo
        });
      }
      async _read({ extent, size }) {
        const startReadRasters = performance.now();
        const [width, height] = size;
        const out_array_types = ["Array", "Array", "Array"];
        const resample_method = this.defaultMethod || "near-vectorize";
        const sub_debug_level = Math.max((this.debug_level || 3) - 3, 0);
        const promises = this.georasters.map(async (georaster) => {
          if (georaster.values) {
            if (extent.srs === "simple") {
              return geowarp({
                debug_level: sub_debug_level,
                in_data: georaster.values,
                in_bbox: [0, 0, georaster.width, georaster.height],
                in_layout: "[band][row][column]",
                in_width: georaster.width,
                in_height: georaster.height,
                out_array_types,
                out_bbox: extent.bbox,
                out_layout: "[band][row][column]",
                out_height: height,
                out_width: width,
                method: resample_method,
                round: false,
                turbo: this.turbo
              }).data;
            } else {
              const { forward: forward33, inverse: inverse33 } = proj4fullyloaded("EPSG:" + georaster.projection, extent.srs);
              return geowarp({
                debug_level: sub_debug_level,
                forward: forward33,
                inverse: inverse33,
                in_data: georaster.values,
                in_bbox: [georaster.xmin, georaster.ymin, georaster.xmax, georaster.ymax],
                in_layout: "[band][row][column]",
                in_srs: georaster.projection,
                in_width: georaster.width,
                in_height: georaster.height,
                out_array_types,
                out_bbox: extent.bbox,
                out_layout: "[band][row][column]",
                out_srs: extent.srs,
                out_height: height,
                out_width: width,
                method: resample_method,
                round: false,
                turbo: this.turbo
              }).data;
            }
          } else {
            const baseReadTileParams = {
              bbox: extent.bbox,
              bbox_srs: extent.srs,
              debug_level: sub_debug_level,
              method: resample_method,
              round: false,
              tile_array_types: out_array_types,
              tile_height: height,
              tile_layout: "[band][row][column]",
              tile_srs: extent.srs,
              tile_width: width,
              timed: sub_debug_level >= 1,
              use_overview: true,
              turbo: this.turbo
            };
            if (extent.srs === "simple") {
              baseReadTileParams.geotiff_srs = "simple";
            }
            if (this.debug_level >= 2) console.log("[georaster-stack] baseReadTileParams:", baseReadTileParams);
            if (georaster._url) {
              const tileWorker = await chooseAtRandom(this.tileWorkers);
              const createTileParams = { ...baseReadTileParams, url: georaster._url };
              if (this.debug_level >= 1) console.log("[georaster-stack] calling createTile with:", createTileParams);
              const created = await tileWorker.createTile(createTileParams);
              if (created === void 0) {
                console.error("[georaster-stack] failed to create tile with the following params:\n" + JSON.stringify(createTileParams));
                throw new Error("[georaster-stack] failed to create tile");
              }
              return created.tile;
            } else if (georaster._geotiff) {
              return readTile({ ...baseReadTileParams, geotiff: georaster._geotiff }).then(({ tile }) => tile);
            }
          }
        });
        if (this.debug_level >= 4) console.log("[georaster-stack] inside GeoRasterReader.read, promises:", promises);
        const valuesByGeoRaster = await Promise.all(promises);
        if (this.debug_level >= 4) console.log("[georaster-stack] valuesByGeoRaster:", valuesByGeoRaster);
        const result2 = this.flat ? valuesByGeoRaster.flat() : valuesByGeoRaster;
        if (this.debug_level >= 1) console.log("[georaster-stack] read rasters took:", performance.now() - startReadRasters, "ms");
        return { data: result2, size };
      }
      async read({ extent, size }) {
        if (this.use_cache) {
          const [width, height] = size;
          const key = `bbox=${extent.bbox.join(",")}; srs=${extent.srs}; height=${height}; width=${width}`;
          if (this.debug_level >= 2) console.log("[georaster-stack] key:", key);
          if (this.cache.length > 0) {
            const entry = this.cache.find((it) => it[0] === key);
            if (entry) {
              if (this.debug_level >= 1) console.log(`[georaster-stack] found cache entry "${key}"`);
              return entry[1];
            }
          }
          const promise = this._read({ extent, size });
          if (this.cache.length === this.cache_size) this.cache.shift();
          this.cache.push([key, promise]);
          return promise;
        } else {
          return this._read({ extent, size });
        }
      }
    };
    module.exports = {
      GeoRasterStack: GeoRasterStack2
    };
  }
});

// node_modules/georaster-stack/web/index.js
var require_web = __commonJS({
  "node_modules/georaster-stack/web/index.js"(exports, module) {
    var parseGeoraster = require_georaster_browser_bundle_min();
    var { createWorker } = require_index_prod();
    var { GeoRasterStack: CoreGeoRasterStack } = require_core();
    var GeoRasterStack2 = class extends CoreGeoRasterStack {
      static async init({ cache, cache_size, debug_level, flat, method, sources, turbo }) {
        return await super.init({
          cache,
          cache_size,
          create_worker: createWorker,
          debug_level,
          flat,
          method,
          parse_georaster: parseGeoraster,
          sources,
          turbo
        });
      }
    };
    module.exports = {
      GeoRasterStack: GeoRasterStack2
    };
    if (typeof self === "object") {
      self.GeoRasterStack = GeoRasterStack2;
    }
    if (typeof window === "object") {
      window.GeoRasterStack = GeoRasterStack2;
    }
  }
});

// node_modules/georaster-layer-for-leaflet/dist/v3/babel/esm/georaster-layer-for-leaflet.js
var import_runtime = __toESM(require_runtime());
var L = __toESM(require_leaflet_src());

// node_modules/pixel-utils/dist/esm/fit/index.js
var import_xdim = __toESM(require_xdim());

// node_modules/pixel-utils/dist/esm/raw-to-rgba/index.js
var import_quick_scale = __toESM(require_quick_scale());

// node_modules/pixel-utils/dist/esm/enums.js
var Layout;
(function(Layout2) {
  Layout2["[band][row][column]"] = "[band][row][column]";
  Layout2["[band][row,column]"] = "[band][row,column]";
  Layout2["[band,row,column]"] = "[band,row,column]";
  Layout2["[row,column,band]"] = "[row,column,band]";
  Layout2["[row,column][band]"] = "[row,column][band]";
  Layout2["[row][column][band]"] = "[row][column][band]";
  Layout2["[row][column,band]"] = "[row][column,band]";
})(Layout || (Layout = {}));

// node_modules/pixel-utils/dist/esm/make-no-data-rgb/index.js
function makeNoDataRGB(noDataValue) {
  return [noDataValue, noDataValue, noDataValue];
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/index.js
var import_quick_scale2 = __toESM(require_quick_scale());

// node_modules/pixel-utils/dist/esm/raw-to-rgb/convert-single.js
function convert_raw_one_band_pixel_to_rgb(noDataValue, noDataPixel, scale, pixel2) {
  if (pixel2.includes(noDataValue)) return noDataPixel;
  const scaled = scale(pixel2[0]);
  return [scaled, scaled, scaled];
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/convert-single-str.js
function convert_raw_one_band_pixel_to_rgb_str(noDataValue, noDataPixel, scale, pixel2) {
  if (pixel2.includes(noDataValue)) return noDataPixel;
  const scaled = scale(pixel2[0]);
  return "rgb(" + scaled + ", " + scaled + ", " + scaled + ")";
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/convert-double.js
function convert_raw_two_band_pixel_to_rgb(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, pixel2) {
  if (pixel2.includes(noDataValue)) return noDataPixel;
  return [scaleFunction1(pixel2[0]), scaleFunction2(pixel2[1]), 0];
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/convert-double-str.js
function convert_raw_two_band_pixel_to_rgb_str(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, pixel2) {
  if (pixel2.includes(noDataValue)) return noDataPixel;
  return "rgb(" + scaleFunction1(pixel2[0]) + ", " + scaleFunction2(pixel2[1]) + ", 0)";
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/convert-triple.js
function convert_raw_three_band_pixel_to_rgb(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, scaleFunction3, pixel2) {
  if (pixel2.includes(noDataValue)) return noDataPixel;
  return [scaleFunction1(pixel2[0]), scaleFunction2(pixel2[1]), scaleFunction3(pixel2[2])];
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/convert-triple-str.js
function convert_raw_three_band_pixel_to_rgb_css(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, scaleFunction3, pixel2) {
  if (pixel2.includes(noDataValue)) return noDataPixel;
  return "rgb(" + scaleFunction1(pixel2[0]) + ", " + scaleFunction2(pixel2[1]) + ", " + scaleFunction3(pixel2[2]) + ")";
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/convert-many.js
function convert_raw_two_band_pixel_to_rgb2(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, scaleFunction3, pixel2) {
  pixel2 = pixel2.slice(0, 3);
  if (pixel2.includes(noDataValue)) return noDataPixel;
  return [scaleFunction1(pixel2[0]), scaleFunction2(pixel2[1]), scaleFunction3(pixel2[2])];
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/convert-many-str.js
function convert_raw_two_band_pixel_to_rgb_str2(noDataValue, noDataPixel, scaleFunction1, scaleFunction2, scaleFunction3, pixel2) {
  pixel2 = pixel2.slice(0, 3);
  if (pixel2.includes(noDataValue)) return noDataPixel;
  return "rgb(" + scaleFunction1(pixel2[0]) + ", " + scaleFunction2(pixel2[1]) + ", " + scaleFunction3(pixel2[2]) + ")";
}

// node_modules/pixel-utils/dist/esm/rgb-to-str/index.js
function rgbToStr([r, g, b]) {
  return "rgb(" + r + ", " + g + ", " + b + ")";
}

// node_modules/pixel-utils/dist/esm/raw-to-rgb/index.js
function rawToRgb({
  format = "array",
  ranges,
  flip,
  new_no_data_pixel,
  new_no_data_value,
  no_range_value,
  no_range_value_strategy,
  old_no_data_value,
  round = true
}) {
  const nbands = ranges.length;
  if (new_no_data_pixel && new_no_data_value) {
    throw new Error("[pixel-utils/raw-to-rgb] can't specify both new_no_data_pixel and new_no_data_value");
  }
  if (new_no_data_pixel === void 0 || new_no_data_pixel === null) {
    if (new_no_data_value === void 0 || new_no_data_value === null) {
      new_no_data_pixel = makeNoDataRGB(null);
    } else {
      new_no_data_pixel = makeNoDataRGB(new_no_data_value);
    }
  }
  if (new_no_data_pixel === void 0) throw new Error("[raw-to-rgb] undefined new_no_data_pixel");
  const new_range = [0 === new_no_data_value ? 1 : 0, 255 === new_no_data_value ? 254 : 255];
  const options = {
    flip,
    no_range_value,
    no_range_value_strategy,
    round
  };
  const scalefns = ranges.slice(0, 3).map((rng) => (0, import_quick_scale2.createScaleFunction)(rng, new_range, options));
  if (nbands === 1) {
    if (format === "string") {
      return convert_raw_one_band_pixel_to_rgb_str.bind(null, old_no_data_value, rgbToStr(new_no_data_pixel), ...scalefns);
    } else {
      return convert_raw_one_band_pixel_to_rgb.bind(null, old_no_data_value, new_no_data_pixel, ...scalefns);
    }
  } else if (nbands === 2) {
    if (format === "string") {
      return convert_raw_two_band_pixel_to_rgb_str.bind(null, old_no_data_value, rgbToStr(new_no_data_pixel), ...scalefns);
    } else {
      return convert_raw_two_band_pixel_to_rgb.bind(null, old_no_data_value, new_no_data_pixel, ...scalefns);
    }
  } else if (nbands === 3) {
    if (format === "string") {
      return convert_raw_three_band_pixel_to_rgb_css.bind(null, old_no_data_value, rgbToStr(new_no_data_pixel), ...scalefns);
    } else {
      return convert_raw_three_band_pixel_to_rgb.bind(null, old_no_data_value, new_no_data_pixel, ...scalefns);
    }
  } else if (nbands >= 4) {
    if (format === "string") {
      return convert_raw_two_band_pixel_to_rgb_str2.bind(null, old_no_data_value, rgbToStr(new_no_data_pixel), ...scalefns);
    } else {
      return convert_raw_two_band_pixel_to_rgb2.bind(null, old_no_data_value, new_no_data_pixel, ...scalefns);
    }
  } else {
    throw new Error("[pixel-utils/raw-to-rgb] invalid number of bands: " + nbands);
  }
}

// node_modules/georaster-layer-for-leaflet/dist/v3/babel/esm/georaster-layer-for-leaflet.js
var import_dense_polygon2 = __toESM(require_dense_polygon());
var import_isUTM = __toESM(require_isUTM());
var import_getProjString = __toESM(require_getProjString());
var import_proj4_collect = __toESM(require_proj4_collect());
var import_reproject_geojson2 = __toESM(require_reproject_geojson());
var import_merge = __toESM(require_merge());
var import_polygon = __toESM(require_polygon());
var import_fast_min = __toESM(require_fast_min());
var import_fast_max = __toESM(require_fast_max());

// node_modules/geo-extent/dist/geo-extent.mjs
var import_add = __toESM(require_add(), 1);
var import_divide = __toESM(require_divide(), 1);
var import_multiply = __toESM(require_multiply(), 1);
var import_subtract = __toESM(require_subtract(), 1);
var import_bbox_array = __toESM(require_bbox_array(), 1);
var import_boolean_contains = __toESM(require_boolean_contains(), 1);
var import_boolean_intersects = __toESM(require_boolean_intersects(), 1);
var import_dense_polygon = __toESM(require_dense_polygon(), 1);
var import_unwrap = __toESM(require_unwrap(), 1);
var import_get_epsg_code = __toESM(require_get_epsg_code_node_min(), 1);
var import_geography_markup_language = __toESM(require_geography_markup_language(), 1);
var import_reproject_bbox = __toESM(require_reproject_bbox(), 1);
var import_reproject_geojson = __toESM(require_reproject_geojson(), 1);
var avg = (a, b) => (0, import_divide.default)((0, import_add.default)(a.toString(), b.toString()), "2");
var isAry = (o) => Array.isArray(o);
var isDef = (o) => o !== void 0 && o !== null && o !== "";
var isFunc = (o) => typeof o === "function";
var isObj = (o) => typeof o === "object";
var isStr = (o) => typeof o === "string";
var isNum = (o) => typeof o === "number";
var isBoxStr = (o) => isStr(o) && !!o.match(/^[-|+]?[\d\.]+(, ?[-|+]?[\d\.]+){3}$/);
var isLeafletBounds = (it) => isObj(it) && hasFuncs(it, ["getBottomLeft", "getBottomRight", "getTopLeft", "getTopRight"]);
var isLeafletBoundsJSON = (it) => isObj(it) && typeof it.min === "object" && typeof it.min.x === "number" && typeof it.min.y === "number" && typeof it.max === "object" && typeof it.max.x === "number" && typeof it.max.y === "number";
var isLeafletLatLngBounds = (o) => isObj(o) && hasFuncs(o, ["getEast", "getNorth", "getSouth", "getWest"]);
var isLeafletLatLngBoundsJSON = (o) => isObj(o) && hasKeys(o, ["_southWest", "_northEast"]);
var wkt = (bbox) => {
  const [xmin, ymin, xmax, ymax] = bbox;
  return `POLYGON((${xmax} ${ymin},${xmax} ${ymax},${xmin} ${ymax},${xmin} ${ymin},${xmax} ${ymin}))`;
};
var hasFunc = (o, f) => isObj(o) && isFunc(o[f]);
var hasObj = (o, k) => isObj(o) && isObj(o[k]);
var hasFuncs = (o, fs) => fs.every((f) => hasFunc(o, f));
var hasObjs = (o, ks) => ks.every((k) => hasObj(o, k));
var hasKey = (o, k) => isObj(o) && o[k] !== void 0 && o[k] !== null;
var hasKeys = (o, ks) => ks.every((k) => hasKey(o, k));
var allNums = (ary) => isAry(ary) && ary.every(isNum);
var allStrs = (ary) => isAry(ary) && ary.every(isStr);
var getConstructor = (o) => typeof obj === "object" && typeof obj.constructor === "function" || void 0;
var normalize = (srs2) => {
  if (!srs2) return srs2;
  if (srs2 === 32767 || srs2 === "EPSG:32767") return null;
  if (isStr(srs2) && srs2.startsWith("EPSG:")) return srs2;
  if (isStr(srs2) && srs2.match(/^\d+$/)) return "EPSG:" + srs2;
  else if (isNum(srs2)) return "EPSG:" + srs2;
  const code = (0, import_get_epsg_code.default)(srs2);
  if (isNum(code)) return "EPSG:" + code;
  return srs2;
};
var GeoExtent = class _GeoExtent {
  constructor(o, { srs: srs2 } = {}) {
    this.srs = normalize(srs2);
    let xmin, xmax, ymin, ymax;
    let xmin_str, xmax_str, ymin_str, ymax_str;
    if (getConstructor(o) === this.constructor) {
      ({ xmin, xmax, ymin, ymax } = o);
      if (isDef(o.srs)) {
        this.srs = normalize(o.srs);
      }
    }
    if (isBoxStr(o)) o = o.split(/, ?/);
    if (isAry(o) && o.length === 4 && allNums(o)) {
      [xmin, ymin, xmax, ymax] = o;
    } else if (isAry(o) && o.length === 4 && allStrs(o)) {
      [xmin_str, ymin_str, xmax_str, ymax_str] = o;
      [xmin, ymin, xmax, ymax] = o.map((str) => Number(str));
    } else if (isAry(o) && o.length === 2 && o.every(isAry) && o.every((o2) => o2.length === 2 && allNums(o2))) {
      [[ymin, xmin], [ymax, xmax]] = o;
    } else if (isLeafletLatLngBounds(o)) {
      xmin = o.getWest(), xmax = o.getEast(), ymin = o.getSouth(), ymax = o.getNorth();
      if (!isDef(this.srs)) this.srs = "EPSG:4326";
    } else if (isLeafletBounds(o)) {
      ({ x: xmin, y: ymin } = o.getBottomLeft()), { x: xmax, y: ymax } = o.getTopRight();
    } else if (isLeafletLatLngBoundsJSON(o)) {
      ({
        _southWest: { lat: ymin, lng: xmin },
        _northEast: { lat: ymax, lng: xmax }
      } = o);
      if (!isDef(this.srs)) this.srs = "EPSG:4326";
    } else if (isLeafletBoundsJSON(o)) {
      ({
        min: { x: xmin, y: ymin },
        max: { x: xmax, y: ymax }
      } = o);
    } else if (isAry(o) && o.length === 2 && o.every((it) => hasKeys(it, ["x", "y"]))) {
      [{ x: xmin, y: ymin }, { x: xmax, y: ymax }] = o;
    } else if (isObj(o) && hasKeys(o, ["x", "y"]) && isNum(o.x) && isNum(o.y)) {
      xmin = xmax = o.x;
      ymin = ymax = o.y;
      if (hasKey(o, "spatialReference") && hasKey(o.spatialReference, "wkid")) {
        if (!isDef(this.srs)) this.srs = normalize(o.spatialReference.wkid);
      }
    } else if (isObj(o) && hasKeys(o, ["xmin", "xmax", "ymin", "ymax"])) {
      ({ xmin, xmax, ymin, ymax } = o);
      const keys = ["srs", "crs", "proj", "projection"];
      for (let i = 0; i < keys.length; i++) {
        const k = keys[i];
        const v = o[k];
        const normalized = normalize(v);
        if (normalized) {
          this.srs = normalized;
          break;
        }
      }
      if (!this.srs && isDef(o.srs)) {
        this.srs = o.srs;
      }
    } else if (isAry(o) && o.length === 2 && allNums(o)) {
      xmin = xmax = o[0];
      ymin = ymax = o[1];
    } else if (isObj(o) && hasFuncs(o, ["getCoordinates"])) {
      const xy = o.getCoordinates();
      xmin = xmax = xy[0];
      ymin = ymax = xy[1];
    } else if (isObj(o) && hasKey(o, "bbox") && o.bbox.length === 4 && allNums(o)) {
      [xmin, ymin, xmax, ymax] = o.bbox;
    } else if (hasObj(o, "_bounds") && isLeafletLatLngBounds(o._bounds)) {
      const { _bounds } = o;
      xmin = _bounds.getWest(), xmax = _bounds.getEast(), ymin = _bounds.getSouth(), ymax = _bounds.getNorth();
      if (!this.srs) this.srs = "EPSG:4326";
    } else if (isObj(o) && isObj(o._bounds) && hasObjs(o._bounds, ["_southWest", "_northEast"])) {
      ({ lat: ymin, lng: xmin } = o._bounds._southWest);
      ({ lat: ymax, lng: xmax } = o._bounds._northEast);
      if (!isDef(this.srs)) this.srs = "EPSG:4326";
    } else if (isStr(o) && o.toLowerCase().includes("envelope")) {
      const envelope = (0, import_geography_markup_language.Envelope)(o);
      if (envelope.corners) {
        [[xmin, ymin], [xmax, ymax]] = envelope.corners;
      }
      if (envelope.srs) {
        if (envelope.srs.startsWith("urn") && envelope.srs.includes("EPSG:")) {
          this.srs = "EPSG:" + envelope.srs.split(":").pop();
        } else if (/^EPSG:\d+/.test(envelope.srs)) {
          this.srs = envelope.srs;
        }
      }
    } else {
      throw new Error("[geo-extent] unknown format");
    }
    this.xmin = xmin;
    this.xmin_str = xmin_str || xmin.toString();
    this.ymin = ymin;
    this.ymin_str = ymin_str || ymin.toString();
    this.xmax = xmax;
    this.xmax_str = xmax_str || xmax.toString();
    this.ymax = ymax;
    this.ymax_str = ymax_str || ymax.toString();
    this.width_str = (0, import_subtract.default)(this.xmax_str, this.xmin_str);
    this.width = Number(this.width_str);
    this.height_str = (0, import_subtract.default)(this.ymax_str, this.ymin_str);
    this.height = Number(this.height_str);
    this.bottomLeft = { x: xmin, y: ymin };
    this.bottomRight = { x: xmax, y: ymin };
    this.topLeft = { x: xmin, y: ymax };
    this.topRight = { x: xmax, y: ymax };
    this.leafletBounds = [
      [this.ymin, this.xmin],
      [this.ymax, this.xmax]
    ];
    this.area_str = (0, import_multiply.default)(this.width_str, this.height_str);
    this.area = Number(this.area_str);
    this.perimeter_str = (0, import_add.default)((0, import_multiply.default)(this.width_str, "2"), (0, import_multiply.default)(this.height_str, "2"));
    this.perimeter = Number(this.perimeter_str);
    this.bbox = [xmin, ymin, xmax, ymax];
    this.bbox_str = [this.xmin_str, this.ymin_str, this.xmax_str, this.ymax_str];
    this.center_str = {
      x: avg(xmin_str || xmin, xmax_str || xmax),
      y: avg(ymin_str || ymin, ymax_str || ymax)
    };
    this.center = { x: Number(this.center_str.x), y: Number(this.center_str.y) };
    this.str = this.bbox_str.join(",");
    this.wkt = wkt(this.bbox_str);
    this.ewkt = (this.srs?.startsWith("EPSG:") ? this.srs.replace("EPSG:", "SRID=") + ";" : "") + this.wkt;
    this.js = `new GeoExtent([${this.bbox_str.join(", ")}]${this.srs ? `, { srs: ${JSON.stringify(this.srs)} }` : ""})`;
  }
  _pre(_this, _other) {
    _other = new this.constructor(_other);
    if (!isDef(_this.srs) && !isDef(_other.srs)) {
    } else if (isDef(_this.srs) && !isDef(_other.srs)) {
      _other = new _this.constructor({ ..._other, srs: _this.srs });
    } else if (!isDef(_this.srs) && isDef(_other.srs)) {
      _this = new _this.constructor({ ..._this, srs: _other.srs });
    } else if (isDef(_this.srs) && isDef(_other.srs) && _this.srs !== _other.srs) {
      _other = _other.reproj(_this.srs);
    } else if (isDef(_this.srs) && isDef(_other.srs) && _this.srs === _other.srs) {
    } else {
      throw "UH OH";
    }
    return [_this, _other];
  }
  clone() {
    return new this.constructor(this);
  }
  _contains(other, { quiet = false } = { quiet: false }) {
    try {
      const [_this, _other] = this._pre(this, other);
      return (0, import_boolean_contains.default)(_this.bbox, _other.bbox);
    } catch (error) {
      if (!quiet) throw error;
    }
  }
  contains(other, { debug_level = 0, quiet = true } = { debug_level: 0, quiet: true }) {
    const result2 = this._contains(other, { quiet: true });
    if (typeof result2 === "boolean") return result2;
    if (isDef(this.srs) && isDef(other.srs)) {
      try {
        const this2 = this.reproj(other.srs);
        const result22 = this2._contains(other, { quiet: true });
        if (typeof result22 === "boolean") return result22;
      } catch (error) {
        if (debug_level >= 1) console.error(error);
      }
      try {
        const this4326 = this.reproj(4326);
        const other4326 = other.reproj(4326);
        const result4326 = this4326._contains(other4326, { quiet: true });
        if (typeof result4326 === "boolean") return result4326;
      } catch (error) {
        if (debug_level >= 1) console.error(error);
      }
    }
    if (!quiet)
      throw new Error(
        `[geo-extent] failed to determine if ${this.bbox} in srs ${this.srs} contains ${other.bbox} in srs ${other.srs}`
      );
  }
  // should return null if no overlap
  crop(other) {
    other = new this.constructor(other);
    if (!this.overlaps(other)) {
      return null;
    }
    if (other.contains(this)) return this.clone();
    if (other.srs === "EPSG:4326" && (other.xmin < -180 || other.xmax > 180)) {
      const parts = other.unwrap();
      let cropped = parts.map((it) => this.crop(it));
      cropped = cropped.filter(Boolean);
      if (cropped.length === 0) return null;
      let combo = cropped[0];
      for (let i = 1; i < cropped.length; i++) combo = combo.combine(cropped[i]);
      return combo;
    }
    let another = isDef(this.srs) && isDef(other.srs) ? other.reproj(this.srs, { quiet: true }) : other.clone();
    if (another) {
      if (!this.overlaps(another)) return null;
      const xmin = Math.max(this.xmin, another.xmin);
      const ymin = Math.max(this.ymin, another.ymin);
      const xmax = Math.min(this.xmax, another.xmax);
      const ymax = Math.min(this.ymax, another.ymax);
      return new this.constructor([xmin, ymin, xmax, ymax], { srs: this.srs });
    }
    const this4326 = isDef(this.srs) ? this.reproj(4326) : this;
    const other4326 = isDef(other.srs) ? other.reproj(4326) : other;
    const [aMinLon, aMinLat, aMaxLon, aMaxLat] = this4326.bbox;
    const [bMinLon, bMinLat, bMaxLon, bMaxLat] = other4326.bbox;
    if (!this4326.overlaps(other4326)) return null;
    const minLon = Math.max(aMinLon, bMinLon);
    const minLat = Math.max(aMinLat, bMinLat);
    const maxLon = Math.min(aMaxLon, bMaxLon);
    const maxLat = Math.min(aMaxLat, bMaxLat);
    return new this.constructor([minLon, minLat, maxLon, maxLat], { srs: 4326 }).reproj(this.srs);
  }
  // add two extents together
  // result is a new extent in the projection of this
  combine(other) {
    if (isDef(this.srs) && isDef(other.srs)) {
      other = other.reproj(this.srs);
    }
    const xmin = Math.min(this.xmin, other.xmin);
    const xmax = Math.max(this.xmax, other.xmax);
    const ymin = Math.min(this.ymin, other.ymin);
    const ymax = Math.max(this.ymax, other.ymax);
    return new this.constructor({ xmin, xmax, ymin, ymax, srs: this.srs });
  }
  equals(other, { digits = 13, strict = true } = { digits: 13, strict: true }) {
    other = new this.constructor(other);
    if (isDef(this.srs) && isDef(other.srs)) {
      other = other.reproj(this.srs);
    } else if (strict && isDef(this.srs) !== !isDef(this.srs)) {
      return false;
    }
    const str1 = this.bbox.map((n) => n.toFixed(digits)).join(",");
    const str2 = other.bbox.map((n) => n.toFixed(digits)).join(",");
    return str1 === str2;
  }
  /*
    shouldn't accept GeoJSON as input because the extent created from a GeoJSON
    might overlap, but the actual polygon wouldn't.
    Or at least make the user have to be explicit about the functionality via
    a flag like overlaps(geojson, { strict: false })
  */
  _overlaps(other, { quiet = false } = { quiet: false }) {
    try {
      const [_this, _other] = this._pre(this, other);
      return (0, import_boolean_intersects.default)(_this.bbox, _other.bbox);
    } catch (error) {
      if (quiet) return;
      else throw error;
    }
  }
  overlaps(other, { quiet = true, strict = false } = { quiet: true, strict: false }) {
    if (this._overlaps(other, { quiet })) {
      return true;
    }
    if (strict) return false;
    if (this.srs === other.srs || !this.srs && !other.srs) {
      return false;
    }
    other = new this.constructor(other);
    if (other._overlaps(this, { quiet: true })) {
      return true;
    }
    if (this.srs && other.srs) {
      if (this.reproj(4326)._overlaps(other.reproj(4326))) {
        return true;
      }
    }
    return false;
  }
  reproj(to, {
    allow_infinity = false,
    debug_level = 0,
    density = "high",
    shrink = false,
    shrink_density = 100,
    split = true,
    quiet = false
  } = {
    allow_infinity: false,
    debug_level: 0,
    density: "high",
    shrink: false,
    split: true,
    quiet: false
  }) {
    to = normalize(to);
    if (isDef(this.srs) && this.srs === normalize(to)) return this.clone();
    if (!isDef(this.srs)) {
      if (quiet) return;
      throw new Error(`[geo-extent] cannot reproject ${this.bbox} without a projection set`);
    }
    if (this.srs === "EPSG:4326" && (this.xmin < -180 || this.xmax > 180)) {
      try {
        const parts = this.unwrap().map((ext) => ext.reproj(to));
        let combo = parts[0];
        for (let i = 1; i < parts.length; i++) combo = combo.combine(parts[i]);
        return combo;
      } catch (error) {
        if (quiet) return;
        throw error;
      }
    }
    if (density === "lowest") density = 0;
    else if (density === "low") density = 1;
    else if (density === "medium") density = 10;
    else if (density === "high") density = 100;
    else if (density === "higher") density = 1e3;
    else if (density === "highest") density = 1e4;
    let reprojected;
    try {
      const options = {
        bbox: this.bbox,
        density,
        from: this.srs,
        split,
        to
      };
      reprojected = (0, import_reproject_bbox.default)(options);
    } catch (error) {
      if (debug_level) console.error(error);
    }
    if (reprojected?.every(isFinite)) {
      return new _GeoExtent(reprojected, { srs: to });
    }
    if (to !== 4326) {
      let bbox_4326;
      try {
        bbox_4326 = (0, import_reproject_bbox.default)({
          bbox: this.bbox,
          density,
          from: this.srs,
          split,
          to: 4326
        });
      } catch (error) {
        if (debug_level) console.error("failed to create intermediary bbox in EPSG:4326");
      }
      if (bbox_4326) {
        try {
          reprojected = (0, import_reproject_bbox.default)({
            bbox: bbox_4326,
            density,
            from: 4326,
            split,
            to
          });
        } catch (err) {
          if (debug_level) console.error(`failed to reproject from intermediary bbox ${bbox_4326} in 4326 to ${to}`);
        }
      }
    }
    if (reprojected && (allow_infinity || reprojected?.every(isFinite))) {
      return new _GeoExtent(reprojected, { srs: to });
    }
    if (shrink) {
      try {
        if (shrink_density === "lowest") shrink_density = 1;
        else if (shrink_density === "low") shrink_density = 2;
        else if (shrink_density === "medium") shrink_density = 10;
        else if (shrink_density === "high") shrink_density = 100;
        else if (shrink_density === "higher") shrink_density = 1e3;
        else if (shrink_density === "highest") shrink_density = 1e4;
        reprojected = (0, import_reproject_bbox.default)({
          bbox: this.bbox,
          density: shrink_density,
          from: this.srs,
          nan_strategy: "skip",
          split: true,
          to
        });
      } catch (err) {
        if (debug_level) console.error(`failed to reproject from bbox ${this.bbox} with shrinking to ${to}`);
      }
    }
    if (reprojected && (allow_infinity || reprojected?.every(isFinite))) {
      return new _GeoExtent(reprojected, { srs: to });
    } else if (quiet) {
      return;
    } else {
      throw new Error(`[geo-extent] failed to reproject ${this.bbox} from ${this.srs} to ${to}`);
    }
  }
  unwrap() {
    const { xmin, ymin, xmax, ymax, srs: srs2 } = this;
    if (srs2 !== "EPSG:4326") return [this.clone()];
    if (xmin > -180 && xmax < 180) return [this.clone()];
    const bboxes = (0, import_unwrap.default)(this.bbox, [-180, -90, 180, 90]);
    return bboxes.map((bbox) => new this.constructor(bbox, { srs: 4326 }));
  }
  asEsriJSON() {
    return {
      xmin: this.xmin,
      ymin: this.ymin,
      xmax: this.xmax,
      ymax: this.ymax,
      spatialReference: {
        wkid: this.srs
      }
    };
  }
  asGeoJSON({ density = 0 } = { density: 0 }) {
    const will_reproject = ![void 0, null, "EPSG:4326"].includes(this.srs);
    let geojson = {
      type: "Feature",
      properties: {},
      geometry: {
        type: "Polygon",
        coordinates: (0, import_dense_polygon.default)(this.bbox, { density })
      }
    };
    if (will_reproject) {
      geojson = (0, import_reproject_geojson.default)(geojson, { from: this.srs, to: "EPSG:4326", in_place: true });
    }
    geojson.bbox = (0, import_bbox_array.default)(geojson.geometry.coordinates[0]);
    return geojson;
  }
  asObj() {
    const res = {};
    for (let k in this) {
      const v = this[k];
      if (!isFunc(v)) {
        res[k] = v;
      }
    }
    return res;
  }
};
if (typeof define === "function" && define.amd)
  define(function() {
    return GeoExtent;
  });
if (typeof self === "object") self.GeoExtent = GeoExtent;
if (typeof window === "object") window.GeoExtent = GeoExtent;

// node_modules/georaster-layer-for-leaflet/dist/v3/babel/esm/georaster-layer-for-leaflet.js
var import_geowarp = __toESM(require_geowarp());
var import_geowarp_canvas = __toESM(require_geowarp_canvas());
var import_snap_bbox = __toESM(require_lib());
var import_web = __toESM(require_web());
var ORIGIN = [0, 0];
var geowarp2 = (0, import_geowarp_canvas.default)(import_geowarp.default);
var isDefaultCRS = (crs) => crs === L.CRS.EPSG3857 || crs.code === "EPSG:3857";
var isSimpleCRS = (crs) => {
  var _crs$transformation, _crs$transformation2, _crs$transformation3, _crs$transformation4;
  return crs === L.CRS.Simple || !crs.code && crs.infinite && (crs === null || crs === void 0 || (_crs$transformation = crs.transformation) === null || _crs$transformation === void 0 ? void 0 : _crs$transformation._a) === 1 && (crs === null || crs === void 0 || (_crs$transformation2 = crs.transformation) === null || _crs$transformation2 === void 0 ? void 0 : _crs$transformation2._b) === 0 && (crs === null || crs === void 0 || (_crs$transformation3 = crs.transformation) === null || _crs$transformation3 === void 0 ? void 0 : _crs$transformation3._c) === -1 && (crs === null || crs === void 0 || (_crs$transformation4 = crs.transformation) === null || _crs$transformation4 === void 0 ? void 0 : _crs$transformation4._d) === 0;
};
if (!L) console.warn("[georaster-layer-for-leaflet] can't find Leaflet.  If you are loading via <script>, please add the GeoRasterLayer script after the LeafletJS script.");
var zip = (a, b) => a.map((it, i) => [it, b[i]]);
var measureSkew = (bbox, reproj) => {
  const poly = (0, import_polygon.default)(bbox);
  const [topLeft, bottomLeft, bottomRight, topRight] = poly[0];
  const rTopLeft = reproj(topLeft);
  const rBottomRight = reproj(bottomRight);
  const rBottomLeft = reproj(bottomLeft);
  const rTopRight = reproj(topRight);
  const xSkew = Math.max(Math.abs(rTopLeft[0] - rBottomLeft[0]), Math.abs(rTopRight[0] - rBottomRight[0]));
  const ySkew = Math.max(Math.abs(rTopLeft[1] - rTopRight[1]), Math.abs(rBottomLeft[1] - rBottomRight[1]));
  return [xSkew, ySkew];
};
var GeoRasterLayer = L.GridLayer.extend({
  options: {
    updateWhenIdle: true,
    updateWhenZooming: false,
    keepBuffer: 25,
    resolution: 2 ** 5,
    debugLevel: 0,
    caching: true,
    turbo: false
  },
  cache: {},
  initialize: function(options) {
    this.proj4 = (0, import_proj4_collect.default)();
    try {
      if (options.georasters) {
        this.georasters = options.georasters;
      } else if (options.georaster) {
        this.georasters = [options.georaster];
      } else {
        throw new Error("You initialized a GeoRasterLayer without a georaster or georasters value.");
      }
      if (this.sourceType === "url") {
        options.updateWhenIdle = false;
        options.updateWhenZooming = true;
        options.keepBuffer = 16;
      }
      if (options.resampleMethod) {
        if (options.resampleMethod === "nearest") {
          this.resampleMethod = "near";
        } else {
          this.resampleMethod = options.resampleMethod;
        }
      }
      this._cache = {
        innerTile: {},
        tile: {}
      };
      this.debugLevel = options.debugLevel;
      this.subextents = this.georasters.map((g) => new GeoExtent([g.xmin, g.ymin, g.xmax, g.ymax], {
        srs: g.projection
      }));
      const max_height = Math.max.apply(null, this.georasters.map((it) => it.height));
      const max_width = Math.max.apply(null, this.georasters.map((it) => it.width));
      this.simpleExtent = new GeoExtent([0, 0, max_width, max_height]);
      if (this.debugLevel >= 1) {
        console.log("[georaster-layer-for-leaflet] ", {
          options
        });
      }
      this.initialize_mask(options);
      this.turbo = options.turbo || false;
      this.stack = import_web.GeoRasterStack.init({
        // flatten results, so it appears as if all the bands
        // are from the same raster
        flat: true,
        sources: this.georasters,
        debugLevel: this.debugLevel,
        method: this.resampleMethod,
        turbo: this.turbo
      });
      L.Util.setOptions(this, options);
      const tileSize = this.getTileSize();
      this.tileHeight = tileSize.y;
      this.tileWidth = tileSize.x;
      if (this.georasters.length >= 4 && !options.pixelValuesToColorFn) {
        throw "you must pass in a pixelValuesToColorFn if you are combining rasters";
      }
      this._all_values_in_memory = this.georasters.every((georaster) => typeof georaster.values === "object");
      this.numBands = this.georasters.reduce((total, g) => total + g.numberOfRasters, 0);
      if (this.debugLevel > 1) console.log("this.numBands:", this.numBands);
      if (this.georasters.every((g) => Array.isArray(g.mins) && g.mins.length === g.numberOfRasters && g.mins.every((it) => typeof it === "number") && Array.isArray(g.maxs) && g.maxs.length === g.numberOfRasters && g.maxs.every((it) => typeof it === "number"))) {
        this.stats = {
          mins: [],
          maxs: []
        };
        this.georasters.map((georaster) => {
          const numBands = georaster.numberOfRasters;
          if (georaster.mins.length === numBands) {
            this.stats.mins = this.stats.mins.concat(georaster.mins);
          } else {
            this.stats.mins = this.stats.mins.concat(new Array(numBands).fill(null));
          }
          if (georaster.maxs.length === numBands) {
            this.stats.maxs = this.stats.maxs.concat(georaster.maxs);
          } else {
            this.stats.maxs = this.stats.maxs.concat(new Array(numBands).fill(null));
          }
          this.stats.ranges = zip(this.stats.mins, this.stats.maxs).map(([min, max]) => max - min);
        });
      }
      this.currentStats = {
        mins: new Array(this.numBands),
        maxs: new Array(this.numBands),
        ranges: new Array(this.numBands)
      };
      if (!this.options.pixelValuesToColorFn && !this.options.customDrawFunction && this.georasters.length === 1 && Array.isArray(this.georasters[0].palette)) {
        const palette = this.georasters[0].palette;
        this.options.pixelValuesToColorFn = (values) => palette[values[0]];
      }
      if ([1, 2, 3].includes(this.georasters.length) && this.georasters.every((g) => g.sourceType === "url") && this.georasters.every((g) => g.numberOfRasters === 1) && !options.pixelValuesToColorFn) {
        try {
          this.calcStats = true;
          this._dynamic = true;
          this.options.pixelValuesToColorFn = (values) => {
            const haveDataForAllBands = values.every((value) => value !== void 0 && value !== this.noDataValue);
            if (haveDataForAllBands) {
              return this.rawToRgb(values);
            }
          };
        } catch (error) {
          console.error("[georaster-layer-for-leaflet]", error);
        }
      }
      this.checkIfYCbCr = new Promise(async (resolve) => {
        if (this.options.pixelValuesToColorFn) return resolve(true);
        if (this.georasters.length === 1 && this.georasters[0].numberOfRasters === 3) {
          var _this$georasters$0$_g, _image$fileDirectory;
          const image = await ((_this$georasters$0$_g = this.georasters[0]._geotiff) === null || _this$georasters$0$_g === void 0 ? void 0 : _this$georasters$0$_g.getImage());
          if ((image === null || image === void 0 || (_image$fileDirectory = image.fileDirectory) === null || _image$fileDirectory === void 0 ? void 0 : _image$fileDirectory.PhotometricInterpretation) === 6) {
            this.options.pixelValuesToColorFn = (values) => {
              const r = Math.round(values[0] + 1.402 * (values[2] - 128));
              const g = Math.round(values[0] - 0.34414 * (values[1] - 128) - 0.71414 * (values[2] - 128));
              const b = Math.round(values[0] + 1.772 * (values[1] - 128));
              return `rgb(${r},${g},${b})`;
            };
          }
        }
        return resolve(true);
      });
    } catch (error) {
      console.error("ERROR initializing GeoRasterLayer", error);
    }
  },
  getExtent: function(srs2 = 4326) {
    if (!this._extent) this._extent = {};
    if (!this._extent[srs2]) {
      this._extent[srs2] = new GeoExtent((0, import_merge.default)(this.subextents.map((extent) => extent.reproj(srs2).bbox)), {
        srs: srs2
      });
    }
    return this._extent[srs2];
  },
  onAdd: function(map) {
    if (!this.options.maxZoom) {
      this.options.maxZoom = map.getMaxZoom();
    }
    L.GridLayer.prototype.onAdd.call(this, map);
  },
  initialize_mask: function(options) {
    if (options.mask && options.mask !== "auto") {
      if (typeof options.mask === "string") {
        this.mask = fetch(options.mask).then((r) => r.json());
      } else if (typeof options.mask === "object") {
        this.mask = Promise.resolve(options.mask);
      }
      this.mask_srs = options.mask_srs || "EPSG:4326";
    } else if (options.mask === "auto") {
      const projections = new Set(this.georasters.map((it) => it.projection));
      if (projections.size === 1) {
        this.mask = Promise.resolve({
          type: "Feature",
          geometry: {
            type: "MultiPolygon",
            coordinates: this.subextents.map((ext) => ext.unwrap()).flat().map((ext) => (0, import_dense_polygon2.default)(ext.bbox, {
              density: 100
            }))
          }
        });
        this.mask_srs = Array.from(projections)[0];
      } else {
        this.mask = Promise.resolve({
          type: "Feature",
          geometry: {
            type: "MultiPolygon",
            coordinates: this.subextents.map((ext) => ext.unwrap()).flat().map((ext) => ext.reproj(4326, {
              density: "high"
            })).map((ext) => (0, import_dense_polygon2.default)(ext.bbox, {
              density: 100
            }))
          }
        });
        this.mask_srs = "EPSG:4326";
      }
    }
    this.mask_strategy = options.mask_strategy;
  },
  getProjectionString: function(proj) {
    if ((0, import_isUTM.default)(proj)) return (0, import_getProjString.default)(proj);
    if (typeof proj === "number") proj = "EPSG:" + proj;
    if (proj in this.proj4.defs) return proj;
    if ("EPSG:" + proj in this.proj4.defs) return "EPSG:" + proj;
    throw new Error("[georaster-layer-for-leaflet] unsupported projection:" + proj);
  },
  getProjector: function(_from, _to = "EPSG:4326") {
    if (_from === null || _from === void 0) {
      if (new Set(this.georasters.map((georaster) => georaster.projection)).size !== 1) {
        throw new Error("[georaster-layer-for-leaflet] getProjector called without a _from and georasters don't all have the same projection");
      } else {
        _from = this.georasters[0].projection;
      }
    }
    if (!this.isSupportedProjection(_from)) {
      throw Error("[georaster-layer-for-leaflet] unsupported projection: " + _from);
    }
    if (!this.isSupportedProjection(_to)) throw Error("[georaster-layer-for-leaflet] unsupported projection: " + _to);
    return this.proj4(this.getProjectionString(_from), this.getProjectionString(_to));
  },
  createTile: function(coords, done) {
    const tile = L.DomUtil.create("canvas", "leaflet-tile");
    tile.style.boxSizing = "content-box";
    tile.style.visibility = "hidden";
    const context = tile.getContext("2d");
    const {
      x,
      y,
      z
    } = coords;
    tile.setAttribute("data-x", x.toString());
    tile.setAttribute("data-y", y.toString());
    tile.setAttribute("data-z", z.toString());
    const coordsKey = this._tileCoordsToKey(coords);
    const resolution = this._getResolution(coords.z);
    if (resolution === void 0) throw new Error("[georaster-layer-for-leaflet] resolution is undefined");
    tile.resolution = resolution;
    const key = `${coordsKey}:${resolution}`;
    const doneCb = (error, tile2) => {
      done(error, tile2);
      if (!error && this.options.caching) {
        this.cache[key] = tile2;
      }
    };
    if (this.options.caching && this.cache[key]) {
      done(void 0, this.cache[key]);
      return this.cache[key];
    } else {
      this.drawTile({
        tile,
        coords,
        context,
        done: doneCb,
        resolution
      });
    }
    return tile;
  },
  drawTile: function({
    tile,
    coords,
    context,
    done,
    resolution
  }) {
    try {
      const start_draw_tile = performance.now();
      const {
        debugLevel = 0
      } = this;
      const timed = debugLevel >= 1;
      if (debugLevel >= 2) console.log("starting drawTile with", {
        tile,
        coords,
        context,
        done,
        resolution
      });
      let error;
      const {
        x,
        y,
        z
      } = coords;
      const cacheKey = [z, x, y].join("/");
      if (isNaN(resolution)) {
        throw new Error(`[georaster-layer-for-leafler] [${cacheKey}] resolution isNaN`);
      }
      if (this.options._valid_tiles && !this.options._valid_tiles.includes(cacheKey)) return;
      const log = (...rest) => {
        if (rest.length === 1 && typeof rest[0] === "object" && Object.keys(rest[0]).length === 1) {
          const obj2 = rest[0];
          const key = Object.keys(obj2)[0];
          console.log(`[georaster-layer-for-leaflet] [${cacheKey}] ${key}: `, obj2[key]);
        } else {
          console.log(`[georaster-layer-for-leaflet] [${cacheKey}]`, ...rest);
        }
      };
      if (debugLevel >= 2) log({
        cacheKey
      });
      if (this.debugLevel >= 4) {
        try {
        } catch (error2) {
          console.error(error2);
        }
      }
      const mapCRS = this.getMapCRS();
      if (debugLevel >= 2) log({
        mapCRS
      });
      const inDefaultCRS = isDefaultCRS(mapCRS);
      if (debugLevel >= 2) log({
        inDefaultCRS
      });
      const inSimpleCRS = isSimpleCRS(mapCRS);
      if (debugLevel >= 2) log({
        inSimpleCRS
      });
      const {
        xmin,
        xmax,
        ymin,
        ymax
      } = this;
      const rasterHeight = this.height;
      const rasterWidth = this.width;
      const map_crs_code = mapCRS.code;
      let extentOfLayer;
      if (inSimpleCRS) {
        extentOfLayer = new GeoExtent(this.getBounds(), {
          srs: "simple"
        });
      } else if (inDefaultCRS) {
        extentOfLayer = new GeoExtent(this.getBounds(), {
          srs: 4326
        });
      } else {
        extentOfLayer = this.getExtent(map_crs_code);
      }
      if (debugLevel >= 2) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] extentOfLayer = ${extentOfLayer.js}`);
      if (debugLevel >= 2) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] map_crs_code = ${map_crs_code}`);
      const extentOfTile = this.getTileExtent(coords, debugLevel >= 2);
      if (debugLevel >= 2) log(`extentOfTile: ${extentOfTile.js}`);
      if (debugLevel >= 4) {
        if (!this._cache.tile[cacheKey]) {
          this._cache.tile[cacheKey] = L.geoJSON(extentOfTile.asGeoJSON({
            density: 100
          }), {
            style: {
              fillOpacity: 0
            }
          }).addTo(this.getMap()).bindTooltip(`z:${z}</br>x:${x}</br>y:${y}`, {
            direction: "center",
            permanent: true
          });
        }
      }
      const extentOfTileInMapCRS = inSimpleCRS ? extentOfTile : extentOfTile.reproj(map_crs_code);
      if (debugLevel >= 2) {
        console.log(`[georaster-layer-for-leaflet] [${cacheKey}] extentOfTileInMapCRS = ${extentOfTileInMapCRS.js}`);
      }
      if (!inSimpleCRS && !this.subextents.some((extent) => extentOfTileInMapCRS.overlaps(extent, {
        strict: false
      }))) {
        if (debugLevel >= 2) {
          console.log(`[georaster-layer-for-leaflet] [${cacheKey}] subextents = ${this.subextents.map((e) => e.js).join(", ")}`);
          console.log(`[georaster-layer-for-leaflet] [${cacheKey}] tile and georaster don't overlap`);
        }
        return;
      }
      if (debugLevel >= 2) {
        console.log(`[georaster-layer-for-leaflet] [${cacheKey}] this.subextents:`, this.subextents.map(({
          js
        }) => js));
      }
      let cropline;
      if (inSimpleCRS) {
        cropline = extentOfLayer;
      } else if (inDefaultCRS) {
        cropline = this.getExtent();
      } else {
        cropline = this.getExtent(map_crs_code);
      }
      if (debugLevel >= 2) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] cropline = ${cropline.js}`);
      let extentOfInnerTileInMapCRS = extentOfTileInMapCRS.crop(cropline);
      if (debugLevel >= 2) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] extentOfInnerTileInMapCRS = ${extentOfInnerTileInMapCRS.js}`);
      if (extentOfInnerTileInMapCRS === null) {
        if (debugLevel >= 2) {
          console.log(`[georaster-layer-for-leaflet] failed to crop ${extentOfTileInMapCRS.js} by ${cropline.js}`);
        }
        return;
      }
      if (debugLevel >= 4) {
        if (!this._cache.innerTile[cacheKey]) {
          if (inSimpleCRS) {
            this._cache.innerTile[cacheKey] = L.rectangle(extentOfInnerTileInMapCRS.leafletBounds, {
              color: "#F00",
              dashArray: "5, 10",
              fillOpacity: 0
            }).addTo(this.getMap());
          } else {
            const density = inDefaultCRS ? 0 : 100;
            const innerTileAsGeoJSON = extentOfInnerTileInMapCRS.asGeoJSON({
              density
            });
            this._cache.innerTile[cacheKey] = L.geoJSON(innerTileAsGeoJSON, {
              style: {
                color: "#F00",
                dashArray: "5, 10",
                fillOpacity: 0
              }
            }).addTo(this.getMap());
          }
        }
      }
      const widthOfScreenPixelInMapCRS = extentOfTileInMapCRS.width / this.tileWidth;
      const heightOfScreenPixelInMapCRS = extentOfTileInMapCRS.height / this.tileHeight;
      if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] heightOfScreenPixelInMapCRS: ${heightOfScreenPixelInMapCRS}`);
      if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] widthOfScreenPixelInMapCRS: ${widthOfScreenPixelInMapCRS}`);
      let numberOfSamplesAcross = Math.ceil(resolution * (extentOfInnerTileInMapCRS.width / extentOfTileInMapCRS.width));
      let numberOfSamplesDown = Math.ceil(resolution * (extentOfInnerTileInMapCRS.height / extentOfTileInMapCRS.height));
      const skew = map_crs_code === "EPSG:" + this.georasters[0].projection ? [0, 0] : measureSkew([this.georasters[0].xmin, this.georasters[0].ymin, this.georasters[0].xmax, this.georasters[0].ymax], this.getProjector(this.georasters[0].projection, map_crs_code).forward);
      if (debugLevel >= 2) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] skew:`, skew);
      if (new Set(this.georasters.map((g) => JSON.stringify([g.pixelHeight, g.pixelWidth, g.projection, g.xmin, g.ymin, g.xmax, g.ymax]))).size === 1 && (skew[0] === 0 && skew[1] === 0 || inDefaultCRS && [4326, 3857].includes(this.georasters[0].projection))) {
        if (debugLevel >= 2) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] aligning samples`);
        const {
          xmin: xmin2,
          ymin: ymin2,
          xmax: xmax2,
          ymax: ymax2,
          pixelHeight,
          pixelWidth,
          projection
        } = this.georasters[0];
        const oldExtentOfInnerTileInRasterCRS = inSimpleCRS ? extentOfInnerTileInMapCRS : extentOfInnerTileInMapCRS.reproj(projection);
        const snapped = (0, import_snap_bbox.default)({
          bbox: oldExtentOfInnerTileInRasterCRS.bbox,
          // pad xmax and ymin of container to tolerate ceil() and floor() in snap()
          container: inSimpleCRS ? [extentOfLayer.xmin, extentOfLayer.ymin - 0.25 * pixelHeight, extentOfLayer.xmax + 0.25 * pixelWidth, extentOfLayer.ymax] : [xmin2, ymin2 - 0.25 * pixelHeight, xmax2 + 0.25 * pixelWidth, ymax2],
          debug: debugLevel >= 2,
          origin: inSimpleCRS ? [extentOfLayer.xmin, extentOfLayer.ymax] : [xmin2, ymax2],
          scale: [pixelWidth, -pixelHeight]
          // negative because origin is at ymax
        });
        const newExtentOfInnerTileInRasterCRS = new GeoExtent(snapped.bbox_in_coordinate_system, {
          srs: inSimpleCRS ? "simple" : projection
        });
        const snappedSamplesAcross = Math.round(newExtentOfInnerTileInRasterCRS.width / pixelWidth);
        const snappedSamplesDown = Math.round(newExtentOfInnerTileInRasterCRS.height / pixelHeight);
        const newExtentOfInnerTileInMapCRS = newExtentOfInnerTileInRasterCRS.reproj(map_crs_code);
        const newLeft = Math.round((newExtentOfInnerTileInMapCRS.xmin - extentOfTileInMapCRS.xmin) / widthOfScreenPixelInMapCRS);
        const newRight = Math.round((extentOfTileInMapCRS.xmax - newExtentOfInnerTileInMapCRS.xmax) / widthOfScreenPixelInMapCRS);
        const newTop = Math.round((extentOfTileInMapCRS.ymax - newExtentOfInnerTileInMapCRS.ymax) / heightOfScreenPixelInMapCRS);
        const newBottom = Math.round((newExtentOfInnerTileInMapCRS.ymin - extentOfTileInMapCRS.ymin) / heightOfScreenPixelInMapCRS);
        if (Math.abs(newLeft) < 512 && Math.abs(newRight) < 512 && Math.abs(newTop) < 512 && Math.abs(newBottom) < 512 && snappedSamplesAcross < 64 && snappedSamplesDown < 64 && newExtentOfInnerTileInMapCRS) {
          extentOfInnerTileInMapCRS = newExtentOfInnerTileInMapCRS;
          numberOfSamplesAcross = snappedSamplesAcross;
          numberOfSamplesDown = snappedSamplesDown;
        }
      }
      if (debugLevel >= 2) {
        console.log(`[georaster-layer-for-leaflet] [${cacheKey}] numberOfSamplesAcross: ${numberOfSamplesAcross}`);
        console.log(`[georaster-layer-for-leaflet] [${cacheKey}] numberOfSamplesDown: ${numberOfSamplesDown}`);
      }
      if (isNaN(numberOfSamplesAcross)) {
        throw new Error(`[georaster-layer-for-leaflet [${cacheKey}] numberOfSamplesAcross is NaN when resolution=${resolution} and extentOfInnerTileInMapCRS.width=${extentOfInnerTileInMapCRS.width} and extentOfTileInMapCRS.width=${extentOfTileInMapCRS.width}`);
      }
      if (debugLevel >= 3) {
        console.log("[georaster-layer-for-leaflet] extent of inner tile before snapping " + extentOfInnerTileInMapCRS.reproj(inSimpleCRS ? "simple" : 4326).bbox.toString());
      }
      if (debugLevel >= 4) {
        if (!this._cache.innerTile[cacheKey]) {
          const ext = inSimpleCRS ? extentOfInnerTileInMapCRS : extentOfInnerTileInMapCRS.reproj(4326);
          this._cache.innerTile[cacheKey] = L.rectangle(ext.leafletBounds, {
            color: "#F00",
            dashArray: "5, 10",
            fillOpacity: 0
          }).addTo(this.getMap());
        }
      }
      if (debugLevel >= 3) {
        log("extent of inner tile after snapping", extentOfInnerTileInMapCRS.reproj(inSimpleCRS ? "simple" : 4326).bbox);
      }
      const margin = {
        left: Math.round((extentOfInnerTileInMapCRS.xmin - extentOfTileInMapCRS.xmin) / widthOfScreenPixelInMapCRS),
        right: Math.round((extentOfTileInMapCRS.xmax - extentOfInnerTileInMapCRS.xmax) / widthOfScreenPixelInMapCRS),
        top: Math.round((extentOfTileInMapCRS.ymax - extentOfInnerTileInMapCRS.ymax) / heightOfScreenPixelInMapCRS),
        bottom: Math.round((extentOfInnerTileInMapCRS.ymin - extentOfTileInMapCRS.ymin) / heightOfScreenPixelInMapCRS)
      };
      if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] margin:`, margin);
      const innerTileHeight = this.tileHeight - margin.top - margin.bottom;
      const innerTileWidth = this.tileWidth - margin.left - margin.right;
      if (debugLevel >= 3) log({
        innerTileHeight,
        innerTileWidth
      });
      if (innerTileHeight === 0 || innerTileWidth === 0) {
        if (debugLevel >= 2) log("returning early because the tile will be invisible");
        return;
      }
      tile.setAttribute("data-extent", extentOfTile.bbox);
      tile.setAttribute("data-zxy", cacheKey);
      tile.style.marginLeft = margin.left + "px";
      tile.style.marginTop = margin.top + "px";
      tile.height = innerTileHeight;
      tile.style.height = innerTileHeight + "px";
      tile.width = innerTileWidth;
      tile.style.width = innerTileWidth + "px";
      if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet [${cacheKey}] setting tile height to ${innerTileHeight}px`);
      if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet [${cacheKey}] setting tile width to ${innerTileWidth}px`);
      const heightOfSampleInScreenPixels = innerTileHeight / numberOfSamplesDown;
      const widthOfSampleInScreenPixels = innerTileWidth / numberOfSamplesAcross;
      if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet [${cacheKey}] heightOfSampleInScreenPixels: ${heightOfSampleInScreenPixels}px`);
      if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet [${cacheKey}] widthOfSampleInScreenPixels: ${widthOfSampleInScreenPixels}px`);
      const tileSize = this.getTileSize();
      const tileNwPoint = coords.scaleBy(tileSize);
      if (debugLevel >= 4) log({
        tileNwPoint
      });
      const xLeftOfInnerTile = tileNwPoint.x + margin.left;
      const yTopOfInnerTile = tileNwPoint.y + margin.top;
      const innerTileTopLeftPoint = {
        x: xLeftOfInnerTile,
        y: yTopOfInnerTile
      };
      if (debugLevel >= 4) log({
        innerTileTopLeftPoint
      });
      if (timed) log(`pre-processing took ${performance.now() - start_draw_tile}ms`);
      setTimeout(async () => {
        try {
          const startReadRasters = timed ? performance.now() : 0;
          const stack = await this.stack;
          const stack_size = [numberOfSamplesAcross, numberOfSamplesDown];
          if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] stack reading extent="${extentOfInnerTileInMapCRS.js}" and size=${JSON.stringify(stack_size)}`);
          const {
            data: tileRasters
          } = await stack.read({
            extent: extentOfInnerTileInMapCRS,
            size: stack_size
          });
          if (debugLevel >= 3) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] tileRasters:`, tileRasters);
          if (tileRasters === void 0) {
            throw new Error(`tileRasters is undefined when extent is ${extentOfInnerTileInMapCRS.js} and size is ${JSON.stringify([numberOfSamplesAcross, numberOfSamplesDown])}`);
          }
          if (timed) {
            const durationReadRasters = performance.now() - startReadRasters;
            console.log(`[georaster-layer-for-leaflet] [${cacheKey}] reading rasters took: ${durationReadRasters}ms`);
          }
          if (this.options.onReadRasters) {
            this.options.onReadRasters({
              data: tileRasters,
              height: numberOfSamplesDown,
              width: numberOfSamplesAcross
            });
          }
          if (this.calcStats) {
            const start_calc_stats = debugLevel >= 1 ? performance.now() : 0;
            const {
              noDataValue
            } = this;
            const original_ranges = Array.from(this.currentStats.ranges);
            for (let bandIndex = 0; bandIndex < tileRasters.length; bandIndex++) {
              let min = this.currentStats.mins[bandIndex];
              let max = this.currentStats.maxs[bandIndex];
              const band = tileRasters[bandIndex];
              for (let rowIndex = 0; rowIndex < band.length; rowIndex++) {
                const row = band[rowIndex];
                for (let columnIndex = 0; columnIndex < row.length; columnIndex++) {
                  const value = row[columnIndex];
                  if (value !== noDataValue) {
                    if (min === void 0 || value < min) {
                      min = value;
                    }
                    if (max === void 0 || value > max) {
                      max = value;
                    }
                  }
                }
              }
              this.currentStats.mins[bandIndex] = min;
              this.currentStats.maxs[bandIndex] = max;
              this.currentStats.ranges[bandIndex] = max - min;
            }
            let redraw = false;
            for (let bandIndex = 0; bandIndex < tileRasters.length; bandIndex++) {
              const old_range = original_ranges[bandIndex];
              const new_range = this.currentStats.ranges[bandIndex];
              const diff_range = new_range - old_range;
              const percentage_change = diff_range / old_range;
              const threshold = 1 / 256;
              if (percentage_change > threshold) {
                redraw = true;
                break;
              }
            }
            if (redraw) {
              if (debugLevel >= 1) console.log("[georaster-layer-for-leaflet] redrawing tiles");
              this._cache = {
                innerTile: {},
                tile: {}
              };
              const tiles = this.getActiveTiles();
              tiles.forEach((tile2) => {
                const {
                  coords: coords2,
                  el
                } = tile2;
                this.drawTile({
                  tile: el,
                  coords: coords2,
                  context: el.getContext("2d"),
                  resolution: el.resolution
                });
              });
              if (debugLevel >= 1) console.log("[georaster-layer-for-leaflet] finished redrawing tiles");
            }
            if (this._dynamic) {
              const rawToRgbFn = rawToRgb.default || rawToRgb;
              try {
                this.rawToRgb = rawToRgbFn({
                  format: "string",
                  flip: typeof this.options.flip === "boolean" ? this.options.flip : this.currentStats.mins.length === 1 ? true : false,
                  ranges: zip(this.currentStats.mins, this.currentStats.maxs),
                  round: true
                });
              } catch (error2) {
                console.error("[georaster-layer-for-leaflet] error creating rawToRgb");
              }
            }
            if (timed) log(`updating statistics took ${performance.now() - start_calc_stats}ms`);
          }
          const start_ycbcr = timed ? performance.now() : 0;
          await this.checkIfYCbCr;
          if (timed) log(`checking if YCbCr took ${performance.now() - start_ycbcr}ms`);
          const mask = await Promise.resolve(this.mask);
          const {
            pixelValuesToColorFn
          } = this.options;
          const cutline_forward = mask ? this.getProjector(this.mask_srs, map_crs_code).forward : void 0;
          if (this.debugLevel >= 4 && inSimpleCRS === false && mask) {
            try {
              const geojson = await (0, import_reproject_geojson2.default)(mask, {
                from: this.mask_srs,
                to: 4326
              });
              L.geoJSON(geojson, {
                style: {
                  color: "#AAA",
                  fillOpacity: 0
                }
              }).addTo(this.getMap());
            } catch (error2) {
              console.error(error2);
            }
          }
          const theoretical_min = this.calcStats ? (0, import_fast_min.default)(this.currentStats.mins) : void 0;
          const theoretical_max = this.calcStats ? (0, import_fast_max.default)(this.currentStats.maxs) : void 0;
          const in_stats = (() => {
            if (this.stats) {
              return zip(this.stats.mins, this.stats.maxs).map(([min, max]) => ({
                min,
                max
              }));
            } else if (this.calcStats && this.currentStats) {
              return zip(this.currentStats.mins, this.currentStats.maxs).map(([min, max]) => ({
                min,
                max
              }));
            } else {
              return void 0;
            }
          })();
          const draw = !this.options.customDrawFunction ? void 0 : ({
            // deprecating rasterX and rasterY
            context: context2,
            pixel: pixel2,
            rect: [x2, y2, width, height],
            sample: [sampleX, sampleY] = [void 0, void 0]
          }) => {
            this.options.customDrawFunction({
              canvas: tile,
              values: pixel2,
              context: context2,
              x: x2,
              y: y2,
              width,
              height,
              sampleX,
              sampleY,
              sampledRaster: tileRasters
            });
          };
          const expr = pixelValuesToColorFn ? ({
            pixel: pixel2
          }) => pixelValuesToColorFn(pixel2) : void 0;
          const out_resolution = [numberOfSamplesAcross > innerTileWidth ? 1 : numberOfSamplesAcross / innerTileWidth, numberOfSamplesDown > innerTileHeight ? 1 : numberOfSamplesDown / innerTileHeight];
          geowarp2({
            plugins: ["canvas"],
            // activate geowarp-canvas plugin
            cutline: mask,
            cutline_forward,
            cutline_strategy: this.mask_strategy,
            cutline_srs: this.mask_srs,
            debug_level: debugLevel - 1,
            in_bbox: extentOfInnerTileInMapCRS.bbox,
            in_data: tileRasters,
            in_height: numberOfSamplesDown,
            in_layout: "[band][row][column]",
            in_no_data: null,
            in_srs: map_crs_code,
            in_stats,
            in_width: numberOfSamplesAcross,
            out_bbox: extentOfInnerTileInMapCRS.bbox,
            out_canvas: tile,
            out_resolution,
            out_srs: map_crs_code,
            draw,
            draw_strategy: "canvas",
            method: "near",
            // this is separate from the resampleMethod that does the actual reprojection
            theoretical_min,
            theoretical_max,
            expr,
            turbo: this.options.turbo ?? false,
            skip_no_data_strategy: "any",
            // don't bother trying to render pixels with no data values
            before_warp: (options) => {
              this.getColor = (pixel2) => options.expr({
                pixel: pixel2
              });
            }
          });
          tile.style.visibility = "visible";
        } catch (e) {
          console.error(e);
          error = e;
        }
        if (timed) console.log(`[georaster-layer-for-leaflet] [${cacheKey}] creating tile took ${performance.now() - start_draw_tile}ms`);
        done && done(error, tile);
      }, 0);
      return tile;
    } catch (error) {
      console.error(error);
      done && done(error, tile);
    }
  },
  // copied from Leaflet with slight modifications,
  // including removing the lines that set the tile size
  _initTile: function(tile) {
    L.DomUtil.addClass(tile, "leaflet-tile");
    tile.onselectstart = L.Util.falseFn;
    tile.onmousemove = L.Util.falseFn;
    if (L.Browser.ielt9 && this.options.opacity < 1) {
      L.DomUtil.setOpacity(tile, this.options.opacity);
    }
    if (L.Browser.android && !L.Browser.android23) {
      tile.style.WebkitBackfaceVisibility = "hidden";
    }
  },
  // method from https://github.com/Leaflet/Leaflet/blob/bb1d94ac7f2716852213dd11563d89855f8d6bb1/src/layer/ImageOverlay.js
  getBounds: function() {
    this.initBounds();
    return this._bounds;
  },
  getMap: function() {
    return this._map || this._mapToAdd;
  },
  getMapCRS: function() {
    var _this$getMap;
    return ((_this$getMap = this.getMap()) === null || _this$getMap === void 0 ? void 0 : _this$getMap.options.crs) || L.CRS.EPSG3857;
  },
  // add in to ensure backwards compatability with Leaflet 1.0.3
  _tileCoordsToNwSe: function(coords) {
    const map = this.getMap();
    const tileSize = this.getTileSize();
    const nwPoint = coords.scaleBy(tileSize);
    const sePoint = nwPoint.add(tileSize);
    const nw = map.unproject(nwPoint, coords.z);
    const se = map.unproject(sePoint, coords.z);
    return [nw, se];
  },
  _tileCoordsToBounds: function(coords) {
    const [nw, se] = this._tileCoordsToNwSe(coords);
    let bounds = new L.LatLngBounds(nw, se);
    if (!this.options.noWrap) {
      const {
        crs
      } = this.getMap().options;
      bounds = crs.wrapLatLngBounds(bounds);
    }
    return bounds;
  },
  // get extent of tile in the projection of the map
  _tileCoordsToExtent: function(coords, debug = false) {
    const crs = this.getMapCRS();
    const tileSize = this.getTileSize();
    const topLeft = coords.scaleBy(tileSize);
    if (debug) console.log("topLeft:", topLeft);
    const bottomRight = topLeft.add(tileSize);
    if (debug) console.log("bottomRight:", bottomRight);
    const scl = crs.scale(coords.z);
    if (debug) console.log("scl:", scl);
    const {
      x: xmin,
      y: ymax
    } = crs.transformation.untransform(topLeft, scl);
    const {
      x: xmax,
      y: ymin
    } = crs.transformation.untransform(bottomRight, scl);
    const bbox = [xmin, ymin, xmax, ymax];
    if (debug) console.log("bbox:", bbox);
    return new GeoExtent(bbox, {
      srs: crs.code
    });
  },
  getTileExtent: function(coords, debug = false) {
    const crs = this.getMapCRS();
    if (isSimpleCRS(crs)) {
      const bounds = this._tileCoordsToBounds(coords);
      return new GeoExtent(bounds, {
        srs: "simple"
      });
    } else if (isDefaultCRS(crs)) {
      const bounds = this._tileCoordsToBounds(coords);
      return new GeoExtent(bounds, {
        srs: 4326
      });
    } else {
      return this._tileCoordsToExtent(coords, debug);
    }
  },
  _isValidTile: function(coords) {
    const crs = this.getMapCRS();
    const bounds = this.getBounds();
    if (!bounds) {
      return true;
    }
    const {
      x,
      y,
      z
    } = coords;
    const boundsOfTile = this.getTileExtent(coords);
    if (isSimpleCRS(crs)) {
      return this.simpleExtent.overlaps(boundsOfTile);
    }
    if (!crs.infinite) {
      const globalBounds = this._globalTileRange;
      if (!crs.wrapLng && (coords.x < globalBounds.min.x || coords.x > globalBounds.max.x) || !crs.wrapLat && (coords.y < globalBounds.min.y || coords.y > globalBounds.max.y)) {
        return false;
      }
    }
    if (this.subextents.some((extent) => extent.overlaps(boundsOfTile))) {
      return true;
    }
    const width = Math.pow(2, z);
    const leftCoords = L.point(x - width, y);
    leftCoords.z = z;
    const leftBounds = this.getTileExtent(leftCoords);
    if (this.subextents.some((extent) => extent.overlaps(leftBounds))) return true;
    const rightCoords = L.point(x + width, y);
    rightCoords.z = z;
    const rightBounds = this.getTileExtent(rightCoords);
    if (this.subextents.some((extent) => extent.overlaps(rightBounds))) return true;
    return false;
  },
  // provided for backwards compatability
  getColor: function(values) {
    throw new Error("[georaster-layer-for-leaflet] please call getColor after creating at least one tile");
  },
  /**
   * Redraws the active map tiles updating the pixel values using the supplie callback
   */
  updateColors(pixelValuesToColorFn, {
    debugLevel = -1
  } = {
    debugLevel: -1
  }) {
    if (!pixelValuesToColorFn) {
      throw new Error("Missing pixelValuesToColorFn function");
    }
    if (debugLevel === -1) debugLevel = this.debugLevel;
    if (debugLevel >= 1) console.log("Start updating active tile pixel values");
    this.options.pixelValuesToColorFn = pixelValuesToColorFn;
    const tiles = this.getActiveTiles();
    if (!tiles) {
      console.error("No active tiles available");
      return this;
    }
    if (debugLevel >= 1) console.log("Active tiles fetched", tiles);
    tiles.forEach((tile) => {
      const {
        coords,
        el
      } = tile;
      this.drawTile({
        tile: el,
        coords,
        context: el.getContext("2d"),
        resolution: el.resolution
      });
    });
    if (debugLevel >= 1) console.log("Finished updating active tile colours");
    return this;
  },
  getTiles() {
    return Object.values(this._tiles);
  },
  getActiveTiles() {
    const tiles = this.getTiles();
    return tiles.filter((tile) => this._isValidTile(tile.coords));
  },
  isSupportedProjection: function(proj) {
    return (0, import_isUTM.default)(proj) || proj in this.proj4.defs || `EPSG:${proj}` in this.proj4.defs;
  },
  initBounds: function(options) {
    if (!options) options = this.options;
    const maxWidth = Math.max(...this.georasters.map((georaster) => georaster.width));
    const maxHeight = Math.max(...this.georasters.map((georaster) => georaster.height));
    const maxValue = Math.max(maxWidth, maxHeight);
    const aspect_ratio = maxWidth / maxHeight;
    const maxBounds = maxValue;
    if (!this._bounds) {
      const map_crs = this.getMapCRS();
      if (isSimpleCRS(map_crs)) {
        if (maxWidth === maxHeight) {
          this._bounds = L.latLngBounds([ORIGIN, [maxBounds, maxBounds]]);
        } else if (maxHeight > maxWidth) {
          this._bounds = L.latLngBounds([ORIGIN, [maxBounds, maxBounds * aspect_ratio]]);
        } else if (maxWidth > maxHeight) {
          this._bounds = L.latLngBounds([ORIGIN, [maxBounds / aspect_ratio, maxBounds]]);
        }
      } else {
        const bboxes_in_map_crs = this.subextents.map((extent) => {
          try {
            return extent.reproj(4326, {
              density: "high",
              quiet: false
            }).bbox;
          } catch (error) {
            throw "GeoRasterLayer ran into an issue reprojecting.  Try adding the projection definition to your global proj4.";
          }
        });
        const [xmin, ymin, xmax, ymax] = (0, import_merge.default)(bboxes_in_map_crs);
        this._bounds = L.latLngBounds([[ymin, xmin], [ymax, xmax]]);
      }
      options.bounds = this._bounds;
      if (this.debugLevel >= 1) console.log("bounds were intialized to:", this._bounds);
    }
  },
  same(array, key) {
    return new Set(array.map((item) => item[key])).size === 1;
  },
  clearCache() {
    this.cache = {};
  },
  _getResolution(zoom) {
    const {
      resolution
    } = this.options;
    let resolutionValue;
    if (typeof resolution === "object") {
      const zoomLevels = Object.keys(resolution);
      for (const key in zoomLevels) {
        if (Object.prototype.hasOwnProperty.call(zoomLevels, key)) {
          const zoomLvl = parseInt(zoomLevels[key]);
          if (zoomLvl <= zoom) {
            resolutionValue = resolution[zoomLvl];
          } else {
            break;
          }
        }
      }
    } else {
      resolutionValue = resolution;
    }
    return resolutionValue;
  }
});
if (typeof window === "object") {
  window["GeoRasterLayer"] = GeoRasterLayer;
}
if (typeof self !== "undefined") {
  self["GeoRasterLayer"] = GeoRasterLayer;
}
var georaster_layer_for_leaflet_default = GeoRasterLayer;
export {
  georaster_layer_for_leaflet_default as default
};
//# sourceMappingURL=georaster-layer-for-leaflet.js.map
